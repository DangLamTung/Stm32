
GPS_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800c7e8  0800c7e8  0001c7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce48  0800ce48  00020548  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce48  0800ce48  00020548  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce48  0800ce48  00020548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce48  0800ce48  0001ce48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce4c  0800ce4c  0001ce4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000548  20000000  0800ce50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000180c  20000548  0800d398  00020548  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  0800d398  00021d54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd4f  00000000  00000000  00020571  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cd6  00000000  00000000  0003c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  0003ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  00041588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a4d  00000000  00000000  000429e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012de8  00000000  00000000  0005b435  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079f9a  00000000  00000000  0006e21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e81b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  000e8234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000548 	.word	0x20000548
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7d0 	.word	0x0800c7d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000054c 	.word	0x2000054c
 800014c:	0800c7d0 	.word	0x0800c7d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x28>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f945 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f008 fa1a 	bl	8009478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f95d 	bl	800132e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f000 f925 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000310 	.word	0x20000310
 80010a8:	20000004 	.word	0x20000004
 80010ac:	20000000 	.word	0x20000000

080010b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x1c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_IncTick+0x20>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000004 	.word	0x20000004
 80010d0:	20000794 	.word	0x20000794

080010d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <HAL_GetTick+0x10>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	20000794 	.word	0x20000794

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff fff0 	bl	80010d4 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_Delay+0x40>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffe0 	bl	80010d4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000004 	.word	0x20000004

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4906      	ldr	r1, [pc, #24]	; (80011c4 <__NVIC_EnableIRQ+0x34>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff2d 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff42 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff35 	bl	8001190 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800135a:	2b02      	cmp	r3, #2
 800135c:	d005      	beq.n	800136a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2204      	movs	r2, #4
 8001362:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e051      	b.n	800140e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 020e 	bic.w	r2, r2, #14
 8001378:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_DMA_Abort_IT+0xd0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d029      	beq.n	80013e8 <HAL_DMA_Abort_IT+0xa0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_DMA_Abort_IT+0xd4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d022      	beq.n	80013e4 <HAL_DMA_Abort_IT+0x9c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_DMA_Abort_IT+0xd8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d01a      	beq.n	80013de <HAL_DMA_Abort_IT+0x96>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_DMA_Abort_IT+0xdc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d012      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x90>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_DMA_Abort_IT+0xe0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00a      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x8a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_DMA_Abort_IT+0xe4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d102      	bne.n	80013cc <HAL_DMA_Abort_IT+0x84>
 80013c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ca:	e00e      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d0:	e00b      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	e008      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	e005      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e2:	e002      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013e4:	2310      	movs	r3, #16
 80013e6:	e000      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013e8:	2301      	movs	r3, #1
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_DMA_Abort_IT+0xe8>)
 80013ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
    } 
  }
  return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020008 	.word	0x40020008
 800141c:	4002001c 	.word	0x4002001c
 8001420:	40020030 	.word	0x40020030
 8001424:	40020044 	.word	0x40020044
 8001428:	40020058 	.word	0x40020058
 800142c:	4002006c 	.word	0x4002006c
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e127      	b.n	8001698 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8116 	bne.w	8001692 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b12      	cmp	r3, #18
 800146c:	d034      	beq.n	80014d8 <HAL_GPIO_Init+0xa4>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d80d      	bhi.n	800148e <HAL_GPIO_Init+0x5a>
 8001472:	2b02      	cmp	r3, #2
 8001474:	d02b      	beq.n	80014ce <HAL_GPIO_Init+0x9a>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d804      	bhi.n	8001484 <HAL_GPIO_Init+0x50>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d031      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d01c      	beq.n	80014bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001482:	e048      	b.n	8001516 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001484:	2b03      	cmp	r3, #3
 8001486:	d043      	beq.n	8001510 <HAL_GPIO_Init+0xdc>
 8001488:	2b11      	cmp	r3, #17
 800148a:	d01b      	beq.n	80014c4 <HAL_GPIO_Init+0x90>
          break;
 800148c:	e043      	b.n	8001516 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800148e:	4a89      	ldr	r2, [pc, #548]	; (80016b4 <HAL_GPIO_Init+0x280>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d026      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
 8001494:	4a87      	ldr	r2, [pc, #540]	; (80016b4 <HAL_GPIO_Init+0x280>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d806      	bhi.n	80014a8 <HAL_GPIO_Init+0x74>
 800149a:	4a87      	ldr	r2, [pc, #540]	; (80016b8 <HAL_GPIO_Init+0x284>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d020      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
 80014a0:	4a86      	ldr	r2, [pc, #536]	; (80016bc <HAL_GPIO_Init+0x288>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01d      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
          break;
 80014a6:	e036      	b.n	8001516 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a8:	4a85      	ldr	r2, [pc, #532]	; (80016c0 <HAL_GPIO_Init+0x28c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
 80014ae:	4a85      	ldr	r2, [pc, #532]	; (80016c4 <HAL_GPIO_Init+0x290>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d016      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
 80014b4:	4a84      	ldr	r2, [pc, #528]	; (80016c8 <HAL_GPIO_Init+0x294>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0xae>
          break;
 80014ba:	e02c      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e028      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e023      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	3308      	adds	r3, #8
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e01e      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	330c      	adds	r3, #12
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e019      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ea:	2304      	movs	r3, #4
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e012      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	611a      	str	r2, [r3, #16]
          break;
 8001502:	e008      	b.n	8001516 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	615a      	str	r2, [r3, #20]
          break;
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2bff      	cmp	r3, #255	; 0xff
 800151a:	d801      	bhi.n	8001520 <HAL_GPIO_Init+0xec>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	e001      	b.n	8001524 <HAL_GPIO_Init+0xf0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3304      	adds	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d802      	bhi.n	8001532 <HAL_GPIO_Init+0xfe>
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x104>
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3b08      	subs	r3, #8
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	210f      	movs	r1, #15
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	6a39      	ldr	r1, [r7, #32]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8096 	beq.w	8001692 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001566:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_GPIO_Init+0x298>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_GPIO_Init+0x298>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b56      	ldr	r3, [pc, #344]	; (80016cc <HAL_GPIO_Init+0x298>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157e:	4a54      	ldr	r2, [pc, #336]	; (80016d0 <HAL_GPIO_Init+0x29c>)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4b      	ldr	r2, [pc, #300]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x19e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x19a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a49      	ldr	r2, [pc, #292]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x196>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x192>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x1a0>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x1a0>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x1a0>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x1a0>
 80015d2:	2300      	movs	r3, #0
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e4:	493a      	ldr	r1, [pc, #232]	; (80016d0 <HAL_GPIO_Init+0x29c>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4938      	ldr	r1, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4933      	ldr	r1, [pc, #204]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	492e      	ldr	r1, [pc, #184]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4929      	ldr	r1, [pc, #164]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800163e:	4013      	ands	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	4924      	ldr	r1, [pc, #144]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	491f      	ldr	r1, [pc, #124]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001666:	4013      	ands	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	491a      	ldr	r1, [pc, #104]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	60cb      	str	r3, [r1, #12]
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	4915      	ldr	r1, [pc, #84]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800168e:	4013      	ands	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f47f aed0 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 80016a8:	bf00      	nop
 80016aa:	372c      	adds	r7, #44	; 0x2c
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	10210000 	.word	0x10210000
 80016b8:	10110000 	.word	0x10110000
 80016bc:	10120000 	.word	0x10120000
 80016c0:	10310000 	.word	0x10310000
 80016c4:	10320000 	.word	0x10320000
 80016c8:	10220000 	.word	0x10220000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40010800 	.word	0x40010800
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40011400 	.word	0x40011400
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	611a      	str	r2, [r3, #16]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e10f      	b.n	800194a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f007 fecc 	bl	80094dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800175c:	f002 fb12 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8001760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a7b      	ldr	r2, [pc, #492]	; (8001954 <HAL_I2C_Init+0x23c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d807      	bhi.n	800177c <HAL_I2C_Init+0x64>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_I2C_Init+0x240>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e006      	b.n	800178a <HAL_I2C_Init+0x72>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a77      	ldr	r2, [pc, #476]	; (800195c <HAL_I2C_Init+0x244>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0db      	b.n	800194a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_I2C_Init+0x248>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a64      	ldr	r2, [pc, #400]	; (8001954 <HAL_I2C_Init+0x23c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d802      	bhi.n	80017cc <HAL_I2C_Init+0xb4>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e009      	b.n	80017e0 <HAL_I2C_Init+0xc8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a63      	ldr	r2, [pc, #396]	; (8001964 <HAL_I2C_Init+0x24c>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4956      	ldr	r1, [pc, #344]	; (8001954 <HAL_I2C_Init+0x23c>)
 80017fc:	428b      	cmp	r3, r1
 80017fe:	d80d      	bhi.n	800181c <HAL_I2C_Init+0x104>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e59      	subs	r1, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb1 f3f3 	udiv	r3, r1, r3
 800180e:	3301      	adds	r3, #1
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	bf38      	it	cc
 8001818:	2304      	movcc	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1a4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x130>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x156>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x15e>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1a4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x184>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1a4>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	460b      	mov	r3, r1
 8001976:	817b      	strh	r3, [r7, #10]
 8001978:	4613      	mov	r3, r2
 800197a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fbaa 	bl	80010d4 <HAL_GetTick>
 8001980:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b20      	cmp	r3, #32
 800198c:	f040 80e0 	bne.w	8001b50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	4970      	ldr	r1, [pc, #448]	; (8001b5c <HAL_I2C_Master_Transmit+0x1f4>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fd5e 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0d3      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x50>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0cc      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d007      	beq.n	80019de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2221      	movs	r2, #33	; 0x21
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2210      	movs	r2, #16
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	893a      	ldrh	r2, [r7, #8]
 8001a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fbec 	bl	8002204 <I2C_MasterRequestWrite>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e08d      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a4c:	e066      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fdd8 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d11b      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d017      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fdc8 	bl	800268a <I2C_WaitOnBTFFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01a      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d194      	bne.n	8001a4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e000      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b50:	2302      	movs	r3, #2
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	00100002 	.word	0x00100002
 8001b60:	ffff0000 	.word	0xffff0000

08001b64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	460b      	mov	r3, r1
 8001b72:	817b      	strh	r3, [r7, #10]
 8001b74:	4613      	mov	r3, r2
 8001b76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff faac 	bl	80010d4 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	f040 8213 	bne.w	8001fb2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2319      	movs	r3, #25
 8001b92:	2201      	movs	r2, #1
 8001b94:	497e      	ldr	r1, [pc, #504]	; (8001d90 <HAL_I2C_Master_Receive+0x22c>)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fc60 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e206      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2C_Master_Receive+0x50>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e1ff      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d007      	beq.n	8001bda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2222      	movs	r2, #34	; 0x22
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	893a      	ldrh	r2, [r7, #8]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <HAL_I2C_Master_Receive+0x230>)
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c1c:	8979      	ldrh	r1, [r7, #10]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fb64 	bl	80022f0 <I2C_MasterRequestRead>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c0      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d113      	bne.n	8001c62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e194      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d11d      	bne.n	8001ca6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c78:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ca2:	b662      	cpsie	i
 8001ca4:	e172      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d11d      	bne.n	8001cea <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ce6:	b662      	cpsie	i
 8001ce8:	e150      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d10:	e13c      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	f200 80f5 	bhi.w	8001f06 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d123      	bne.n	8001d6c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fcef 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e13d      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d6a:	e10f      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d150      	bne.n	8001e16 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4906      	ldr	r1, [pc, #24]	; (8001d98 <HAL_I2C_Master_Receive+0x234>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fb6c 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e112      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000
 8001d98:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001de0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e14:	e0ba      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4967      	ldr	r1, [pc, #412]	; (8001fbc <HAL_I2C_Master_Receive+0x458>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fb1b 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0c1      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	494f      	ldr	r1, [pc, #316]	; (8001fbc <HAL_I2C_Master_Receive+0x458>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 faec 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e092      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f04:	e042      	b.n	8001f8c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fbfe 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e04c      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d118      	bne.n	8001f8c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f aebe 	bne.w	8001d12 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	00010004 	.word	0x00010004

08001fc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff f880 	bl	80010d4 <HAL_GetTick>
 8001fd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	f040 8105 	bne.w	80021f2 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2319      	movs	r3, #25
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4982      	ldr	r1, [pc, #520]	; (80021fc <HAL_I2C_IsDeviceReady+0x23c>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fa32 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0f8      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_I2C_IsDeviceReady+0x50>
 800200c:	2302      	movs	r3, #2
 800200e:	e0f1      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d007      	beq.n	8002036 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002044:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2224      	movs	r2, #36	; 0x24
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_I2C_IsDeviceReady+0x240>)
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002068:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f9f0 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0b6      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002094:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff f81d 	bl	80010d4 <HAL_GetTick>
 800209a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020ca:	e025      	b.n	8002118 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7ff f802 	bl	80010d4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <HAL_I2C_IsDeviceReady+0x122>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	22a0      	movs	r2, #160	; 0xa0
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2ba0      	cmp	r3, #160	; 0xa0
 8002122:	d005      	beq.n	8002130 <HAL_I2C_IsDeviceReady+0x170>
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_I2C_IsDeviceReady+0x170>
 800212a:	7dbb      	ldrb	r3, [r7, #22]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0cd      	beq.n	80020cc <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d129      	bne.n	800219a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	4921      	ldr	r1, [pc, #132]	; (80021fc <HAL_I2C_IsDeviceReady+0x23c>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f970 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e036      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e02c      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	490f      	ldr	r1, [pc, #60]	; (80021fc <HAL_I2C_IsDeviceReady+0x23c>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f94c 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e012      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f4ff af3e 	bcc.w	800205a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000

08002204 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d006      	beq.n	800222e <I2C_MasterRequestWrite+0x2a>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d003      	beq.n	800222e <I2C_MasterRequestWrite+0x2a>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e00b      	b.n	8002258 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	2b12      	cmp	r3, #18
 8002246:	d107      	bne.n	8002258 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f8f9 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e035      	b.n	80022e0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800227c:	d108      	bne.n	8002290 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	e01b      	b.n	80022c8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	11db      	asrs	r3, r3, #7
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0306 	and.w	r3, r3, #6
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f063 030f 	orn	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	490e      	ldr	r1, [pc, #56]	; (80022e8 <I2C_MasterRequestWrite+0xe4>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f92b 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e010      	b.n	80022e0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <I2C_MasterRequestWrite+0xe8>)
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f91b 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00010008 	.word	0x00010008
 80022ec:	00010002 	.word	0x00010002

080022f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002314:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d006      	beq.n	800232a <I2C_MasterRequestRead+0x3a>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d003      	beq.n	800232a <I2C_MasterRequestRead+0x3a>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002328:	d108      	bne.n	800233c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e00b      	b.n	8002354 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	2b11      	cmp	r3, #17
 8002342:	d107      	bne.n	8002354 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f87b 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e06d      	b.n	800244c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002378:	d108      	bne.n	800238c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e053      	b.n	8002434 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	11db      	asrs	r3, r3, #7
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f003 0306 	and.w	r3, r3, #6
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f063 030f 	orn	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	492a      	ldr	r1, [pc, #168]	; (8002454 <I2C_MasterRequestRead+0x164>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f8ad 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e048      	b.n	800244c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ba:	897b      	ldrh	r3, [r7, #10]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4923      	ldr	r1, [pc, #140]	; (8002458 <I2C_MasterRequestRead+0x168>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f89d 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e038      	b.n	800244c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f825 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e017      	b.n	800244c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	11db      	asrs	r3, r3, #7
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0306 	and.w	r3, r3, #6
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f063 030e 	orn	r3, r3, #14
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4907      	ldr	r1, [pc, #28]	; (8002458 <I2C_MasterRequestRead+0x168>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f865 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	00010008 	.word	0x00010008
 8002458:	00010002 	.word	0x00010002

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e025      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002474:	d021      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe fe2d 	bl	80010d4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d116      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e023      	b.n	8002502 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	e00c      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d0b6      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	e051      	b.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d123      	bne.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002542:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e046      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002578:	d021      	beq.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7fe fdab 	bl	80010d4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e020      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10c      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e00b      	b.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d18d      	bne.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002614:	e02d      	b.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8ce 	bl	80027b8 <I2C_IsAcknowledgeFailed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e02d      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800262c:	d021      	beq.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7fe fd51 	bl	80010d4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d116      	bne.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e007      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d1ca      	bne.n	8002616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002696:	e02d      	b.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f88d 	bl	80027b8 <I2C_IsAcknowledgeFailed>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e02d      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ae:	d021      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b0:	f7fe fd10 	bl	80010d4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d302      	bcc.n	80026c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d1ca      	bne.n	8002698 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002718:	e042      	b.n	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b10      	cmp	r3, #16
 8002726:	d119      	bne.n	800275c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0210 	mvn.w	r2, #16
 8002730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e029      	b.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275c:	f7fe fcba 	bl	80010d4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d302      	bcc.n	8002772 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d116      	bne.n	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e007      	b.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d1b5      	bne.n	800271a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d11b      	bne.n	8002808 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af06      	add	r7, sp, #24
 800281a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0d3      	b.n	80029ce <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f007 f8c8 	bl	80099d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fbc8 	bl	8004fe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	687e      	ldr	r6, [r7, #4]
 800285a:	466d      	mov	r5, sp
 800285c:	f106 0410 	add.w	r4, r6, #16
 8002860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	602b      	str	r3, [r5, #0]
 8002868:	1d33      	adds	r3, r6, #4
 800286a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f002 fb91 	bl	8004f94 <USB_CoreInit>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0a4      	b.n	80029ce <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fbc5 	bl	800501a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e035      	b.n	8002902 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	4413      	add	r3, r2
 800289e:	3329      	adds	r3, #41	; 0x29
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	4413      	add	r3, r2
 80028ac:	3328      	adds	r3, #40	; 0x28
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	b291      	uxth	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	4413      	add	r3, r2
 80028be:	3336      	adds	r3, #54	; 0x36
 80028c0:	460a      	mov	r2, r1
 80028c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	015b      	lsls	r3, r3, #5
 80028ca:	4413      	add	r3, r2
 80028cc:	332b      	adds	r3, #43	; 0x2b
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	015b      	lsls	r3, r3, #5
 80028d8:	4413      	add	r3, r2
 80028da:	3338      	adds	r3, #56	; 0x38
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	015b      	lsls	r3, r3, #5
 80028e6:	4413      	add	r3, r2
 80028e8:	333c      	adds	r3, #60	; 0x3c
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	3302      	adds	r3, #2
 80028f4:	015b      	lsls	r3, r3, #5
 80028f6:	4413      	add	r3, r2
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3301      	adds	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d3c4      	bcc.n	8002896 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e031      	b.n	8002976 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	4413      	add	r3, r2
 800291a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	4413      	add	r3, r2
 800292a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	4413      	add	r3, r2
 800293a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	015b      	lsls	r3, r3, #5
 8002948:	4413      	add	r3, r2
 800294a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	015b      	lsls	r3, r3, #5
 8002958:	4413      	add	r3, r2
 800295a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	330a      	adds	r3, #10
 8002968:	015b      	lsls	r3, r3, #5
 800296a:	4413      	add	r3, r2
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	3301      	adds	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d3c8      	bcc.n	8002912 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	687e      	ldr	r6, [r7, #4]
 8002988:	466d      	mov	r5, sp
 800298a:	f106 0410 	add.w	r4, r6, #16
 800298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	602b      	str	r3, [r5, #0]
 8002996:	1d33      	adds	r3, r6, #4
 8002998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f002 fb49 	bl	8005032 <USB_DevInit>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00d      	b.n	80029ce <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fb87 	bl	80060da <USB_DevDisconnect>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_PCD_Start+0x16>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e016      	b.n	8002a1a <HAL_PCD_Start+0x44>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029f4:	2101      	movs	r1, #1
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f007 fa51 	bl	8009e9e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fb60 	bl	80060c6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fad2 	bl	8004fb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fb5d 	bl	80060ee <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d102      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 faf3 	bl	800302c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fb4f 	bl	80060ee <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5a:	d112      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f007 f820 	bl	8009aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f8de 	bl	8002c3e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 fb31 	bl	80060ee <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a96:	d10b      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fb1a 	bl	80060ee <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac4:	d10b      	bne.n	8002ade <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad8:	b292      	uxth	r2, r2
 8002ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 fb03 	bl	80060ee <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	d126      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0208 	bic.w	r2, r2, #8
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f007 f801 	bl	8009b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fad1 	bl	80060ee <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d13d      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0208 	orr.w	r2, r2, #8
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b82:	b292      	uxth	r2, r2
 8002b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0204 	orr.w	r2, r2, #4
 8002b9a:	b292      	uxth	r2, r2
 8002b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 faa2 	bl	80060ee <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb4:	d10b      	bne.n	8002bce <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f006 ff92 	bl	8009af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fa88 	bl	80060ee <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d10e      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bfc:	b292      	uxth	r2, r2
 8002bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f006 ff4b 	bl	8009a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fa6e 	bl	80060ee <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1c:	d10b      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c30:	b292      	uxth	r2, r2
 8002c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_PCD_SetAddress+0x1a>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e013      	b.n	8002c80 <HAL_PCD_SetAddress+0x42>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fa15 	bl	80060a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	70fb      	strb	r3, [r7, #3]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	803b      	strh	r3, [r7, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0b      	bge.n	8002cc6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	015b      	lsls	r3, r3, #5
 8002cb6:	3328      	adds	r3, #40	; 0x28
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	705a      	strb	r2, [r3, #1]
 8002cc4:	e00b      	b.n	8002cde <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	015b      	lsls	r3, r3, #5
 8002cce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cea:	883a      	ldrh	r2, [r7, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	78ba      	ldrb	r2, [r7, #2]
 8002cf4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d08:	78bb      	ldrb	r3, [r7, #2]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d102      	bne.n	8002d14 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_PCD_EP_Open+0x9a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e00e      	b.n	8002d40 <HAL_PCD_EP_Open+0xb8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 f9a3 	bl	800507c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da0b      	bge.n	8002d74 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	3328      	adds	r3, #40	; 0x28
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	705a      	strb	r2, [r3, #1]
 8002d72:	e00b      	b.n	8002d8c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_Close+0x5e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Close+0x7c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 fc4f 	bl	8005658 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6979      	ldr	r1, [r7, #20]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 fdae 	bl	8005984 <USB_EPStartXfer>
 8002e28:	e005      	b.n	8002e36 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 fda7 	bl	8005984 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	330a      	adds	r3, #10
 8002e56:	015b      	lsls	r3, r3, #5
 8002e58:	4413      	add	r3, r2
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	460b      	mov	r3, r1
 8002e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	3328      	adds	r3, #40	; 0x28
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fd61 	bl	8005984 <USB_EPStartXfer>
 8002ec2:	e005      	b.n	8002ed0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6979      	ldr	r1, [r7, #20]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fd5a 	bl	8005984 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 0207 	and.w	r2, r3, #7
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d901      	bls.n	8002ef8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e046      	b.n	8002f86 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da0b      	bge.n	8002f18 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	015b      	lsls	r3, r3, #5
 8002f08:	3328      	adds	r3, #40	; 0x28
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	705a      	strb	r2, [r3, #1]
 8002f16:	e009      	b.n	8002f2c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	015b      	lsls	r3, r3, #5
 8002f1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_PCD_EP_SetStall+0x72>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e01c      	b.n	8002f86 <HAL_PCD_EP_SetStall+0xac>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 ffca 	bl	8005ef4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d108      	bne.n	8002f7c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f003 f8c8 	bl	800610c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d901      	bls.n	8002fac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e03a      	b.n	8003022 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da0b      	bge.n	8002fcc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	3328      	adds	r3, #40	; 0x28
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00b      	b.n	8002fe4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	015b      	lsls	r3, r3, #5
 8002fd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_PCD_EP_ClrStall+0x76>
 8003000:	2302      	movs	r3, #2
 8003002:	e00e      	b.n	8003022 <HAL_PCD_EP_ClrStall+0x94>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	4618      	mov	r0, r3
 8003014:	f002 ffb0 	bl	8005f78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003034:	e282      	b.n	800353c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800303e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003040:	8afb      	ldrh	r3, [r7, #22]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800304a:	7d7b      	ldrb	r3, [r7, #21]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8142 	bne.w	80032d6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003052:	8afb      	ldrh	r3, [r7, #22]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d151      	bne.n	8003100 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	b29c      	uxth	r4, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307a:	b29b      	uxth	r3, r3
 800307c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3328      	adds	r3, #40	; 0x28
 8003082:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	3302      	adds	r3, #2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	441a      	add	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030be:	2100      	movs	r1, #0
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f006 fcd5 	bl	8009a70 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8234 	beq.w	800353c <PCD_EP_ISR_Handler+0x510>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 822f 	bne.w	800353c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b292      	uxth	r2, r2
 80030f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030fe:	e21d      	b.n	800353c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003106:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003110:	8a7b      	ldrh	r3, [r7, #18]
 8003112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003116:	2b00      	cmp	r3, #0
 8003118:	d033      	beq.n	8003182 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	3306      	adds	r3, #6
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003158:	b29b      	uxth	r3, r3
 800315a:	f003 f826 	bl	80061aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29a      	uxth	r2, r3
 8003166:	f640 738f 	movw	r3, #3983	; 0xf8f
 800316a:	4013      	ands	r3, r2
 800316c:	b29c      	uxth	r4, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003176:	b292      	uxth	r2, r2
 8003178:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f006 fc4e 	bl	8009a1c <HAL_PCD_SetupStageCallback>
 8003180:	e1dc      	b.n	800353c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f280 81d8 	bge.w	800353c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29a      	uxth	r2, r3
 8003194:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003198:	4013      	ands	r3, r2
 800319a:	b29c      	uxth	r4, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80031a4:	b292      	uxth	r2, r2
 80031a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	3306      	adds	r3, #6
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d019      	beq.n	8003210 <PCD_EP_ISR_Handler+0x1e4>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6959      	ldr	r1, [r3, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f002 ffd8 	bl	80061aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	441a      	add	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003208:	2100      	movs	r1, #0
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f006 fc18 	bl	8009a40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461c      	mov	r4, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	441c      	add	r4, r3
 8003222:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003226:	461c      	mov	r4, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10e      	bne.n	800324e <PCD_EP_ISR_Handler+0x222>
 8003230:	8823      	ldrh	r3, [r4, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003238:	b29b      	uxth	r3, r3
 800323a:	8023      	strh	r3, [r4, #0]
 800323c:	8823      	ldrh	r3, [r4, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003248:	b29b      	uxth	r3, r3
 800324a:	8023      	strh	r3, [r4, #0]
 800324c:	e02d      	b.n	80032aa <PCD_EP_ISR_Handler+0x27e>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b3e      	cmp	r3, #62	; 0x3e
 8003254:	d812      	bhi.n	800327c <PCD_EP_ISR_Handler+0x250>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <PCD_EP_ISR_Handler+0x244>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	3301      	adds	r3, #1
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	b29b      	uxth	r3, r3
 8003274:	029b      	lsls	r3, r3, #10
 8003276:	b29b      	uxth	r3, r3
 8003278:	8023      	strh	r3, [r4, #0]
 800327a:	e016      	b.n	80032aa <PCD_EP_ISR_Handler+0x27e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <PCD_EP_ISR_Handler+0x26a>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	3b01      	subs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	b29b      	uxth	r3, r3
 800329a:	029b      	lsls	r3, r3, #10
 800329c:	b29b      	uxth	r3, r3
 800329e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	b29c      	uxth	r4, r3
 80032bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032c0:	b29c      	uxth	r4, r3
 80032c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032c6:	b29c      	uxth	r4, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4ba2      	ldr	r3, [pc, #648]	; (8003558 <PCD_EP_ISR_Handler+0x52c>)
 80032ce:	4323      	orrs	r3, r4
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8013      	strh	r3, [r2, #0]
 80032d4:	e132      	b.n	800353c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	7d7b      	ldrb	r3, [r7, #21]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f280 80d1 	bge.w	8003492 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	7d7b      	ldrb	r3, [r7, #21]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003304:	4013      	ands	r3, r2
 8003306:	b29c      	uxth	r4, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	7d7b      	ldrb	r3, [r7, #21]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003318:	b292      	uxth	r2, r2
 800331a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800331c:	7d7b      	ldrb	r3, [r7, #21]
 800331e:	015b      	lsls	r3, r3, #5
 8003320:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	7b1b      	ldrb	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d121      	bne.n	8003376 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800333a:	b29b      	uxth	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	3306      	adds	r3, #6
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800335c:	8bfb      	ldrh	r3, [r7, #30]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d072      	beq.n	8003448 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	88da      	ldrh	r2, [r3, #6]
 800336e:	8bfb      	ldrh	r3, [r7, #30]
 8003370:	f002 ff1b 	bl	80061aa <USB_ReadPMA>
 8003374:	e068      	b.n	8003448 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d021      	beq.n	80033d4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	3302      	adds	r3, #2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80033ba:	8bfb      	ldrh	r3, [r7, #30]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02a      	beq.n	8003416 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6959      	ldr	r1, [r3, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	891a      	ldrh	r2, [r3, #8]
 80033cc:	8bfb      	ldrh	r3, [r7, #30]
 80033ce:	f002 feec 	bl	80061aa <USB_ReadPMA>
 80033d2:	e020      	b.n	8003416 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033dc:	b29b      	uxth	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	3306      	adds	r3, #6
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80033fe:	8bfb      	ldrh	r3, [r7, #30]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6959      	ldr	r1, [r3, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	895a      	ldrh	r2, [r3, #10]
 8003410:	8bfb      	ldrh	r3, [r7, #30]
 8003412:	f002 feca 	bl	80061aa <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	b29c      	uxth	r4, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	441a      	add	r2, r3
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <PCD_EP_ISR_Handler+0x530>)
 8003442:	4323      	orrs	r3, r4
 8003444:	b29b      	uxth	r3, r3
 8003446:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	8bfb      	ldrh	r3, [r7, #30]
 800344e:	441a      	add	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <PCD_EP_ISR_Handler+0x446>
 8003468:	8bfa      	ldrh	r2, [r7, #30]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	429a      	cmp	r2, r3
 8003470:	d206      	bcs.n	8003480 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f006 fae1 	bl	8009a40 <HAL_PCD_DataOutStageCallback>
 800347e:	e008      	b.n	8003492 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	7819      	ldrb	r1, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fc9d 	bl	8002dcc <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003492:	8a7b      	ldrh	r3, [r7, #18]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04f      	beq.n	800353c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800349c:	7d7b      	ldrb	r3, [r7, #21]
 800349e:	015b      	lsls	r3, r3, #5
 80034a0:	3328      	adds	r3, #40	; 0x28
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	7d7b      	ldrb	r3, [r7, #21]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c0:	b29c      	uxth	r4, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	7d7b      	ldrb	r3, [r7, #21]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80034d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	3302      	adds	r3, #2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	441a      	add	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f006 faa4 	bl	8009a70 <HAL_PCD_DataInStageCallback>
 8003528:	e008      	b.n	800353c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	7819      	ldrb	r1, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fc96 	bl	8002e68 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003544:	b29b      	uxth	r3, r3
 8003546:	b21b      	sxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f6ff ad74 	blt.w	8003036 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3724      	adds	r7, #36	; 0x24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	ffff8080 	.word	0xffff8080
 800355c:	ffff80c0 	.word	0xffff80c0

08003560 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	4613      	mov	r3, r2
 8003570:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	015b      	lsls	r3, r3, #5
 8003586:	3328      	adds	r3, #40	; 0x28
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e006      	b.n	800359e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003590:	897b      	ldrh	r3, [r7, #10]
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d107      	bne.n	80035b4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	80da      	strh	r2, [r3, #6]
 80035b2:	e00b      	b.n	80035cc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2201      	movs	r2, #1
 80035b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e26c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f8:	4b92      	ldr	r3, [pc, #584]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b04      	cmp	r3, #4
 8003602:	d00c      	beq.n	800361e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003604:	4b8f      	ldr	r3, [pc, #572]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d112      	bne.n	8003636 <HAL_RCC_OscConfig+0x5e>
 8003610:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d10b      	bne.n	8003636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d06c      	beq.n	8003704 <HAL_RCC_OscConfig+0x12c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d168      	bne.n	8003704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e246      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x76>
 8003640:	4b80      	ldr	r3, [pc, #512]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a7f      	ldr	r2, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e02e      	b.n	80036ac <HAL_RCC_OscConfig+0xd4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x98>
 8003656:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a7a      	ldr	r2, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800365c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b78      	ldr	r3, [pc, #480]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a77      	ldr	r2, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e01d      	b.n	80036ac <HAL_RCC_OscConfig+0xd4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0xbc>
 800367a:	4b72      	ldr	r3, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a71      	ldr	r2, [pc, #452]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0xd4>
 8003694:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6a      	ldr	r2, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a67      	ldr	r2, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fd0e 	bl	80010d4 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fd fd0a 	bl	80010d4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1fa      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0xe4>
 80036da:	e014      	b.n	8003706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fcfa 	bl	80010d4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fd fcf6 	bl	80010d4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1e6      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f6:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x10c>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d063      	beq.n	80037da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003712:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b08      	cmp	r3, #8
 8003728:	d11c      	bne.n	8003764 <HAL_RCC_OscConfig+0x18c>
 800372a:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d116      	bne.n	8003764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_RCC_OscConfig+0x176>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d001      	beq.n	800374e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e1ba      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4939      	ldr	r1, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	e03a      	b.n	80037da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_RCC_OscConfig+0x270>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fd fcaf 	bl	80010d4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377a:	f7fd fcab 	bl	80010d4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e19b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4927      	ldr	r1, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]
 80037ac:	e015      	b.n	80037da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_RCC_OscConfig+0x270>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd fc8e 	bl	80010d4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037bc:	f7fd fc8a 	bl	80010d4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e17a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03a      	beq.n	800385c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d019      	beq.n	8003822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <HAL_RCC_OscConfig+0x274>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f4:	f7fd fc6e 	bl	80010d4 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fc:	f7fd fc6a 	bl	80010d4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e15a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x26c>)
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800381a:	2001      	movs	r0, #1
 800381c:	f000 fada 	bl	8003dd4 <RCC_Delay>
 8003820:	e01c      	b.n	800385c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_RCC_OscConfig+0x274>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003828:	f7fd fc54 	bl	80010d4 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382e:	e00f      	b.n	8003850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003830:	f7fd fc50 	bl	80010d4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d908      	bls.n	8003850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e140      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	42420000 	.word	0x42420000
 800384c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	4b9e      	ldr	r3, [pc, #632]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e9      	bne.n	8003830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a6 	beq.w	80039b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386e:	4b97      	ldr	r3, [pc, #604]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	4b94      	ldr	r3, [pc, #592]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4a93      	ldr	r2, [pc, #588]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	61d3      	str	r3, [r2, #28]
 8003886:	4b91      	ldr	r3, [pc, #580]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b8e      	ldr	r3, [pc, #568]	; (8003ad0 <HAL_RCC_OscConfig+0x4f8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d118      	bne.n	80038d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a2:	4b8b      	ldr	r3, [pc, #556]	; (8003ad0 <HAL_RCC_OscConfig+0x4f8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a8a      	ldr	r2, [pc, #552]	; (8003ad0 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ae:	f7fd fc11 	bl	80010d4 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fd fc0d 	bl	80010d4 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b64      	cmp	r3, #100	; 0x64
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0fd      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	4b81      	ldr	r3, [pc, #516]	; (8003ad0 <HAL_RCC_OscConfig+0x4f8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x312>
 80038dc:	4b7b      	ldr	r3, [pc, #492]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4a7a      	ldr	r2, [pc, #488]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6213      	str	r3, [r2, #32]
 80038e8:	e02d      	b.n	8003946 <HAL_RCC_OscConfig+0x36e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x334>
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	4a75      	ldr	r2, [pc, #468]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6213      	str	r3, [r2, #32]
 80038fe:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4a72      	ldr	r2, [pc, #456]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	6213      	str	r3, [r2, #32]
 800390a:	e01c      	b.n	8003946 <HAL_RCC_OscConfig+0x36e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b05      	cmp	r3, #5
 8003912:	d10c      	bne.n	800392e <HAL_RCC_OscConfig+0x356>
 8003914:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4a6c      	ldr	r2, [pc, #432]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	6213      	str	r3, [r2, #32]
 8003920:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4a69      	ldr	r2, [pc, #420]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	e00b      	b.n	8003946 <HAL_RCC_OscConfig+0x36e>
 800392e:	4b67      	ldr	r3, [pc, #412]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4a66      	ldr	r2, [pc, #408]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6213      	str	r3, [r2, #32]
 800393a:	4b64      	ldr	r3, [pc, #400]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a63      	ldr	r2, [pc, #396]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d015      	beq.n	800397a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7fd fbc1 	bl	80010d4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fd fbbd 	bl	80010d4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e0ab      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	4b57      	ldr	r3, [pc, #348]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ee      	beq.n	8003956 <HAL_RCC_OscConfig+0x37e>
 8003978:	e014      	b.n	80039a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7fd fbab 	bl	80010d4 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd fba7 	bl	80010d4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e095      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ee      	bne.n	8003982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039aa:	4b48      	ldr	r3, [pc, #288]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a47      	ldr	r2, [pc, #284]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8081 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c0:	4b42      	ldr	r3, [pc, #264]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d061      	beq.n	8003a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d146      	bne.n	8003a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d4:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCC_OscConfig+0x4fc>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fd fb7b 	bl	80010d4 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fd fb77 	bl	80010d4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e067      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f4:	4b35      	ldr	r3, [pc, #212]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d108      	bne.n	8003a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	492d      	ldr	r1, [pc, #180]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a19      	ldr	r1, [r3, #32]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	4927      	ldr	r1, [pc, #156]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x4fc>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fd fb4b 	bl	80010d4 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fd fb47 	bl	80010d4 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e037      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x46a>
 8003a60:	e02f      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <HAL_RCC_OscConfig+0x4fc>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fb34 	bl	80010d4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fb30 	bl	80010d4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e020      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x498>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e013      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x4f4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
 8003ad4:	42420060 	.word	0x42420060

08003ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0d0      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d910      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 0207 	bic.w	r2, r3, #7
 8003b02:	4965      	ldr	r1, [pc, #404]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	494d      	ldr	r1, [pc, #308]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d040      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d115      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e073      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06b      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4936      	ldr	r1, [pc, #216]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fa84 	bl	80010d4 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd0:	f7fd fa80 	bl	80010d4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e053      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 020c 	and.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1eb      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d210      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	4922      	ldr	r1, [pc, #136]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e032      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4916      	ldr	r1, [pc, #88]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c66:	f000 f821 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	5cd3      	ldrb	r3, [r2, r3]
 8003c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd f9e2 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800cb58 	.word	0x0800cb58
 8003ca4:	20000310 	.word	0x20000310
 8003ca8:	20000000 	.word	0x20000000

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b490      	push	{r4, r7}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cb4:	1d3c      	adds	r4, r7, #4
 8003cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d002      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x40>
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x46>
 8003cea:	e02d      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cee:	623b      	str	r3, [r7, #32]
      break;
 8003cf0:	e02d      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	0c9b      	lsrs	r3, r3, #18
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cfe:	4413      	add	r3, r2
 8003d00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0c5b      	lsrs	r3, r3, #17
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d1e:	4413      	add	r3, r2
 8003d20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d2a:	fb02 f203 	mul.w	r2, r2, r3
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	e004      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	623b      	str	r3, [r7, #32]
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d4a:	623b      	str	r3, [r7, #32]
      break;
 8003d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	; 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc90      	pop	{r4, r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	0800c7e8 	.word	0x0800c7e8
 8003d60:	0800c7f8 	.word	0x0800c7f8
 8003d64:	40021000 	.word	0x40021000
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	003d0900 	.word	0x003d0900

08003d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d74:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000310 	.word	0x20000310

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d88:	f7ff fff2 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	0800cb68 	.word	0x0800cb68

08003dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db0:	f7ff ffde 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003db4:	4601      	mov	r1, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	0adb      	lsrs	r3, r3, #11
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	0800cb68 	.word	0x0800cb68

08003dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCC_Delay+0x34>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <RCC_Delay+0x38>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0a5b      	lsrs	r3, r3, #9
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003df0:	bf00      	nop
  }
  while (Delay --);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <RCC_Delay+0x1c>
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000310 	.word	0x20000310
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d07d      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e30:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	61d3      	str	r3, [r2, #28]
 8003e48:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d118      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e64:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a42      	ldr	r2, [pc, #264]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e70:	f7fd f930 	bl	80010d4 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e76:	e008      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd f92c 	bl	80010d4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e06d      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e96:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d027      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eca:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d014      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd f8fb 	bl	80010d4 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd f8f7 	bl	80010d4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e036      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4917      	ldr	r1, [pc, #92]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	490b      	ldr	r1, [pc, #44]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42420440 	.word	0x42420440

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e01d      	b.n	8003fca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f005 faea 	bl	800957c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fa10 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b06      	cmp	r3, #6
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0202 	mvn.w	r2, #2
 8004044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9a4 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f997 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9a6 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f97a 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f96d 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f97c 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0208 	mvn.w	r2, #8
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f950 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f943 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f952 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0210 	mvn.w	r2, #16
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2208      	movs	r2, #8
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f926 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f919 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f928 	bl	80043ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0201 	mvn.w	r2, #1
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f003 fb82 	bl	80078a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa51 	bl	800466a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8ec 	bl	80043cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0220 	mvn.w	r2, #32
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa1c 	bl	8004658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIM_ConfigClockSource+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e0a6      	b.n	800438e <HAL_TIM_ConfigClockSource+0x166>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800425e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004266:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d067      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0x120>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d80b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x6c>
 800427c:	2b10      	cmp	r3, #16
 800427e:	d073      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0x140>
 8004280:	2b10      	cmp	r3, #16
 8004282:	d802      	bhi.n	800428a <HAL_TIM_ConfigClockSource+0x62>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d06f      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004288:	e078      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800428a:	2b20      	cmp	r3, #32
 800428c:	d06c      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0x140>
 800428e:	2b30      	cmp	r3, #48	; 0x30
 8004290:	d06a      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004292:	e073      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004294:	2b70      	cmp	r3, #112	; 0x70
 8004296:	d00d      	beq.n	80042b4 <HAL_TIM_ConfigClockSource+0x8c>
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d804      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x7e>
 800429c:	2b50      	cmp	r3, #80	; 0x50
 800429e:	d033      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0xe0>
 80042a0:	2b60      	cmp	r3, #96	; 0x60
 80042a2:	d041      	beq.n	8004328 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80042a4:	e06a      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d066      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x152>
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d017      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042b2:	e063      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6899      	ldr	r1, [r3, #8]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f000 f965 	bl	8004592 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
      break;
 80042e0:	e04c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6899      	ldr	r1, [r3, #8]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f000 f94e 	bl	8004592 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004304:	609a      	str	r2, [r3, #8]
      break;
 8004306:	e039      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	461a      	mov	r2, r3
 8004316:	f000 f8c5 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2150      	movs	r1, #80	; 0x50
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f91c 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8004326:	e029      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	461a      	mov	r2, r3
 8004336:	f000 f8e3 	bl	8004500 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2160      	movs	r1, #96	; 0x60
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f90c 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8004346:	e019      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	461a      	mov	r2, r3
 8004356:	f000 f8a5 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2140      	movs	r1, #64	; 0x40
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f8fc 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8004366:	e009      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 f8f3 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8004378:	e000      	b.n	800437c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800437a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
	...

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a29      	ldr	r2, [pc, #164]	; (8004498 <TIM_Base_SetConfig+0xb8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a26      	ldr	r2, [pc, #152]	; (800449c <TIM_Base_SetConfig+0xbc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a25      	ldr	r2, [pc, #148]	; (80044a0 <TIM_Base_SetConfig+0xc0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <TIM_Base_SetConfig+0xb8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d007      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <TIM_Base_SetConfig+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <TIM_Base_SetConfig+0xc0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a07      	ldr	r2, [pc, #28]	; (8004498 <TIM_Base_SetConfig+0xb8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d103      	bne.n	8004488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	615a      	str	r2, [r3, #20]
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800

080044a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f023 0210 	bic.w	r2, r3, #16
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800452a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	031b      	lsls	r3, r3, #12
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800453c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	f043 0307 	orr.w	r3, r3, #7
 8004580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004592:	b480      	push	{r7}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	021a      	lsls	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e032      	b.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004620:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e03f      	b.n	800470e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f004 ff90 	bl	80095c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	; 0x24
 80046ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb8d 	bl	8004de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695a      	ldr	r2, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af02      	add	r7, sp, #8
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	f040 8083 	bne.w	800483e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Transmit+0x2e>
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e07b      	b.n	8004840 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_UART_Transmit+0x40>
 8004752:	2302      	movs	r3, #2
 8004754:	e074      	b.n	8004840 <HAL_UART_Transmit+0x12a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2221      	movs	r2, #33	; 0x21
 8004768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800476c:	f7fc fcb2 	bl	80010d4 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800477e:	e042      	b.n	8004806 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d122      	bne.n	80047de <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f9b2 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e046      	b.n	8004840 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	3302      	adds	r3, #2
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	e017      	b.n	8004806 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3301      	adds	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	e013      	b.n	8004806 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f98f 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e023      	b.n	8004840 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	60ba      	str	r2, [r7, #8]
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1b7      	bne.n	8004780 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f976 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00a      	b.n	8004840 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	d140      	bne.n	80048e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_UART_Receive_IT+0x26>
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e039      	b.n	80048e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_UART_Receive_IT+0x38>
 800487c:	2302      	movs	r3, #2
 800487e:	e032      	b.n	80048e6 <HAL_UART_Receive_IT+0x9e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2222      	movs	r2, #34	; 0x22
 80048a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0220 	orr.w	r2, r2, #32
 80048de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_UART_IRQHandler+0x52>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9ce 	bl	8004cdc <UART_Receive_IT>
      return;
 8004940:	e0cc      	b.n	8004adc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80ab 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x1b0>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_UART_IRQHandler+0x70>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a0 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_UART_IRQHandler+0x90>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	f043 0201 	orr.w	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_UART_IRQHandler+0xb0>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	f043 0202 	orr.w	r2, r3, #2
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_UART_IRQHandler+0xd0>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	f043 0204 	orr.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_UART_IRQHandler+0xf0>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	f043 0208 	orr.w	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d078      	beq.n	8004ada <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_UART_IRQHandler+0x112>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f96d 	bl	8004cdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <HAL_UART_IRQHandler+0x13a>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d031      	beq.n	8004a8e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8b8 	bl	8004ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d023      	beq.n	8004a86 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d013      	beq.n	8004a7e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <HAL_UART_IRQHandler+0x1f4>)
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc fc70 	bl	8001348 <HAL_DMA_Abort_IT>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	e00e      	b.n	8004a9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f83b 	bl	8004afa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	e00a      	b.n	8004a9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f837 	bl	8004afa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	e006      	b.n	8004a9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f833 	bl	8004afa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a9a:	e01e      	b.n	8004ada <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	bf00      	nop
    return;
 8004a9e:	e01c      	b.n	8004ada <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_UART_IRQHandler+0x1cc>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8a4 	bl	8004c02 <UART_Transmit_IT>
    return;
 8004aba:	e00f      	b.n	8004adc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_UART_IRQHandler+0x1ec>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8eb 	bl	8004cac <UART_EndTransmit_IT>
    return;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_UART_IRQHandler+0x1ec>
    return;
 8004ada:	bf00      	nop
  }
}
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	08004bdb 	.word	0x08004bdb

08004ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	e02c      	b.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b24:	d028      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2c:	f7fc fad2 	bl	80010d4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d21d      	bcs.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e00f      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d0c3      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff ff80 	bl	8004afa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b21      	cmp	r3, #33	; 0x21
 8004c14:	d144      	bne.n	8004ca0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	d11a      	bne.n	8004c56 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d105      	bne.n	8004c4a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]
 8004c48:	e00e      	b.n	8004c68 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]
 8004c54:	e008      	b.n	8004c68 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6211      	str	r1, [r2, #32]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4619      	mov	r1, r3
 8004c76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff0b 	bl	8004ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b22      	cmp	r3, #34	; 0x22
 8004cee:	d171      	bne.n	8004dd4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d123      	bne.n	8004d42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28
 8004d24:	e029      	b.n	8004d7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d40:	e01b      	b.n	8004d7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6858      	ldr	r0, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	1c59      	adds	r1, r3, #1
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6291      	str	r1, [r2, #40]	; 0x28
 8004d5a:	b2c2      	uxtb	r2, r0
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e00c      	b.n	8004d7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	1c58      	adds	r0, r3, #1
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	6288      	str	r0, [r1, #40]	; 0x28
 8004d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4619      	mov	r1, r3
 8004d88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d120      	bne.n	8004dd0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0220 	bic.w	r2, r2, #32
 8004d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f003 f846 	bl	8007e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e002      	b.n	8004dd6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e1a:	f023 030c 	bic.w	r3, r3, #12
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a52      	ldr	r2, [pc, #328]	; (8004f8c <UART_SetConfig+0x1ac>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d14e      	bne.n	8004ee6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fe ffb0 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 8004e4c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009a      	lsls	r2, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	4a4a      	ldr	r2, [pc, #296]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	0119      	lsls	r1, r3, #4
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004e86:	fba3 0302 	umull	r0, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2064      	movs	r0, #100	; 0x64
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	; 0x32
 8004e98:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea4:	4419      	add	r1, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ebc:	4b34      	ldr	r3, [pc, #208]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2064      	movs	r0, #100	; 0x64
 8004ec6:	fb00 f303 	mul.w	r3, r0, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	3332      	adds	r3, #50	; 0x32
 8004ed0:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004ee4:	e04d      	b.n	8004f82 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ee6:	f7fe ff4d 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8004eea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009a      	lsls	r2, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	0119      	lsls	r1, r3, #4
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009a      	lsls	r2, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f22:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004f24:	fba3 0302 	umull	r0, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	2064      	movs	r0, #100	; 0x64
 8004f2c:	fb00 f303 	mul.w	r3, r0, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	3332      	adds	r3, #50	; 0x32
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f42:	4419      	add	r1, r3
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009a      	lsls	r2, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004f5c:	fba3 0302 	umull	r0, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2064      	movs	r0, #100	; 0x64
 8004f64:	fb00 f303 	mul.w	r3, r0, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <UART_SetConfig+0x1b0>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 020f 	and.w	r2, r3, #15
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	440a      	add	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	51eb851f 	.word	0x51eb851f

08004f94 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f94:	b084      	sub	sp, #16
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	f107 0014 	add.w	r0, r7, #20
 8004fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	b004      	add	sp, #16
 8004fb2:	4770      	bx	lr

08004fb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fc0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	89fb      	ldrh	r3, [r7, #14]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fee:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	b21a      	sxth	r2, r3
 8004ffa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	b21b      	sxth	r3, r3
 8005002:	4013      	ands	r3, r2
 8005004:	b21b      	sxth	r3, r3
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005032:	b084      	sub	sp, #16
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	f107 0014 	add.w	r0, r7, #20
 8005040:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ffa5 	bl	8004fb4 <USB_EnableGlobalInt>

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005076:	b004      	add	sp, #16
 8005078:	4770      	bx	lr
	...

0800507c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800507c:	b490      	push	{r4, r7}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800509c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	78db      	ldrb	r3, [r3, #3]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d819      	bhi.n	80050de <USB_ActivateEndpoint+0x62>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <USB_ActivateEndpoint+0x34>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050d5 	.word	0x080050d5
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050cb 	.word	0x080050cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050c0:	89bb      	ldrh	r3, [r7, #12]
 80050c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050c6:	81bb      	strh	r3, [r7, #12]
      break;
 80050c8:	e00d      	b.n	80050e6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050ca:	89bb      	ldrh	r3, [r7, #12]
 80050cc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80050d0:	81bb      	strh	r3, [r7, #12]
      break;
 80050d2:	e008      	b.n	80050e6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050d4:	89bb      	ldrh	r3, [r7, #12]
 80050d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050da:	81bb      	strh	r3, [r7, #12]
      break;
 80050dc:	e003      	b.n	80050e6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
      break;
 80050e2:	e000      	b.n	80050e6 <USB_ActivateEndpoint+0x6a>
      break;
 80050e4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	441a      	add	r2, r3
 80050f0:	89bb      	ldrh	r3, [r7, #12]
 80050f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	b29a      	uxth	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	b29c      	uxth	r4, r3
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	4b8a      	ldr	r3, [pc, #552]	; (800535c <USB_ActivateEndpoint+0x2e0>)
 8005134:	4323      	orrs	r3, r4
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	7b1b      	ldrb	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 8112 	bne.w	8005368 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d067      	beq.n	800521c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800514c:	687c      	ldr	r4, [r7, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005154:	b29b      	uxth	r3, r3
 8005156:	441c      	add	r4, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	4423      	add	r3, r4
 8005160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005164:	461c      	mov	r4, r3
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	88db      	ldrh	r3, [r3, #6]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29c      	uxth	r4, r3
 8005182:	4623      	mov	r3, r4
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d014      	beq.n	80051b6 <USB_ActivateEndpoint+0x13a>
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	b29c      	uxth	r4, r3
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <USB_ActivateEndpoint+0x2e4>)
 80051b0:	4323      	orrs	r3, r4
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	78db      	ldrb	r3, [r3, #3]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d018      	beq.n	80051f0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d4:	b29c      	uxth	r4, r3
 80051d6:	f084 0320 	eor.w	r3, r4, #32
 80051da:	b29c      	uxth	r4, r3
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	4b5d      	ldr	r3, [pc, #372]	; (800535c <USB_ActivateEndpoint+0x2e0>)
 80051e8:	4323      	orrs	r3, r4
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8013      	strh	r3, [r2, #0]
 80051ee:	e22b      	b.n	8005648 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005206:	b29c      	uxth	r4, r3
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	4b52      	ldr	r3, [pc, #328]	; (800535c <USB_ActivateEndpoint+0x2e0>)
 8005214:	4323      	orrs	r3, r4
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
 800521a:	e215      	b.n	8005648 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800521c:	687c      	ldr	r4, [r7, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	441c      	add	r4, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	4423      	add	r3, r4
 8005230:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005234:	461c      	mov	r4, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	88db      	ldrh	r3, [r3, #6]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	b29b      	uxth	r3, r3
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005244:	687c      	ldr	r4, [r7, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	441c      	add	r4, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4423      	add	r3, r4
 8005258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525c:	461c      	mov	r4, r3
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10e      	bne.n	8005284 <USB_ActivateEndpoint+0x208>
 8005266:	8823      	ldrh	r3, [r4, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800526e:	b29b      	uxth	r3, r3
 8005270:	8023      	strh	r3, [r4, #0]
 8005272:	8823      	ldrh	r3, [r4, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527e:	b29b      	uxth	r3, r3
 8005280:	8023      	strh	r3, [r4, #0]
 8005282:	e02d      	b.n	80052e0 <USB_ActivateEndpoint+0x264>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b3e      	cmp	r3, #62	; 0x3e
 800528a:	d812      	bhi.n	80052b2 <USB_ActivateEndpoint+0x236>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <USB_ActivateEndpoint+0x22a>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	029b      	lsls	r3, r3, #10
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8023      	strh	r3, [r4, #0]
 80052b0:	e016      	b.n	80052e0 <USB_ActivateEndpoint+0x264>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <USB_ActivateEndpoint+0x250>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29c      	uxth	r4, r3
 80052ee:	4623      	mov	r3, r4
 80052f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d014      	beq.n	8005322 <USB_ActivateEndpoint+0x2a6>
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	b29c      	uxth	r4, r3
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	4b12      	ldr	r3, [pc, #72]	; (8005364 <USB_ActivateEndpoint+0x2e8>)
 800531c:	4323      	orrs	r3, r4
 800531e:	b29b      	uxth	r3, r3
 8005320:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005338:	b29c      	uxth	r4, r3
 800533a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800533e:	b29c      	uxth	r4, r3
 8005340:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005344:	b29c      	uxth	r4, r3
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	4b02      	ldr	r3, [pc, #8]	; (800535c <USB_ActivateEndpoint+0x2e0>)
 8005352:	4323      	orrs	r3, r4
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]
 8005358:	e176      	b.n	8005648 <USB_ActivateEndpoint+0x5cc>
 800535a:	bf00      	nop
 800535c:	ffff8080 	.word	0xffff8080
 8005360:	ffff80c0 	.word	0xffff80c0
 8005364:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	b29c      	uxth	r4, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	4b96      	ldr	r3, [pc, #600]	; (80055e4 <USB_ActivateEndpoint+0x568>)
 800538c:	4323      	orrs	r3, r4
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005392:	687c      	ldr	r4, [r7, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539a:	b29b      	uxth	r3, r3
 800539c:	441c      	add	r4, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	4423      	add	r3, r4
 80053a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053aa:	461c      	mov	r4, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	891b      	ldrh	r3, [r3, #8]
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	8023      	strh	r3, [r4, #0]
 80053ba:	687c      	ldr	r4, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	441c      	add	r4, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	4423      	add	r3, r4
 80053ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053d2:	461c      	mov	r4, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	895b      	ldrh	r3, [r3, #10]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 8088 	bne.w	80054fc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29c      	uxth	r4, r3
 80053fa:	4623      	mov	r3, r4
 80053fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d014      	beq.n	800542e <USB_ActivateEndpoint+0x3b2>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	b29c      	uxth	r4, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	4b70      	ldr	r3, [pc, #448]	; (80055e8 <USB_ActivateEndpoint+0x56c>)
 8005428:	4323      	orrs	r3, r4
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29c      	uxth	r4, r3
 800543c:	4623      	mov	r3, r4
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d014      	beq.n	8005470 <USB_ActivateEndpoint+0x3f4>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	b29c      	uxth	r4, r3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	4b60      	ldr	r3, [pc, #384]	; (80055ec <USB_ActivateEndpoint+0x570>)
 800546a:	4323      	orrs	r3, r4
 800546c:	b29b      	uxth	r3, r3
 800546e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	b29c      	uxth	r4, r3
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	4b56      	ldr	r3, [pc, #344]	; (80055ec <USB_ActivateEndpoint+0x570>)
 8005494:	4323      	orrs	r3, r4
 8005496:	b29b      	uxth	r3, r3
 8005498:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b0:	b29c      	uxth	r4, r3
 80054b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80054b6:	b29c      	uxth	r4, r3
 80054b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80054bc:	b29c      	uxth	r4, r3
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <USB_ActivateEndpoint+0x574>)
 80054ca:	4323      	orrs	r3, r4
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e6:	b29c      	uxth	r4, r3
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <USB_ActivateEndpoint+0x574>)
 80054f4:	4323      	orrs	r3, r4
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
 80054fa:	e0a5      	b.n	8005648 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29c      	uxth	r4, r3
 800550a:	4623      	mov	r3, r4
 800550c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d014      	beq.n	800553e <USB_ActivateEndpoint+0x4c2>
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	b29c      	uxth	r4, r3
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <USB_ActivateEndpoint+0x56c>)
 8005538:	4323      	orrs	r3, r4
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29c      	uxth	r4, r3
 800554c:	4623      	mov	r3, r4
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <USB_ActivateEndpoint+0x504>
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556c:	b29c      	uxth	r4, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <USB_ActivateEndpoint+0x570>)
 800557a:	4323      	orrs	r3, r4
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	b29c      	uxth	r4, r3
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <USB_ActivateEndpoint+0x56c>)
 80055a4:	4323      	orrs	r3, r4
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	78db      	ldrb	r3, [r3, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d020      	beq.n	80055f4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c8:	b29c      	uxth	r4, r3
 80055ca:	f084 0320 	eor.w	r3, r4, #32
 80055ce:	b29c      	uxth	r4, r3
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <USB_ActivateEndpoint+0x574>)
 80055dc:	4323      	orrs	r3, r4
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
 80055e2:	e01c      	b.n	800561e <USB_ActivateEndpoint+0x5a2>
 80055e4:	ffff8180 	.word	0xffff8180
 80055e8:	ffffc080 	.word	0xffffc080
 80055ec:	ffff80c0 	.word	0xffff80c0
 80055f0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560a:	b29c      	uxth	r4, r3
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <USB_ActivateEndpoint+0x5d8>)
 8005618:	4323      	orrs	r3, r4
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	b29c      	uxth	r4, r3
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <USB_ActivateEndpoint+0x5d8>)
 8005642:	4323      	orrs	r3, r4
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bc90      	pop	{r4, r7}
 8005652:	4770      	bx	lr
 8005654:	ffff8080 	.word	0xffff8080

08005658 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005658:	b490      	push	{r4, r7}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	7b1b      	ldrb	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d171      	bne.n	800574e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d036      	beq.n	80056e0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29c      	uxth	r4, r3
 8005680:	4623      	mov	r3, r4
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d014      	beq.n	80056b4 <USB_DeactivateEndpoint+0x5c>
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	b29c      	uxth	r4, r3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	4b6b      	ldr	r3, [pc, #428]	; (800585c <USB_DeactivateEndpoint+0x204>)
 80056ae:	4323      	orrs	r3, r4
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ca:	b29c      	uxth	r4, r3
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	4b62      	ldr	r3, [pc, #392]	; (8005860 <USB_DeactivateEndpoint+0x208>)
 80056d8:	4323      	orrs	r3, r4
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]
 80056de:	e144      	b.n	800596a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29c      	uxth	r4, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d014      	beq.n	8005722 <USB_DeactivateEndpoint+0xca>
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	b29c      	uxth	r4, r3
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	4b52      	ldr	r3, [pc, #328]	; (8005864 <USB_DeactivateEndpoint+0x20c>)
 800571c:	4323      	orrs	r3, r4
 800571e:	b29b      	uxth	r3, r3
 8005720:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	b29c      	uxth	r4, r3
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	4b46      	ldr	r3, [pc, #280]	; (8005860 <USB_DeactivateEndpoint+0x208>)
 8005746:	4323      	orrs	r3, r4
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
 800574c:	e10d      	b.n	800596a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 8088 	bne.w	8005868 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29c      	uxth	r4, r3
 8005766:	4623      	mov	r3, r4
 8005768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d014      	beq.n	800579a <USB_DeactivateEndpoint+0x142>
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	b29c      	uxth	r4, r3
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	4b34      	ldr	r3, [pc, #208]	; (8005864 <USB_DeactivateEndpoint+0x20c>)
 8005794:	4323      	orrs	r3, r4
 8005796:	b29b      	uxth	r3, r3
 8005798:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29c      	uxth	r4, r3
 80057a8:	4623      	mov	r3, r4
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d014      	beq.n	80057dc <USB_DeactivateEndpoint+0x184>
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	b29c      	uxth	r4, r3
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	4b21      	ldr	r3, [pc, #132]	; (800585c <USB_DeactivateEndpoint+0x204>)
 80057d6:	4323      	orrs	r3, r4
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	b29c      	uxth	r4, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	4b17      	ldr	r3, [pc, #92]	; (800585c <USB_DeactivateEndpoint+0x204>)
 8005800:	4323      	orrs	r3, r4
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	b29c      	uxth	r4, r3
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <USB_DeactivateEndpoint+0x208>)
 800582a:	4323      	orrs	r3, r4
 800582c:	b29b      	uxth	r3, r3
 800582e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005846:	b29c      	uxth	r4, r3
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	4b03      	ldr	r3, [pc, #12]	; (8005860 <USB_DeactivateEndpoint+0x208>)
 8005854:	4323      	orrs	r3, r4
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]
 800585a:	e086      	b.n	800596a <USB_DeactivateEndpoint+0x312>
 800585c:	ffff80c0 	.word	0xffff80c0
 8005860:	ffff8080 	.word	0xffff8080
 8005864:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29c      	uxth	r4, r3
 8005876:	4623      	mov	r3, r4
 8005878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d014      	beq.n	80058aa <USB_DeactivateEndpoint+0x252>
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	b29c      	uxth	r4, r3
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	4b35      	ldr	r3, [pc, #212]	; (8005978 <USB_DeactivateEndpoint+0x320>)
 80058a4:	4323      	orrs	r3, r4
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29c      	uxth	r4, r3
 80058b8:	4623      	mov	r3, r4
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d014      	beq.n	80058ec <USB_DeactivateEndpoint+0x294>
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d8:	b29c      	uxth	r4, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	441a      	add	r2, r3
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <USB_DeactivateEndpoint+0x324>)
 80058e6:	4323      	orrs	r3, r4
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	b29c      	uxth	r4, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <USB_DeactivateEndpoint+0x320>)
 8005910:	4323      	orrs	r3, r4
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592c:	b29c      	uxth	r4, r3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	441a      	add	r2, r3
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <USB_DeactivateEndpoint+0x328>)
 800593a:	4323      	orrs	r3, r4
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	b29c      	uxth	r4, r3
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	4b07      	ldr	r3, [pc, #28]	; (8005980 <USB_DeactivateEndpoint+0x328>)
 8005964:	4323      	orrs	r3, r4
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bc90      	pop	{r4, r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	ffffc080 	.word	0xffffc080
 800597c:	ffff80c0 	.word	0xffff80c0
 8005980:	ffff8080 	.word	0xffff8080

08005984 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b08d      	sub	sp, #52	; 0x34
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b01      	cmp	r3, #1
 8005994:	f040 8160 	bne.w	8005c58 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d909      	bls.n	80059b8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	619a      	str	r2, [r3, #24]
 80059b6:	e005      	b.n	80059c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2200      	movs	r2, #0
 80059c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	7b1b      	ldrb	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d119      	bne.n	8005a00 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6959      	ldr	r1, [r3, #20]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	88da      	ldrh	r2, [r3, #6]
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fba2 	bl	8006122 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059de:	687c      	ldr	r4, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	441c      	add	r4, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	4423      	add	r3, r4
 80059f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f6:	461c      	mov	r4, r3
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8023      	strh	r3, [r4, #0]
 80059fe:	e10f      	b.n	8005c20 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d065      	beq.n	8005ae2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a16:	687c      	ldr	r4, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d148      	bne.n	8005ab2 <USB_EPStartXfer+0x12e>
 8005a20:	687c      	ldr	r4, [r7, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	441c      	add	r4, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	4423      	add	r3, r4
 8005a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a38:	461c      	mov	r4, r3
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10e      	bne.n	8005a5e <USB_EPStartXfer+0xda>
 8005a40:	8823      	ldrh	r3, [r4, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	8023      	strh	r3, [r4, #0]
 8005a4c:	8823      	ldrh	r3, [r4, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8023      	strh	r3, [r4, #0]
 8005a5c:	e03d      	b.n	8005ada <USB_EPStartXfer+0x156>
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2b3e      	cmp	r3, #62	; 0x3e
 8005a62:	d810      	bhi.n	8005a86 <USB_EPStartXfer+0x102>
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <USB_EPStartXfer+0xf6>
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	029b      	lsls	r3, r3, #10
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	8023      	strh	r3, [r4, #0]
 8005a84:	e029      	b.n	8005ada <USB_EPStartXfer+0x156>
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <USB_EPStartXfer+0x118>
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	029b      	lsls	r3, r3, #10
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	8023      	strh	r3, [r4, #0]
 8005ab0:	e013      	b.n	8005ada <USB_EPStartXfer+0x156>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d10f      	bne.n	8005ada <USB_EPStartXfer+0x156>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	441c      	add	r4, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	4423      	add	r3, r4
 8005acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	895b      	ldrh	r3, [r3, #10]
 8005ade:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ae0:	e063      	b.n	8005baa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d148      	bne.n	8005b7c <USB_EPStartXfer+0x1f8>
 8005aea:	687c      	ldr	r4, [r7, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	441c      	add	r4, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	4423      	add	r3, r4
 8005afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b02:	461c      	mov	r4, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10e      	bne.n	8005b28 <USB_EPStartXfer+0x1a4>
 8005b0a:	8823      	ldrh	r3, [r4, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8023      	strh	r3, [r4, #0]
 8005b16:	8823      	ldrh	r3, [r4, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8023      	strh	r3, [r4, #0]
 8005b26:	e03d      	b.n	8005ba4 <USB_EPStartXfer+0x220>
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b2c:	d810      	bhi.n	8005b50 <USB_EPStartXfer+0x1cc>
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	623b      	str	r3, [r7, #32]
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <USB_EPStartXfer+0x1c0>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	3301      	adds	r3, #1
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8023      	strh	r3, [r4, #0]
 8005b4e:	e029      	b.n	8005ba4 <USB_EPStartXfer+0x220>
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <USB_EPStartXfer+0x1e2>
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	029b      	lsls	r3, r3, #10
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8023      	strh	r3, [r4, #0]
 8005b7a:	e013      	b.n	8005ba4 <USB_EPStartXfer+0x220>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d10f      	bne.n	8005ba4 <USB_EPStartXfer+0x220>
 8005b84:	687c      	ldr	r4, [r7, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	441c      	add	r4, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	4423      	add	r3, r4
 8005b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9c:	461c      	mov	r4, r3
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	891b      	ldrh	r3, [r3, #8]
 8005ba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6959      	ldr	r1, [r3, #20]
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fab4 	bl	8006122 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d115      	bne.n	8005bee <USB_EPStartXfer+0x26a>
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd8:	b29c      	uxth	r4, r3
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	4b9a      	ldr	r3, [pc, #616]	; (8005e50 <USB_EPStartXfer+0x4cc>)
 8005be6:	4323      	orrs	r3, r4
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	8013      	strh	r3, [r2, #0]
 8005bec:	e018      	b.n	8005c20 <USB_EPStartXfer+0x29c>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d114      	bne.n	8005c20 <USB_EPStartXfer+0x29c>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	b29c      	uxth	r4, r3
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	4b8e      	ldr	r3, [pc, #568]	; (8005e54 <USB_EPStartXfer+0x4d0>)
 8005c1a:	4323      	orrs	r3, r4
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c36:	b29c      	uxth	r4, r3
 8005c38:	f084 0310 	eor.w	r3, r4, #16
 8005c3c:	b29c      	uxth	r4, r3
 8005c3e:	f084 0320 	eor.w	r3, r4, #32
 8005c42:	b29c      	uxth	r4, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	4b82      	ldr	r3, [pc, #520]	; (8005e58 <USB_EPStartXfer+0x4d4>)
 8005c50:	4323      	orrs	r3, r4
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
 8005c56:	e146      	b.n	8005ee6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d909      	bls.n	8005c78 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	1ad2      	subs	r2, r2, r3
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	619a      	str	r2, [r3, #24]
 8005c76:	e005      	b.n	8005c84 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	7b1b      	ldrb	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d148      	bne.n	8005d1e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c8c:	687c      	ldr	r4, [r7, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	441c      	add	r4, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	4423      	add	r3, r4
 8005ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ca4:	461c      	mov	r4, r3
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10e      	bne.n	8005cca <USB_EPStartXfer+0x346>
 8005cac:	8823      	ldrh	r3, [r4, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	8023      	strh	r3, [r4, #0]
 8005cb8:	8823      	ldrh	r3, [r4, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	8023      	strh	r3, [r4, #0]
 8005cc8:	e0f2      	b.n	8005eb0 <USB_EPStartXfer+0x52c>
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cce:	d810      	bhi.n	8005cf2 <USB_EPStartXfer+0x36e>
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <USB_EPStartXfer+0x362>
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	8023      	strh	r3, [r4, #0]
 8005cf0:	e0de      	b.n	8005eb0 <USB_EPStartXfer+0x52c>
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <USB_EPStartXfer+0x384>
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	8023      	strh	r3, [r4, #0]
 8005d1c:	e0c8      	b.n	8005eb0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d148      	bne.n	8005db8 <USB_EPStartXfer+0x434>
 8005d26:	687c      	ldr	r4, [r7, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	441c      	add	r4, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4423      	add	r3, r4
 8005d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d3e:	461c      	mov	r4, r3
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10e      	bne.n	8005d64 <USB_EPStartXfer+0x3e0>
 8005d46:	8823      	ldrh	r3, [r4, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8023      	strh	r3, [r4, #0]
 8005d52:	8823      	ldrh	r3, [r4, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8023      	strh	r3, [r4, #0]
 8005d62:	e03d      	b.n	8005de0 <USB_EPStartXfer+0x45c>
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b3e      	cmp	r3, #62	; 0x3e
 8005d68:	d810      	bhi.n	8005d8c <USB_EPStartXfer+0x408>
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <USB_EPStartXfer+0x3fc>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8023      	strh	r3, [r4, #0]
 8005d8a:	e029      	b.n	8005de0 <USB_EPStartXfer+0x45c>
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <USB_EPStartXfer+0x41e>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	8023      	strh	r3, [r4, #0]
 8005db6:	e013      	b.n	8005de0 <USB_EPStartXfer+0x45c>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10f      	bne.n	8005de0 <USB_EPStartXfer+0x45c>
 8005dc0:	687c      	ldr	r4, [r7, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	441c      	add	r4, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	4423      	add	r3, r4
 8005dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd8:	461c      	mov	r4, r3
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8023      	strh	r3, [r4, #0]
 8005de0:	687c      	ldr	r4, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d14e      	bne.n	8005e88 <USB_EPStartXfer+0x504>
 8005dea:	687c      	ldr	r4, [r7, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	441c      	add	r4, r3
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	4423      	add	r3, r4
 8005dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e02:	461c      	mov	r4, r3
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10e      	bne.n	8005e28 <USB_EPStartXfer+0x4a4>
 8005e0a:	8823      	ldrh	r3, [r4, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8023      	strh	r3, [r4, #0]
 8005e16:	8823      	ldrh	r3, [r4, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8023      	strh	r3, [r4, #0]
 8005e26:	e043      	b.n	8005eb0 <USB_EPStartXfer+0x52c>
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e2c:	d816      	bhi.n	8005e5c <USB_EPStartXfer+0x4d8>
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <USB_EPStartXfer+0x4c0>
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	3301      	adds	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8023      	strh	r3, [r4, #0]
 8005e4e:	e02f      	b.n	8005eb0 <USB_EPStartXfer+0x52c>
 8005e50:	ffff80c0 	.word	0xffff80c0
 8005e54:	ffffc080 	.word	0xffffc080
 8005e58:	ffff8080 	.word	0xffff8080
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <USB_EPStartXfer+0x4ee>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8023      	strh	r3, [r4, #0]
 8005e86:	e013      	b.n	8005eb0 <USB_EPStartXfer+0x52c>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10f      	bne.n	8005eb0 <USB_EPStartXfer+0x52c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	441c      	add	r4, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	4423      	add	r3, r4
 8005ea2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	b29c      	uxth	r4, r3
 8005ec8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ecc:	b29c      	uxth	r4, r3
 8005ece:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005ed2:	b29c      	uxth	r4, r3
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <USB_EPStartXfer+0x56c>)
 8005ee0:	4323      	orrs	r3, r4
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3734      	adds	r7, #52	; 0x34
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd90      	pop	{r4, r7, pc}
 8005ef0:	ffff8080 	.word	0xffff8080

08005ef4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ef4:	b490      	push	{r4, r7}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1c:	b29c      	uxth	r4, r3
 8005f1e:	f084 0310 	eor.w	r3, r4, #16
 8005f22:	b29c      	uxth	r4, r3
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <USB_EPSetStall+0x80>)
 8005f30:	4323      	orrs	r3, r4
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]
 8005f36:	e017      	b.n	8005f68 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	b29c      	uxth	r4, r3
 8005f50:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005f54:	b29c      	uxth	r4, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <USB_EPSetStall+0x80>)
 8005f62:	4323      	orrs	r3, r4
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc90      	pop	{r4, r7}
 8005f72:	4770      	bx	lr
 8005f74:	ffff8080 	.word	0xffff8080

08005f78 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f78:	b490      	push	{r4, r7}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	7b1b      	ldrb	r3, [r3, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d17d      	bne.n	8006086 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03d      	beq.n	800600e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29c      	uxth	r4, r3
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d014      	beq.n	8005fd4 <USB_EPClearStall+0x5c>
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc0:	b29c      	uxth	r4, r3
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	4b31      	ldr	r3, [pc, #196]	; (8006094 <USB_EPClearStall+0x11c>)
 8005fce:	4323      	orrs	r3, r4
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	78db      	ldrb	r3, [r3, #3]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d054      	beq.n	8006086 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	b29c      	uxth	r4, r3
 8005ff4:	f084 0320 	eor.w	r3, r4, #32
 8005ff8:	b29c      	uxth	r4, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	4b24      	ldr	r3, [pc, #144]	; (8006098 <USB_EPClearStall+0x120>)
 8006006:	4323      	orrs	r3, r4
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
 800600c:	e03b      	b.n	8006086 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29c      	uxth	r4, r3
 800601c:	4623      	mov	r3, r4
 800601e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d014      	beq.n	8006050 <USB_EPClearStall+0xd8>
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	b29c      	uxth	r4, r3
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	4b14      	ldr	r3, [pc, #80]	; (800609c <USB_EPClearStall+0x124>)
 800604a:	4323      	orrs	r3, r4
 800604c:	b29b      	uxth	r3, r3
 800604e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	b29c      	uxth	r4, r3
 8006068:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800606c:	b29c      	uxth	r4, r3
 800606e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006072:	b29c      	uxth	r4, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <USB_EPClearStall+0x120>)
 8006080:	4323      	orrs	r3, r4
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bc90      	pop	{r4, r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	ffff80c0 	.word	0xffff80c0
 8006098:	ffff8080 	.word	0xffff8080
 800609c:	ffffc080 	.word	0xffffc080

080060a0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006100:	68fb      	ldr	r3, [r7, #12]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006122:	b480      	push	{r7}
 8006124:	b08d      	sub	sp, #52	; 0x34
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	4611      	mov	r1, r2
 800612e:	461a      	mov	r2, r3
 8006130:	460b      	mov	r3, r1
 8006132:	80fb      	strh	r3, [r7, #6]
 8006134:	4613      	mov	r3, r2
 8006136:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006138:	88bb      	ldrh	r3, [r7, #4]
 800613a:	3301      	adds	r3, #1
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	005a      	lsls	r2, r3, #1
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615a:	e01e      	b.n	800619a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	3301      	adds	r3, #1
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	b29b      	uxth	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	b29a      	uxth	r2, r3
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	3302      	adds	r3, #2
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	3302      	adds	r3, #2
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	3301      	adds	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	3b01      	subs	r3, #1
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1dd      	bne.n	800615c <USB_WritePMA+0x3a>
  }
}
 80061a0:	bf00      	nop
 80061a2:	3734      	adds	r7, #52	; 0x34
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b08b      	sub	sp, #44	; 0x2c
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4611      	mov	r1, r2
 80061b6:	461a      	mov	r2, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	80fb      	strh	r3, [r7, #6]
 80061bc:	4613      	mov	r3, r2
 80061be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061c0:	88bb      	ldrh	r3, [r7, #4]
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	005a      	lsls	r2, r3, #1
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061dc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
 80061e2:	e01b      	b.n	800621c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	3302      	adds	r3, #2
 80061f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	3301      	adds	r3, #1
 80061fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b2da      	uxtb	r2, r3
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	3301      	adds	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	3302      	adds	r3, #2
 8006214:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	3b01      	subs	r3, #1
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e0      	bne.n	80061e4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006222:	88bb      	ldrh	r3, [r7, #4]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	701a      	strb	r2, [r3, #0]
  }
}
 800623e:	bf00      	nop
 8006240:	372c      	adds	r7, #44	; 0x2c
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7c1b      	ldrb	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d115      	bne.n	800628c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006264:	2202      	movs	r2, #2
 8006266:	2181      	movs	r1, #129	; 0x81
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f003 fce2 	bl	8009c32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006278:	2202      	movs	r2, #2
 800627a:	2101      	movs	r1, #1
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f003 fcd8 	bl	8009c32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800628a:	e012      	b.n	80062b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	2202      	movs	r2, #2
 8006290:	2181      	movs	r1, #129	; 0x81
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f003 fccd 	bl	8009c32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800629e:	2340      	movs	r3, #64	; 0x40
 80062a0:	2202      	movs	r2, #2
 80062a2:	2101      	movs	r1, #1
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f003 fcc4 	bl	8009c32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062b2:	2308      	movs	r3, #8
 80062b4:	2203      	movs	r2, #3
 80062b6:	2182      	movs	r1, #130	; 0x82
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f003 fcba 	bl	8009c32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062c8:	f003 fdd4 	bl	8009e74 <USBD_static_malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80062de:	2301      	movs	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
 80062e2:	e026      	b.n	8006332 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7c1b      	ldrb	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006318:	2101      	movs	r1, #1
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f003 fd73 	bl	8009e06 <USBD_LL_PrepareReceive>
 8006320:	e007      	b.n	8006332 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006328:	2340      	movs	r3, #64	; 0x40
 800632a:	2101      	movs	r1, #1
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f003 fd6a 	bl	8009e06 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800634c:	2181      	movs	r1, #129	; 0x81
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f003 fc95 	bl	8009c7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800635a:	2101      	movs	r1, #1
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f003 fc8e 	bl	8009c7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800636a:	2182      	movs	r1, #130	; 0x82
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f003 fc86 	bl	8009c7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00e      	beq.n	80063a0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	4618      	mov	r0, r3
 8006394:	f003 fd7a 	bl	8009e8c <USBD_static_free>
    pdev->pClassData = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d039      	beq.n	8006448 <USBD_CDC_Setup+0x9e>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d17c      	bne.n	80064d2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	88db      	ldrh	r3, [r3, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d029      	beq.n	8006434 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da11      	bge.n	800640e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80063f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	88d2      	ldrh	r2, [r2, #6]
 80063fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063fe:	6939      	ldr	r1, [r7, #16]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	88db      	ldrh	r3, [r3, #6]
 8006404:	461a      	mov	r2, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 f9c6 	bl	8007798 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800640c:	e068      	b.n	80064e0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	785a      	ldrb	r2, [r3, #1]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	88db      	ldrh	r3, [r3, #6]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006424:	6939      	ldr	r1, [r7, #16]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	88db      	ldrh	r3, [r3, #6]
 800642a:	461a      	mov	r2, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f9e1 	bl	80077f4 <USBD_CtlPrepareRx>
      break;
 8006432:	e055      	b.n	80064e0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	7850      	ldrb	r0, [r2, #1]
 8006440:	2200      	movs	r2, #0
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	4798      	blx	r3
      break;
 8006446:	e04b      	b.n	80064e0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b0a      	cmp	r3, #10
 800644e:	d017      	beq.n	8006480 <USBD_CDC_Setup+0xd6>
 8006450:	2b0b      	cmp	r3, #11
 8006452:	d029      	beq.n	80064a8 <USBD_CDC_Setup+0xfe>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d133      	bne.n	80064c0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645e:	2b03      	cmp	r3, #3
 8006460:	d107      	bne.n	8006472 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006462:	f107 030c 	add.w	r3, r7, #12
 8006466:	2202      	movs	r2, #2
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 f994 	bl	8007798 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006470:	e02e      	b.n	80064d0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 f925 	bl	80076c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800647a:	2302      	movs	r3, #2
 800647c:	75fb      	strb	r3, [r7, #23]
          break;
 800647e:	e027      	b.n	80064d0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006486:	2b03      	cmp	r3, #3
 8006488:	d107      	bne.n	800649a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800648a:	f107 030f 	add.w	r3, r7, #15
 800648e:	2201      	movs	r2, #1
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 f980 	bl	8007798 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006498:	e01a      	b.n	80064d0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f911 	bl	80076c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80064a2:	2302      	movs	r3, #2
 80064a4:	75fb      	strb	r3, [r7, #23]
          break;
 80064a6:	e013      	b.n	80064d0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d00d      	beq.n	80064ce <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f905 	bl	80076c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80064ba:	2302      	movs	r3, #2
 80064bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064be:	e006      	b.n	80064ce <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 f8fe 	bl	80076c4 <USBD_CtlError>
          ret = USBD_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	75fb      	strb	r3, [r7, #23]
          break;
 80064cc:	e000      	b.n	80064d0 <USBD_CDC_Setup+0x126>
          break;
 80064ce:	bf00      	nop
      }
      break;
 80064d0:	e006      	b.n	80064e0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f8f5 	bl	80076c4 <USBD_CtlError>
      ret = USBD_FAIL;
 80064da:	2302      	movs	r3, #2
 80064dc:	75fb      	strb	r3, [r7, #23]
      break;
 80064de:	bf00      	nop
  }

  return ret;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006504:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d037      	beq.n	8006580 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006510:	78fa      	ldrb	r2, [r7, #3]
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	331c      	adds	r3, #28
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d026      	beq.n	8006574 <USBD_CDC_DataIn+0x8a>
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	331c      	adds	r3, #28
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	78fa      	ldrb	r2, [r7, #3]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	0152      	lsls	r2, r2, #5
 800653e:	440a      	add	r2, r1
 8006540:	3238      	adds	r2, #56	; 0x38
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	fbb3 f1f2 	udiv	r1, r3, r2
 8006548:	fb02 f201 	mul.w	r2, r2, r1
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d110      	bne.n	8006574 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	331c      	adds	r3, #28
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006566:	78f9      	ldrb	r1, [r7, #3]
 8006568:	2300      	movs	r3, #0
 800656a:	2200      	movs	r2, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f003 fc27 	bl	8009dc0 <USBD_LL_Transmit>
 8006572:	e003      	b.n	800657c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f003 fc52 	bl	8009e4c <USBD_LL_GetRxDataSize>
 80065a8:	4602      	mov	r2, r0
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00d      	beq.n	80065d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065ce:	4611      	mov	r1, r2
 80065d0:	4798      	blx	r3

    return USBD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80065d6:	2302      	movs	r3, #2
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d015      	beq.n	8006626 <USBD_CDC_EP0_RxReady+0x46>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006600:	2bff      	cmp	r3, #255	; 0xff
 8006602:	d010      	beq.n	8006626 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006612:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800661a:	b292      	uxth	r2, r2
 800661c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2243      	movs	r2, #67	; 0x43
 800663c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800663e:	4b03      	ldr	r3, [pc, #12]	; (800664c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000090 	.word	0x20000090

08006650 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2243      	movs	r2, #67	; 0x43
 800665c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800665e:	4b03      	ldr	r3, [pc, #12]	; (800666c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	2000004c 	.word	0x2000004c

08006670 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2243      	movs	r2, #67	; 0x43
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	200000d4 	.word	0x200000d4

08006690 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	220a      	movs	r2, #10
 800669c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20000008 	.word	0x20000008

080066b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7c1b      	ldrb	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800675c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006760:	2101      	movs	r1, #1
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f003 fb4f 	bl	8009e06 <USBD_LL_PrepareReceive>
 8006768:	e007      	b.n	800677a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006770:	2340      	movs	r3, #64	; 0x40
 8006772:	2101      	movs	r1, #1
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f003 fb46 	bl	8009e06 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e000      	b.n	8006780 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800677e:	2302      	movs	r3, #2
  }
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	e01a      	b.n	80067d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	79fa      	ldrb	r2, [r7, #7]
 80067cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f003 f9ba 	bl	8009b48 <USBD_LL_Init>

  return USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
 80067fe:	e001      	b.n	8006804 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006800:	2302      	movs	r3, #2
 8006802:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f003 f9ef 	bl	8009bfc <USBD_LL_Start>

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	4611      	mov	r1, r2
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	4611      	mov	r1, r2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 feca 	bl	800764c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d00c      	beq.n	80068f6 <USBD_LL_SetupStage+0x56>
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d302      	bcc.n	80068e6 <USBD_LL_SetupStage+0x46>
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d010      	beq.n	8006906 <USBD_LL_SetupStage+0x66>
 80068e4:	e017      	b.n	8006916 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9ca 	bl	8006c88 <USBD_StdDevReq>
      break;
 80068f4:	e01a      	b.n	800692c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa2c 	bl	8006d5c <USBD_StdItfReq>
      break;
 8006904:	e012      	b.n	800692c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa6a 	bl	8006de8 <USBD_StdEPReq>
      break;
 8006914:	e00a      	b.n	800692c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800691c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006920:	b2db      	uxtb	r3, r3
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f003 f9c9 	bl	8009cbc <USBD_LL_StallEP>
      break;
 800692a:	bf00      	nop
  }

  return USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	460b      	mov	r3, r1
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d14b      	bne.n	80069e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006950:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006958:	2b03      	cmp	r3, #3
 800695a:	d134      	bne.n	80069c6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d919      	bls.n	800699c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	1ad2      	subs	r2, r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800697e:	429a      	cmp	r2, r3
 8006980:	d203      	bcs.n	800698a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006986:	b29b      	uxth	r3, r3
 8006988:	e002      	b.n	8006990 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 ff4b 	bl	8007830 <USBD_CtlContinueRx>
 800699a:	e038      	b.n	8006a0e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d105      	bne.n	80069be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 ff48 	bl	8007854 <USBD_CtlSendStatus>
 80069c4:	e023      	b.n	8006a0e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d11e      	bne.n	8006a0e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069d8:	2100      	movs	r1, #0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f003 f96e 	bl	8009cbc <USBD_LL_StallEP>
 80069e0:	e015      	b.n	8006a0e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00d      	beq.n	8006a0a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d108      	bne.n	8006a0a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	7afa      	ldrb	r2, [r7, #11]
 8006a02:	4611      	mov	r1, r2
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	4798      	blx	r3
 8006a08:	e001      	b.n	8006a0e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e000      	b.n	8006a10 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	460b      	mov	r3, r1
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d17f      	bne.n	8006b2c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3314      	adds	r3, #20
 8006a30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d15c      	bne.n	8006af6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d915      	bls.n	8006a74 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	1ad2      	subs	r2, r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 feb5 	bl	80077d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a66:	2300      	movs	r3, #0
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f003 f9ca 	bl	8009e06 <USBD_LL_PrepareReceive>
 8006a72:	e04e      	b.n	8006b12 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	6912      	ldr	r2, [r2, #16]
 8006a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a80:	fb02 f201 	mul.w	r2, r2, r1
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d11c      	bne.n	8006ac4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d316      	bcc.n	8006ac4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d20f      	bcs.n	8006ac4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fe91 	bl	80077d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f003 f9a2 	bl	8009e06 <USBD_LL_PrepareReceive>
 8006ac2:	e026      	b.n	8006b12 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d105      	bne.n	8006ae6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ae6:	2180      	movs	r1, #128	; 0x80
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f003 f8e7 	bl	8009cbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fec3 	bl	800787a <USBD_CtlReceiveStatus>
 8006af4:	e00d      	b.n	8006b12 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d004      	beq.n	8006b0a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f003 f8d5 	bl	8009cbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d11d      	bne.n	8006b58 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff fe83 	bl	8006828 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b2a:	e015      	b.n	8006b58 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d108      	bne.n	8006b54 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	7afa      	ldrb	r2, [r7, #11]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
 8006b52:	e001      	b.n	8006b58 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b54:	2302      	movs	r3, #2
 8006b56:	e000      	b.n	8006b5a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f003 f85e 	bl	8009c32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2240      	movs	r2, #64	; 0x40
 8006b82:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b86:	2340      	movs	r3, #64	; 0x40
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f003 f850 	bl	8009c32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2240      	movs	r2, #64	; 0x40
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6852      	ldr	r2, [r2, #4]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
  }

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr

08006c02 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d105      	bne.n	8006c48 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d10b      	bne.n	8006c7e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d004      	beq.n	8006cac <USBD_StdDevReq+0x24>
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d002      	beq.n	8006cac <USBD_StdDevReq+0x24>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <USBD_StdDevReq+0x34>
 8006caa:	e04c      	b.n	8006d46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
      break;
 8006cba:	e049      	b.n	8006d50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d83a      	bhi.n	8006d3a <USBD_StdDevReq+0xb2>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <USBD_StdDevReq+0x44>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d1d 	.word	0x08006d1d
 8006cd0:	08006d31 	.word	0x08006d31
 8006cd4:	08006d3b 	.word	0x08006d3b
 8006cd8:	08006d27 	.word	0x08006d27
 8006cdc:	08006d3b 	.word	0x08006d3b
 8006ce0:	08006cff 	.word	0x08006cff
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006d3b 	.word	0x08006d3b
 8006cec:	08006d13 	.word	0x08006d13
 8006cf0:	08006d09 	.word	0x08006d09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f9d4 	bl	80070a4 <USBD_GetDescriptor>
          break;
 8006cfc:	e022      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb37 	bl	8007374 <USBD_SetAddress>
          break;
 8006d06:	e01d      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb74 	bl	80073f8 <USBD_SetConfig>
          break;
 8006d10:	e018      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fbfd 	bl	8007514 <USBD_GetConfig>
          break;
 8006d1a:	e013      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fc2c 	bl	800757c <USBD_GetStatus>
          break;
 8006d24:	e00e      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fc5a 	bl	80075e2 <USBD_SetFeature>
          break;
 8006d2e:	e009      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fc69 	bl	800760a <USBD_ClrFeature>
          break;
 8006d38:	e004      	b.n	8006d44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fcc1 	bl	80076c4 <USBD_CtlError>
          break;
 8006d42:	bf00      	nop
      }
      break;
 8006d44:	e004      	b.n	8006d50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fcbb 	bl	80076c4 <USBD_CtlError>
      break;
 8006d4e:	bf00      	nop
  }

  return ret;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop

08006d5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d003      	beq.n	8006d7e <USBD_StdItfReq+0x22>
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d001      	beq.n	8006d7e <USBD_StdItfReq+0x22>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d12a      	bne.n	8006dd4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d84:	3b01      	subs	r3, #1
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d81d      	bhi.n	8006dc6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	889b      	ldrh	r3, [r3, #4]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d813      	bhi.n	8006dbc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d110      	bne.n	8006dd0 <USBD_StdItfReq+0x74>
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fd4d 	bl	8007854 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dba:	e009      	b.n	8006dd0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fc80 	bl	80076c4 <USBD_CtlError>
          break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc7b 	bl	80076c4 <USBD_CtlError>
          break;
 8006dce:	e000      	b.n	8006dd2 <USBD_StdItfReq+0x76>
          break;
 8006dd0:	bf00      	nop
      }
      break;
 8006dd2:	e004      	b.n	8006dde <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fc74 	bl	80076c4 <USBD_CtlError>
      break;
 8006ddc:	bf00      	nop
  }

  return USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889b      	ldrh	r3, [r3, #4]
 8006dfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d004      	beq.n	8006e12 <USBD_StdEPReq+0x2a>
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d002      	beq.n	8006e12 <USBD_StdEPReq+0x2a>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <USBD_StdEPReq+0x3a>
 8006e10:	e13d      	b.n	800708e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	4798      	blx	r3
      break;
 8006e20:	e13a      	b.n	8007098 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d10a      	bne.n	8006e44 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	e12a      	b.n	800709a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d03e      	beq.n	8006eca <USBD_StdEPReq+0xe2>
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d002      	beq.n	8006e56 <USBD_StdEPReq+0x6e>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d070      	beq.n	8006f36 <USBD_StdEPReq+0x14e>
 8006e54:	e115      	b.n	8007082 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d002      	beq.n	8006e66 <USBD_StdEPReq+0x7e>
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d015      	beq.n	8006e90 <USBD_StdEPReq+0xa8>
 8006e64:	e02b      	b.n	8006ebe <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <USBD_StdEPReq+0x9e>
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	2b80      	cmp	r3, #128	; 0x80
 8006e70:	d009      	beq.n	8006e86 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f002 ff20 	bl	8009cbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f002 ff1c 	bl	8009cbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e84:	e020      	b.n	8006ec8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc1b 	bl	80076c4 <USBD_CtlError>
              break;
 8006e8e:	e01b      	b.n	8006ec8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10e      	bne.n	8006eb6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00b      	beq.n	8006eb6 <USBD_StdEPReq+0xce>
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b80      	cmp	r3, #128	; 0x80
 8006ea2:	d008      	beq.n	8006eb6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	88db      	ldrh	r3, [r3, #6]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f002 ff03 	bl	8009cbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fccc 	bl	8007854 <USBD_CtlSendStatus>

              break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fbff 	bl	80076c4 <USBD_CtlError>
              break;
 8006ec6:	bf00      	nop
          }
          break;
 8006ec8:	e0e0      	b.n	800708c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d002      	beq.n	8006eda <USBD_StdEPReq+0xf2>
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d015      	beq.n	8006f04 <USBD_StdEPReq+0x11c>
 8006ed8:	e026      	b.n	8006f28 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <USBD_StdEPReq+0x112>
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d009      	beq.n	8006efa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f002 fee6 	bl	8009cbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ef0:	2180      	movs	r1, #128	; 0x80
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f002 fee2 	bl	8009cbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef8:	e01c      	b.n	8006f34 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fbe1 	bl	80076c4 <USBD_CtlError>
              break;
 8006f02:	e017      	b.n	8006f34 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	885b      	ldrh	r3, [r3, #2]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d112      	bne.n	8006f32 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 feed 	bl	8009cfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fc97 	bl	8007854 <USBD_CtlSendStatus>
              }
              break;
 8006f26:	e004      	b.n	8006f32 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fbca 	bl	80076c4 <USBD_CtlError>
              break;
 8006f30:	e000      	b.n	8006f34 <USBD_StdEPReq+0x14c>
              break;
 8006f32:	bf00      	nop
          }
          break;
 8006f34:	e0aa      	b.n	800708c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d002      	beq.n	8006f46 <USBD_StdEPReq+0x15e>
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d032      	beq.n	8006faa <USBD_StdEPReq+0x1c2>
 8006f44:	e097      	b.n	8007076 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <USBD_StdEPReq+0x174>
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d004      	beq.n	8006f5c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fbb5 	bl	80076c4 <USBD_CtlError>
                break;
 8006f5a:	e091      	b.n	8007080 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	da0b      	bge.n	8006f7c <USBD_StdEPReq+0x194>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	3310      	adds	r3, #16
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	3304      	adds	r3, #4
 8006f7a:	e00b      	b.n	8006f94 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	3304      	adds	r3, #4
 8006f94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fbf8 	bl	8007798 <USBD_CtlSendData>
              break;
 8006fa8:	e06a      	b.n	8007080 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da11      	bge.n	8006fd6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3318      	adds	r3, #24
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d117      	bne.n	8006ffc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fb78 	bl	80076c4 <USBD_CtlError>
                  break;
 8006fd4:	e054      	b.n	8007080 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb65 	bl	80076c4 <USBD_CtlError>
                  break;
 8006ffa:	e041      	b.n	8007080 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da0b      	bge.n	800701c <USBD_StdEPReq+0x234>
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	3310      	adds	r3, #16
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	4413      	add	r3, r2
 8007018:	3304      	adds	r3, #4
 800701a:	e00b      	b.n	8007034 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	3304      	adds	r3, #4
 8007034:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <USBD_StdEPReq+0x25a>
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d103      	bne.n	800704a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e00e      	b.n	8007068 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f002 fe72 	bl	8009d38 <USBD_LL_IsStallEP>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e002      	b.n	8007068 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2202      	movs	r2, #2
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fb92 	bl	8007798 <USBD_CtlSendData>
              break;
 8007074:	e004      	b.n	8007080 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fb23 	bl	80076c4 <USBD_CtlError>
              break;
 800707e:	bf00      	nop
          }
          break;
 8007080:	e004      	b.n	800708c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fb1d 	bl	80076c4 <USBD_CtlError>
          break;
 800708a:	bf00      	nop
      }
      break;
 800708c:	e004      	b.n	8007098 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb17 	bl	80076c4 <USBD_CtlError>
      break;
 8007096:	bf00      	nop
  }

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	885b      	ldrh	r3, [r3, #2]
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2b06      	cmp	r3, #6
 80070c6:	f200 8128 	bhi.w	800731a <USBD_GetDescriptor+0x276>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBD_GetDescriptor+0x2c>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	08007105 	.word	0x08007105
 80070d8:	08007145 	.word	0x08007145
 80070dc:	0800731b 	.word	0x0800731b
 80070e0:	0800731b 	.word	0x0800731b
 80070e4:	080072bb 	.word	0x080072bb
 80070e8:	080072e7 	.word	0x080072e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
      break;
 8007102:	e112      	b.n	800732a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7c1b      	ldrb	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10d      	bne.n	8007128 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	f107 0208 	add.w	r2, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	2202      	movs	r2, #2
 8007124:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007126:	e100      	b.n	800732a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	f107 0208 	add.w	r2, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	2202      	movs	r2, #2
 8007140:	701a      	strb	r2, [r3, #0]
      break;
 8007142:	e0f2      	b.n	800732a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b05      	cmp	r3, #5
 800714c:	f200 80ac 	bhi.w	80072a8 <USBD_GetDescriptor+0x204>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <USBD_GetDescriptor+0xb4>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	08007171 	.word	0x08007171
 800715c:	080071a5 	.word	0x080071a5
 8007160:	080071d9 	.word	0x080071d9
 8007164:	0800720d 	.word	0x0800720d
 8007168:	08007241 	.word	0x08007241
 800716c:	08007275 	.word	0x08007275
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7c12      	ldrb	r2, [r2, #16]
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007192:	e091      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa94 	bl	80076c4 <USBD_CtlError>
            err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
          break;
 80071a2:	e089      	b.n	80072b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c6:	e077      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa7a 	bl	80076c4 <USBD_CtlError>
            err++;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	3301      	adds	r3, #1
 80071d4:	72fb      	strb	r3, [r7, #11]
          break;
 80071d6:	e06f      	b.n	80072b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	7c12      	ldrb	r2, [r2, #16]
 80071f0:	f107 0108 	add.w	r1, r7, #8
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fa:	e05d      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa60 	bl	80076c4 <USBD_CtlError>
            err++;
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	3301      	adds	r3, #1
 8007208:	72fb      	strb	r3, [r7, #11]
          break;
 800720a:	e055      	b.n	80072b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	7c12      	ldrb	r2, [r2, #16]
 8007224:	f107 0108 	add.w	r1, r7, #8
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
 800722c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800722e:	e043      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa46 	bl	80076c4 <USBD_CtlError>
            err++;
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	3301      	adds	r3, #1
 800723c:	72fb      	strb	r3, [r7, #11]
          break;
 800723e:	e03b      	b.n	80072b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	7c12      	ldrb	r2, [r2, #16]
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	4610      	mov	r0, r2
 800725e:	4798      	blx	r3
 8007260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007262:	e029      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa2c 	bl	80076c4 <USBD_CtlError>
            err++;
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	3301      	adds	r3, #1
 8007270:	72fb      	strb	r3, [r7, #11]
          break;
 8007272:	e021      	b.n	80072b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	7c12      	ldrb	r2, [r2, #16]
 800728c:	f107 0108 	add.w	r1, r7, #8
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007296:	e00f      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa12 	bl	80076c4 <USBD_CtlError>
            err++;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	3301      	adds	r3, #1
 80072a4:	72fb      	strb	r3, [r7, #11]
          break;
 80072a6:	e007      	b.n	80072b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa0a 	bl	80076c4 <USBD_CtlError>
          err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072b6:	e038      	b.n	800732a <USBD_GetDescriptor+0x286>
 80072b8:	e037      	b.n	800732a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	7c1b      	ldrb	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	f107 0208 	add.w	r2, r7, #8
 80072ce:	4610      	mov	r0, r2
 80072d0:	4798      	blx	r3
 80072d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072d4:	e029      	b.n	800732a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9f3 	bl	80076c4 <USBD_CtlError>
        err++;
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	3301      	adds	r3, #1
 80072e2:	72fb      	strb	r3, [r7, #11]
      break;
 80072e4:	e021      	b.n	800732a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7c1b      	ldrb	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f107 0208 	add.w	r2, r7, #8
 80072fa:	4610      	mov	r0, r2
 80072fc:	4798      	blx	r3
 80072fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	2207      	movs	r2, #7
 8007306:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007308:	e00f      	b.n	800732a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f9d9 	bl	80076c4 <USBD_CtlError>
        err++;
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	3301      	adds	r3, #1
 8007316:	72fb      	strb	r3, [r7, #11]
      break;
 8007318:	e007      	b.n	800732a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f9d1 	bl	80076c4 <USBD_CtlError>
      err++;
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	3301      	adds	r3, #1
 8007326:	72fb      	strb	r3, [r7, #11]
      break;
 8007328:	bf00      	nop
  }

  if (err != 0U)
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11c      	bne.n	800736a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007330:	893b      	ldrh	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d011      	beq.n	800735a <USBD_GetDescriptor+0x2b6>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	88da      	ldrh	r2, [r3, #6]
 8007342:	893b      	ldrh	r3, [r7, #8]
 8007344:	4293      	cmp	r3, r2
 8007346:	bf28      	it	cs
 8007348:	4613      	movcs	r3, r2
 800734a:	b29b      	uxth	r3, r3
 800734c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800734e:	893b      	ldrh	r3, [r7, #8]
 8007350:	461a      	mov	r2, r3
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fa1f 	bl	8007798 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	88db      	ldrh	r3, [r3, #6]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa76 	bl	8007854 <USBD_CtlSendStatus>
 8007368:	e000      	b.n	800736c <USBD_GetDescriptor+0x2c8>
    return;
 800736a:	bf00      	nop
    }
  }
}
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop

08007374 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	889b      	ldrh	r3, [r3, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d130      	bne.n	80073e8 <USBD_SetAddress+0x74>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	88db      	ldrh	r3, [r3, #6]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d12c      	bne.n	80073e8 <USBD_SetAddress+0x74>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	885b      	ldrh	r3, [r3, #2]
 8007392:	2b7f      	cmp	r3, #127	; 0x7f
 8007394:	d828      	bhi.n	80073e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	885b      	ldrh	r3, [r3, #2]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d104      	bne.n	80073b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f988 	bl	80076c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b4:	e01c      	b.n	80073f0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	7bfa      	ldrb	r2, [r7, #15]
 80073ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 fcdd 	bl	8009d82 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa43 	bl	8007854 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073dc:	e008      	b.n	80073f0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	e003      	b.n	80073f0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f96a 	bl	80076c4 <USBD_CtlError>
  }
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	b2da      	uxtb	r2, r3
 8007408:	4b41      	ldr	r3, [pc, #260]	; (8007510 <USBD_SetConfig+0x118>)
 800740a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <USBD_SetConfig+0x118>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d904      	bls.n	800741e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f954 	bl	80076c4 <USBD_CtlError>
 800741c:	e075      	b.n	800750a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	2b02      	cmp	r3, #2
 8007426:	d002      	beq.n	800742e <USBD_SetConfig+0x36>
 8007428:	2b03      	cmp	r3, #3
 800742a:	d023      	beq.n	8007474 <USBD_SetConfig+0x7c>
 800742c:	e062      	b.n	80074f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800742e:	4b38      	ldr	r3, [pc, #224]	; (8007510 <USBD_SetConfig+0x118>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01a      	beq.n	800746c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <USBD_SetConfig+0x118>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2203      	movs	r2, #3
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007448:	4b31      	ldr	r3, [pc, #196]	; (8007510 <USBD_SetConfig+0x118>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff f9f4 	bl	800683c <USBD_SetClassConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	2b02      	cmp	r3, #2
 8007458:	d104      	bne.n	8007464 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f931 	bl	80076c4 <USBD_CtlError>
            return;
 8007462:	e052      	b.n	800750a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f9f5 	bl	8007854 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800746a:	e04e      	b.n	800750a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9f1 	bl	8007854 <USBD_CtlSendStatus>
        break;
 8007472:	e04a      	b.n	800750a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007474:	4b26      	ldr	r3, [pc, #152]	; (8007510 <USBD_SetConfig+0x118>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d112      	bne.n	80074a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007484:	4b22      	ldr	r3, [pc, #136]	; (8007510 <USBD_SetConfig+0x118>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800748e:	4b20      	ldr	r3, [pc, #128]	; (8007510 <USBD_SetConfig+0x118>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff f9f0 	bl	800687a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f9da 	bl	8007854 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074a0:	e033      	b.n	800750a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <USBD_SetConfig+0x118>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d01d      	beq.n	80074ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff f9de 	bl	800687a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074be:	4b14      	ldr	r3, [pc, #80]	; (8007510 <USBD_SetConfig+0x118>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <USBD_SetConfig+0x118>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff f9b4 	bl	800683c <USBD_SetClassConfig>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d104      	bne.n	80074e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8f1 	bl	80076c4 <USBD_CtlError>
            return;
 80074e2:	e012      	b.n	800750a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f9b5 	bl	8007854 <USBD_CtlSendStatus>
        break;
 80074ea:	e00e      	b.n	800750a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f9b1 	bl	8007854 <USBD_CtlSendStatus>
        break;
 80074f2:	e00a      	b.n	800750a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f8e4 	bl	80076c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <USBD_SetConfig+0x118>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff f9b9 	bl	800687a <USBD_ClrClassConfig>
        break;
 8007508:	bf00      	nop
    }
  }
}
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000564 	.word	0x20000564

08007514 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	88db      	ldrh	r3, [r3, #6]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d004      	beq.n	8007530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f8cb 	bl	80076c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800752e:	e021      	b.n	8007574 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007536:	2b01      	cmp	r3, #1
 8007538:	db17      	blt.n	800756a <USBD_GetConfig+0x56>
 800753a:	2b02      	cmp	r3, #2
 800753c:	dd02      	ble.n	8007544 <USBD_GetConfig+0x30>
 800753e:	2b03      	cmp	r3, #3
 8007540:	d00b      	beq.n	800755a <USBD_GetConfig+0x46>
 8007542:	e012      	b.n	800756a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3308      	adds	r3, #8
 800754e:	2201      	movs	r2, #1
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f920 	bl	8007798 <USBD_CtlSendData>
        break;
 8007558:	e00c      	b.n	8007574 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3304      	adds	r3, #4
 800755e:	2201      	movs	r2, #1
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f918 	bl	8007798 <USBD_CtlSendData>
        break;
 8007568:	e004      	b.n	8007574 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f8a9 	bl	80076c4 <USBD_CtlError>
        break;
 8007572:	bf00      	nop
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758c:	3b01      	subs	r3, #1
 800758e:	2b02      	cmp	r3, #2
 8007590:	d81e      	bhi.n	80075d0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	88db      	ldrh	r3, [r3, #6]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d004      	beq.n	80075a4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f891 	bl	80076c4 <USBD_CtlError>
        break;
 80075a2:	e01a      	b.n	80075da <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d005      	beq.n	80075c0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f043 0202 	orr.w	r2, r3, #2
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	330c      	adds	r3, #12
 80075c4:	2202      	movs	r2, #2
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f8e5 	bl	8007798 <USBD_CtlSendData>
      break;
 80075ce:	e004      	b.n	80075da <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f876 	bl	80076c4 <USBD_CtlError>
      break;
 80075d8:	bf00      	nop
  }
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	885b      	ldrh	r3, [r3, #2]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d106      	bne.n	8007602 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f929 	bl	8007854 <USBD_CtlSendStatus>
  }
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761a:	3b01      	subs	r3, #1
 800761c:	2b02      	cmp	r3, #2
 800761e:	d80b      	bhi.n	8007638 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	885b      	ldrh	r3, [r3, #2]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10c      	bne.n	8007642 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f90f 	bl	8007854 <USBD_CtlSendStatus>
      }
      break;
 8007636:	e004      	b.n	8007642 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f842 	bl	80076c4 <USBD_CtlError>
      break;
 8007640:	e000      	b.n	8007644 <USBD_ClrFeature+0x3a>
      break;
 8007642:	bf00      	nop
  }
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785a      	ldrb	r2, [r3, #1]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	3302      	adds	r3, #2
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b29a      	uxth	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3303      	adds	r3, #3
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b29b      	uxth	r3, r3
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	b29b      	uxth	r3, r3
 800767a:	4413      	add	r3, r2
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	3304      	adds	r3, #4
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	b29a      	uxth	r2, r3
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	3305      	adds	r3, #5
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	b29b      	uxth	r3, r3
 8007696:	4413      	add	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	3306      	adds	r3, #6
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3307      	adds	r3, #7
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	80da      	strh	r2, [r3, #6]

}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80076ce:	2180      	movs	r1, #128	; 0x80
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f002 faf3 	bl	8009cbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80076d6:	2100      	movs	r1, #0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f002 faef 	bl	8009cbc <USBD_LL_StallEP>
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d032      	beq.n	8007762 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f834 	bl	800776a <USBD_GetLen>
 8007702:	4603      	mov	r3, r0
 8007704:	3301      	adds	r3, #1
 8007706:	b29b      	uxth	r3, r3
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	75fa      	strb	r2, [r7, #23]
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4413      	add	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	75fa      	strb	r2, [r7, #23]
 8007728:	461a      	mov	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	2203      	movs	r2, #3
 8007730:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007732:	e012      	b.n	800775a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	60fa      	str	r2, [r7, #12]
 800773a:	7dfa      	ldrb	r2, [r7, #23]
 800773c:	1c51      	adds	r1, r2, #1
 800773e:	75f9      	strb	r1, [r7, #23]
 8007740:	4611      	mov	r1, r2
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	440a      	add	r2, r1
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	75fa      	strb	r2, [r7, #23]
 8007750:	461a      	mov	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e8      	bne.n	8007734 <USBD_GetString+0x4e>
    }
  }
}
 8007762:	bf00      	nop
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007776:	e005      	b.n	8007784 <USBD_GetLen+0x1a>
  {
    len++;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	3301      	adds	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3301      	adds	r3, #1
 8007782:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f5      	bne.n	8007778 <USBD_GetLen+0xe>
  }

  return len;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	2100      	movs	r1, #0
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f002 fafd 	bl	8009dc0 <USBD_LL_Transmit>

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	2100      	movs	r1, #0
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f002 faeb 	bl	8009dc0 <USBD_LL_Transmit>

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2203      	movs	r2, #3
 8007806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	2100      	movs	r1, #0
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f002 faf0 	bl	8009e06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	2100      	movs	r1, #0
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f002 fade 	bl	8009e06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2204      	movs	r2, #4
 8007860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007864:	2300      	movs	r3, #0
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f002 faa8 	bl	8009dc0 <USBD_LL_Transmit>

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2205      	movs	r2, #5
 8007886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f002 fab8 	bl	8009e06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_TIM_PeriodElapsedCallback>:
GNRMC gps;
char buffer[10];
char temp_[20];
char time[8];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	  {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	      if (__HAL_TIM_GET_IT_SOURCE(&htim1,TIM_IT_UPDATE)) {
 80078a8:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d179      	bne.n	80079aa <HAL_TIM_PeriodElapsedCallback+0x10a>
	    	  LCD_clrScr();
 80078b6:	f001 fd81 	bl	80093bc <LCD_clrScr>
	    	  LCD_print("Time:", 0, 0);
 80078ba:	2200      	movs	r2, #0
 80078bc:	2100      	movs	r1, #0
 80078be:	483e      	ldr	r0, [pc, #248]	; (80079b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80078c0:	f001 fd5e 	bl	8009380 <LCD_print>
	    	  LCD_print(time, 30, 0);
 80078c4:	2200      	movs	r2, #0
 80078c6:	211e      	movs	r1, #30
 80078c8:	483c      	ldr	r0, [pc, #240]	; (80079bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80078ca:	f001 fd59 	bl	8009380 <LCD_print>

	    	  LCD_print("Lat:", 0, 1);
 80078ce:	2201      	movs	r2, #1
 80078d0:	2100      	movs	r1, #0
 80078d2:	483b      	ldr	r0, [pc, #236]	; (80079c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80078d4:	f001 fd54 	bl	8009380 <LCD_print>
	    	  itoa(gps.Lat_Deg , buffer, 10);
 80078d8:	4b3a      	ldr	r3, [pc, #232]	; (80079c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80078da:	79db      	ldrb	r3, [r3, #7]
 80078dc:	220a      	movs	r2, #10
 80078de:	493a      	ldr	r1, [pc, #232]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 fc8d 	bl	800a200 <itoa>
	    	  LCD_print(buffer, 20, 1);
 80078e6:	2201      	movs	r2, #1
 80078e8:	2114      	movs	r1, #20
 80078ea:	4837      	ldr	r0, [pc, #220]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80078ec:	f001 fd48 	bl	8009380 <LCD_print>
	    	  LCD_print(":", 35, 1);
 80078f0:	2201      	movs	r2, #1
 80078f2:	2123      	movs	r1, #35	; 0x23
 80078f4:	4835      	ldr	r0, [pc, #212]	; (80079cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80078f6:	f001 fd43 	bl	8009380 <LCD_print>
	    	  ftoa(gps.Lat_Minute , buffer, 5);
 80078fa:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7f8 fd92 	bl	8000428 <__aeabi_f2d>
 8007904:	2305      	movs	r3, #5
 8007906:	4a30      	ldr	r2, [pc, #192]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007908:	f000 fcba 	bl	8008280 <ftoa>
	    	  LCD_print(buffer, 36, 1);
 800790c:	2201      	movs	r2, #1
 800790e:	2124      	movs	r1, #36	; 0x24
 8007910:	482d      	ldr	r0, [pc, #180]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007912:	f001 fd35 	bl	8009380 <LCD_print>

	    	  LCD_print("Lon:", 0, 2);
 8007916:	2202      	movs	r2, #2
 8007918:	2100      	movs	r1, #0
 800791a:	482d      	ldr	r0, [pc, #180]	; (80079d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800791c:	f001 fd30 	bl	8009380 <LCD_print>
	    	  itoa(gps.Lon_Deg , buffer, 10);
 8007920:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007922:	7b5b      	ldrb	r3, [r3, #13]
 8007924:	220a      	movs	r2, #10
 8007926:	4928      	ldr	r1, [pc, #160]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007928:	4618      	mov	r0, r3
 800792a:	f002 fc69 	bl	800a200 <itoa>
	    	  LCD_print(buffer, 20, 2);
 800792e:	2202      	movs	r2, #2
 8007930:	2114      	movs	r1, #20
 8007932:	4825      	ldr	r0, [pc, #148]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007934:	f001 fd24 	bl	8009380 <LCD_print>
	    	  LCD_print(":", 38, 2);
 8007938:	2202      	movs	r2, #2
 800793a:	2126      	movs	r1, #38	; 0x26
 800793c:	4823      	ldr	r0, [pc, #140]	; (80079cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800793e:	f001 fd1f 	bl	8009380 <LCD_print>
	    	  ftoa(gps.Lon_Minute , buffer, 5);
 8007942:	4b20      	ldr	r3, [pc, #128]	; (80079c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	4618      	mov	r0, r3
 8007948:	f7f8 fd6e 	bl	8000428 <__aeabi_f2d>
 800794c:	2305      	movs	r3, #5
 800794e:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007950:	f000 fc96 	bl	8008280 <ftoa>
	    	  LCD_print(buffer, 40, 2);
 8007954:	2202      	movs	r2, #2
 8007956:	2128      	movs	r1, #40	; 0x28
 8007958:	481b      	ldr	r0, [pc, #108]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800795a:	f001 fd11 	bl	8009380 <LCD_print>

	    	  LCD_print("Speed:", 0, 3);
 800795e:	2203      	movs	r2, #3
 8007960:	2100      	movs	r1, #0
 8007962:	481c      	ldr	r0, [pc, #112]	; (80079d4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8007964:	f001 fd0c 	bl	8009380 <LCD_print>
	    	  ftoa(gps.Speed , buffer, 5);
 8007968:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	4618      	mov	r0, r3
 800796e:	f7f8 fd5b 	bl	8000428 <__aeabi_f2d>
 8007972:	2305      	movs	r3, #5
 8007974:	4a14      	ldr	r2, [pc, #80]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007976:	f000 fc83 	bl	8008280 <ftoa>
	    	  LCD_print(buffer, 36, 3);
 800797a:	2203      	movs	r2, #3
 800797c:	2124      	movs	r1, #36	; 0x24
 800797e:	4812      	ldr	r0, [pc, #72]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007980:	f001 fcfe 	bl	8009380 <LCD_print>
	          //LCD_print(location, 0, 0);
	          ftoa(yaw , buffer, 2);
 8007984:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4618      	mov	r0, r3
 800798a:	f7f8 fd4d 	bl	8000428 <__aeabi_f2d>
 800798e:	2302      	movs	r3, #2
 8007990:	4a0d      	ldr	r2, [pc, #52]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007992:	f000 fc75 	bl	8008280 <ftoa>
	          LCD_print("Heading:", 0, 5);
 8007996:	2205      	movs	r2, #5
 8007998:	2100      	movs	r1, #0
 800799a:	4810      	ldr	r0, [pc, #64]	; (80079dc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800799c:	f001 fcf0 	bl	8009380 <LCD_print>
	          LCD_print(buffer, 48, 5);
 80079a0:	2205      	movs	r2, #5
 80079a2:	2130      	movs	r1, #48	; 0x30
 80079a4:	4808      	ldr	r0, [pc, #32]	; (80079c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80079a6:	f001 fceb 	bl	8009380 <LCD_print>
	      }
	  }
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000a80 	.word	0x20000a80
 80079b8:	0800c800 	.word	0x0800c800
 80079bc:	20000b24 	.word	0x20000b24
 80079c0:	0800c808 	.word	0x0800c808
 80079c4:	20000800 	.word	0x20000800
 80079c8:	20000a68 	.word	0x20000a68
 80079cc:	0800c810 	.word	0x0800c810
 80079d0:	0800c814 	.word	0x0800c814
 80079d4:	0800c81c 	.word	0x0800c81c
 80079d8:	20000bd0 	.word	0x20000bd0
 80079dc:	0800c824 	.word	0x0800c824

080079e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079e4:	f7f9 fb1e 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079e8:	f000 f85c 	bl	8007aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079ec:	f000 f988 	bl	8007d00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80079f0:	f000 f932 	bl	8007c58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80079f4:	f000 f95a 	bl	8007cac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80079f8:	f000 f8ae 	bl	8007b58 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80079fc:	f001 ff2a 	bl	8009854 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8007a00:	f000 f8d8 	bl	8007bb4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8007a04:	2201      	movs	r2, #1
 8007a06:	4920      	ldr	r1, [pc, #128]	; (8007a88 <main+0xa8>)
 8007a08:	4820      	ldr	r0, [pc, #128]	; (8007a8c <main+0xac>)
 8007a0a:	f7fc ff1d 	bl	8004848 <HAL_UART_Receive_IT>
 //HAL_UART_Receive_IT(&huart2, Rx_data1,1);

LCD_setRST(GPIOB, GPIO_PIN_10);
 8007a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a12:	481f      	ldr	r0, [pc, #124]	; (8007a90 <main+0xb0>)
 8007a14:	f001 fb4a 	bl	80090ac <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_1);
 8007a18:	2102      	movs	r1, #2
 8007a1a:	481d      	ldr	r0, [pc, #116]	; (8007a90 <main+0xb0>)
 8007a1c:	f001 fb5a 	bl	80090d4 <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_0);
 8007a20:	2101      	movs	r1, #1
 8007a22:	481b      	ldr	r0, [pc, #108]	; (8007a90 <main+0xb0>)
 8007a24:	f001 fb6a 	bl	80090fc <LCD_setDC>
  LCD_setDIN(GPIOA, GPIO_PIN_7);
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	481a      	ldr	r0, [pc, #104]	; (8007a94 <main+0xb4>)
 8007a2c:	f001 fb7a 	bl	8009124 <LCD_setDIN>
  LCD_setCLK(GPIOA, GPIO_PIN_5);
 8007a30:	2120      	movs	r1, #32
 8007a32:	4818      	ldr	r0, [pc, #96]	; (8007a94 <main+0xb4>)
 8007a34:	f001 fb8a 	bl	800914c <LCD_setCLK>
  LCD_init();
 8007a38:	f001 fc1e 	bl	8009278 <LCD_init>
  //LCD_clrScr();
  HAL_Delay(1000);
 8007a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a40:	f7f9 fb52 	bl	80010e8 <HAL_Delay>

  LCD_invert(0);
 8007a44:	2000      	movs	r0, #0
 8007a46:	f001 fc47 	bl	80092d8 <LCD_invert>
  //LCD_putChar('a');
  LCD_print("GPS", 0, 4);
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4812      	ldr	r0, [pc, #72]	; (8007a98 <main+0xb8>)
 8007a50:	f001 fc96 	bl	8009380 <LCD_print>
  HAL_Delay(1000);
 8007a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a58:	f7f9 fb46 	bl	80010e8 <HAL_Delay>
  LCD_clrScr();
 8007a5c:	f001 fcae 	bl	80093bc <LCD_clrScr>
  LCD_goXY(0, 0);
 8007a60:	2100      	movs	r1, #0
 8007a62:	2000      	movs	r0, #0
 8007a64:	f001 fcec 	bl	8009440 <LCD_goXY>
  LCD_printBuffer(mari);
 8007a68:	480c      	ldr	r0, [pc, #48]	; (8007a9c <main+0xbc>)
 8007a6a:	f001 fcc3 	bl	80093f4 <LCD_printBuffer>
  HAL_Delay(1000);
 8007a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a72:	f7f9 fb39 	bl	80010e8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007a76:	480a      	ldr	r0, [pc, #40]	; (8007aa0 <main+0xc0>)
 8007a78:	f7fc faab 	bl	8003fd2 <HAL_TIM_Base_Start_IT>
  init_MPU();
 8007a7c:	f000 fd34 	bl	80084e8 <init_MPU>
    /* USER CODE BEGIN 3 */
	  //LCD_clrScr();
//	  LCD_goXY(0, 0);
//	  LCD_putChar('a');

      process_MPU();
 8007a80:	f000 ff26 	bl	80088d0 <process_MPU>
 8007a84:	e7fc      	b.n	8007a80 <main+0xa0>
 8007a86:	bf00      	nop
 8007a88:	200008a4 	.word	0x200008a4
 8007a8c:	20000a14 	.word	0x20000a14
 8007a90:	40010c00 	.word	0x40010c00
 8007a94:	40010800 	.word	0x40010800
 8007a98:	0800c830 	.word	0x0800c830
 8007a9c:	20000118 	.word	0x20000118
 8007aa0:	20000a80 	.word	0x20000a80

08007aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b094      	sub	sp, #80	; 0x50
 8007aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007aae:	2228      	movs	r2, #40	; 0x28
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f002 fba6 	bl	800a204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007af0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fb fd6c 	bl	80035d8 <HAL_RCC_OscConfig>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8007b06:	f000 fbb3 	bl	8008270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b0a:	230f      	movs	r3, #15
 8007b0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	2102      	movs	r1, #2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fb ffd6 	bl	8003ad8 <HAL_RCC_ClockConfig>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8007b32:	f000 fb9d 	bl	8008270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007b36:	2310      	movs	r3, #16
 8007b38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fc f965 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8007b4c:	f000 fb90 	bl	8008270 <Error_Handler>
  }
}
 8007b50:	bf00      	nop
 8007b52:	3750      	adds	r7, #80	; 0x50
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b5c:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b5e:	4a13      	ldr	r2, [pc, #76]	; (8007bac <MX_I2C1_Init+0x54>)
 8007b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007b62:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b64:	4a12      	ldr	r2, [pc, #72]	; (8007bb0 <MX_I2C1_Init+0x58>)
 8007b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007b68:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007b6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b88:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b8e:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b94:	4804      	ldr	r0, [pc, #16]	; (8007ba8 <MX_I2C1_Init+0x50>)
 8007b96:	f7f9 fdbf 	bl	8001718 <HAL_I2C_Init>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007ba0:	f000 fb66 	bl	8008270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007ba4:	bf00      	nop
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000840 	.word	0x20000840
 8007bac:	40005400 	.word	0x40005400
 8007bb0:	00061a80 	.word	0x00061a80

08007bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007bba:	f107 0308 	add.w	r3, r7, #8
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bc8:	463b      	mov	r3, r7
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007bd0:	4b1f      	ldr	r3, [pc, #124]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007bd2:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <MX_TIM1_Init+0xa0>)
 8007bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007bd8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007bdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bde:	4b1c      	ldr	r3, [pc, #112]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007be6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007bf2:	4b17      	ldr	r3, [pc, #92]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007bfe:	4814      	ldr	r0, [pc, #80]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007c00:	f7fc f9bc 	bl	8003f7c <HAL_TIM_Base_Init>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007c0a:	f000 fb31 	bl	8008270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007c14:	f107 0308 	add.w	r3, r7, #8
 8007c18:	4619      	mov	r1, r3
 8007c1a:	480d      	ldr	r0, [pc, #52]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007c1c:	f7fc fb04 	bl	8004228 <HAL_TIM_ConfigClockSource>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007c26:	f000 fb23 	bl	8008270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007c32:	463b      	mov	r3, r7
 8007c34:	4619      	mov	r1, r3
 8007c36:	4806      	ldr	r0, [pc, #24]	; (8007c50 <MX_TIM1_Init+0x9c>)
 8007c38:	f7fc fcca 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007c42:	f000 fb15 	bl	8008270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007c46:	bf00      	nop
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000a80 	.word	0x20000a80
 8007c54:	40012c00 	.word	0x40012c00

08007c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c5c:	4b11      	ldr	r3, [pc, #68]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c5e:	4a12      	ldr	r2, [pc, #72]	; (8007ca8 <MX_USART1_UART_Init+0x50>)
 8007c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c70:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c7c:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c7e:	220c      	movs	r2, #12
 8007c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007c8e:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <MX_USART1_UART_Init+0x4c>)
 8007c90:	f7fc fcf4 	bl	800467c <HAL_UART_Init>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007c9a:	f000 fae9 	bl	8008270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000a14 	.word	0x20000a14
 8007ca8:	40013800 	.word	0x40013800

08007cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007cb0:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cb2:	4a12      	ldr	r2, [pc, #72]	; (8007cfc <MX_USART2_UART_Init+0x50>)
 8007cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cd2:	220c      	movs	r2, #12
 8007cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007ce2:	4805      	ldr	r0, [pc, #20]	; (8007cf8 <MX_USART2_UART_Init+0x4c>)
 8007ce4:	f7fc fcca 	bl	800467c <HAL_UART_Init>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007cee:	f000 fabf 	bl	8008270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007cf2:	bf00      	nop
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000bd8 	.word	0x20000bd8
 8007cfc:	40004400 	.word	0x40004400

08007d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	609a      	str	r2, [r3, #8]
 8007d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d14:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	4a37      	ldr	r2, [pc, #220]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d1a:	f043 0310 	orr.w	r3, r3, #16
 8007d1e:	6193      	str	r3, [r2, #24]
 8007d20:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d2c:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	4a31      	ldr	r2, [pc, #196]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d32:	f043 0320 	orr.w	r3, r3, #32
 8007d36:	6193      	str	r3, [r2, #24]
 8007d38:	4b2f      	ldr	r3, [pc, #188]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	60bb      	str	r3, [r7, #8]
 8007d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d44:	4b2c      	ldr	r3, [pc, #176]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	4a2b      	ldr	r2, [pc, #172]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d4a:	f043 0304 	orr.w	r3, r3, #4
 8007d4e:	6193      	str	r3, [r2, #24]
 8007d50:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	607b      	str	r3, [r7, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d5c:	4b26      	ldr	r3, [pc, #152]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	4a25      	ldr	r2, [pc, #148]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d62:	f043 0308 	orr.w	r3, r3, #8
 8007d66:	6193      	str	r3, [r2, #24]
 8007d68:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <MX_GPIO_Init+0xf8>)
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007d74:	2200      	movs	r2, #0
 8007d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d7a:	4820      	ldr	r0, [pc, #128]	; (8007dfc <MX_GPIO_Init+0xfc>)
 8007d7c:	f7f9 fcb4 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8007d80:	2200      	movs	r2, #0
 8007d82:	21a0      	movs	r1, #160	; 0xa0
 8007d84:	481e      	ldr	r0, [pc, #120]	; (8007e00 <MX_GPIO_Init+0x100>)
 8007d86:	f7f9 fcaf 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f240 4103 	movw	r1, #1027	; 0x403
 8007d90:	481c      	ldr	r0, [pc, #112]	; (8007e04 <MX_GPIO_Init+0x104>)
 8007d92:	f7f9 fca9 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007da4:	2302      	movs	r3, #2
 8007da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	4619      	mov	r1, r3
 8007dae:	4813      	ldr	r0, [pc, #76]	; (8007dfc <MX_GPIO_Init+0xfc>)
 8007db0:	f7f9 fb40 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007db4:	23a0      	movs	r3, #160	; 0xa0
 8007db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	4619      	mov	r1, r3
 8007dca:	480d      	ldr	r0, [pc, #52]	; (8007e00 <MX_GPIO_Init+0x100>)
 8007dcc:	f7f9 fb32 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8007dd0:	f240 4303 	movw	r3, #1027	; 0x403
 8007dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dde:	2302      	movs	r3, #2
 8007de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007de2:	f107 0310 	add.w	r3, r7, #16
 8007de6:	4619      	mov	r1, r3
 8007de8:	4806      	ldr	r0, [pc, #24]	; (8007e04 <MX_GPIO_Init+0x104>)
 8007dea:	f7f9 fb23 	bl	8001434 <HAL_GPIO_Init>

}
 8007dee:	bf00      	nop
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	40011000 	.word	0x40011000
 8007e00:	40010800 	.word	0x40010800
 8007e04:	40010c00 	.word	0x40010c00

08007e08 <substring>:

/* USER CODE BEGIN 4 */
void substring(char s[], char sub[], int p, int l) {
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
   int c = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]

   while (c < l) {
 8007e1a:	e00d      	b.n	8007e38 <substring+0x30>
      sub[c] = s[p+c-1];
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	4413      	add	r3, r2
 8007e22:	3b01      	subs	r3, #1
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	441a      	add	r2, r3
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	440b      	add	r3, r1
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	701a      	strb	r2, [r3, #0]
      c++;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	3301      	adds	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
   while (c < l) {
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	dbed      	blt.n	8007e1c <substring+0x14>
   }
   sub[c] = '\0';
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	4413      	add	r3, r2
 8007e46:	2200      	movs	r2, #0
 8007e48:	701a      	strb	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr
 8007e54:	0000      	movs	r0, r0
	...

08007e58 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b08d      	sub	sp, #52	; 0x34
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART1)  //current UART
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a9d      	ldr	r2, [pc, #628]	; (80080dc <HAL_UART_RxCpltCallback+0x284>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	f040 8193 	bne.w	8008192 <HAL_UART_RxCpltCallback+0x33a>
        {
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8007e6c:	4b9c      	ldr	r3, [pc, #624]	; (80080e0 <HAL_UART_RxCpltCallback+0x288>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d111      	bne.n	8007e98 <HAL_UART_RxCpltCallback+0x40>
 8007e74:	2300      	movs	r3, #0
 8007e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007e7a:	e009      	b.n	8007e90 <HAL_UART_RxCpltCallback+0x38>
 8007e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e80:	4a98      	ldr	r2, [pc, #608]	; (80080e4 <HAL_UART_RxCpltCallback+0x28c>)
 8007e82:	2100      	movs	r1, #0
 8007e84:	54d1      	strb	r1, [r2, r3]
 8007e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007e90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e94:	2b63      	cmp	r3, #99	; 0x63
 8007e96:	d9f1      	bls.n	8007e7c <HAL_UART_RxCpltCallback+0x24>

        if (Rx_data[0]!=10) //if received data different from ascii 13 (enter)
 8007e98:	4b93      	ldr	r3, [pc, #588]	; (80080e8 <HAL_UART_RxCpltCallback+0x290>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b0a      	cmp	r3, #10
 8007e9e:	d00b      	beq.n	8007eb8 <HAL_UART_RxCpltCallback+0x60>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8007ea0:	4b8f      	ldr	r3, [pc, #572]	; (80080e0 <HAL_UART_RxCpltCallback+0x288>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	b2d1      	uxtb	r1, r2
 8007ea8:	4a8d      	ldr	r2, [pc, #564]	; (80080e0 <HAL_UART_RxCpltCallback+0x288>)
 8007eaa:	7011      	strb	r1, [r2, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	4b8e      	ldr	r3, [pc, #568]	; (80080e8 <HAL_UART_RxCpltCallback+0x290>)
 8007eb0:	7819      	ldrb	r1, [r3, #0]
 8007eb2:	4b8c      	ldr	r3, [pc, #560]	; (80080e4 <HAL_UART_RxCpltCallback+0x28c>)
 8007eb4:	5499      	strb	r1, [r3, r2]
 8007eb6:	e167      	b.n	8008188 <HAL_UART_RxCpltCallback+0x330>
            }
        else            //if received data = 13
            {
        	//Rx_Buffer[Rx_indx++] = 13;
            Rx_indx=0;
 8007eb8:	4b89      	ldr	r3, [pc, #548]	; (80080e0 <HAL_UART_RxCpltCallback+0x288>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
            char * t = "\n";
 8007ebe:	4b8b      	ldr	r3, [pc, #556]	; (80080ec <HAL_UART_RxCpltCallback+0x294>)
 8007ec0:	623b      	str	r3, [r7, #32]
            Transfer_cplt=1;//transfer complete, data is ready to read
 8007ec2:	4b8b      	ldr	r3, [pc, #556]	; (80080f0 <HAL_UART_RxCpltCallback+0x298>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
            if(strstr (Rx_Buffer,"GNRMC")!= NULL ){
 8007ec8:	498a      	ldr	r1, [pc, #552]	; (80080f4 <HAL_UART_RxCpltCallback+0x29c>)
 8007eca:	4886      	ldr	r0, [pc, #536]	; (80080e4 <HAL_UART_RxCpltCallback+0x28c>)
 8007ecc:	f002 f9b9 	bl	800a242 <strstr>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 8158 	beq.w	8008188 <HAL_UART_RxCpltCallback+0x330>

            char * n = " ";
 8007ed8:	4b87      	ldr	r3, [pc, #540]	; (80080f8 <HAL_UART_RxCpltCallback+0x2a0>)
 8007eda:	61fb      	str	r3, [r7, #28]
            //HAL_UART_Transmit(&huart2, (uint8_t *) Rx_Buffer, sizeof(Rx_Buffer),1000);
            strcpy(location,Rx_Buffer);
 8007edc:	4981      	ldr	r1, [pc, #516]	; (80080e4 <HAL_UART_RxCpltCallback+0x28c>)
 8007ede:	4887      	ldr	r0, [pc, #540]	; (80080fc <HAL_UART_RxCpltCallback+0x2a4>)
 8007ee0:	f002 f9a7 	bl	800a232 <strcpy>
            pch = strtok (Rx_Buffer,",");
 8007ee4:	4986      	ldr	r1, [pc, #536]	; (8008100 <HAL_UART_RxCpltCallback+0x2a8>)
 8007ee6:	487f      	ldr	r0, [pc, #508]	; (80080e4 <HAL_UART_RxCpltCallback+0x28c>)
 8007ee8:	f002 fff8 	bl	800aedc <strtok>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4b85      	ldr	r3, [pc, #532]	; (8008104 <HAL_UART_RxCpltCallback+0x2ac>)
 8007ef0:	601a      	str	r2, [r3, #0]

            int i = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28

            while (pch != NULL)
 8007ef6:	e13b      	b.n	8008170 <HAL_UART_RxCpltCallback+0x318>
              {
            	i++;
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	3301      	adds	r3, #1
 8007efc:	62bb      	str	r3, [r7, #40]	; 0x28
            	char tem[2];
            	char deg[8];
            	strcpy(temp_, pch);
 8007efe:	4b81      	ldr	r3, [pc, #516]	; (8008104 <HAL_UART_RxCpltCallback+0x2ac>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4619      	mov	r1, r3
 8007f04:	4880      	ldr	r0, [pc, #512]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8007f06:	f002 f994 	bl	800a232 <strcpy>
            	switch(i){
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	3b02      	subs	r3, #2
 8007f0e:	2b06      	cmp	r3, #6
 8007f10:	f200 8115 	bhi.w	800813e <HAL_UART_RxCpltCallback+0x2e6>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <HAL_UART_RxCpltCallback+0xc4>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	08008021 	.word	0x08008021
 8007f24:	0800802b 	.word	0x0800802b
 8007f28:	08008079 	.word	0x08008079
 8007f2c:	08008083 	.word	0x08008083
 8007f30:	080080d1 	.word	0x080080d1
 8007f34:	08008119 	.word	0x08008119
            	       case 2:
                               for(int j= 0; j<8;j++){
 8007f38:	2300      	movs	r3, #0
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3c:	e007      	b.n	8007f4e <HAL_UART_RxCpltCallback+0xf6>
                            	   time[j] = NULL;
 8007f3e:	4a73      	ldr	r2, [pc, #460]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	4413      	add	r3, r2
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
                               for(int j= 0; j<8;j++){
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	2b07      	cmp	r3, #7
 8007f52:	ddf4      	ble.n	8007f3e <HAL_UART_RxCpltCallback+0xe6>
                               }
            	    	       substring(temp_, tem, 1, 2);
 8007f54:	f107 0114 	add.w	r1, r7, #20
 8007f58:	2302      	movs	r3, #2
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	486a      	ldr	r0, [pc, #424]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8007f5e:	f7ff ff53 	bl	8007e08 <substring>
            	               gps.UTC_Hour = atoi(tem) + 7;
 8007f62:	f107 0314 	add.w	r3, r7, #20
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 f903 	bl	800a172 <atoi>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	3307      	adds	r3, #7
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	4b66      	ldr	r3, [pc, #408]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 8007f76:	701a      	strb	r2, [r3, #0]
            	               itoa(gps.UTC_Hour,tem,10);
 8007f78:	4b65      	ldr	r3, [pc, #404]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	220a      	movs	r2, #10
 8007f84:	4619      	mov	r1, r3
 8007f86:	f002 f93b 	bl	800a200 <itoa>
            	               strcat(time, tem);
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	4619      	mov	r1, r3
 8007f90:	485e      	ldr	r0, [pc, #376]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007f92:	f002 f93f 	bl	800a214 <strcat>
            	               strcat(time, ":");
 8007f96:	485d      	ldr	r0, [pc, #372]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007f98:	f7f8 f8da 	bl	8000150 <strlen>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4b5a      	ldr	r3, [pc, #360]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	495b      	ldr	r1, [pc, #364]	; (8008114 <HAL_UART_RxCpltCallback+0x2bc>)
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	8013      	strh	r3, [r2, #0]
            	               substring(temp_, tem, 3, 2);
 8007fae:	f107 0114 	add.w	r1, r7, #20
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	4854      	ldr	r0, [pc, #336]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8007fb8:	f7ff ff26 	bl	8007e08 <substring>
            	               strcat(time, tem);
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4852      	ldr	r0, [pc, #328]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007fc4:	f002 f926 	bl	800a214 <strcat>
            	               strcat(time, ":");
 8007fc8:	4850      	ldr	r0, [pc, #320]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007fca:	f7f8 f8c1 	bl	8000150 <strlen>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4b4e      	ldr	r3, [pc, #312]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	494f      	ldr	r1, [pc, #316]	; (8008114 <HAL_UART_RxCpltCallback+0x2bc>)
 8007fd8:	461a      	mov	r2, r3
 8007fda:	460b      	mov	r3, r1
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	8013      	strh	r3, [r2, #0]
            	               gps.UTC_Min = atoi(tem);
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 f8c4 	bl	800a172 <atoi>
 8007fea:	4603      	mov	r3, r0
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	4b48      	ldr	r3, [pc, #288]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 8007ff0:	705a      	strb	r2, [r3, #1]
            	               substring(temp_, tem, 5, 2);
 8007ff2:	f107 0114 	add.w	r1, r7, #20
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	4843      	ldr	r0, [pc, #268]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8007ffc:	f7ff ff04 	bl	8007e08 <substring>
            	               strcat(time, tem);
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	4619      	mov	r1, r3
 8008006:	4841      	ldr	r0, [pc, #260]	; (800810c <HAL_UART_RxCpltCallback+0x2b4>)
 8008008:	f002 f904 	bl	800a214 <strcat>
            	               gps.UTC_Sec = atoi(tem);
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	4618      	mov	r0, r3
 8008012:	f002 f8ae 	bl	800a172 <atoi>
 8008016:	4603      	mov	r3, r0
 8008018:	b2da      	uxtb	r2, r3
 800801a:	4b3d      	ldr	r3, [pc, #244]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 800801c:	709a      	strb	r2, [r3, #2]
            	       break;
 800801e:	e08e      	b.n	800813e <HAL_UART_RxCpltCallback+0x2e6>
            	       case 3:
            	    	       gps.Pos = temp_[0];
 8008020:	4b39      	ldr	r3, [pc, #228]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	4b3a      	ldr	r3, [pc, #232]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 8008026:	719a      	strb	r2, [r3, #6]
            	       break;
 8008028:	e089      	b.n	800813e <HAL_UART_RxCpltCallback+0x2e6>
            	       case 4:
            	    	       substring(temp_, tem, 1, 2);
 800802a:	f107 0114 	add.w	r1, r7, #20
 800802e:	2302      	movs	r3, #2
 8008030:	2201      	movs	r2, #1
 8008032:	4835      	ldr	r0, [pc, #212]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8008034:	f7ff fee8 	bl	8007e08 <substring>
            	               gps.Lat_Deg = atoi(tem);
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	4618      	mov	r0, r3
 800803e:	f002 f898 	bl	800a172 <atoi>
 8008042:	4603      	mov	r3, r0
 8008044:	b2da      	uxtb	r2, r3
 8008046:	4b32      	ldr	r3, [pc, #200]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 8008048:	71da      	strb	r2, [r3, #7]
            	               substring(temp_, deg, 3, 8);
 800804a:	f107 010c 	add.w	r1, r7, #12
 800804e:	2308      	movs	r3, #8
 8008050:	2203      	movs	r2, #3
 8008052:	482d      	ldr	r0, [pc, #180]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 8008054:	f7ff fed8 	bl	8007e08 <substring>
            	               gps.Lat_Minute = strtod(deg,NULL);
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f002 ff2a 	bl	800aeb8 <strtod>
 8008064:	4603      	mov	r3, r0
 8008066:	460c      	mov	r4, r1
 8008068:	4618      	mov	r0, r3
 800806a:	4621      	mov	r1, r4
 800806c:	f7f8 fd2c 	bl	8000ac8 <__aeabi_d2f>
 8008070:	4602      	mov	r2, r0
 8008072:	4b27      	ldr	r3, [pc, #156]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 8008074:	609a      	str	r2, [r3, #8]

            	       break;
 8008076:	e062      	b.n	800813e <HAL_UART_RxCpltCallback+0x2e6>
            	       case 5:
            	               gps.Lat_Dir = temp_[0];
 8008078:	4b23      	ldr	r3, [pc, #140]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 800807a:	781a      	ldrb	r2, [r3, #0]
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 800807e:	731a      	strb	r2, [r3, #12]
            	               break;
 8008080:	e05d      	b.n	800813e <HAL_UART_RxCpltCallback+0x2e6>
            	       case 6:
            	               substring(temp_, tem, 1, 3);
 8008082:	f107 0114 	add.w	r1, r7, #20
 8008086:	2303      	movs	r3, #3
 8008088:	2201      	movs	r2, #1
 800808a:	481f      	ldr	r0, [pc, #124]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 800808c:	f7ff febc 	bl	8007e08 <substring>
            	               gps.Lon_Deg = atoi(tem);
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	4618      	mov	r0, r3
 8008096:	f002 f86c 	bl	800a172 <atoi>
 800809a:	4603      	mov	r3, r0
 800809c:	b2da      	uxtb	r2, r3
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 80080a0:	735a      	strb	r2, [r3, #13]
            	               substring(temp_, deg, 4, 8);
 80080a2:	f107 010c 	add.w	r1, r7, #12
 80080a6:	2308      	movs	r3, #8
 80080a8:	2204      	movs	r2, #4
 80080aa:	4817      	ldr	r0, [pc, #92]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 80080ac:	f7ff feac 	bl	8007e08 <substring>
            	               gps.Lon_Minute = strtod(deg,NULL);
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	2100      	movs	r1, #0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 fefe 	bl	800aeb8 <strtod>
 80080bc:	4603      	mov	r3, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	4618      	mov	r0, r3
 80080c2:	4621      	mov	r1, r4
 80080c4:	f7f8 fd00 	bl	8000ac8 <__aeabi_d2f>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b11      	ldr	r3, [pc, #68]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 80080cc:	611a      	str	r2, [r3, #16]

            	              break;
 80080ce:	e036      	b.n	800813e <HAL_UART_RxCpltCallback+0x2e6>
            	       case 7:
            	                gps.Lon_Dir = temp_[0];
 80080d0:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <HAL_UART_RxCpltCallback+0x2b0>)
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <HAL_UART_RxCpltCallback+0x2b8>)
 80080d6:	751a      	strb	r2, [r3, #20]
            	              break;
 80080d8:	e031      	b.n	800813e <HAL_UART_RxCpltCallback+0x2e6>
 80080da:	bf00      	nop
 80080dc:	40013800 	.word	0x40013800
 80080e0:	20000839 	.word	0x20000839
 80080e4:	20000ac0 	.word	0x20000ac0
 80080e8:	200008a4 	.word	0x200008a4
 80080ec:	0800c834 	.word	0x0800c834
 80080f0:	20000838 	.word	0x20000838
 80080f4:	0800c838 	.word	0x0800c838
 80080f8:	0800c840 	.word	0x0800c840
 80080fc:	2000079c 	.word	0x2000079c
 8008100:	0800c844 	.word	0x0800c844
 8008104:	20000a74 	.word	0x20000a74
 8008108:	20000a54 	.word	0x20000a54
 800810c:	20000b24 	.word	0x20000b24
 8008110:	20000800 	.word	0x20000800
 8008114:	0800c810 	.word	0x0800c810
            	       case 8:
            	                gps.Speed = strtod(temp_,NULL) * 0.514444856;
 8008118:	2100      	movs	r1, #0
 800811a:	4847      	ldr	r0, [pc, #284]	; (8008238 <HAL_UART_RxCpltCallback+0x3e0>)
 800811c:	f002 fecc 	bl	800aeb8 <strtod>
 8008120:	a343      	add	r3, pc, #268	; (adr r3, 8008230 <HAL_UART_RxCpltCallback+0x3d8>)
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f7f8 f9d7 	bl	80004d8 <__aeabi_dmul>
 800812a:	4603      	mov	r3, r0
 800812c:	460c      	mov	r4, r1
 800812e:	4618      	mov	r0, r3
 8008130:	4621      	mov	r1, r4
 8008132:	f7f8 fcc9 	bl	8000ac8 <__aeabi_d2f>
 8008136:	4602      	mov	r2, r0
 8008138:	4b40      	ldr	r3, [pc, #256]	; (800823c <HAL_UART_RxCpltCallback+0x3e4>)
 800813a:	619a      	str	r2, [r3, #24]
            	              break;
 800813c:	bf00      	nop

            	}
            	//CDC_Transmit_FS(temp, strlen(temp));
            	HAL_UART_Transmit(&huart2,&temp_, strlen(temp_),1000);
 800813e:	483e      	ldr	r0, [pc, #248]	; (8008238 <HAL_UART_RxCpltCallback+0x3e0>)
 8008140:	f7f8 f806 	bl	8000150 <strlen>
 8008144:	4603      	mov	r3, r0
 8008146:	b29a      	uxth	r2, r3
 8008148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800814c:	493a      	ldr	r1, [pc, #232]	; (8008238 <HAL_UART_RxCpltCallback+0x3e0>)
 800814e:	483c      	ldr	r0, [pc, #240]	; (8008240 <HAL_UART_RxCpltCallback+0x3e8>)
 8008150:	f7fc fae1 	bl	8004716 <HAL_UART_Transmit>
            	//CDC_Transmit_FS(n, strlen(n));
            	HAL_UART_Transmit(&huart2, (uint8_t *) n, sizeof(n),1000);
 8008154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008158:	2204      	movs	r2, #4
 800815a:	69f9      	ldr	r1, [r7, #28]
 800815c:	4838      	ldr	r0, [pc, #224]	; (8008240 <HAL_UART_RxCpltCallback+0x3e8>)
 800815e:	f7fc fada 	bl	8004716 <HAL_UART_Transmit>
                pch = strtok (NULL, ",");
 8008162:	4938      	ldr	r1, [pc, #224]	; (8008244 <HAL_UART_RxCpltCallback+0x3ec>)
 8008164:	2000      	movs	r0, #0
 8008166:	f002 feb9 	bl	800aedc <strtok>
 800816a:	4602      	mov	r2, r0
 800816c:	4b36      	ldr	r3, [pc, #216]	; (8008248 <HAL_UART_RxCpltCallback+0x3f0>)
 800816e:	601a      	str	r2, [r3, #0]
            while (pch != NULL)
 8008170:	4b35      	ldr	r3, [pc, #212]	; (8008248 <HAL_UART_RxCpltCallback+0x3f0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f47f aebf 	bne.w	8007ef8 <HAL_UART_RxCpltCallback+0xa0>
//
//            			sscanf(Rx_Buffer,"$GNRMC,%2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%f,%f,%d,%f,%c,*%c\r\n",
//            					gps.UTC_Hour,gps.UTC_Min,gps.UTC_Sec,gps.UTC_MicroSec,gps.Lat,gps.Lat_Dir,
//								gps.Lon,gps.Lon_Dir,gps.Speed,gps.Track,gps.date,gps.mag_v,gps.var_dir,gps.mode_ind
//								);
            HAL_UART_Transmit(&huart2, (uint8_t *) t, sizeof(t),1000);
 800817a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800817e:	2204      	movs	r2, #4
 8008180:	6a39      	ldr	r1, [r7, #32]
 8008182:	482f      	ldr	r0, [pc, #188]	; (8008240 <HAL_UART_RxCpltCallback+0x3e8>)
 8008184:	f7fc fac7 	bl	8004716 <HAL_UART_Transmit>

            }

            }

        HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);   //activate UART receive interrupt every time
 8008188:	2201      	movs	r2, #1
 800818a:	4930      	ldr	r1, [pc, #192]	; (800824c <HAL_UART_RxCpltCallback+0x3f4>)
 800818c:	4830      	ldr	r0, [pc, #192]	; (8008250 <HAL_UART_RxCpltCallback+0x3f8>)
 800818e:	f7fc fb5b 	bl	8004848 <HAL_UART_Receive_IT>
        }
    if (huart->Instance == USART2)  //current UART
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2f      	ldr	r2, [pc, #188]	; (8008254 <HAL_UART_RxCpltCallback+0x3fc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d142      	bne.n	8008222 <HAL_UART_RxCpltCallback+0x3ca>
            {
            if (Rx_indx1==0) {for (i=0;i<100;i++) Rx_Buffer1[i]=0;
 800819c:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <HAL_UART_RxCpltCallback+0x400>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d113      	bne.n	80081cc <HAL_UART_RxCpltCallback+0x374>
 80081a4:	2300      	movs	r3, #0
 80081a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081aa:	e009      	b.n	80081c0 <HAL_UART_RxCpltCallback+0x368>
 80081ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081b0:	4a2a      	ldr	r2, [pc, #168]	; (800825c <HAL_UART_RxCpltCallback+0x404>)
 80081b2:	2100      	movs	r1, #0
 80081b4:	54d1      	strb	r1, [r2, r3]
 80081b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081ba:	3301      	adds	r3, #1
 80081bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081c4:	2b63      	cmp	r3, #99	; 0x63
 80081c6:	d9f1      	bls.n	80081ac <HAL_UART_RxCpltCallback+0x354>
            LCD_clrScr();}   //clear Rx_Buffer before receiving new data
 80081c8:	f001 f8f8 	bl	80093bc <LCD_clrScr>
            if(Rx_data1[0] == '0'){
 80081cc:	4b24      	ldr	r3, [pc, #144]	; (8008260 <HAL_UART_RxCpltCallback+0x408>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b30      	cmp	r3, #48	; 0x30
 80081d2:	d102      	bne.n	80081da <HAL_UART_RxCpltCallback+0x382>
            	start = 1;
 80081d4:	4b23      	ldr	r3, [pc, #140]	; (8008264 <HAL_UART_RxCpltCallback+0x40c>)
 80081d6:	2201      	movs	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]

            }
            if (Rx_indx1 < 100 && start == 1 ) //if received data different from ascii 13 (enter)
 80081da:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <HAL_UART_RxCpltCallback+0x400>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b63      	cmp	r3, #99	; 0x63
 80081e0:	d80f      	bhi.n	8008202 <HAL_UART_RxCpltCallback+0x3aa>
 80081e2:	4b20      	ldr	r3, [pc, #128]	; (8008264 <HAL_UART_RxCpltCallback+0x40c>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10b      	bne.n	8008202 <HAL_UART_RxCpltCallback+0x3aa>
                {
                Rx_Buffer1[Rx_indx1++]=Rx_data1[0];    //add data to Rx_Buffer
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <HAL_UART_RxCpltCallback+0x400>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	b2d1      	uxtb	r1, r2
 80081f2:	4a19      	ldr	r2, [pc, #100]	; (8008258 <HAL_UART_RxCpltCallback+0x400>)
 80081f4:	7011      	strb	r1, [r2, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b19      	ldr	r3, [pc, #100]	; (8008260 <HAL_UART_RxCpltCallback+0x408>)
 80081fa:	7819      	ldrb	r1, [r3, #0]
 80081fc:	4b17      	ldr	r3, [pc, #92]	; (800825c <HAL_UART_RxCpltCallback+0x404>)
 80081fe:	5499      	strb	r1, [r3, r2]
 8008200:	e00a      	b.n	8008218 <HAL_UART_RxCpltCallback+0x3c0>
                }
            else            //if received data = 13
                {
            	//Rx_Buffer[Rx_indx++] = 13;
                Rx_indx1=0;
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <HAL_UART_RxCpltCallback+0x400>)
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]
                start = 0;
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <HAL_UART_RxCpltCallback+0x40c>)
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
                char * t = "\n";
 800820e:	4b16      	ldr	r3, [pc, #88]	; (8008268 <HAL_UART_RxCpltCallback+0x410>)
 8008210:	61bb      	str	r3, [r7, #24]
                Transfer_cplt=1;//transfer complete, data is ready to read
 8008212:	4b16      	ldr	r3, [pc, #88]	; (800826c <HAL_UART_RxCpltCallback+0x414>)
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]
          	    //LCD_print(c, 0, 0);
          	  //HAL_Delay(4000);
                }

            HAL_UART_Receive_IT(&huart2, (uint8_t *) Rx_data1, 1);   //activate UART receive interrupt every time
 8008218:	2201      	movs	r2, #1
 800821a:	4911      	ldr	r1, [pc, #68]	; (8008260 <HAL_UART_RxCpltCallback+0x408>)
 800821c:	4808      	ldr	r0, [pc, #32]	; (8008240 <HAL_UART_RxCpltCallback+0x3e8>)
 800821e:	f7fc fb13 	bl	8004848 <HAL_UART_Receive_IT>
            }

}
 8008222:	bf00      	nop
 8008224:	3734      	adds	r7, #52	; 0x34
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w
 8008230:	0f03b199 	.word	0x0f03b199
 8008234:	3fe07655 	.word	0x3fe07655
 8008238:	20000a54 	.word	0x20000a54
 800823c:	20000800 	.word	0x20000800
 8008240:	20000bd8 	.word	0x20000bd8
 8008244:	0800c844 	.word	0x0800c844
 8008248:	20000a74 	.word	0x20000a74
 800824c:	200008a4 	.word	0x200008a4
 8008250:	20000a14 	.word	0x20000a14
 8008254:	40004400 	.word	0x40004400
 8008258:	200009ac 	.word	0x200009ac
 800825c:	20000b2c 	.word	0x20000b2c
 8008260:	2000083c 	.word	0x2000083c
 8008264:	20000c20 	.word	0x20000c20
 8008268:	0800c834 	.word	0x0800c834
 800826c:	20000838 	.word	0x20000838

08008270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008274:	bf00      	nop
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr
 800827c:	0000      	movs	r0, r0
	...

08008280 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 8008280:	b590      	push	{r4, r7, lr}
 8008282:	b08b      	sub	sp, #44	; 0x2c
 8008284:	af00      	add	r7, sp, #0
 8008286:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b0a      	cmp	r3, #10
 800829a:	dd01      	ble.n	80082a0 <ftoa+0x20>
		precision = MAX_PRECISION;
 800829c:	230a      	movs	r3, #10
 800829e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082ac:	f7f8 fb86 	bl	80009bc <__aeabi_dcmplt>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <ftoa+0x4c>
	{
		f = -f;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80082c0:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	627a      	str	r2, [r7, #36]	; 0x24
 80082c8:	222d      	movs	r2, #45	; 0x2d
 80082ca:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	da4f      	bge.n	8008372 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	4b7e      	ldr	r3, [pc, #504]	; (80084d0 <ftoa+0x250>)
 80082d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082dc:	f7f8 fb6e 	bl	80009bc <__aeabi_dcmplt>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <ftoa+0x6c>
 80082e6:	2306      	movs	r3, #6
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	e042      	b.n	8008372 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	4b78      	ldr	r3, [pc, #480]	; (80084d4 <ftoa+0x254>)
 80082f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082f6:	f7f8 fb61 	bl	80009bc <__aeabi_dcmplt>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <ftoa+0x86>
 8008300:	2305      	movs	r3, #5
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	e035      	b.n	8008372 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8008306:	f04f 0200 	mov.w	r2, #0
 800830a:	4b73      	ldr	r3, [pc, #460]	; (80084d8 <ftoa+0x258>)
 800830c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008310:	f7f8 fb54 	bl	80009bc <__aeabi_dcmplt>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <ftoa+0xa0>
 800831a:	2304      	movs	r3, #4
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	e028      	b.n	8008372 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	4b6d      	ldr	r3, [pc, #436]	; (80084dc <ftoa+0x25c>)
 8008326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800832a:	f7f8 fb47 	bl	80009bc <__aeabi_dcmplt>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <ftoa+0xba>
 8008334:	2303      	movs	r3, #3
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	e01b      	b.n	8008372 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800833a:	a361      	add	r3, pc, #388	; (adr r3, 80084c0 <ftoa+0x240>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008344:	f7f8 fb3a 	bl	80009bc <__aeabi_dcmplt>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <ftoa+0xd4>
 800834e:	2302      	movs	r3, #2
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	e00e      	b.n	8008372 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8008354:	a35c      	add	r3, pc, #368	; (adr r3, 80084c8 <ftoa+0x248>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800835e:	f7f8 fb2d 	bl	80009bc <__aeabi_dcmplt>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <ftoa+0xee>
 8008368:	2301      	movs	r3, #1
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	e001      	b.n	8008372 <ftoa+0xf2>
		else precision = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <ftoa+0x116>
		f += rounders[precision];
 8008378:	4a59      	ldr	r2, [pc, #356]	; (80084e0 <ftoa+0x260>)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	4413      	add	r3, r2
 8008380:	cb18      	ldmia	r3, {r3, r4}
 8008382:	461a      	mov	r2, r3
 8008384:	4623      	mov	r3, r4
 8008386:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800838a:	f7f7 feef 	bl	800016c <__adddf3>
 800838e:	4603      	mov	r3, r0
 8008390:	460c      	mov	r4, r1
 8008392:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8008396:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800839a:	f7f8 fb4d 	bl	8000a38 <__aeabi_d2iz>
 800839e:	4603      	mov	r3, r0
 80083a0:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80083a2:	69f8      	ldr	r0, [r7, #28]
 80083a4:	f7f8 f82e 	bl	8000404 <__aeabi_i2d>
 80083a8:	4603      	mov	r3, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	461a      	mov	r2, r3
 80083ae:	4623      	mov	r3, r4
 80083b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083b4:	f7f7 fed8 	bl	8000168 <__aeabi_dsub>
 80083b8:	4603      	mov	r3, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <ftoa+0x152>
		*ptr++ = '0';
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	627a      	str	r2, [r7, #36]	; 0x24
 80083cc:	2230      	movs	r2, #48	; 0x30
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e038      	b.n	8008444 <ftoa+0x1c4>
	else
	{
		// save start pointer
		p = ptr;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80083d6:	e01a      	b.n	800840e <ftoa+0x18e>
		{
			*p++ = '0' + intPart % 10;
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	4b42      	ldr	r3, [pc, #264]	; (80084e4 <ftoa+0x264>)
 80083dc:	fb83 1302 	smull	r1, r3, r3, r2
 80083e0:	1099      	asrs	r1, r3, #2
 80083e2:	17d3      	asrs	r3, r2, #31
 80083e4:	1ac9      	subs	r1, r1, r3
 80083e6:	460b      	mov	r3, r1
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	1ad1      	subs	r1, r2, r3
 80083f0:	b2ca      	uxtb	r2, r1
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	1c59      	adds	r1, r3, #1
 80083f6:	6239      	str	r1, [r7, #32]
 80083f8:	3230      	adds	r2, #48	; 0x30
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4a38      	ldr	r2, [pc, #224]	; (80084e4 <ftoa+0x264>)
 8008402:	fb82 1203 	smull	r1, r2, r2, r3
 8008406:	1092      	asrs	r2, r2, #2
 8008408:	17db      	asrs	r3, r3, #31
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e1      	bne.n	80083d8 <ftoa+0x158>
		}

		// save end pos
		p1 = p;
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8008418:	e00e      	b.n	8008438 <ftoa+0x1b8>
		{
			c = *--p;
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	3b01      	subs	r3, #1
 800841e:	623b      	str	r3, [r7, #32]
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	781a      	ldrb	r2, [r3, #0]
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	627a      	str	r2, [r7, #36]	; 0x24
 8008434:	7dfa      	ldrb	r2, [r7, #23]
 8008436:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	429a      	cmp	r2, r3
 800843e:	d8ec      	bhi.n	800841a <ftoa+0x19a>
		}

		// restore end pos
		ptr = p1;
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d032      	beq.n	80084b0 <ftoa+0x230>
	{
		// place decimal point
		*ptr++ = '.';
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	627a      	str	r2, [r7, #36]	; 0x24
 8008450:	222e      	movs	r2, #46	; 0x2e
 8008452:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8008454:	e027      	b.n	80084a6 <ftoa+0x226>
		{
			f *= 10.0;
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	4b1e      	ldr	r3, [pc, #120]	; (80084d4 <ftoa+0x254>)
 800845c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008460:	f7f8 f83a 	bl	80004d8 <__aeabi_dmul>
 8008464:	4603      	mov	r3, r0
 8008466:	460c      	mov	r4, r1
 8008468:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 800846c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008470:	f7f8 fb0a 	bl	8000a88 <__aeabi_d2uiz>
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	627a      	str	r2, [r7, #36]	; 0x24
 800847e:	7dfa      	ldrb	r2, [r7, #23]
 8008480:	3230      	adds	r2, #48	; 0x30
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
			f -= c;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	4618      	mov	r0, r3
 800848a:	f7f7 ffbb 	bl	8000404 <__aeabi_i2d>
 800848e:	4603      	mov	r3, r0
 8008490:	460c      	mov	r4, r1
 8008492:	461a      	mov	r2, r3
 8008494:	4623      	mov	r3, r4
 8008496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800849a:	f7f7 fe65 	bl	8000168 <__aeabi_dsub>
 800849e:	4603      	mov	r3, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	1e5a      	subs	r2, r3, #1
 80084aa:	603a      	str	r2, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1d2      	bne.n	8008456 <ftoa+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]

	return buf;
 80084b6:	687b      	ldr	r3, [r7, #4]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	372c      	adds	r7, #44	; 0x2c
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd90      	pop	{r4, r7, pc}
 80084c0:	00000000 	.word	0x00000000
 80084c4:	40c38800 	.word	0x40c38800
 80084c8:	00000000 	.word	0x00000000
 80084cc:	40f86a00 	.word	0x40f86a00
 80084d0:	3ff00000 	.word	0x3ff00000
 80084d4:	40240000 	.word	0x40240000
 80084d8:	40590000 	.word	0x40590000
 80084dc:	408f4000 	.word	0x408f4000
 80084e0:	0800c8c0 	.word	0x0800c8c0
 80084e4:	66666667 	.word	0x66666667

080084e8 <init_MPU>:





char init_MPU(){
 80084e8:	b5b0      	push	{r4, r5, r7, lr}
 80084ea:	b090      	sub	sp, #64	; 0x40
 80084ec:	af02      	add	r7, sp, #8
    char status = 1;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80084f4:	23d0      	movs	r3, #208	; 0xd0
 80084f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t magnet_address = MAG_ADRRESS;
 80084fa:	2318      	movs	r3, #24
 80084fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  	char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8008500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008504:	b299      	uxth	r1, r3
 8008506:	2302      	movs	r3, #2
 8008508:	2203      	movs	r2, #3
 800850a:	48ce      	ldr	r0, [pc, #824]	; (8008844 <init_MPU+0x35c>)
 800850c:	f7f9 fd58 	bl	8001fc0 <HAL_I2C_IsDeviceReady>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <init_MPU+0x40>
    	strcpy( rx_data, "No Device \r \n");
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4acb      	ldr	r2, [pc, #812]	; (8008848 <init_MPU+0x360>)
 800851c:	461c      	mov	r4, r3
 800851e:	4613      	mov	r3, r2
 8008520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008522:	c407      	stmia	r4!, {r0, r1, r2}
 8008524:	8023      	strh	r3, [r4, #0]
 8008526:	e008      	b.n	800853a <init_MPU+0x52>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 8008528:	f107 0308 	add.w	r3, r7, #8
 800852c:	4ac7      	ldr	r2, [pc, #796]	; (800884c <init_MPU+0x364>)
 800852e:	461c      	mov	r4, r3
 8008530:	4615      	mov	r5, r2
 8008532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	7023      	strb	r3, [r4, #0]
      }
    //CDC_Transmit_FS((uint8_t *)&rx_data, sizeof(rx_data));
    HAL_UART_Transmit(&huart2,rx_data, strlen(rx_data),1000);
 800853a:	f107 0308 	add.w	r3, r7, #8
 800853e:	4618      	mov	r0, r3
 8008540:	f7f7 fe06 	bl	8000150 <strlen>
 8008544:	4603      	mov	r3, r0
 8008546:	b29a      	uxth	r2, r3
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008550:	48bf      	ldr	r0, [pc, #764]	; (8008850 <init_MPU+0x368>)
 8008552:	f7fc f8e0 	bl	8004716 <HAL_UART_Transmit>

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8008556:	236b      	movs	r3, #107	; 0x6b
 8008558:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8008562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008566:	b299      	uxth	r1, r3
 8008568:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800856c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	2302      	movs	r3, #2
 8008574:	48b3      	ldr	r0, [pc, #716]	; (8008844 <init_MPU+0x35c>)
 8008576:	f7f9 f9f7 	bl	8001968 <HAL_I2C_Master_Transmit>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <init_MPU+0x9e>
	{
		status = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8008586:	2319      	movs	r3, #25
 8008588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 800858c:	2307      	movs	r3, #7
 800858e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8008592:	bf00      	nop
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008598:	b299      	uxth	r1, r3
 800859a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800859e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2302      	movs	r3, #2
 80085a6:	48a7      	ldr	r0, [pc, #668]	; (8008844 <init_MPU+0x35c>)
 80085a8:	f7f9 f9de 	bl	8001968 <HAL_I2C_Master_Transmit>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <init_MPU+0xac>

	d[0] = GYRO_CONFIG;
 80085b2:	231b      	movs	r3, #27
 80085b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 80085b8:	2318      	movs	r3, #24
 80085ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80085be:	bf00      	nop
 80085c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c4:	b299      	uxth	r1, r3
 80085c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80085ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	2302      	movs	r3, #2
 80085d2:	489c      	ldr	r0, [pc, #624]	; (8008844 <init_MPU+0x35c>)
 80085d4:	f7f9 f9c8 	bl	8001968 <HAL_I2C_Master_Transmit>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1f0      	bne.n	80085c0 <init_MPU+0xd8>

	d[0] = ACCEL_CONFIG;
 80085de:	231c      	movs	r3, #28
 80085e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80085ea:	bf00      	nop
 80085ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085f0:	b299      	uxth	r1, r3
 80085f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80085f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	2302      	movs	r3, #2
 80085fe:	4891      	ldr	r0, [pc, #580]	; (8008844 <init_MPU+0x35c>)
 8008600:	f7f9 f9b2 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f0      	bne.n	80085ec <init_MPU+0x104>

	d[0] = INIT_ENB;
 800860a:	2338      	movs	r3, #56	; 0x38
 800860c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 8008610:	2301      	movs	r3, #1
 8008612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8008616:	bf00      	nop
 8008618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800861c:	b299      	uxth	r1, r3
 800861e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	2302      	movs	r3, #2
 800862a:	4886      	ldr	r0, [pc, #536]	; (8008844 <init_MPU+0x35c>)
 800862c:	f7f9 f99c 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <init_MPU+0x130>

	d[0] = USER_CTRL;
 8008636:	236a      	movs	r3, #106	; 0x6a
 8008638:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 800863c:	2300      	movs	r3, #0
 800863e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8008642:	bf00      	nop
 8008644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008648:	b299      	uxth	r1, r3
 800864a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800864e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2302      	movs	r3, #2
 8008656:	487b      	ldr	r0, [pc, #492]	; (8008844 <init_MPU+0x35c>)
 8008658:	f7f9 f986 	bl	8001968 <HAL_I2C_Master_Transmit>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f0      	bne.n	8008644 <init_MPU+0x15c>

	d[0] = INT_BYPASS;
 8008662:	2337      	movs	r3, #55	; 0x37
 8008664:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 8008668:	2322      	movs	r3, #34	; 0x22
 800866a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800866e:	bf00      	nop
 8008670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008674:	b299      	uxth	r1, r3
 8008676:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800867a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2302      	movs	r3, #2
 8008682:	4870      	ldr	r0, [pc, #448]	; (8008844 <init_MPU+0x35c>)
 8008684:	f7f9 f970 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f0      	bne.n	8008670 <init_MPU+0x188>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 800868e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008692:	b299      	uxth	r1, r3
 8008694:	23c8      	movs	r3, #200	; 0xc8
 8008696:	2203      	movs	r2, #3
 8008698:	486a      	ldr	r0, [pc, #424]	; (8008844 <init_MPU+0x35c>)
 800869a:	f7f9 fc91 	bl	8001fc0 <HAL_I2C_IsDeviceReady>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <init_MPU+0x1ce>
	    	strcpy( rx_data, "No Device \r \n");
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	4a67      	ldr	r2, [pc, #412]	; (8008848 <init_MPU+0x360>)
 80086aa:	461c      	mov	r4, r3
 80086ac:	4613      	mov	r3, r2
 80086ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086b0:	c407      	stmia	r4!, {r0, r1, r2}
 80086b2:	8023      	strh	r3, [r4, #0]
 80086b4:	e101      	b.n	80088ba <init_MPU+0x3d2>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 80086b6:	230a      	movs	r3, #10
 80086b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 80086bc:	231f      	movs	r3, #31
 80086be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 80086c2:	bf00      	nop
 80086c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086c8:	b299      	uxth	r1, r3
 80086ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086ce:	2302      	movs	r3, #2
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2302      	movs	r3, #2
 80086d4:	485b      	ldr	r0, [pc, #364]	; (8008844 <init_MPU+0x35c>)
 80086d6:	f7f9 f947 	bl	8001968 <HAL_I2C_Master_Transmit>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f1      	bne.n	80086c4 <init_MPU+0x1dc>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 80086e0:	4b5c      	ldr	r3, [pc, #368]	; (8008854 <init_MPU+0x36c>)
 80086e2:	633b      	str	r3, [r7, #48]	; 0x30
 80086e4:	e002      	b.n	80086ec <init_MPU+0x204>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	3b01      	subs	r3, #1
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dcf9      	bgt.n	80086e6 <init_MPU+0x1fe>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 80086f2:	2310      	movs	r3, #16
 80086f4:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 80086f6:	bf00      	nop
 80086f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086fc:	b299      	uxth	r1, r3
 80086fe:	1dfa      	adds	r2, r7, #7
 8008700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	2301      	movs	r3, #1
 8008708:	484e      	ldr	r0, [pc, #312]	; (8008844 <init_MPU+0x35c>)
 800870a:	f7f9 f92d 	bl	8001968 <HAL_I2C_Master_Transmit>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f1      	bne.n	80086f8 <init_MPU+0x210>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &asa,3, 1000) != HAL_OK);
 8008714:	bf00      	nop
 8008716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800871a:	b299      	uxth	r1, r3
 800871c:	1d3a      	adds	r2, r7, #4
 800871e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2303      	movs	r3, #3
 8008726:	4847      	ldr	r0, [pc, #284]	; (8008844 <init_MPU+0x35c>)
 8008728:	f7f9 fa1c 	bl	8001b64 <HAL_I2C_Master_Receive>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f1      	bne.n	8008716 <init_MPU+0x22e>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8008732:	793b      	ldrb	r3, [r7, #4]
 8008734:	3b80      	subs	r3, #128	; 0x80
 8008736:	4618      	mov	r0, r3
 8008738:	f7f7 fe64 	bl	8000404 <__aeabi_i2d>
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	4b45      	ldr	r3, [pc, #276]	; (8008858 <init_MPU+0x370>)
 8008742:	f7f7 fec9 	bl	80004d8 <__aeabi_dmul>
 8008746:	4603      	mov	r3, r0
 8008748:	460c      	mov	r4, r1
 800874a:	4618      	mov	r0, r3
 800874c:	4621      	mov	r1, r4
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	4b42      	ldr	r3, [pc, #264]	; (800885c <init_MPU+0x374>)
 8008754:	f7f7 ffea 	bl	800072c <__aeabi_ddiv>
 8008758:	4603      	mov	r3, r0
 800875a:	460c      	mov	r4, r1
 800875c:	4618      	mov	r0, r3
 800875e:	4621      	mov	r1, r4
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	4b3e      	ldr	r3, [pc, #248]	; (8008860 <init_MPU+0x378>)
 8008766:	f7f7 fd01 	bl	800016c <__adddf3>
 800876a:	4603      	mov	r3, r0
 800876c:	460c      	mov	r4, r1
 800876e:	4618      	mov	r0, r3
 8008770:	4621      	mov	r1, r4
 8008772:	f7f8 f9a9 	bl	8000ac8 <__aeabi_d2f>
 8008776:	4602      	mov	r2, r0
 8008778:	4b3a      	ldr	r3, [pc, #232]	; (8008864 <init_MPU+0x37c>)
 800877a:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 800877c:	797b      	ldrb	r3, [r7, #5]
 800877e:	3b80      	subs	r3, #128	; 0x80
 8008780:	4618      	mov	r0, r3
 8008782:	f7f7 fe3f 	bl	8000404 <__aeabi_i2d>
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	4b33      	ldr	r3, [pc, #204]	; (8008858 <init_MPU+0x370>)
 800878c:	f7f7 fea4 	bl	80004d8 <__aeabi_dmul>
 8008790:	4603      	mov	r3, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4618      	mov	r0, r3
 8008796:	4621      	mov	r1, r4
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	4b2f      	ldr	r3, [pc, #188]	; (800885c <init_MPU+0x374>)
 800879e:	f7f7 ffc5 	bl	800072c <__aeabi_ddiv>
 80087a2:	4603      	mov	r3, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	4618      	mov	r0, r3
 80087a8:	4621      	mov	r1, r4
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <init_MPU+0x378>)
 80087b0:	f7f7 fcdc 	bl	800016c <__adddf3>
 80087b4:	4603      	mov	r3, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	4618      	mov	r0, r3
 80087ba:	4621      	mov	r1, r4
 80087bc:	f7f8 f984 	bl	8000ac8 <__aeabi_d2f>
 80087c0:	4602      	mov	r2, r0
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <init_MPU+0x380>)
 80087c4:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80087c6:	79bb      	ldrb	r3, [r7, #6]
 80087c8:	3b80      	subs	r3, #128	; 0x80
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f7 fe1a 	bl	8000404 <__aeabi_i2d>
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	4b20      	ldr	r3, [pc, #128]	; (8008858 <init_MPU+0x370>)
 80087d6:	f7f7 fe7f 	bl	80004d8 <__aeabi_dmul>
 80087da:	4603      	mov	r3, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	4618      	mov	r0, r3
 80087e0:	4621      	mov	r1, r4
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <init_MPU+0x374>)
 80087e8:	f7f7 ffa0 	bl	800072c <__aeabi_ddiv>
 80087ec:	4603      	mov	r3, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	4618      	mov	r0, r3
 80087f2:	4621      	mov	r1, r4
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	4b19      	ldr	r3, [pc, #100]	; (8008860 <init_MPU+0x378>)
 80087fa:	f7f7 fcb7 	bl	800016c <__adddf3>
 80087fe:	4603      	mov	r3, r0
 8008800:	460c      	mov	r4, r1
 8008802:	4618      	mov	r0, r3
 8008804:	4621      	mov	r1, r4
 8008806:	f7f8 f95f 	bl	8000ac8 <__aeabi_d2f>
 800880a:	4602      	mov	r2, r0
 800880c:	4b17      	ldr	r3, [pc, #92]	; (800886c <init_MPU+0x384>)
 800880e:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8008810:	230a      	movs	r3, #10
 8008812:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 8008816:	2300      	movs	r3, #0
 8008818:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800881c:	bf00      	nop
 800881e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008822:	b299      	uxth	r1, r3
 8008824:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2302      	movs	r3, #2
 8008830:	4804      	ldr	r0, [pc, #16]	; (8008844 <init_MPU+0x35c>)
 8008832:	f7f9 f899 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f0      	bne.n	800881e <init_MPU+0x336>

	    	      for(long i = 1000000; i>0 ;i--){
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <init_MPU+0x36c>)
 800883e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008840:	e019      	b.n	8008876 <init_MPU+0x38e>
 8008842:	bf00      	nop
 8008844:	20000840 	.word	0x20000840
 8008848:	0800c848 	.word	0x0800c848
 800884c:	0800c858 	.word	0x0800c858
 8008850:	20000bd8 	.word	0x20000bd8
 8008854:	000f4240 	.word	0x000f4240
 8008858:	3fe00000 	.word	0x3fe00000
 800885c:	40600000 	.word	0x40600000
 8008860:	3ff00000 	.word	0x3ff00000
 8008864:	20000c28 	.word	0x20000c28
 8008868:	20000a78 	.word	0x20000a78
 800886c:	20000c24 	.word	0x20000c24
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	3b01      	subs	r3, #1
 8008874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	dcf9      	bgt.n	8008870 <init_MPU+0x388>

	    	      }

	    	      d[0] = CNTL1_AD;
 800887c:	230a      	movs	r3, #10
 800887e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 8008882:	2316      	movs	r3, #22
 8008884:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8008888:	bf00      	nop
 800888a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800888e:	b299      	uxth	r1, r3
 8008890:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	2302      	movs	r3, #2
 800889c:	480a      	ldr	r0, [pc, #40]	; (80088c8 <init_MPU+0x3e0>)
 800889e:	f7f9 f863 	bl	8001968 <HAL_I2C_Master_Transmit>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <init_MPU+0x3a2>
	    	      for(long i = 1000000; i>0 ;i--){
 80088a8:	4b08      	ldr	r3, [pc, #32]	; (80088cc <init_MPU+0x3e4>)
 80088aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ac:	e002      	b.n	80088b4 <init_MPU+0x3cc>
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	3b01      	subs	r3, #1
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dcf9      	bgt.n	80088ae <init_MPU+0x3c6>
	    	      //HAL_Delay(100);
	      }
	   // CDC_Transmit_FS((uint8_t *)&rx_data, strlen(rx_data));


  return status;
 80088ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3738      	adds	r7, #56	; 0x38
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bdb0      	pop	{r4, r5, r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000840 	.word	0x20000840
 80088cc:	000f4240 	.word	0x000f4240

080088d0 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 80088d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d2:	b0a1      	sub	sp, #132	; 0x84
 80088d4:	af02      	add	r7, sp, #8
	mpu_data_processed data1;
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,Mag_x,Mag_y,Mag_z,roll,pitch,roll_com;
	char buffer[7];
	char n[1] = "\n";
 80088d6:	230a      	movs	r3, #10
 80088d8:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t data[13];
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 80088dc:	233b      	movs	r3, #59	; 0x3b
 80088de:	71bb      	strb	r3, [r7, #6]
	uint8_t device_address = MPU_ADDRESS;
 80088e0:	23d0      	movs	r3, #208	; 0xd0
 80088e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t magnet_address = MAG_ADRRESS;
 80088e6:	2318      	movs	r3, #24
 80088e8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 80088ec:	bf00      	nop
 80088ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80088f2:	b299      	uxth	r1, r3
 80088f4:	1dba      	adds	r2, r7, #6
 80088f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	2301      	movs	r3, #1
 80088fe:	48b2      	ldr	r0, [pc, #712]	; (8008bc8 <process_MPU+0x2f8>)
 8008900:	f7f9 f832 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1f1      	bne.n	80088ee <process_MPU+0x1e>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 800890a:	bf00      	nop
 800890c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008910:	b299      	uxth	r1, r3
 8008912:	f107 0210 	add.w	r2, r7, #16
 8008916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	230e      	movs	r3, #14
 800891e:	48aa      	ldr	r0, [pc, #680]	; (8008bc8 <process_MPU+0x2f8>)
 8008920:	f7f9 f920 	bl	8001b64 <HAL_I2C_Master_Receive>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <process_MPU+0x3c>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 800892a:	7c3b      	ldrb	r3, [r7, #16]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	b21a      	sxth	r2, r3
 8008930:	7c7b      	ldrb	r3, [r7, #17]
 8008932:	b21b      	sxth	r3, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	b21b      	sxth	r3, r3
 8008938:	4618      	mov	r0, r3
 800893a:	f7f8 f9cf 	bl	8000cdc <__aeabi_i2f>
 800893e:	4603      	mov	r3, r0
 8008940:	667b      	str	r3, [r7, #100]	; 0x64
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8008942:	7cbb      	ldrb	r3, [r7, #18]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	b21a      	sxth	r2, r3
 8008948:	7cfb      	ldrb	r3, [r7, #19]
 800894a:	b21b      	sxth	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b21b      	sxth	r3, r3
 8008950:	4618      	mov	r0, r3
 8008952:	f7f8 f9c3 	bl	8000cdc <__aeabi_i2f>
 8008956:	4603      	mov	r3, r0
 8008958:	663b      	str	r3, [r7, #96]	; 0x60
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 800895a:	7d3b      	ldrb	r3, [r7, #20]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	b21a      	sxth	r2, r3
 8008960:	7d7b      	ldrb	r3, [r7, #21]
 8008962:	b21b      	sxth	r3, r3
 8008964:	4313      	orrs	r3, r2
 8008966:	b21b      	sxth	r3, r3
 8008968:	4618      	mov	r0, r3
 800896a:	f7f8 f9b7 	bl	8000cdc <__aeabi_i2f>
 800896e:	4603      	mov	r3, r0
 8008970:	65fb      	str	r3, [r7, #92]	; 0x5c

    temp = (int16_t)(data[6] << 8 | data[7]);
 8008972:	7dbb      	ldrb	r3, [r7, #22]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	b21a      	sxth	r2, r3
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	b21b      	sxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b21b      	sxth	r3, r3
 8008980:	4618      	mov	r0, r3
 8008982:	f7f8 f9ab 	bl	8000cdc <__aeabi_i2f>
 8008986:	4602      	mov	r2, r0
 8008988:	4b90      	ldr	r3, [pc, #576]	; (8008bcc <process_MPU+0x2fc>)
 800898a:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 800898c:	7e3b      	ldrb	r3, [r7, #24]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	b21a      	sxth	r2, r3
 8008992:	7e7b      	ldrb	r3, [r7, #25]
 8008994:	b21b      	sxth	r3, r3
 8008996:	4313      	orrs	r3, r2
 8008998:	b21b      	sxth	r3, r3
 800899a:	4618      	mov	r0, r3
 800899c:	f7f8 f99e 	bl	8000cdc <__aeabi_i2f>
 80089a0:	4603      	mov	r3, r0
 80089a2:	65bb      	str	r3, [r7, #88]	; 0x58
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80089a4:	7ebb      	ldrb	r3, [r7, #26]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	b21a      	sxth	r2, r3
 80089aa:	7efb      	ldrb	r3, [r7, #27]
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	b21b      	sxth	r3, r3
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f8 f992 	bl	8000cdc <__aeabi_i2f>
 80089b8:	4603      	mov	r3, r0
 80089ba:	657b      	str	r3, [r7, #84]	; 0x54
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 80089bc:	7f3b      	ldrb	r3, [r7, #28]
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	b21a      	sxth	r2, r3
 80089c2:	7f7b      	ldrb	r3, [r7, #29]
 80089c4:	b21b      	sxth	r3, r3
 80089c6:	4313      	orrs	r3, r2
 80089c8:	b21b      	sxth	r3, r3
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f8 f986 	bl	8000cdc <__aeabi_i2f>
 80089d0:	4603      	mov	r3, r0
 80089d2:	653b      	str	r3, [r7, #80]	; 0x50

	Acc_x = (Acc_x-1092)/((float)accel_factor);
 80089d4:	497e      	ldr	r1, [pc, #504]	; (8008bd0 <process_MPU+0x300>)
 80089d6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80089d8:	f7f8 f8ca 	bl	8000b70 <__aeabi_fsub>
 80089dc:	4603      	mov	r3, r0
 80089de:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f8 fa82 	bl	8000eec <__aeabi_fdiv>
 80089e8:	4603      	mov	r3, r0
 80089ea:	667b      	str	r3, [r7, #100]	; 0x64
	Acc_y = (Acc_y-252)/((float)accel_factor);
 80089ec:	4979      	ldr	r1, [pc, #484]	; (8008bd4 <process_MPU+0x304>)
 80089ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80089f0:	f7f8 f8be 	bl	8000b70 <__aeabi_fsub>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f8 fa76 	bl	8000eec <__aeabi_fdiv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	663b      	str	r3, [r7, #96]	; 0x60
	Acc_z = (Acc_z - 2792)/((float)accel_factor);
 8008a04:	4974      	ldr	r1, [pc, #464]	; (8008bd8 <process_MPU+0x308>)
 8008a06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008a08:	f7f8 f8b2 	bl	8000b70 <__aeabi_fsub>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 fa6a 	bl	8000eec <__aeabi_fdiv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	65fb      	str	r3, [r7, #92]	; 0x5c

	Gyro_x = (Gyro_x + 75)/gyro_factor;
 8008a1c:	496f      	ldr	r1, [pc, #444]	; (8008bdc <process_MPU+0x30c>)
 8008a1e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a20:	f7f8 f8a8 	bl	8000b74 <__addsf3>
 8008a24:	4603      	mov	r3, r0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f7 fcfe 	bl	8000428 <__aeabi_f2d>
 8008a2c:	a360      	add	r3, pc, #384	; (adr r3, 8008bb0 <process_MPU+0x2e0>)
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	f7f7 fe7b 	bl	800072c <__aeabi_ddiv>
 8008a36:	4603      	mov	r3, r0
 8008a38:	460c      	mov	r4, r1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f7f8 f843 	bl	8000ac8 <__aeabi_d2f>
 8008a42:	4603      	mov	r3, r0
 8008a44:	65bb      	str	r3, [r7, #88]	; 0x58
	Gyro_y = (Gyro_y + 10)/gyro_factor;
 8008a46:	4966      	ldr	r1, [pc, #408]	; (8008be0 <process_MPU+0x310>)
 8008a48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008a4a:	f7f8 f893 	bl	8000b74 <__addsf3>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f7 fce9 	bl	8000428 <__aeabi_f2d>
 8008a56:	a356      	add	r3, pc, #344	; (adr r3, 8008bb0 <process_MPU+0x2e0>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fe66 	bl	800072c <__aeabi_ddiv>
 8008a60:	4603      	mov	r3, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	4618      	mov	r0, r3
 8008a66:	4621      	mov	r1, r4
 8008a68:	f7f8 f82e 	bl	8000ac8 <__aeabi_d2f>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	657b      	str	r3, [r7, #84]	; 0x54
	Gyro_z = (Gyro_z + 22)/gyro_factor;
 8008a70:	495c      	ldr	r1, [pc, #368]	; (8008be4 <process_MPU+0x314>)
 8008a72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a74:	f7f8 f87e 	bl	8000b74 <__addsf3>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7f7 fcd4 	bl	8000428 <__aeabi_f2d>
 8008a80:	a34b      	add	r3, pc, #300	; (adr r3, 8008bb0 <process_MPU+0x2e0>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fe51 	bl	800072c <__aeabi_ddiv>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7f8 f819 	bl	8000ac8 <__aeabi_d2f>
 8008a96:	4603      	mov	r3, r0
 8008a98:	653b      	str	r3, [r7, #80]	; 0x50

    reg = 0x02;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	71bb      	strb	r3, [r7, #6]

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8008a9e:	bf00      	nop
 8008aa0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8008aa4:	b299      	uxth	r1, r3
 8008aa6:	1dba      	adds	r2, r7, #6
 8008aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4845      	ldr	r0, [pc, #276]	; (8008bc8 <process_MPU+0x2f8>)
 8008ab2:	f7f8 ff59 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f1      	bne.n	8008aa0 <process_MPU+0x1d0>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8008abc:	bf00      	nop
 8008abe:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8008ac2:	b299      	uxth	r1, r3
 8008ac4:	1dfa      	adds	r2, r7, #7
 8008ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	2301      	movs	r3, #1
 8008ace:	483e      	ldr	r0, [pc, #248]	; (8008bc8 <process_MPU+0x2f8>)
 8008ad0:	f7f9 f848 	bl	8001b64 <HAL_I2C_Master_Receive>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f1      	bne.n	8008abe <process_MPU+0x1ee>
    if(status == 3){
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	f040 81f4 	bne.w	8008eca <process_MPU+0x5fa>
    	reg = 0x03;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	71bb      	strb	r3, [r7, #6]
    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8008ae6:	bf00      	nop
 8008ae8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8008aec:	b299      	uxth	r1, r3
 8008aee:	1dba      	adds	r2, r7, #6
 8008af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	2301      	movs	r3, #1
 8008af8:	4833      	ldr	r0, [pc, #204]	; (8008bc8 <process_MPU+0x2f8>)
 8008afa:	f7f8 ff35 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1f1      	bne.n	8008ae8 <process_MPU+0x218>
    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &mag_data,7, 1000) != HAL_OK);
 8008b04:	bf00      	nop
 8008b06:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8008b0a:	b299      	uxth	r1, r3
 8008b0c:	f107 0208 	add.w	r2, r7, #8
 8008b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	2307      	movs	r3, #7
 8008b18:	482b      	ldr	r0, [pc, #172]	; (8008bc8 <process_MPU+0x2f8>)
 8008b1a:	f7f9 f823 	bl	8001b64 <HAL_I2C_Master_Receive>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f0      	bne.n	8008b06 <process_MPU+0x236>
    	//if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 8008b24:	7a3b      	ldrb	r3, [r7, #8]
 8008b26:	b21a      	sxth	r2, r3
 8008b28:	7a7b      	ldrb	r3, [r7, #9]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	b21b      	sxth	r3, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	b21b      	sxth	r3, r3
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f8 f8d2 	bl	8000cdc <__aeabi_i2f>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	677b      	str	r3, [r7, #116]	; 0x74
    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 8008b3c:	7abb      	ldrb	r3, [r7, #10]
 8008b3e:	b21a      	sxth	r2, r3
 8008b40:	7afb      	ldrb	r3, [r7, #11]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	b21b      	sxth	r3, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f8 f8c6 	bl	8000cdc <__aeabi_i2f>
 8008b50:	4603      	mov	r3, r0
 8008b52:	673b      	str	r3, [r7, #112]	; 0x70
    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 8008b54:	7b3b      	ldrb	r3, [r7, #12]
 8008b56:	b21a      	sxth	r2, r3
 8008b58:	7b7b      	ldrb	r3, [r7, #13]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	b21b      	sxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f8 f8ba 	bl	8000cdc <__aeabi_i2f>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(magX_min < Mag_x && Mag_x < magX_max )
 8008b6c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008b6e:	f7f7 fc5b 	bl	8000428 <__aeabi_f2d>
 8008b72:	a311      	add	r3, pc, #68	; (adr r3, 8008bb8 <process_MPU+0x2e8>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 ff3e 	bl	80009f8 <__aeabi_dcmpgt>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d053      	beq.n	8008c2a <process_MPU+0x35a>
 8008b82:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008b84:	f7f7 fc50 	bl	8000428 <__aeabi_f2d>
 8008b88:	a30d      	add	r3, pc, #52	; (adr r3, 8008bc0 <process_MPU+0x2f0>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f7f7 ff15 	bl	80009bc <__aeabi_dcmplt>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d048      	beq.n	8008c2a <process_MPU+0x35a>
    		Mag_x = (Mag_x*asax*mRes  - mag_offet_x)*scale_x;
 8008b98:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <process_MPU+0x318>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f8 f8f0 	bl	8000d84 <__aeabi_fmul>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7f7 fc3e 	bl	8000428 <__aeabi_f2d>
 8008bac:	e01e      	b.n	8008bec <process_MPU+0x31c>
 8008bae:	bf00      	nop
 8008bb0:	66666666 	.word	0x66666666
 8008bb4:	40306666 	.word	0x40306666
 8008bb8:	cccccccd 	.word	0xcccccccd
 8008bbc:	c06bfccc 	.word	0xc06bfccc
 8008bc0:	70a3d70a 	.word	0x70a3d70a
 8008bc4:	4084543d 	.word	0x4084543d
 8008bc8:	20000840 	.word	0x20000840
 8008bcc:	200008a8 	.word	0x200008a8
 8008bd0:	44888000 	.word	0x44888000
 8008bd4:	437c0000 	.word	0x437c0000
 8008bd8:	452e8000 	.word	0x452e8000
 8008bdc:	42960000 	.word	0x42960000
 8008be0:	41200000 	.word	0x41200000
 8008be4:	41b00000 	.word	0x41b00000
 8008be8:	20000c28 	.word	0x20000c28
 8008bec:	a3d2      	add	r3, pc, #840	; (adr r3, 8008f38 <process_MPU+0x668>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fc71 	bl	80004d8 <__aeabi_dmul>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	a3d0      	add	r3, pc, #832	; (adr r3, 8008f40 <process_MPU+0x670>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 fab0 	bl	8000168 <__aeabi_dsub>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	4621      	mov	r1, r4
 8008c10:	a3cd      	add	r3, pc, #820	; (adr r3, 8008f48 <process_MPU+0x678>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f7f7 fc5f 	bl	80004d8 <__aeabi_dmul>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	4621      	mov	r1, r4
 8008c22:	f7f7 ff51 	bl	8000ac8 <__aeabi_d2f>
 8008c26:	4603      	mov	r3, r0
 8008c28:	677b      	str	r3, [r7, #116]	; 0x74
            if(magY_min < Mag_y && Mag_y < magY_max )
 8008c2a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008c2c:	f7f7 fbfc 	bl	8000428 <__aeabi_f2d>
 8008c30:	a3c7      	add	r3, pc, #796	; (adr r3, 8008f50 <process_MPU+0x680>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f7f7 fedf 	bl	80009f8 <__aeabi_dcmpgt>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d033      	beq.n	8008ca8 <process_MPU+0x3d8>
 8008c40:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008c42:	f7f7 fbf1 	bl	8000428 <__aeabi_f2d>
 8008c46:	a3c4      	add	r3, pc, #784	; (adr r3, 8008f58 <process_MPU+0x688>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f7f7 feb6 	bl	80009bc <__aeabi_dcmplt>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d028      	beq.n	8008ca8 <process_MPU+0x3d8>
    		Mag_y = (Mag_y*asay*mRes  - mag_offet_y)*scale_y;
 8008c56:	4bd0      	ldr	r3, [pc, #832]	; (8008f98 <process_MPU+0x6c8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f8 f891 	bl	8000d84 <__aeabi_fmul>
 8008c62:	4603      	mov	r3, r0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fbdf 	bl	8000428 <__aeabi_f2d>
 8008c6a:	a3b3      	add	r3, pc, #716	; (adr r3, 8008f38 <process_MPU+0x668>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fc32 	bl	80004d8 <__aeabi_dmul>
 8008c74:	4603      	mov	r3, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	4618      	mov	r0, r3
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	a3b8      	add	r3, pc, #736	; (adr r3, 8008f60 <process_MPU+0x690>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fa71 	bl	8000168 <__aeabi_dsub>
 8008c86:	4603      	mov	r3, r0
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	a3b6      	add	r3, pc, #728	; (adr r3, 8008f68 <process_MPU+0x698>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fc20 	bl	80004d8 <__aeabi_dmul>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	f7f7 ff12 	bl	8000ac8 <__aeabi_d2f>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	673b      	str	r3, [r7, #112]	; 0x70
            if(magZ_min < Mag_z && Mag_z < magZ_max )
 8008ca8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008caa:	f7f7 fbbd 	bl	8000428 <__aeabi_f2d>
 8008cae:	a3b0      	add	r3, pc, #704	; (adr r3, 8008f70 <process_MPU+0x6a0>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d033      	beq.n	8008d26 <process_MPU+0x456>
 8008cbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cc0:	f7f7 fbb2 	bl	8000428 <__aeabi_f2d>
 8008cc4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008f78 <process_MPU+0x6a8>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fe77 	bl	80009bc <__aeabi_dcmplt>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d028      	beq.n	8008d26 <process_MPU+0x456>
    		Mag_z = (Mag_z*asaz*mRes  - mag_offet_z)*scale_z;
 8008cd4:	4bb1      	ldr	r3, [pc, #708]	; (8008f9c <process_MPU+0x6cc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f8 f852 	bl	8000d84 <__aeabi_fmul>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f7 fba0 	bl	8000428 <__aeabi_f2d>
 8008ce8:	a393      	add	r3, pc, #588	; (adr r3, 8008f38 <process_MPU+0x668>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fbf3 	bl	80004d8 <__aeabi_dmul>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	a3a1      	add	r3, pc, #644	; (adr r3, 8008f80 <process_MPU+0x6b0>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fa34 	bl	800016c <__adddf3>
 8008d04:	4603      	mov	r3, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	4618      	mov	r0, r3
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	a39e      	add	r3, pc, #632	; (adr r3, 8008f88 <process_MPU+0x6b8>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fbe1 	bl	80004d8 <__aeabi_dmul>
 8008d16:	4603      	mov	r3, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7f7 fed3 	bl	8000ac8 <__aeabi_d2f>
 8008d22:	4603      	mov	r3, r0
 8008d24:	66fb      	str	r3, [r7, #108]	; 0x6c

            yaw = atan2(Mag_y,Mag_x)*RAD2DEC;
 8008d26:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008d28:	f7f7 fb7e 	bl	8000428 <__aeabi_f2d>
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	460d      	mov	r5, r1
 8008d30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008d32:	f7f7 fb79 	bl	8000428 <__aeabi_f2d>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f003 fb65 	bl	800c40c <atan2>
 8008d42:	a393      	add	r3, pc, #588	; (adr r3, 8008f90 <process_MPU+0x6c0>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fbc6 	bl	80004d8 <__aeabi_dmul>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	4618      	mov	r0, r3
 8008d52:	4621      	mov	r1, r4
 8008d54:	f7f7 feb8 	bl	8000ac8 <__aeabi_d2f>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b91      	ldr	r3, [pc, #580]	; (8008fa0 <process_MPU+0x6d0>)
 8008d5c:	601a      	str	r2, [r3, #0]
    	    ftoa(Mag_x, buffer, 2);
 8008d5e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008d60:	f7f7 fb62 	bl	8000428 <__aeabi_f2d>
 8008d64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f7ff fa89 	bl	8008280 <ftoa>
    	    strcat(buffer," ");
 8008d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f7 f9ec 	bl	8000150 <strlen>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d80:	4413      	add	r3, r2
 8008d82:	4988      	ldr	r1, [pc, #544]	; (8008fa4 <process_MPU+0x6d4>)
 8008d84:	461a      	mov	r2, r3
 8008d86:	460b      	mov	r3, r1
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8008d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7f7 f9dd 	bl	8000150 <strlen>
 8008d96:	4603      	mov	r3, r0
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008da2:	4881      	ldr	r0, [pc, #516]	; (8008fa8 <process_MPU+0x6d8>)
 8008da4:	f7fb fcb7 	bl	8004716 <HAL_UART_Transmit>

    	    ftoa(Mag_y, buffer, 2);
 8008da8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008daa:	f7f7 fb3d 	bl	8000428 <__aeabi_f2d>
 8008dae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008db2:	2302      	movs	r3, #2
 8008db4:	f7ff fa64 	bl	8008280 <ftoa>
    	    strcat(buffer," ");
 8008db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7f7 f9c7 	bl	8000150 <strlen>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dca:	4413      	add	r3, r2
 8008dcc:	4975      	ldr	r1, [pc, #468]	; (8008fa4 <process_MPU+0x6d4>)
 8008dce:	461a      	mov	r2, r3
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8008dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f7 f9b8 	bl	8000150 <strlen>
 8008de0:	4603      	mov	r3, r0
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008dec:	486e      	ldr	r0, [pc, #440]	; (8008fa8 <process_MPU+0x6d8>)
 8008dee:	f7fb fc92 	bl	8004716 <HAL_UART_Transmit>

    	    ftoa(Mag_z, buffer, 2);
 8008df2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008df4:	f7f7 fb18 	bl	8000428 <__aeabi_f2d>
 8008df8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	f7ff fa3f 	bl	8008280 <ftoa>
    	    strcat(buffer," ");
 8008e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f7 f9a2 	bl	8000150 <strlen>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e14:	4413      	add	r3, r2
 8008e16:	4963      	ldr	r1, [pc, #396]	; (8008fa4 <process_MPU+0x6d4>)
 8008e18:	461a      	mov	r2, r3
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8008e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7f7 f993 	bl	8000150 <strlen>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e36:	485c      	ldr	r0, [pc, #368]	; (8008fa8 <process_MPU+0x6d8>)
 8008e38:	f7fb fc6d 	bl	8004716 <HAL_UART_Transmit>

    	    ftoa(yaw , buffer, 2);
 8008e3c:	4b58      	ldr	r3, [pc, #352]	; (8008fa0 <process_MPU+0x6d0>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f7 faf1 	bl	8000428 <__aeabi_f2d>
 8008e46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	f7ff fa18 	bl	8008280 <ftoa>
    	    strcat(buffer,"\n");
 8008e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f7 f97b 	bl	8000150 <strlen>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e62:	4413      	add	r3, r2
 8008e64:	4951      	ldr	r1, [pc, #324]	; (8008fac <process_MPU+0x6dc>)
 8008e66:	461a      	mov	r2, r3
 8008e68:	460b      	mov	r3, r1
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8008e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7f7 f96c 	bl	8000150 <strlen>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e84:	4848      	ldr	r0, [pc, #288]	; (8008fa8 <process_MPU+0x6d8>)
 8008e86:	f7fb fc46 	bl	8004716 <HAL_UART_Transmit>

    	//}
    	reg = 0x02;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	71bb      	strb	r3, [r7, #6]
    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8008e8e:	bf00      	nop
 8008e90:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8008e94:	b299      	uxth	r1, r3
 8008e96:	1dba      	adds	r2, r7, #6
 8008e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4843      	ldr	r0, [pc, #268]	; (8008fb0 <process_MPU+0x6e0>)
 8008ea2:	f7f8 fd61 	bl	8001968 <HAL_I2C_Master_Transmit>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <process_MPU+0x5c0>
    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8008eac:	bf00      	nop
 8008eae:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8008eb2:	b299      	uxth	r1, r3
 8008eb4:	1dfa      	adds	r2, r7, #7
 8008eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	483c      	ldr	r0, [pc, #240]	; (8008fb0 <process_MPU+0x6e0>)
 8008ec0:	f7f8 fe50 	bl	8001b64 <HAL_I2C_Master_Receive>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f1      	bne.n	8008eae <process_MPU+0x5de>
    }

	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8008eca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008ecc:	f7f7 faac 	bl	8000428 <__aeabi_f2d>
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008ed6:	f7f7 faa7 	bl	8000428 <__aeabi_f2d>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f003 fa93 	bl	800c40c <atan2>
 8008ee6:	a32a      	add	r3, pc, #168	; (adr r3, 8008f90 <process_MPU+0x6c0>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 faf4 	bl	80004d8 <__aeabi_dmul>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f7f7 fde6 	bl	8000ac8 <__aeabi_d2f>
 8008efc:	4603      	mov	r3, r0
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8008f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f7 fa8e 	bl	8000428 <__aeabi_f2d>
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f12:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008f14:	f7f7 ff36 	bl	8000d84 <__aeabi_fmul>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	461e      	mov	r6, r3
 8008f1c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008f1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008f20:	f7f7 ff30 	bl	8000d84 <__aeabi_fmul>
 8008f24:	4603      	mov	r3, r0
 8008f26:	4619      	mov	r1, r3
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7f7 fe23 	bl	8000b74 <__addsf3>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	e040      	b.n	8008fb4 <process_MPU+0x6e4>
 8008f32:	bf00      	nop
 8008f34:	f3af 8000 	nop.w
 8008f38:	d7fd88a7 	.word	0xd7fd88a7
 8008f3c:	3ff7fd7f 	.word	0x3ff7fd7f
 8008f40:	7ae147ae 	.word	0x7ae147ae
 8008f44:	406aaa14 	.word	0x406aaa14
 8008f48:	ca341083 	.word	0xca341083
 8008f4c:	3fd42acf 	.word	0x3fd42acf
 8008f50:	ae147ae1 	.word	0xae147ae1
 8008f54:	c059d147 	.word	0xc059d147
 8008f58:	28f5c28f 	.word	0x28f5c28f
 8008f5c:	40845d5c 	.word	0x40845d5c
 8008f60:	cccccccd 	.word	0xcccccccd
 8008f64:	4072dccc 	.word	0x4072dccc
 8008f68:	503dbf48 	.word	0x503dbf48
 8008f6c:	3fd37c22 	.word	0x3fd37c22
 8008f70:	28f5c28f 	.word	0x28f5c28f
 8008f74:	c0814f5c 	.word	0xc0814f5c
 8008f78:	1eb851ec 	.word	0x1eb851ec
 8008f7c:	40410b85 	.word	0x40410b85
 8008f80:	cccccccd 	.word	0xcccccccd
 8008f84:	4074b4cc 	.word	0x4074b4cc
 8008f88:	d0605c0c 	.word	0xd0605c0c
 8008f8c:	bfd281ea 	.word	0xbfd281ea
 8008f90:	1a5d2372 	.word	0x1a5d2372
 8008f94:	404ca5dc 	.word	0x404ca5dc
 8008f98:	20000a78 	.word	0x20000a78
 8008f9c:	20000c24 	.word	0x20000c24
 8008fa0:	20000bd0 	.word	0x20000bd0
 8008fa4:	0800c86c 	.word	0x0800c86c
 8008fa8:	20000bd8 	.word	0x20000bd8
 8008fac:	0800c870 	.word	0x0800c870
 8008fb0:	20000840 	.word	0x20000840
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f7 fa37 	bl	8000428 <__aeabi_f2d>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f003 fa25 	bl	800c410 <sqrt>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 fbad 	bl	800072c <__aeabi_ddiv>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f003 f889 	bl	800c0f0 <atan>
 8008fde:	a30c      	add	r3, pc, #48	; (adr r3, 8009010 <process_MPU+0x740>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 fa78 	bl	80004d8 <__aeabi_dmul>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	4618      	mov	r0, r3
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f7f7 fd6a 	bl	8000ac8 <__aeabi_d2f>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	64bb      	str	r3, [r7, #72]	; 0x48


	complementary_filter(pitch,Gyro_x,0.0116);
 8008ff8:	4a07      	ldr	r2, [pc, #28]	; (8009018 <process_MPU+0x748>)
 8008ffa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ffc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008ffe:	f000 f80f 	bl	8009020 <complementary_filter>


    //CDC_Transmit_FS((uint8_t *)buffer, sizeof(buffer));

}
 8009002:	bf00      	nop
 8009004:	377c      	adds	r7, #124	; 0x7c
 8009006:	46bd      	mov	sp, r7
 8009008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w
 8009010:	1a5d2372 	.word	0x1a5d2372
 8009014:	404ca5dc 	.word	0x404ca5dc
 8009018:	3c3e0ded 	.word	0x3c3e0ded
 800901c:	00000000 	.word	0x00000000

08009020 <complementary_filter>:
void complementary_filter(float angle_acc,float gyro_rate,float dt){
 8009020:	b5b0      	push	{r4, r5, r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
	com_angle = alpha*(com_angle + dt*gyro_rate) + (1-alpha)*angle_acc;
 800902c:	68b9      	ldr	r1, [r7, #8]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7f7 fea8 	bl	8000d84 <__aeabi_fmul>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <complementary_filter+0x88>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7f7 fd98 	bl	8000b74 <__addsf3>
 8009044:	4603      	mov	r3, r0
 8009046:	4618      	mov	r0, r3
 8009048:	f7f7 f9ee 	bl	8000428 <__aeabi_f2d>
 800904c:	a312      	add	r3, pc, #72	; (adr r3, 8009098 <complementary_filter+0x78>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 fa41 	bl	80004d8 <__aeabi_dmul>
 8009056:	4603      	mov	r3, r0
 8009058:	460c      	mov	r4, r1
 800905a:	4625      	mov	r5, r4
 800905c:	461c      	mov	r4, r3
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7f7 f9e2 	bl	8000428 <__aeabi_f2d>
 8009064:	a30e      	add	r3, pc, #56	; (adr r3, 80090a0 <complementary_filter+0x80>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 fa35 	bl	80004d8 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 f879 	bl	800016c <__adddf3>
 800907a:	4603      	mov	r3, r0
 800907c:	460c      	mov	r4, r1
 800907e:	4618      	mov	r0, r3
 8009080:	4621      	mov	r1, r4
 8009082:	f7f7 fd21 	bl	8000ac8 <__aeabi_d2f>
 8009086:	4602      	mov	r2, r0
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <complementary_filter+0x88>)
 800908a:	601a      	str	r2, [r3, #0]
}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bdb0      	pop	{r4, r5, r7, pc}
 8009094:	f3af 8000 	nop.w
 8009098:	9999999a 	.word	0x9999999a
 800909c:	3fe99999 	.word	0x3fe99999
 80090a0:	99999998 	.word	0x99999998
 80090a4:	3fc99999 	.word	0x3fc99999
 80090a8:	20000798 	.word	0x20000798

080090ac <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 80090b8:	4a05      	ldr	r2, [pc, #20]	; (80090d0 <LCD_setRST+0x24>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 80090be:	4a04      	ldr	r2, [pc, #16]	; (80090d0 <LCD_setRST+0x24>)
 80090c0:	887b      	ldrh	r3, [r7, #2]
 80090c2:	8093      	strh	r3, [r2, #4]
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000c2c 	.word	0x20000c2c

080090d4 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 80090e0:	4a05      	ldr	r2, [pc, #20]	; (80090f8 <LCD_setCE+0x24>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 80090e6:	4a04      	ldr	r2, [pc, #16]	; (80090f8 <LCD_setCE+0x24>)
 80090e8:	887b      	ldrh	r3, [r7, #2]
 80090ea:	8193      	strh	r3, [r2, #12]
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bc80      	pop	{r7}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000c2c 	.word	0x20000c2c

080090fc <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8009108:	4a05      	ldr	r2, [pc, #20]	; (8009120 <LCD_setDC+0x24>)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 800910e:	4a04      	ldr	r2, [pc, #16]	; (8009120 <LCD_setDC+0x24>)
 8009110:	887b      	ldrh	r3, [r7, #2]
 8009112:	8293      	strh	r3, [r2, #20]
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20000c2c 	.word	0x20000c2c

08009124 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8009130:	4a05      	ldr	r2, [pc, #20]	; (8009148 <LCD_setDIN+0x24>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8009136:	4a04      	ldr	r2, [pc, #16]	; (8009148 <LCD_setDIN+0x24>)
 8009138:	887b      	ldrh	r3, [r7, #2]
 800913a:	8393      	strh	r3, [r2, #28]
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20000c2c 	.word	0x20000c2c

0800914c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8009158:	4a05      	ldr	r2, [pc, #20]	; (8009170 <LCD_setCLK+0x24>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 800915e:	4a04      	ldr	r2, [pc, #16]	; (8009170 <LCD_setCLK+0x24>)
 8009160:	887b      	ldrh	r3, [r7, #2]
 8009162:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	bc80      	pop	{r7}
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000c2c 	.word	0x20000c2c

08009174 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
 8009182:	e026      	b.n	80091d2 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8009184:	4b16      	ldr	r3, [pc, #88]	; (80091e0 <LCD_send+0x6c>)
 8009186:	6998      	ldr	r0, [r3, #24]
 8009188:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <LCD_send+0x6c>)
 800918a:	8b99      	ldrh	r1, [r3, #28]
 800918c:	79fa      	ldrb	r2, [r7, #7]
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	f1c3 0307 	rsb	r3, r3, #7
 8009194:	fa42 f303 	asr.w	r3, r2, r3
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7f8 fa9e 	bl	80016e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 80091ac:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <LCD_send+0x6c>)
 80091ae:	6a18      	ldr	r0, [r3, #32]
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <LCD_send+0x6c>)
 80091b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091b4:	2201      	movs	r2, #1
 80091b6:	4619      	mov	r1, r3
 80091b8:	f7f8 fa96 	bl	80016e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 80091bc:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <LCD_send+0x6c>)
 80091be:	6a18      	ldr	r0, [r3, #32]
 80091c0:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <LCD_send+0x6c>)
 80091c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091c4:	2200      	movs	r2, #0
 80091c6:	4619      	mov	r1, r3
 80091c8:	f7f8 fa8e 	bl	80016e8 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	3301      	adds	r3, #1
 80091d0:	73fb      	strb	r3, [r7, #15]
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b07      	cmp	r3, #7
 80091d6:	d9d5      	bls.n	8009184 <LCD_send+0x10>
  }
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000c2c 	.word	0x20000c2c

080091e4 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	460a      	mov	r2, r1
 80091ee:	71fb      	strb	r3, [r7, #7]
 80091f0:	4613      	mov	r3, r2
 80091f2:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 80091f4:	79bb      	ldrb	r3, [r7, #6]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d11c      	bne.n	8009234 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <LCD_write+0x90>)
 80091fc:	6918      	ldr	r0, [r3, #16]
 80091fe:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <LCD_write+0x90>)
 8009200:	8a9b      	ldrh	r3, [r3, #20]
 8009202:	2200      	movs	r2, #0
 8009204:	4619      	mov	r1, r3
 8009206:	f7f8 fa6f 	bl	80016e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800920a:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <LCD_write+0x90>)
 800920c:	6898      	ldr	r0, [r3, #8]
 800920e:	4b19      	ldr	r3, [pc, #100]	; (8009274 <LCD_write+0x90>)
 8009210:	899b      	ldrh	r3, [r3, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	4619      	mov	r1, r3
 8009216:	f7f8 fa67 	bl	80016e8 <HAL_GPIO_WritePin>
    LCD_send(data);
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff ffa9 	bl	8009174 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8009222:	4b14      	ldr	r3, [pc, #80]	; (8009274 <LCD_write+0x90>)
 8009224:	6898      	ldr	r0, [r3, #8]
 8009226:	4b13      	ldr	r3, [pc, #76]	; (8009274 <LCD_write+0x90>)
 8009228:	899b      	ldrh	r3, [r3, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	f7f8 fa5b 	bl	80016e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8009232:	e01b      	b.n	800926c <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <LCD_write+0x90>)
 8009236:	6918      	ldr	r0, [r3, #16]
 8009238:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <LCD_write+0x90>)
 800923a:	8a9b      	ldrh	r3, [r3, #20]
 800923c:	2201      	movs	r2, #1
 800923e:	4619      	mov	r1, r3
 8009240:	f7f8 fa52 	bl	80016e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <LCD_write+0x90>)
 8009246:	6898      	ldr	r0, [r3, #8]
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <LCD_write+0x90>)
 800924a:	899b      	ldrh	r3, [r3, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	4619      	mov	r1, r3
 8009250:	f7f8 fa4a 	bl	80016e8 <HAL_GPIO_WritePin>
    LCD_send(data);
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ff8c 	bl	8009174 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <LCD_write+0x90>)
 800925e:	6898      	ldr	r0, [r3, #8]
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <LCD_write+0x90>)
 8009262:	899b      	ldrh	r3, [r3, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	4619      	mov	r1, r3
 8009268:	f7f8 fa3e 	bl	80016e8 <HAL_GPIO_WritePin>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000c2c 	.word	0x20000c2c

08009278 <LCD_init>:


void LCD_init(){
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 800927c:	4b15      	ldr	r3, [pc, #84]	; (80092d4 <LCD_init+0x5c>)
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <LCD_init+0x5c>)
 8009282:	889b      	ldrh	r3, [r3, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	4619      	mov	r1, r3
 8009288:	f7f8 fa2e 	bl	80016e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <LCD_init+0x5c>)
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <LCD_init+0x5c>)
 8009292:	889b      	ldrh	r3, [r3, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	4619      	mov	r1, r3
 8009298:	f7f8 fa26 	bl	80016e8 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 800929c:	2100      	movs	r1, #0
 800929e:	2021      	movs	r0, #33	; 0x21
 80092a0:	f7ff ffa0 	bl	80091e4 <LCD_write>
  LCD_write(0xB0, LCD_COMMAND); //set LCD Vop(Contrast).
 80092a4:	2100      	movs	r1, #0
 80092a6:	20b0      	movs	r0, #176	; 0xb0
 80092a8:	f7ff ff9c 	bl	80091e4 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80092ac:	2100      	movs	r1, #0
 80092ae:	2004      	movs	r0, #4
 80092b0:	f7ff ff98 	bl	80091e4 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80092b4:	2100      	movs	r1, #0
 80092b6:	2014      	movs	r0, #20
 80092b8:	f7ff ff94 	bl	80091e4 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80092bc:	2100      	movs	r1, #0
 80092be:	2020      	movs	r0, #32
 80092c0:	f7ff ff90 	bl	80091e4 <LCD_write>
  LCD_write(0x0C, LCD_COMMAND); //LCD basic commands.
 80092c4:	2100      	movs	r1, #0
 80092c6:	200c      	movs	r0, #12
 80092c8:	f7ff ff8c 	bl	80091e4 <LCD_write>

  LCD_clrScr();
 80092cc:	f000 f876 	bl	80093bc <LCD_clrScr>
 // LCD_write(0x09, LCD_COMMAND);
}
 80092d0:	bf00      	nop
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000c2c 	.word	0x20000c2c

080092d8 <LCD_invert>:

void LCD_invert(uint8_t mode){
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
  if(mode == 1){
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d104      	bne.n	80092f2 <LCD_invert+0x1a>
    LCD_write(LCD_DISPLAY_INVERTED, LCD_COMMAND);
 80092e8:	2100      	movs	r1, #0
 80092ea:	200d      	movs	r0, #13
 80092ec:	f7ff ff7a 	bl	80091e4 <LCD_write>
  }
  else{
    LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND);
  }
}
 80092f0:	e003      	b.n	80092fa <LCD_invert+0x22>
    LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND);
 80092f2:	2100      	movs	r1, #0
 80092f4:	200c      	movs	r0, #12
 80092f6:	f7ff ff75 	bl	80091e4 <LCD_write>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <LCD_putChar>:

void LCD_putChar(char c){
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e02a      	b.n	800936a <LCD_putChar+0x66>
    if(lcd.inverttext != 1)
 8009314:	4b18      	ldr	r3, [pc, #96]	; (8009378 <LCD_putChar+0x74>)
 8009316:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800931a:	2b01      	cmp	r3, #1
 800931c:	d010      	beq.n	8009340 <LCD_putChar+0x3c>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	f1a3 0220 	sub.w	r2, r3, #32
 8009324:	4915      	ldr	r1, [pc, #84]	; (800937c <LCD_putChar+0x78>)
 8009326:	4613      	mov	r3, r2
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	4413      	add	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	18ca      	adds	r2, r1, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2101      	movs	r1, #1
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff ff53 	bl	80091e4 <LCD_write>
 800933e:	e011      	b.n	8009364 <LCD_putChar+0x60>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	f1a3 0220 	sub.w	r2, r3, #32
 8009346:	490d      	ldr	r1, [pc, #52]	; (800937c <LCD_putChar+0x78>)
 8009348:	4613      	mov	r3, r2
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	4413      	add	r3, r2
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	18ca      	adds	r2, r1, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4413      	add	r3, r2
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	43db      	mvns	r3, r3
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2101      	movs	r1, #1
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff40 	bl	80091e4 <LCD_write>
  for(int i = 0; i < 6; i++){
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3301      	adds	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b05      	cmp	r3, #5
 800936e:	ddd1      	ble.n	8009314 <LCD_putChar+0x10>
  }
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000c54 	.word	0x20000c54
 800937c:	0800c918 	.word	0x0800c918

08009380 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
 800938c:	4613      	mov	r3, r2
 800938e:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8009390:	78ba      	ldrb	r2, [r7, #2]
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f852 	bl	8009440 <LCD_goXY>
  while(*str){
 800939c:	e006      	b.n	80093ac <LCD_print+0x2c>
    LCD_putChar(*str++);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff ffac 	bl	8009304 <LCD_putChar>
  while(*str){
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f4      	bne.n	800939e <LCD_print+0x1e>
  }
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 80093c2:	2300      	movs	r3, #0
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	e00b      	b.n	80093e0 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 80093c8:	2101      	movs	r1, #1
 80093ca:	2000      	movs	r0, #0
 80093cc:	f7ff ff0a 	bl	80091e4 <LCD_write>
    lcd.buffer[i] = 0;
 80093d0:	4a07      	ldr	r2, [pc, #28]	; (80093f0 <LCD_clrScr+0x34>)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3301      	adds	r3, #1
 80093de:	607b      	str	r3, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80093e6:	dbef      	blt.n	80093c8 <LCD_clrScr+0xc>
  }
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20000c54 	.word	0x20000c54

080093f4 <LCD_printBuffer>:
    LCD_write(0x0A, LCD_DATA);
    lcd.buffer[i] = 0;
  }
}

void LCD_printBuffer(char data[]){
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < 504 ; i++){
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e013      	b.n	800942a <LCD_printBuffer+0x36>
    LCD_write(data[i], LCD_DATA);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	4413      	add	r3, r2
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2101      	movs	r1, #1
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff fee9 	bl	80091e4 <LCD_write>
    //HAL_Delay(100);
    lcd.buffer[i] = data[i];
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	7819      	ldrb	r1, [r3, #0]
 800941a:	4a08      	ldr	r2, [pc, #32]	; (800943c <LCD_printBuffer+0x48>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	460a      	mov	r2, r1
 8009422:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504 ; i++){
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8009430:	dbe7      	blt.n	8009402 <LCD_printBuffer+0xe>
  }
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000c54 	.word	0x20000c54

08009440 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	460a      	mov	r2, r1
 800944a:	71fb      	strb	r3, [r7, #7]
 800944c:	4613      	mov	r3, r2
 800944e:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fec2 	bl	80091e4 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8009460:	79bb      	ldrb	r3, [r7, #6]
 8009462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff feba 	bl	80091e4 <LCD_write>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800947e:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <HAL_MspInit+0x5c>)
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	4a14      	ldr	r2, [pc, #80]	; (80094d4 <HAL_MspInit+0x5c>)
 8009484:	f043 0301 	orr.w	r3, r3, #1
 8009488:	6193      	str	r3, [r2, #24]
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <HAL_MspInit+0x5c>)
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	60bb      	str	r3, [r7, #8]
 8009494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <HAL_MspInit+0x5c>)
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	4a0e      	ldr	r2, [pc, #56]	; (80094d4 <HAL_MspInit+0x5c>)
 800949c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094a0:	61d3      	str	r3, [r2, #28]
 80094a2:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <HAL_MspInit+0x5c>)
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <HAL_MspInit+0x60>)
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	4a04      	ldr	r2, [pc, #16]	; (80094d8 <HAL_MspInit+0x60>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094ca:	bf00      	nop
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bc80      	pop	{r7}
 80094d2:	4770      	bx	lr
 80094d4:	40021000 	.word	0x40021000
 80094d8:	40010000 	.word	0x40010000

080094dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	; 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a1d      	ldr	r2, [pc, #116]	; (800956c <HAL_I2C_MspInit+0x90>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d132      	bne.n	8009562 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094fc:	4b1c      	ldr	r3, [pc, #112]	; (8009570 <HAL_I2C_MspInit+0x94>)
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	4a1b      	ldr	r2, [pc, #108]	; (8009570 <HAL_I2C_MspInit+0x94>)
 8009502:	f043 0308 	orr.w	r3, r3, #8
 8009506:	6193      	str	r3, [r2, #24]
 8009508:	4b19      	ldr	r3, [pc, #100]	; (8009570 <HAL_I2C_MspInit+0x94>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009514:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800951a:	2312      	movs	r3, #18
 800951c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800951e:	2303      	movs	r3, #3
 8009520:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009522:	f107 0314 	add.w	r3, r7, #20
 8009526:	4619      	mov	r1, r3
 8009528:	4812      	ldr	r0, [pc, #72]	; (8009574 <HAL_I2C_MspInit+0x98>)
 800952a:	f7f7 ff83 	bl	8001434 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800952e:	4b12      	ldr	r3, [pc, #72]	; (8009578 <HAL_I2C_MspInit+0x9c>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	f043 0302 	orr.w	r3, r3, #2
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
 8009544:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <HAL_I2C_MspInit+0x9c>)
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800954a:	4b09      	ldr	r3, [pc, #36]	; (8009570 <HAL_I2C_MspInit+0x94>)
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	4a08      	ldr	r2, [pc, #32]	; (8009570 <HAL_I2C_MspInit+0x94>)
 8009550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009554:	61d3      	str	r3, [r2, #28]
 8009556:	4b06      	ldr	r3, [pc, #24]	; (8009570 <HAL_I2C_MspInit+0x94>)
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009562:	bf00      	nop
 8009564:	3728      	adds	r7, #40	; 0x28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40005400 	.word	0x40005400
 8009570:	40021000 	.word	0x40021000
 8009574:	40010c00 	.word	0x40010c00
 8009578:	40010000 	.word	0x40010000

0800957c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a0d      	ldr	r2, [pc, #52]	; (80095c0 <HAL_TIM_Base_MspInit+0x44>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d113      	bne.n	80095b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800958e:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <HAL_TIM_Base_MspInit+0x48>)
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <HAL_TIM_Base_MspInit+0x48>)
 8009594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009598:	6193      	str	r3, [r2, #24]
 800959a:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <HAL_TIM_Base_MspInit+0x48>)
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	2019      	movs	r0, #25
 80095ac:	f7f7 fe95 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80095b0:	2019      	movs	r0, #25
 80095b2:	f7f7 feae 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	40012c00 	.word	0x40012c00
 80095c4:	40021000 	.word	0x40021000

080095c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095d0:	f107 0318 	add.w	r3, r7, #24
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	605a      	str	r2, [r3, #4]
 80095da:	609a      	str	r2, [r3, #8]
 80095dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a3f      	ldr	r2, [pc, #252]	; (80096e0 <HAL_UART_MspInit+0x118>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d13a      	bne.n	800965e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80095e8:	4b3e      	ldr	r3, [pc, #248]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	4a3d      	ldr	r2, [pc, #244]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 80095ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095f2:	6193      	str	r3, [r2, #24]
 80095f4:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009600:	4b38      	ldr	r3, [pc, #224]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	4a37      	ldr	r2, [pc, #220]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 8009606:	f043 0304 	orr.w	r3, r3, #4
 800960a:	6193      	str	r3, [r2, #24]
 800960c:	4b35      	ldr	r3, [pc, #212]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	613b      	str	r3, [r7, #16]
 8009616:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800961c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800961e:	2302      	movs	r3, #2
 8009620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009622:	2303      	movs	r3, #3
 8009624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009626:	f107 0318 	add.w	r3, r7, #24
 800962a:	4619      	mov	r1, r3
 800962c:	482e      	ldr	r0, [pc, #184]	; (80096e8 <HAL_UART_MspInit+0x120>)
 800962e:	f7f7 ff01 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009638:	2300      	movs	r3, #0
 800963a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800963c:	2300      	movs	r3, #0
 800963e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009640:	f107 0318 	add.w	r3, r7, #24
 8009644:	4619      	mov	r1, r3
 8009646:	4828      	ldr	r0, [pc, #160]	; (80096e8 <HAL_UART_MspInit+0x120>)
 8009648:	f7f7 fef4 	bl	8001434 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 800964c:	2200      	movs	r2, #0
 800964e:	2104      	movs	r1, #4
 8009650:	2025      	movs	r0, #37	; 0x25
 8009652:	f7f7 fe42 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009656:	2025      	movs	r0, #37	; 0x25
 8009658:	f7f7 fe5b 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800965c:	e03c      	b.n	80096d8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a22      	ldr	r2, [pc, #136]	; (80096ec <HAL_UART_MspInit+0x124>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d137      	bne.n	80096d8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009668:	4b1e      	ldr	r3, [pc, #120]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 800966e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009672:	61d3      	str	r3, [r2, #28]
 8009674:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009680:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	4a17      	ldr	r2, [pc, #92]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 8009686:	f043 0304 	orr.w	r3, r3, #4
 800968a:	6193      	str	r3, [r2, #24]
 800968c:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <HAL_UART_MspInit+0x11c>)
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	60bb      	str	r3, [r7, #8]
 8009696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009698:	2304      	movs	r3, #4
 800969a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800969c:	2302      	movs	r3, #2
 800969e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80096a0:	2303      	movs	r3, #3
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096a4:	f107 0318 	add.w	r3, r7, #24
 80096a8:	4619      	mov	r1, r3
 80096aa:	480f      	ldr	r0, [pc, #60]	; (80096e8 <HAL_UART_MspInit+0x120>)
 80096ac:	f7f7 fec2 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80096b0:	2308      	movs	r3, #8
 80096b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096bc:	f107 0318 	add.w	r3, r7, #24
 80096c0:	4619      	mov	r1, r3
 80096c2:	4809      	ldr	r0, [pc, #36]	; (80096e8 <HAL_UART_MspInit+0x120>)
 80096c4:	f7f7 feb6 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80096c8:	2200      	movs	r2, #0
 80096ca:	2100      	movs	r1, #0
 80096cc:	2026      	movs	r0, #38	; 0x26
 80096ce:	f7f7 fe04 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80096d2:	2026      	movs	r0, #38	; 0x26
 80096d4:	f7f7 fe1d 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 80096d8:	bf00      	nop
 80096da:	3728      	adds	r7, #40	; 0x28
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	40013800 	.word	0x40013800
 80096e4:	40021000 	.word	0x40021000
 80096e8:	40010800 	.word	0x40010800
 80096ec:	40004400 	.word	0x40004400

080096f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096f4:	bf00      	nop
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bc80      	pop	{r7}
 80096fa:	4770      	bx	lr

080096fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009700:	e7fe      	b.n	8009700 <HardFault_Handler+0x4>

08009702 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009702:	b480      	push	{r7}
 8009704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009706:	e7fe      	b.n	8009706 <MemManage_Handler+0x4>

08009708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009708:	b480      	push	{r7}
 800970a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800970c:	e7fe      	b.n	800970c <BusFault_Handler+0x4>

0800970e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800970e:	b480      	push	{r7}
 8009710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009712:	e7fe      	b.n	8009712 <UsageFault_Handler+0x4>

08009714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009718:	bf00      	nop
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr

0800972c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009730:	bf00      	nop
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800973c:	f7f7 fcb8 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}

08009744 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009748:	4802      	ldr	r0, [pc, #8]	; (8009754 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800974a:	f7f9 f96a 	bl	8002a22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800974e:	bf00      	nop
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200018e4 	.word	0x200018e4

08009758 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800975c:	4802      	ldr	r0, [pc, #8]	; (8009768 <TIM1_UP_IRQHandler+0x10>)
 800975e:	f7fa fc5b 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000a80 	.word	0x20000a80

0800976c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009770:	4802      	ldr	r0, [pc, #8]	; (800977c <USART1_IRQHandler+0x10>)
 8009772:	f7fb f8bd 	bl	80048f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009776:	bf00      	nop
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000a14 	.word	0x20000a14

08009780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009784:	4802      	ldr	r0, [pc, #8]	; (8009790 <USART2_IRQHandler+0x10>)
 8009786:	f7fb f8b3 	bl	80048f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000bd8 	.word	0x20000bd8

08009794 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800979c:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <_sbrk+0x50>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d102      	bne.n	80097aa <_sbrk+0x16>
		heap_end = &end;
 80097a4:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <_sbrk+0x50>)
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <_sbrk+0x54>)
 80097a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80097aa:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <_sbrk+0x50>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <_sbrk+0x50>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4413      	add	r3, r2
 80097b8:	466a      	mov	r2, sp
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d907      	bls.n	80097ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80097be:	f000 fcdd 	bl	800a17c <__errno>
 80097c2:	4602      	mov	r2, r0
 80097c4:	230c      	movs	r3, #12
 80097c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097cc:	e006      	b.n	80097dc <_sbrk+0x48>
	}

	heap_end += incr;
 80097ce:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <_sbrk+0x50>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	4a03      	ldr	r2, [pc, #12]	; (80097e4 <_sbrk+0x50>)
 80097d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80097da:	68fb      	ldr	r3, [r7, #12]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000568 	.word	0x20000568
 80097e8:	20001d58 	.word	0x20001d58

080097ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80097f0:	4b15      	ldr	r3, [pc, #84]	; (8009848 <SystemInit+0x5c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a14      	ldr	r2, [pc, #80]	; (8009848 <SystemInit+0x5c>)
 80097f6:	f043 0301 	orr.w	r3, r3, #1
 80097fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80097fc:	4b12      	ldr	r3, [pc, #72]	; (8009848 <SystemInit+0x5c>)
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	4911      	ldr	r1, [pc, #68]	; (8009848 <SystemInit+0x5c>)
 8009802:	4b12      	ldr	r3, [pc, #72]	; (800984c <SystemInit+0x60>)
 8009804:	4013      	ands	r3, r2
 8009806:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <SystemInit+0x5c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0e      	ldr	r2, [pc, #56]	; (8009848 <SystemInit+0x5c>)
 800980e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009816:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <SystemInit+0x5c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a0a      	ldr	r2, [pc, #40]	; (8009848 <SystemInit+0x5c>)
 800981e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009822:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009824:	4b08      	ldr	r3, [pc, #32]	; (8009848 <SystemInit+0x5c>)
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a07      	ldr	r2, [pc, #28]	; (8009848 <SystemInit+0x5c>)
 800982a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800982e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <SystemInit+0x5c>)
 8009832:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8009836:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009838:	4b05      	ldr	r3, [pc, #20]	; (8009850 <SystemInit+0x64>)
 800983a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800983e:	609a      	str	r2, [r3, #8]
#endif 
}
 8009840:	bf00      	nop
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr
 8009848:	40021000 	.word	0x40021000
 800984c:	f8ff0000 	.word	0xf8ff0000
 8009850:	e000ed00 	.word	0xe000ed00

08009854 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009858:	2200      	movs	r2, #0
 800985a:	4912      	ldr	r1, [pc, #72]	; (80098a4 <MX_USB_DEVICE_Init+0x50>)
 800985c:	4812      	ldr	r0, [pc, #72]	; (80098a8 <MX_USB_DEVICE_Init+0x54>)
 800985e:	f7fc ff93 	bl	8006788 <USBD_Init>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009868:	f7fe fd02 	bl	8008270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800986c:	490f      	ldr	r1, [pc, #60]	; (80098ac <MX_USB_DEVICE_Init+0x58>)
 800986e:	480e      	ldr	r0, [pc, #56]	; (80098a8 <MX_USB_DEVICE_Init+0x54>)
 8009870:	f7fc ffb5 	bl	80067de <USBD_RegisterClass>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800987a:	f7fe fcf9 	bl	8008270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800987e:	490c      	ldr	r1, [pc, #48]	; (80098b0 <MX_USB_DEVICE_Init+0x5c>)
 8009880:	4809      	ldr	r0, [pc, #36]	; (80098a8 <MX_USB_DEVICE_Init+0x54>)
 8009882:	f7fc ff15 	bl	80066b0 <USBD_CDC_RegisterInterface>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800988c:	f7fe fcf0 	bl	8008270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009890:	4805      	ldr	r0, [pc, #20]	; (80098a8 <MX_USB_DEVICE_Init+0x54>)
 8009892:	f7fc ffbd 	bl	8006810 <USBD_Start>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800989c:	f7fe fce8 	bl	8008270 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098a0:	bf00      	nop
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000324 	.word	0x20000324
 80098a8:	20000e50 	.word	0x20000e50
 80098ac:	20000014 	.word	0x20000014
 80098b0:	20000314 	.word	0x20000314

080098b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098b8:	2200      	movs	r2, #0
 80098ba:	4905      	ldr	r1, [pc, #20]	; (80098d0 <CDC_Init_FS+0x1c>)
 80098bc:	4805      	ldr	r0, [pc, #20]	; (80098d4 <CDC_Init_FS+0x20>)
 80098be:	f7fc ff0d 	bl	80066dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098c2:	4905      	ldr	r1, [pc, #20]	; (80098d8 <CDC_Init_FS+0x24>)
 80098c4:	4803      	ldr	r0, [pc, #12]	; (80098d4 <CDC_Init_FS+0x20>)
 80098c6:	f7fc ff22 	bl	800670e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	200014fc 	.word	0x200014fc
 80098d4:	20000e50 	.word	0x20000e50
 80098d8:	20001114 	.word	0x20001114

080098dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bc80      	pop	{r7}
 80098e8:	4770      	bx	lr
	...

080098ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
 80098f8:	4613      	mov	r3, r2
 80098fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b23      	cmp	r3, #35	; 0x23
 8009900:	d84a      	bhi.n	8009998 <CDC_Control_FS+0xac>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <CDC_Control_FS+0x1c>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009999 	.word	0x08009999
 800990c:	08009999 	.word	0x08009999
 8009910:	08009999 	.word	0x08009999
 8009914:	08009999 	.word	0x08009999
 8009918:	08009999 	.word	0x08009999
 800991c:	08009999 	.word	0x08009999
 8009920:	08009999 	.word	0x08009999
 8009924:	08009999 	.word	0x08009999
 8009928:	08009999 	.word	0x08009999
 800992c:	08009999 	.word	0x08009999
 8009930:	08009999 	.word	0x08009999
 8009934:	08009999 	.word	0x08009999
 8009938:	08009999 	.word	0x08009999
 800993c:	08009999 	.word	0x08009999
 8009940:	08009999 	.word	0x08009999
 8009944:	08009999 	.word	0x08009999
 8009948:	08009999 	.word	0x08009999
 800994c:	08009999 	.word	0x08009999
 8009950:	08009999 	.word	0x08009999
 8009954:	08009999 	.word	0x08009999
 8009958:	08009999 	.word	0x08009999
 800995c:	08009999 	.word	0x08009999
 8009960:	08009999 	.word	0x08009999
 8009964:	08009999 	.word	0x08009999
 8009968:	08009999 	.word	0x08009999
 800996c:	08009999 	.word	0x08009999
 8009970:	08009999 	.word	0x08009999
 8009974:	08009999 	.word	0x08009999
 8009978:	08009999 	.word	0x08009999
 800997c:	08009999 	.word	0x08009999
 8009980:	08009999 	.word	0x08009999
 8009984:	08009999 	.word	0x08009999
 8009988:	08009999 	.word	0x08009999
 800998c:	08009999 	.word	0x08009999
 8009990:	08009999 	.word	0x08009999
 8009994:	08009999 	.word	0x08009999
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009998:	bf00      	nop
  }

  return (USBD_OK);
 800999a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bc80      	pop	{r7}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop

080099a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4805      	ldr	r0, [pc, #20]	; (80099cc <CDC_Receive_FS+0x24>)
 80099b6:	f7fc feaa 	bl	800670e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099ba:	4804      	ldr	r0, [pc, #16]	; (80099cc <CDC_Receive_FS+0x24>)
 80099bc:	f7fc feba 	bl	8006734 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000e50 	.word	0x20000e50

080099d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a0d      	ldr	r2, [pc, #52]	; (8009a14 <HAL_PCD_MspInit+0x44>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d113      	bne.n	8009a0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099e2:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <HAL_PCD_MspInit+0x48>)
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	4a0c      	ldr	r2, [pc, #48]	; (8009a18 <HAL_PCD_MspInit+0x48>)
 80099e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099ec:	61d3      	str	r3, [r2, #28]
 80099ee:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <HAL_PCD_MspInit+0x48>)
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80099fa:	2200      	movs	r2, #0
 80099fc:	2100      	movs	r1, #0
 80099fe:	2014      	movs	r0, #20
 8009a00:	f7f7 fc6b 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a04:	2014      	movs	r0, #20
 8009a06:	f7f7 fc84 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	40005c00 	.word	0x40005c00
 8009a18:	40021000 	.word	0x40021000

08009a1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7fc ff34 	bl	80068a0 <USBD_LL_SetupStage>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	015b      	lsls	r3, r3, #5
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	4619      	mov	r1, r3
 8009a64:	f7fc ff67 	bl	8006936 <USBD_LL_DataOutStage>
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	015b      	lsls	r3, r3, #5
 8009a88:	4413      	add	r3, r2
 8009a8a:	333c      	adds	r3, #60	; 0x3c
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f7fc ffc1 	bl	8006a18 <USBD_LL_DataInStage>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fd f8d1 	bl	8006c54 <USBD_LL_SOF>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d001      	beq.n	8009ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ace:	f7fe fbcf 	bl	8008270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fd f881 	bl	8006be4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fd f83a 	bl	8006b62 <USBD_LL_Reset>
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd f87b 	bl	8006c02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <HAL_PCD_SuspendCallback+0x30>)
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	4a03      	ldr	r2, [pc, #12]	; (8009b28 <HAL_PCD_SuspendCallback+0x30>)
 8009b1a:	f043 0306 	orr.w	r3, r3, #6
 8009b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fd f875 	bl	8006c2a <USBD_LL_Resume>
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b50:	4a28      	ldr	r2, [pc, #160]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a26      	ldr	r2, [pc, #152]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b60:	4b24      	ldr	r3, [pc, #144]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b62:	4a25      	ldr	r2, [pc, #148]	; (8009bf8 <USBD_LL_Init+0xb0>)
 8009b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b66:	4b23      	ldr	r3, [pc, #140]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b68:	2208      	movs	r2, #8
 8009b6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b6c:	4b21      	ldr	r3, [pc, #132]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b6e:	2202      	movs	r2, #2
 8009b70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b72:	4b20      	ldr	r3, [pc, #128]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009b78:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b7e:	4b1d      	ldr	r3, [pc, #116]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b84:	481b      	ldr	r0, [pc, #108]	; (8009bf4 <USBD_LL_Init+0xac>)
 8009b86:	f7f8 fe45 	bl	8002814 <HAL_PCD_Init>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b90:	f7fe fb6e 	bl	8008270 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b9a:	2318      	movs	r3, #24
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	f7f9 fcde 	bl	8003560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009baa:	2358      	movs	r3, #88	; 0x58
 8009bac:	2200      	movs	r2, #0
 8009bae:	2180      	movs	r1, #128	; 0x80
 8009bb0:	f7f9 fcd6 	bl	8003560 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bba:	23c0      	movs	r3, #192	; 0xc0
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2181      	movs	r1, #129	; 0x81
 8009bc0:	f7f9 fcce 	bl	8003560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	f7f9 fcc5 	bl	8003560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	2200      	movs	r2, #0
 8009be2:	2182      	movs	r1, #130	; 0x82
 8009be4:	f7f9 fcbc 	bl	8003560 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200018e4 	.word	0x200018e4
 8009bf8:	40005c00 	.word	0x40005c00

08009bfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7f8 fedf 	bl	80029d6 <HAL_PCD_Start>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f948 	bl	8009eb4 <USBD_Get_USB_Status>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	4608      	mov	r0, r1
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4603      	mov	r3, r0
 8009c42:	70fb      	strb	r3, [r7, #3]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70bb      	strb	r3, [r7, #2]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c5a:	78bb      	ldrb	r3, [r7, #2]
 8009c5c:	883a      	ldrh	r2, [r7, #0]
 8009c5e:	78f9      	ldrb	r1, [r7, #3]
 8009c60:	f7f9 f812 	bl	8002c88 <HAL_PCD_EP_Open>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 f922 	bl	8009eb4 <USBD_Get_USB_Status>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	460b      	mov	r3, r1
 8009c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7f9 f853 	bl	8002d48 <HAL_PCD_EP_Close>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f903 	bl	8009eb4 <USBD_Get_USB_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f9 f8fd 	bl	8002eda <HAL_PCD_EP_SetStall>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f8e4 	bl	8009eb4 <USBD_Get_USB_Status>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f9 f938 	bl	8002f8e <HAL_PCD_EP_ClrStall>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f8c5 	bl	8009eb4 <USBD_Get_USB_Status>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d4a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da08      	bge.n	8009d66 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	015b      	lsls	r3, r3, #5
 8009d5e:	4413      	add	r3, r2
 8009d60:	332a      	adds	r3, #42	; 0x2a
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	e008      	b.n	8009d78 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	015b      	lsls	r3, r3, #5
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009d76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr

08009d82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d9c:	78fa      	ldrb	r2, [r7, #3]
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7f8 ff4c 	bl	8002c3e <HAL_PCD_SetAddress>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 f881 	bl	8009eb4 <USBD_Get_USB_Status>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	460b      	mov	r3, r1
 8009dce:	72fb      	strb	r3, [r7, #11]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009de2:	893b      	ldrh	r3, [r7, #8]
 8009de4:	7af9      	ldrb	r1, [r7, #11]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	f7f9 f83e 	bl	8002e68 <HAL_PCD_EP_Transmit>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 f85e 	bl	8009eb4 <USBD_Get_USB_Status>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	461a      	mov	r2, r3
 8009e12:	460b      	mov	r3, r1
 8009e14:	72fb      	strb	r3, [r7, #11]
 8009e16:	4613      	mov	r3, r2
 8009e18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e28:	893b      	ldrh	r3, [r7, #8]
 8009e2a:	7af9      	ldrb	r1, [r7, #11]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	f7f8 ffcd 	bl	8002dcc <HAL_PCD_EP_Receive>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 f83b 	bl	8009eb4 <USBD_Get_USB_Status>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009e42:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f8 ffec 	bl	8002e40 <HAL_PCD_EP_GetRxCount>
 8009e68:	4603      	mov	r3, r0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <USBD_static_malloc+0x14>)
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr
 8009e88:	2000056c 	.word	0x2000056c

08009e8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]

}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bc80      	pop	{r7}
 8009eb2:	4770      	bx	lr

08009eb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d817      	bhi.n	8009ef8 <USBD_Get_USB_Status+0x44>
 8009ec8:	a201      	add	r2, pc, #4	; (adr r2, 8009ed0 <USBD_Get_USB_Status+0x1c>)
 8009eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ece:	bf00      	nop
 8009ed0:	08009ee1 	.word	0x08009ee1
 8009ed4:	08009ee7 	.word	0x08009ee7
 8009ed8:	08009eed 	.word	0x08009eed
 8009edc:	08009ef3 	.word	0x08009ef3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee4:	e00b      	b.n	8009efe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eea:	e008      	b.n	8009efe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eec:	2301      	movs	r3, #1
 8009eee:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef0:	e005      	b.n	8009efe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef6:	e002      	b.n	8009efe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	73fb      	strb	r3, [r7, #15]
    break;
 8009efc:	bf00      	nop
  }
  return usb_status;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop

08009f0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2212      	movs	r2, #18
 8009f1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f1e:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000340 	.word	0x20000340

08009f30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	6039      	str	r1, [r7, #0]
 8009f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f42:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20000354 	.word	0x20000354

08009f54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f6a:	4808      	ldr	r0, [pc, #32]	; (8009f8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f6c:	f7fd fbbb 	bl	80076e6 <USBD_GetString>
 8009f70:	e004      	b.n	8009f7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4904      	ldr	r1, [pc, #16]	; (8009f88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f78:	f7fd fbb5 	bl	80076e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20001b50 	.word	0x20001b50
 8009f8c:	0800c874 	.word	0x0800c874

08009f90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4904      	ldr	r1, [pc, #16]	; (8009fb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fa0:	4804      	ldr	r0, [pc, #16]	; (8009fb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fa2:	f7fd fba0 	bl	80076e6 <USBD_GetString>
  return USBD_StrDesc;
 8009fa6:	4b02      	ldr	r3, [pc, #8]	; (8009fb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20001b50 	.word	0x20001b50
 8009fb4:	0800c88c 	.word	0x0800c88c

08009fb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	221a      	movs	r2, #26
 8009fc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fca:	f000 f843 	bl	800a054 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009fce:	4b02      	ldr	r3, [pc, #8]	; (8009fd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20000358 	.word	0x20000358

08009fdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d105      	bne.n	8009ffa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4907      	ldr	r1, [pc, #28]	; (800a010 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ff2:	4808      	ldr	r0, [pc, #32]	; (800a014 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ff4:	f7fd fb77 	bl	80076e6 <USBD_GetString>
 8009ff8:	e004      	b.n	800a004 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4904      	ldr	r1, [pc, #16]	; (800a010 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ffe:	4805      	ldr	r0, [pc, #20]	; (800a014 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a000:	f7fd fb71 	bl	80076e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20001b50 	.word	0x20001b50
 800a014:	0800c8a0 	.word	0x0800c8a0

0800a018 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d105      	bne.n	800a036 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	4907      	ldr	r1, [pc, #28]	; (800a04c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a02e:	4808      	ldr	r0, [pc, #32]	; (800a050 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a030:	f7fd fb59 	bl	80076e6 <USBD_GetString>
 800a034:	e004      	b.n	800a040 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4904      	ldr	r1, [pc, #16]	; (800a04c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a03a:	4805      	ldr	r0, [pc, #20]	; (800a050 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a03c:	f7fd fb53 	bl	80076e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a040:	4b02      	ldr	r3, [pc, #8]	; (800a04c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20001b50 	.word	0x20001b50
 800a050:	0800c8ac 	.word	0x0800c8ac

0800a054 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a05a:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <Get_SerialNum+0x44>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <Get_SerialNum+0x48>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <Get_SerialNum+0x4c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a07a:	2208      	movs	r2, #8
 800a07c:	4909      	ldr	r1, [pc, #36]	; (800a0a4 <Get_SerialNum+0x50>)
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 f814 	bl	800a0ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a084:	2204      	movs	r2, #4
 800a086:	4908      	ldr	r1, [pc, #32]	; (800a0a8 <Get_SerialNum+0x54>)
 800a088:	68b8      	ldr	r0, [r7, #8]
 800a08a:	f000 f80f 	bl	800a0ac <IntToUnicode>
  }
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	1ffff7e8 	.word	0x1ffff7e8
 800a09c:	1ffff7ec 	.word	0x1ffff7ec
 800a0a0:	1ffff7f0 	.word	0x1ffff7f0
 800a0a4:	2000035a 	.word	0x2000035a
 800a0a8:	2000036a 	.word	0x2000036a

0800a0ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75fb      	strb	r3, [r7, #23]
 800a0c2:	e027      	b.n	800a114 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	0f1b      	lsrs	r3, r3, #28
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	d80b      	bhi.n	800a0e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	0f1b      	lsrs	r3, r3, #28
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	440b      	add	r3, r1
 800a0dc:	3230      	adds	r2, #48	; 0x30
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e00a      	b.n	800a0fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	0f1b      	lsrs	r3, r3, #28
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3237      	adds	r2, #55	; 0x37
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	3301      	adds	r3, #1
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	4413      	add	r3, r2
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	3301      	adds	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]
 800a114:	7dfa      	ldrb	r2, [r7, #23]
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3d3      	bcc.n	800a0c4 <IntToUnicode+0x18>
  }
}
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr
	...

0800a128 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a128:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a12a:	e003      	b.n	800a134 <LoopCopyDataInit>

0800a12c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a12c:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a12e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a130:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a132:	3104      	adds	r1, #4

0800a134 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a134:	480a      	ldr	r0, [pc, #40]	; (800a160 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a136:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a138:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a13a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a13c:	d3f6      	bcc.n	800a12c <CopyDataInit>
  ldr r2, =_sbss
 800a13e:	4a0a      	ldr	r2, [pc, #40]	; (800a168 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a140:	e002      	b.n	800a148 <LoopFillZerobss>

0800a142 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a142:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a144:	f842 3b04 	str.w	r3, [r2], #4

0800a148 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a148:	4b08      	ldr	r3, [pc, #32]	; (800a16c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a14a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a14c:	d3f9      	bcc.n	800a142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a14e:	f7ff fb4d 	bl	80097ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a152:	f000 f819 	bl	800a188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a156:	f7fd fc43 	bl	80079e0 <main>
  bx lr
 800a15a:	4770      	bx	lr
  ldr r3, =_sidata
 800a15c:	0800ce50 	.word	0x0800ce50
  ldr r0, =_sdata
 800a160:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a164:	20000548 	.word	0x20000548
  ldr r2, =_sbss
 800a168:	20000548 	.word	0x20000548
  ldr r3, = _ebss
 800a16c:	20001d54 	.word	0x20001d54

0800a170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a170:	e7fe      	b.n	800a170 <ADC1_2_IRQHandler>

0800a172 <atoi>:
 800a172:	220a      	movs	r2, #10
 800a174:	2100      	movs	r1, #0
 800a176:	f000 bf81 	b.w	800b07c <strtol>
	...

0800a17c <__errno>:
 800a17c:	4b01      	ldr	r3, [pc, #4]	; (800a184 <__errno+0x8>)
 800a17e:	6818      	ldr	r0, [r3, #0]
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000374 	.word	0x20000374

0800a188 <__libc_init_array>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	2500      	movs	r5, #0
 800a18c:	4e0c      	ldr	r6, [pc, #48]	; (800a1c0 <__libc_init_array+0x38>)
 800a18e:	4c0d      	ldr	r4, [pc, #52]	; (800a1c4 <__libc_init_array+0x3c>)
 800a190:	1ba4      	subs	r4, r4, r6
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	42a5      	cmp	r5, r4
 800a196:	d109      	bne.n	800a1ac <__libc_init_array+0x24>
 800a198:	f002 fb1a 	bl	800c7d0 <_init>
 800a19c:	2500      	movs	r5, #0
 800a19e:	4e0a      	ldr	r6, [pc, #40]	; (800a1c8 <__libc_init_array+0x40>)
 800a1a0:	4c0a      	ldr	r4, [pc, #40]	; (800a1cc <__libc_init_array+0x44>)
 800a1a2:	1ba4      	subs	r4, r4, r6
 800a1a4:	10a4      	asrs	r4, r4, #2
 800a1a6:	42a5      	cmp	r5, r4
 800a1a8:	d105      	bne.n	800a1b6 <__libc_init_array+0x2e>
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1b0:	4798      	blx	r3
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	e7ee      	b.n	800a194 <__libc_init_array+0xc>
 800a1b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1ba:	4798      	blx	r3
 800a1bc:	3501      	adds	r5, #1
 800a1be:	e7f2      	b.n	800a1a6 <__libc_init_array+0x1e>
 800a1c0:	0800ce48 	.word	0x0800ce48
 800a1c4:	0800ce48 	.word	0x0800ce48
 800a1c8:	0800ce48 	.word	0x0800ce48
 800a1cc:	0800ce4c 	.word	0x0800ce4c

0800a1d0 <__itoa>:
 800a1d0:	1e93      	subs	r3, r2, #2
 800a1d2:	2b22      	cmp	r3, #34	; 0x22
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	d904      	bls.n	800a1e4 <__itoa+0x14>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	461c      	mov	r4, r3
 800a1de:	700b      	strb	r3, [r1, #0]
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	bd10      	pop	{r4, pc}
 800a1e4:	2a0a      	cmp	r2, #10
 800a1e6:	d109      	bne.n	800a1fc <__itoa+0x2c>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	da07      	bge.n	800a1fc <__itoa+0x2c>
 800a1ec:	232d      	movs	r3, #45	; 0x2d
 800a1ee:	700b      	strb	r3, [r1, #0]
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4240      	negs	r0, r0
 800a1f4:	4421      	add	r1, r4
 800a1f6:	f000 ff57 	bl	800b0a8 <__utoa>
 800a1fa:	e7f1      	b.n	800a1e0 <__itoa+0x10>
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	e7f9      	b.n	800a1f4 <__itoa+0x24>

0800a200 <itoa>:
 800a200:	f7ff bfe6 	b.w	800a1d0 <__itoa>

0800a204 <memset>:
 800a204:	4603      	mov	r3, r0
 800a206:	4402      	add	r2, r0
 800a208:	4293      	cmp	r3, r2
 800a20a:	d100      	bne.n	800a20e <memset+0xa>
 800a20c:	4770      	bx	lr
 800a20e:	f803 1b01 	strb.w	r1, [r3], #1
 800a212:	e7f9      	b.n	800a208 <memset+0x4>

0800a214 <strcat>:
 800a214:	4603      	mov	r3, r0
 800a216:	b510      	push	{r4, lr}
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	1c5c      	adds	r4, r3, #1
 800a21c:	b93a      	cbnz	r2, 800a22e <strcat+0x1a>
 800a21e:	3b01      	subs	r3, #1
 800a220:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a224:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a228:	2a00      	cmp	r2, #0
 800a22a:	d1f9      	bne.n	800a220 <strcat+0xc>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	4623      	mov	r3, r4
 800a230:	e7f2      	b.n	800a218 <strcat+0x4>

0800a232 <strcpy>:
 800a232:	4603      	mov	r3, r0
 800a234:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a238:	f803 2b01 	strb.w	r2, [r3], #1
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	d1f9      	bne.n	800a234 <strcpy+0x2>
 800a240:	4770      	bx	lr

0800a242 <strstr>:
 800a242:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a244:	7803      	ldrb	r3, [r0, #0]
 800a246:	b17b      	cbz	r3, 800a268 <strstr+0x26>
 800a248:	4604      	mov	r4, r0
 800a24a:	7823      	ldrb	r3, [r4, #0]
 800a24c:	4620      	mov	r0, r4
 800a24e:	1c66      	adds	r6, r4, #1
 800a250:	b17b      	cbz	r3, 800a272 <strstr+0x30>
 800a252:	1e4a      	subs	r2, r1, #1
 800a254:	1e63      	subs	r3, r4, #1
 800a256:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a25a:	b14d      	cbz	r5, 800a270 <strstr+0x2e>
 800a25c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a260:	4634      	mov	r4, r6
 800a262:	42af      	cmp	r7, r5
 800a264:	d0f7      	beq.n	800a256 <strstr+0x14>
 800a266:	e7f0      	b.n	800a24a <strstr+0x8>
 800a268:	780b      	ldrb	r3, [r1, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bf18      	it	ne
 800a26e:	2000      	movne	r0, #0
 800a270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a272:	4618      	mov	r0, r3
 800a274:	e7fc      	b.n	800a270 <strstr+0x2e>

0800a276 <sulp>:
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	460f      	mov	r7, r1
 800a27c:	4690      	mov	r8, r2
 800a27e:	f001 fd6f 	bl	800bd60 <__ulp>
 800a282:	4604      	mov	r4, r0
 800a284:	460d      	mov	r5, r1
 800a286:	f1b8 0f00 	cmp.w	r8, #0
 800a28a:	d011      	beq.n	800a2b0 <sulp+0x3a>
 800a28c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a290:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd0b      	ble.n	800a2b0 <sulp+0x3a>
 800a298:	2400      	movs	r4, #0
 800a29a:	051b      	lsls	r3, r3, #20
 800a29c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	f7f6 f916 	bl	80004d8 <__aeabi_dmul>
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2b8 <_strtod_l>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	461f      	mov	r7, r3
 800a2be:	2300      	movs	r3, #0
 800a2c0:	b0a1      	sub	sp, #132	; 0x84
 800a2c2:	4683      	mov	fp, r0
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	460e      	mov	r6, r1
 800a2c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2ca:	931c      	str	r3, [sp, #112]	; 0x70
 800a2cc:	f001 fa55 	bl	800b77a <__localeconv_l>
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	f7f5 ff3c 	bl	8000150 <strlen>
 800a2d8:	f04f 0900 	mov.w	r9, #0
 800a2dc:	4604      	mov	r4, r0
 800a2de:	f04f 0a00 	mov.w	sl, #0
 800a2e2:	961b      	str	r6, [sp, #108]	; 0x6c
 800a2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	2a0d      	cmp	r2, #13
 800a2ea:	d832      	bhi.n	800a352 <_strtod_l+0x9a>
 800a2ec:	2a09      	cmp	r2, #9
 800a2ee:	d236      	bcs.n	800a35e <_strtod_l+0xa6>
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	d03e      	beq.n	800a372 <_strtod_l+0xba>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a2f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a2fa:	782b      	ldrb	r3, [r5, #0]
 800a2fc:	2b30      	cmp	r3, #48	; 0x30
 800a2fe:	f040 80ac 	bne.w	800a45a <_strtod_l+0x1a2>
 800a302:	786b      	ldrb	r3, [r5, #1]
 800a304:	2b58      	cmp	r3, #88	; 0x58
 800a306:	d001      	beq.n	800a30c <_strtod_l+0x54>
 800a308:	2b78      	cmp	r3, #120	; 0x78
 800a30a:	d167      	bne.n	800a3dc <_strtod_l+0x124>
 800a30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a30e:	9702      	str	r7, [sp, #8]
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	ab1c      	add	r3, sp, #112	; 0x70
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	4a89      	ldr	r2, [pc, #548]	; (800a53c <_strtod_l+0x284>)
 800a318:	ab1d      	add	r3, sp, #116	; 0x74
 800a31a:	a91b      	add	r1, sp, #108	; 0x6c
 800a31c:	4658      	mov	r0, fp
 800a31e:	f000 ff51 	bl	800b1c4 <__gethex>
 800a322:	f010 0407 	ands.w	r4, r0, #7
 800a326:	4606      	mov	r6, r0
 800a328:	d005      	beq.n	800a336 <_strtod_l+0x7e>
 800a32a:	2c06      	cmp	r4, #6
 800a32c:	d12b      	bne.n	800a386 <_strtod_l+0xce>
 800a32e:	2300      	movs	r3, #0
 800a330:	3501      	adds	r5, #1
 800a332:	951b      	str	r5, [sp, #108]	; 0x6c
 800a334:	930d      	str	r3, [sp, #52]	; 0x34
 800a336:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 85a6 	bne.w	800ae8a <_strtod_l+0xbd2>
 800a33e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a340:	b1e3      	cbz	r3, 800a37c <_strtod_l+0xc4>
 800a342:	464a      	mov	r2, r9
 800a344:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a348:	4610      	mov	r0, r2
 800a34a:	4619      	mov	r1, r3
 800a34c:	b021      	add	sp, #132	; 0x84
 800a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a352:	2a2b      	cmp	r2, #43	; 0x2b
 800a354:	d015      	beq.n	800a382 <_strtod_l+0xca>
 800a356:	2a2d      	cmp	r2, #45	; 0x2d
 800a358:	d004      	beq.n	800a364 <_strtod_l+0xac>
 800a35a:	2a20      	cmp	r2, #32
 800a35c:	d1ca      	bne.n	800a2f4 <_strtod_l+0x3c>
 800a35e:	3301      	adds	r3, #1
 800a360:	931b      	str	r3, [sp, #108]	; 0x6c
 800a362:	e7bf      	b.n	800a2e4 <_strtod_l+0x2c>
 800a364:	2201      	movs	r2, #1
 800a366:	920d      	str	r2, [sp, #52]	; 0x34
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1c2      	bne.n	800a2f8 <_strtod_l+0x40>
 800a372:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a374:	961b      	str	r6, [sp, #108]	; 0x6c
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 8585 	bne.w	800ae86 <_strtod_l+0xbce>
 800a37c:	464a      	mov	r2, r9
 800a37e:	4653      	mov	r3, sl
 800a380:	e7e2      	b.n	800a348 <_strtod_l+0x90>
 800a382:	2200      	movs	r2, #0
 800a384:	e7ef      	b.n	800a366 <_strtod_l+0xae>
 800a386:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a388:	b13a      	cbz	r2, 800a39a <_strtod_l+0xe2>
 800a38a:	2135      	movs	r1, #53	; 0x35
 800a38c:	a81e      	add	r0, sp, #120	; 0x78
 800a38e:	f001 fdda 	bl	800bf46 <__copybits>
 800a392:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a394:	4658      	mov	r0, fp
 800a396:	f001 fa4c 	bl	800b832 <_Bfree>
 800a39a:	3c01      	subs	r4, #1
 800a39c:	2c04      	cmp	r4, #4
 800a39e:	d806      	bhi.n	800a3ae <_strtod_l+0xf6>
 800a3a0:	e8df f004 	tbb	[pc, r4]
 800a3a4:	1714030a 	.word	0x1714030a
 800a3a8:	0a          	.byte	0x0a
 800a3a9:	00          	.byte	0x00
 800a3aa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a3ae:	0731      	lsls	r1, r6, #28
 800a3b0:	d5c1      	bpl.n	800a336 <_strtod_l+0x7e>
 800a3b2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a3b6:	e7be      	b.n	800a336 <_strtod_l+0x7e>
 800a3b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a3ba:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a3be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3c6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a3ca:	e7f0      	b.n	800a3ae <_strtod_l+0xf6>
 800a3cc:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a540 <_strtod_l+0x288>
 800a3d0:	e7ed      	b.n	800a3ae <_strtod_l+0xf6>
 800a3d2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a3d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a3da:	e7e8      	b.n	800a3ae <_strtod_l+0xf6>
 800a3dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b30      	cmp	r3, #48	; 0x30
 800a3e6:	d0f9      	beq.n	800a3dc <_strtod_l+0x124>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d0a4      	beq.n	800a336 <_strtod_l+0x7e>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3f6:	9506      	str	r5, [sp, #24]
 800a3f8:	9308      	str	r3, [sp, #32]
 800a3fa:	9504      	str	r5, [sp, #16]
 800a3fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a3fe:	7807      	ldrb	r7, [r0, #0]
 800a400:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a404:	b2d9      	uxtb	r1, r3
 800a406:	2909      	cmp	r1, #9
 800a408:	d929      	bls.n	800a45e <_strtod_l+0x1a6>
 800a40a:	4622      	mov	r2, r4
 800a40c:	f8d8 1000 	ldr.w	r1, [r8]
 800a410:	f001 fe4c 	bl	800c0ac <strncmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	d031      	beq.n	800a47c <_strtod_l+0x1c4>
 800a418:	2000      	movs	r0, #0
 800a41a:	463b      	mov	r3, r7
 800a41c:	4602      	mov	r2, r0
 800a41e:	9c04      	ldr	r4, [sp, #16]
 800a420:	9005      	str	r0, [sp, #20]
 800a422:	2b65      	cmp	r3, #101	; 0x65
 800a424:	d001      	beq.n	800a42a <_strtod_l+0x172>
 800a426:	2b45      	cmp	r3, #69	; 0x45
 800a428:	d114      	bne.n	800a454 <_strtod_l+0x19c>
 800a42a:	b924      	cbnz	r4, 800a436 <_strtod_l+0x17e>
 800a42c:	b910      	cbnz	r0, 800a434 <_strtod_l+0x17c>
 800a42e:	9b07      	ldr	r3, [sp, #28]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d09e      	beq.n	800a372 <_strtod_l+0xba>
 800a434:	2400      	movs	r4, #0
 800a436:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a438:	1c73      	adds	r3, r6, #1
 800a43a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a43c:	7873      	ldrb	r3, [r6, #1]
 800a43e:	2b2b      	cmp	r3, #43	; 0x2b
 800a440:	d078      	beq.n	800a534 <_strtod_l+0x27c>
 800a442:	2b2d      	cmp	r3, #45	; 0x2d
 800a444:	d070      	beq.n	800a528 <_strtod_l+0x270>
 800a446:	f04f 0c00 	mov.w	ip, #0
 800a44a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a44e:	2f09      	cmp	r7, #9
 800a450:	d97c      	bls.n	800a54c <_strtod_l+0x294>
 800a452:	961b      	str	r6, [sp, #108]	; 0x6c
 800a454:	f04f 0e00 	mov.w	lr, #0
 800a458:	e09a      	b.n	800a590 <_strtod_l+0x2d8>
 800a45a:	2300      	movs	r3, #0
 800a45c:	e7c7      	b.n	800a3ee <_strtod_l+0x136>
 800a45e:	9904      	ldr	r1, [sp, #16]
 800a460:	3001      	adds	r0, #1
 800a462:	2908      	cmp	r1, #8
 800a464:	bfd7      	itett	le
 800a466:	9906      	ldrle	r1, [sp, #24]
 800a468:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a46c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a470:	9306      	strle	r3, [sp, #24]
 800a472:	9b04      	ldr	r3, [sp, #16]
 800a474:	901b      	str	r0, [sp, #108]	; 0x6c
 800a476:	3301      	adds	r3, #1
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	e7bf      	b.n	800a3fc <_strtod_l+0x144>
 800a47c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a47e:	191a      	adds	r2, r3, r4
 800a480:	921b      	str	r2, [sp, #108]	; 0x6c
 800a482:	9a04      	ldr	r2, [sp, #16]
 800a484:	5d1b      	ldrb	r3, [r3, r4]
 800a486:	2a00      	cmp	r2, #0
 800a488:	d037      	beq.n	800a4fa <_strtod_l+0x242>
 800a48a:	4602      	mov	r2, r0
 800a48c:	9c04      	ldr	r4, [sp, #16]
 800a48e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a492:	2909      	cmp	r1, #9
 800a494:	d913      	bls.n	800a4be <_strtod_l+0x206>
 800a496:	2101      	movs	r1, #1
 800a498:	9105      	str	r1, [sp, #20]
 800a49a:	e7c2      	b.n	800a422 <_strtod_l+0x16a>
 800a49c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a49e:	3001      	adds	r0, #1
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4a4:	785b      	ldrb	r3, [r3, #1]
 800a4a6:	2b30      	cmp	r3, #48	; 0x30
 800a4a8:	d0f8      	beq.n	800a49c <_strtod_l+0x1e4>
 800a4aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a4ae:	2a08      	cmp	r2, #8
 800a4b0:	f200 84f0 	bhi.w	800ae94 <_strtod_l+0xbdc>
 800a4b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a4b6:	9208      	str	r2, [sp, #32]
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a4c2:	f100 0101 	add.w	r1, r0, #1
 800a4c6:	d012      	beq.n	800a4ee <_strtod_l+0x236>
 800a4c8:	440a      	add	r2, r1
 800a4ca:	270a      	movs	r7, #10
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	eb00 0c04 	add.w	ip, r0, r4
 800a4d2:	458c      	cmp	ip, r1
 800a4d4:	d113      	bne.n	800a4fe <_strtod_l+0x246>
 800a4d6:	1821      	adds	r1, r4, r0
 800a4d8:	2908      	cmp	r1, #8
 800a4da:	f104 0401 	add.w	r4, r4, #1
 800a4de:	4404      	add	r4, r0
 800a4e0:	dc19      	bgt.n	800a516 <_strtod_l+0x25e>
 800a4e2:	210a      	movs	r1, #10
 800a4e4:	9b06      	ldr	r3, [sp, #24]
 800a4e6:	fb01 e303 	mla	r3, r1, r3, lr
 800a4ea:	9306      	str	r3, [sp, #24]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4f0:	1c58      	adds	r0, r3, #1
 800a4f2:	901b      	str	r0, [sp, #108]	; 0x6c
 800a4f4:	785b      	ldrb	r3, [r3, #1]
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	e7c9      	b.n	800a48e <_strtod_l+0x1d6>
 800a4fa:	9804      	ldr	r0, [sp, #16]
 800a4fc:	e7d3      	b.n	800a4a6 <_strtod_l+0x1ee>
 800a4fe:	2908      	cmp	r1, #8
 800a500:	f101 0101 	add.w	r1, r1, #1
 800a504:	dc03      	bgt.n	800a50e <_strtod_l+0x256>
 800a506:	9b06      	ldr	r3, [sp, #24]
 800a508:	437b      	muls	r3, r7
 800a50a:	9306      	str	r3, [sp, #24]
 800a50c:	e7e1      	b.n	800a4d2 <_strtod_l+0x21a>
 800a50e:	2910      	cmp	r1, #16
 800a510:	bfd8      	it	le
 800a512:	437d      	mulle	r5, r7
 800a514:	e7dd      	b.n	800a4d2 <_strtod_l+0x21a>
 800a516:	2c10      	cmp	r4, #16
 800a518:	bfdc      	itt	le
 800a51a:	210a      	movle	r1, #10
 800a51c:	fb01 e505 	mlale	r5, r1, r5, lr
 800a520:	e7e4      	b.n	800a4ec <_strtod_l+0x234>
 800a522:	2301      	movs	r3, #1
 800a524:	9305      	str	r3, [sp, #20]
 800a526:	e781      	b.n	800a42c <_strtod_l+0x174>
 800a528:	f04f 0c01 	mov.w	ip, #1
 800a52c:	1cb3      	adds	r3, r6, #2
 800a52e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a530:	78b3      	ldrb	r3, [r6, #2]
 800a532:	e78a      	b.n	800a44a <_strtod_l+0x192>
 800a534:	f04f 0c00 	mov.w	ip, #0
 800a538:	e7f8      	b.n	800a52c <_strtod_l+0x274>
 800a53a:	bf00      	nop
 800a53c:	0800cb7c 	.word	0x0800cb7c
 800a540:	7ff00000 	.word	0x7ff00000
 800a544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a546:	1c5f      	adds	r7, r3, #1
 800a548:	971b      	str	r7, [sp, #108]	; 0x6c
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	2b30      	cmp	r3, #48	; 0x30
 800a54e:	d0f9      	beq.n	800a544 <_strtod_l+0x28c>
 800a550:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a554:	2f08      	cmp	r7, #8
 800a556:	f63f af7d 	bhi.w	800a454 <_strtod_l+0x19c>
 800a55a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a55e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a560:	9309      	str	r3, [sp, #36]	; 0x24
 800a562:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a564:	1c5f      	adds	r7, r3, #1
 800a566:	971b      	str	r7, [sp, #108]	; 0x6c
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a56e:	f1b8 0f09 	cmp.w	r8, #9
 800a572:	d937      	bls.n	800a5e4 <_strtod_l+0x32c>
 800a574:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a576:	1a7f      	subs	r7, r7, r1
 800a578:	2f08      	cmp	r7, #8
 800a57a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a57e:	dc37      	bgt.n	800a5f0 <_strtod_l+0x338>
 800a580:	45be      	cmp	lr, r7
 800a582:	bfa8      	it	ge
 800a584:	46be      	movge	lr, r7
 800a586:	f1bc 0f00 	cmp.w	ip, #0
 800a58a:	d001      	beq.n	800a590 <_strtod_l+0x2d8>
 800a58c:	f1ce 0e00 	rsb	lr, lr, #0
 800a590:	2c00      	cmp	r4, #0
 800a592:	d151      	bne.n	800a638 <_strtod_l+0x380>
 800a594:	2800      	cmp	r0, #0
 800a596:	f47f aece 	bne.w	800a336 <_strtod_l+0x7e>
 800a59a:	9a07      	ldr	r2, [sp, #28]
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	f47f aeca 	bne.w	800a336 <_strtod_l+0x7e>
 800a5a2:	9a05      	ldr	r2, [sp, #20]
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	f47f aee4 	bne.w	800a372 <_strtod_l+0xba>
 800a5aa:	2b4e      	cmp	r3, #78	; 0x4e
 800a5ac:	d027      	beq.n	800a5fe <_strtod_l+0x346>
 800a5ae:	dc21      	bgt.n	800a5f4 <_strtod_l+0x33c>
 800a5b0:	2b49      	cmp	r3, #73	; 0x49
 800a5b2:	f47f aede 	bne.w	800a372 <_strtod_l+0xba>
 800a5b6:	49a4      	ldr	r1, [pc, #656]	; (800a848 <_strtod_l+0x590>)
 800a5b8:	a81b      	add	r0, sp, #108	; 0x6c
 800a5ba:	f001 f837 	bl	800b62c <__match>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f aed7 	beq.w	800a372 <_strtod_l+0xba>
 800a5c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5c6:	49a1      	ldr	r1, [pc, #644]	; (800a84c <_strtod_l+0x594>)
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	a81b      	add	r0, sp, #108	; 0x6c
 800a5cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5ce:	f001 f82d 	bl	800b62c <__match>
 800a5d2:	b910      	cbnz	r0, 800a5da <_strtod_l+0x322>
 800a5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5da:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a860 <_strtod_l+0x5a8>
 800a5de:	f04f 0900 	mov.w	r9, #0
 800a5e2:	e6a8      	b.n	800a336 <_strtod_l+0x7e>
 800a5e4:	210a      	movs	r1, #10
 800a5e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a5ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a5ee:	e7b8      	b.n	800a562 <_strtod_l+0x2aa>
 800a5f0:	46be      	mov	lr, r7
 800a5f2:	e7c8      	b.n	800a586 <_strtod_l+0x2ce>
 800a5f4:	2b69      	cmp	r3, #105	; 0x69
 800a5f6:	d0de      	beq.n	800a5b6 <_strtod_l+0x2fe>
 800a5f8:	2b6e      	cmp	r3, #110	; 0x6e
 800a5fa:	f47f aeba 	bne.w	800a372 <_strtod_l+0xba>
 800a5fe:	4994      	ldr	r1, [pc, #592]	; (800a850 <_strtod_l+0x598>)
 800a600:	a81b      	add	r0, sp, #108	; 0x6c
 800a602:	f001 f813 	bl	800b62c <__match>
 800a606:	2800      	cmp	r0, #0
 800a608:	f43f aeb3 	beq.w	800a372 <_strtod_l+0xba>
 800a60c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	2b28      	cmp	r3, #40	; 0x28
 800a612:	d10e      	bne.n	800a632 <_strtod_l+0x37a>
 800a614:	aa1e      	add	r2, sp, #120	; 0x78
 800a616:	498f      	ldr	r1, [pc, #572]	; (800a854 <_strtod_l+0x59c>)
 800a618:	a81b      	add	r0, sp, #108	; 0x6c
 800a61a:	f001 f81b 	bl	800b654 <__hexnan>
 800a61e:	2805      	cmp	r0, #5
 800a620:	d107      	bne.n	800a632 <_strtod_l+0x37a>
 800a622:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a624:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a628:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a62c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a630:	e681      	b.n	800a336 <_strtod_l+0x7e>
 800a632:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a868 <_strtod_l+0x5b0>
 800a636:	e7d2      	b.n	800a5de <_strtod_l+0x326>
 800a638:	ebae 0302 	sub.w	r3, lr, r2
 800a63c:	9307      	str	r3, [sp, #28]
 800a63e:	9b04      	ldr	r3, [sp, #16]
 800a640:	9806      	ldr	r0, [sp, #24]
 800a642:	2b00      	cmp	r3, #0
 800a644:	bf08      	it	eq
 800a646:	4623      	moveq	r3, r4
 800a648:	2c10      	cmp	r4, #16
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	46a0      	mov	r8, r4
 800a64e:	bfa8      	it	ge
 800a650:	f04f 0810 	movge.w	r8, #16
 800a654:	f7f5 fec6 	bl	80003e4 <__aeabi_ui2d>
 800a658:	2c09      	cmp	r4, #9
 800a65a:	4681      	mov	r9, r0
 800a65c:	468a      	mov	sl, r1
 800a65e:	dc13      	bgt.n	800a688 <_strtod_l+0x3d0>
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	2b00      	cmp	r3, #0
 800a664:	f43f ae67 	beq.w	800a336 <_strtod_l+0x7e>
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	dd7e      	ble.n	800a76a <_strtod_l+0x4b2>
 800a66c:	2b16      	cmp	r3, #22
 800a66e:	dc65      	bgt.n	800a73c <_strtod_l+0x484>
 800a670:	4a79      	ldr	r2, [pc, #484]	; (800a858 <_strtod_l+0x5a0>)
 800a672:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a676:	464a      	mov	r2, r9
 800a678:	e9de 0100 	ldrd	r0, r1, [lr]
 800a67c:	4653      	mov	r3, sl
 800a67e:	f7f5 ff2b 	bl	80004d8 <__aeabi_dmul>
 800a682:	4681      	mov	r9, r0
 800a684:	468a      	mov	sl, r1
 800a686:	e656      	b.n	800a336 <_strtod_l+0x7e>
 800a688:	4b73      	ldr	r3, [pc, #460]	; (800a858 <_strtod_l+0x5a0>)
 800a68a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a68e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a692:	f7f5 ff21 	bl	80004d8 <__aeabi_dmul>
 800a696:	4606      	mov	r6, r0
 800a698:	4628      	mov	r0, r5
 800a69a:	460f      	mov	r7, r1
 800a69c:	f7f5 fea2 	bl	80003e4 <__aeabi_ui2d>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 fd60 	bl	800016c <__adddf3>
 800a6ac:	2c0f      	cmp	r4, #15
 800a6ae:	4681      	mov	r9, r0
 800a6b0:	468a      	mov	sl, r1
 800a6b2:	ddd5      	ble.n	800a660 <_strtod_l+0x3a8>
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	eba4 0808 	sub.w	r8, r4, r8
 800a6ba:	4498      	add	r8, r3
 800a6bc:	f1b8 0f00 	cmp.w	r8, #0
 800a6c0:	f340 809a 	ble.w	800a7f8 <_strtod_l+0x540>
 800a6c4:	f018 030f 	ands.w	r3, r8, #15
 800a6c8:	d00a      	beq.n	800a6e0 <_strtod_l+0x428>
 800a6ca:	4963      	ldr	r1, [pc, #396]	; (800a858 <_strtod_l+0x5a0>)
 800a6cc:	464a      	mov	r2, r9
 800a6ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d6:	4653      	mov	r3, sl
 800a6d8:	f7f5 fefe 	bl	80004d8 <__aeabi_dmul>
 800a6dc:	4681      	mov	r9, r0
 800a6de:	468a      	mov	sl, r1
 800a6e0:	f038 080f 	bics.w	r8, r8, #15
 800a6e4:	d077      	beq.n	800a7d6 <_strtod_l+0x51e>
 800a6e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a6ea:	dd4b      	ble.n	800a784 <_strtod_l+0x4cc>
 800a6ec:	f04f 0800 	mov.w	r8, #0
 800a6f0:	f8cd 8010 	str.w	r8, [sp, #16]
 800a6f4:	f8cd 8020 	str.w	r8, [sp, #32]
 800a6f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6fc:	2322      	movs	r3, #34	; 0x22
 800a6fe:	f04f 0900 	mov.w	r9, #0
 800a702:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a860 <_strtod_l+0x5a8>
 800a706:	f8cb 3000 	str.w	r3, [fp]
 800a70a:	9b08      	ldr	r3, [sp, #32]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f43f ae12 	beq.w	800a336 <_strtod_l+0x7e>
 800a712:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a714:	4658      	mov	r0, fp
 800a716:	f001 f88c 	bl	800b832 <_Bfree>
 800a71a:	9906      	ldr	r1, [sp, #24]
 800a71c:	4658      	mov	r0, fp
 800a71e:	f001 f888 	bl	800b832 <_Bfree>
 800a722:	9904      	ldr	r1, [sp, #16]
 800a724:	4658      	mov	r0, fp
 800a726:	f001 f884 	bl	800b832 <_Bfree>
 800a72a:	9908      	ldr	r1, [sp, #32]
 800a72c:	4658      	mov	r0, fp
 800a72e:	f001 f880 	bl	800b832 <_Bfree>
 800a732:	4641      	mov	r1, r8
 800a734:	4658      	mov	r0, fp
 800a736:	f001 f87c 	bl	800b832 <_Bfree>
 800a73a:	e5fc      	b.n	800a336 <_strtod_l+0x7e>
 800a73c:	9a07      	ldr	r2, [sp, #28]
 800a73e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a742:	4293      	cmp	r3, r2
 800a744:	dbb6      	blt.n	800a6b4 <_strtod_l+0x3fc>
 800a746:	4d44      	ldr	r5, [pc, #272]	; (800a858 <_strtod_l+0x5a0>)
 800a748:	f1c4 040f 	rsb	r4, r4, #15
 800a74c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a750:	464a      	mov	r2, r9
 800a752:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a756:	4653      	mov	r3, sl
 800a758:	f7f5 febe 	bl	80004d8 <__aeabi_dmul>
 800a75c:	9b07      	ldr	r3, [sp, #28]
 800a75e:	1b1c      	subs	r4, r3, r4
 800a760:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a764:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a768:	e789      	b.n	800a67e <_strtod_l+0x3c6>
 800a76a:	f113 0f16 	cmn.w	r3, #22
 800a76e:	dba1      	blt.n	800a6b4 <_strtod_l+0x3fc>
 800a770:	4a39      	ldr	r2, [pc, #228]	; (800a858 <_strtod_l+0x5a0>)
 800a772:	4648      	mov	r0, r9
 800a774:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a778:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a77c:	4651      	mov	r1, sl
 800a77e:	f7f5 ffd5 	bl	800072c <__aeabi_ddiv>
 800a782:	e77e      	b.n	800a682 <_strtod_l+0x3ca>
 800a784:	2300      	movs	r3, #0
 800a786:	4648      	mov	r0, r9
 800a788:	4651      	mov	r1, sl
 800a78a:	461d      	mov	r5, r3
 800a78c:	4e33      	ldr	r6, [pc, #204]	; (800a85c <_strtod_l+0x5a4>)
 800a78e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a792:	f1b8 0f01 	cmp.w	r8, #1
 800a796:	dc21      	bgt.n	800a7dc <_strtod_l+0x524>
 800a798:	b10b      	cbz	r3, 800a79e <_strtod_l+0x4e6>
 800a79a:	4681      	mov	r9, r0
 800a79c:	468a      	mov	sl, r1
 800a79e:	4b2f      	ldr	r3, [pc, #188]	; (800a85c <_strtod_l+0x5a4>)
 800a7a0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a7a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a7a8:	464a      	mov	r2, r9
 800a7aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a7ae:	4653      	mov	r3, sl
 800a7b0:	f7f5 fe92 	bl	80004d8 <__aeabi_dmul>
 800a7b4:	4b2a      	ldr	r3, [pc, #168]	; (800a860 <_strtod_l+0x5a8>)
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	400b      	ands	r3, r1
 800a7ba:	492a      	ldr	r1, [pc, #168]	; (800a864 <_strtod_l+0x5ac>)
 800a7bc:	4681      	mov	r9, r0
 800a7be:	428b      	cmp	r3, r1
 800a7c0:	d894      	bhi.n	800a6ec <_strtod_l+0x434>
 800a7c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a7c6:	428b      	cmp	r3, r1
 800a7c8:	bf86      	itte	hi
 800a7ca:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800a7ce:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a86c <_strtod_l+0x5b4>
 800a7d2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9305      	str	r3, [sp, #20]
 800a7da:	e07b      	b.n	800a8d4 <_strtod_l+0x61c>
 800a7dc:	f018 0f01 	tst.w	r8, #1
 800a7e0:	d006      	beq.n	800a7f0 <_strtod_l+0x538>
 800a7e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fe75 	bl	80004d8 <__aeabi_dmul>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	3501      	adds	r5, #1
 800a7f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7f6:	e7cc      	b.n	800a792 <_strtod_l+0x4da>
 800a7f8:	d0ed      	beq.n	800a7d6 <_strtod_l+0x51e>
 800a7fa:	f1c8 0800 	rsb	r8, r8, #0
 800a7fe:	f018 020f 	ands.w	r2, r8, #15
 800a802:	d00a      	beq.n	800a81a <_strtod_l+0x562>
 800a804:	4b14      	ldr	r3, [pc, #80]	; (800a858 <_strtod_l+0x5a0>)
 800a806:	4648      	mov	r0, r9
 800a808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a80c:	4651      	mov	r1, sl
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	f7f5 ff8b 	bl	800072c <__aeabi_ddiv>
 800a816:	4681      	mov	r9, r0
 800a818:	468a      	mov	sl, r1
 800a81a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a81e:	d0da      	beq.n	800a7d6 <_strtod_l+0x51e>
 800a820:	f1b8 0f1f 	cmp.w	r8, #31
 800a824:	dd24      	ble.n	800a870 <_strtod_l+0x5b8>
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a82e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a832:	f8cd 8018 	str.w	r8, [sp, #24]
 800a836:	2322      	movs	r3, #34	; 0x22
 800a838:	f04f 0900 	mov.w	r9, #0
 800a83c:	f04f 0a00 	mov.w	sl, #0
 800a840:	f8cb 3000 	str.w	r3, [fp]
 800a844:	e761      	b.n	800a70a <_strtod_l+0x452>
 800a846:	bf00      	nop
 800a848:	0800cb70 	.word	0x0800cb70
 800a84c:	0800cb73 	.word	0x0800cb73
 800a850:	0800cb79 	.word	0x0800cb79
 800a854:	0800cb90 	.word	0x0800cb90
 800a858:	0800cc28 	.word	0x0800cc28
 800a85c:	0800cc00 	.word	0x0800cc00
 800a860:	7ff00000 	.word	0x7ff00000
 800a864:	7ca00000 	.word	0x7ca00000
 800a868:	fff80000 	.word	0xfff80000
 800a86c:	7fefffff 	.word	0x7fefffff
 800a870:	f018 0310 	ands.w	r3, r8, #16
 800a874:	bf18      	it	ne
 800a876:	236a      	movne	r3, #106	; 0x6a
 800a878:	4648      	mov	r0, r9
 800a87a:	9305      	str	r3, [sp, #20]
 800a87c:	4651      	mov	r1, sl
 800a87e:	2300      	movs	r3, #0
 800a880:	4da1      	ldr	r5, [pc, #644]	; (800ab08 <_strtod_l+0x850>)
 800a882:	f1b8 0f00 	cmp.w	r8, #0
 800a886:	f300 8113 	bgt.w	800aab0 <_strtod_l+0x7f8>
 800a88a:	b10b      	cbz	r3, 800a890 <_strtod_l+0x5d8>
 800a88c:	4681      	mov	r9, r0
 800a88e:	468a      	mov	sl, r1
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	b1bb      	cbz	r3, 800a8c4 <_strtod_l+0x60c>
 800a894:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a898:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	4651      	mov	r1, sl
 800a8a0:	dd10      	ble.n	800a8c4 <_strtod_l+0x60c>
 800a8a2:	2b1f      	cmp	r3, #31
 800a8a4:	f340 8110 	ble.w	800aac8 <_strtod_l+0x810>
 800a8a8:	2b34      	cmp	r3, #52	; 0x34
 800a8aa:	bfd8      	it	le
 800a8ac:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800a8b0:	f04f 0900 	mov.w	r9, #0
 800a8b4:	bfcf      	iteee	gt
 800a8b6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a8ba:	3b20      	suble	r3, #32
 800a8bc:	fa02 f303 	lslle.w	r3, r2, r3
 800a8c0:	ea03 0a01 	andle.w	sl, r3, r1
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	4651      	mov	r1, sl
 800a8cc:	f7f6 f86c 	bl	80009a8 <__aeabi_dcmpeq>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1a8      	bne.n	800a826 <_strtod_l+0x56e>
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	9a04      	ldr	r2, [sp, #16]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	9908      	ldr	r1, [sp, #32]
 800a8dc:	4623      	mov	r3, r4
 800a8de:	4658      	mov	r0, fp
 800a8e0:	f000 fff9 	bl	800b8d6 <__s2b>
 800a8e4:	9008      	str	r0, [sp, #32]
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f af00 	beq.w	800a6ec <_strtod_l+0x434>
 800a8ec:	9a07      	ldr	r2, [sp, #28]
 800a8ee:	9b07      	ldr	r3, [sp, #28]
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	f1c3 0300 	rsb	r3, r3, #0
 800a8f6:	bfa8      	it	ge
 800a8f8:	2300      	movge	r3, #0
 800a8fa:	f04f 0800 	mov.w	r8, #0
 800a8fe:	930e      	str	r3, [sp, #56]	; 0x38
 800a900:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a904:	9316      	str	r3, [sp, #88]	; 0x58
 800a906:	f8cd 8010 	str.w	r8, [sp, #16]
 800a90a:	9b08      	ldr	r3, [sp, #32]
 800a90c:	4658      	mov	r0, fp
 800a90e:	6859      	ldr	r1, [r3, #4]
 800a910:	f000 ff5b 	bl	800b7ca <_Balloc>
 800a914:	9006      	str	r0, [sp, #24]
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f aef0 	beq.w	800a6fc <_strtod_l+0x444>
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	300c      	adds	r0, #12
 800a920:	691a      	ldr	r2, [r3, #16]
 800a922:	f103 010c 	add.w	r1, r3, #12
 800a926:	3202      	adds	r2, #2
 800a928:	0092      	lsls	r2, r2, #2
 800a92a:	f000 ff43 	bl	800b7b4 <memcpy>
 800a92e:	ab1e      	add	r3, sp, #120	; 0x78
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	ab1d      	add	r3, sp, #116	; 0x74
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	464a      	mov	r2, r9
 800a938:	4653      	mov	r3, sl
 800a93a:	4658      	mov	r0, fp
 800a93c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a940:	f001 fa84 	bl	800be4c <__d2b>
 800a944:	901c      	str	r0, [sp, #112]	; 0x70
 800a946:	2800      	cmp	r0, #0
 800a948:	f43f aed8 	beq.w	800a6fc <_strtod_l+0x444>
 800a94c:	2101      	movs	r1, #1
 800a94e:	4658      	mov	r0, fp
 800a950:	f001 f84d 	bl	800b9ee <__i2b>
 800a954:	9004      	str	r0, [sp, #16]
 800a956:	4603      	mov	r3, r0
 800a958:	2800      	cmp	r0, #0
 800a95a:	f43f aecf 	beq.w	800a6fc <_strtod_l+0x444>
 800a95e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a960:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a962:	2d00      	cmp	r5, #0
 800a964:	bfab      	itete	ge
 800a966:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a968:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a96a:	18ee      	addge	r6, r5, r3
 800a96c:	1b5c      	sublt	r4, r3, r5
 800a96e:	9b05      	ldr	r3, [sp, #20]
 800a970:	bfa8      	it	ge
 800a972:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a974:	eba5 0503 	sub.w	r5, r5, r3
 800a978:	4415      	add	r5, r2
 800a97a:	4b64      	ldr	r3, [pc, #400]	; (800ab0c <_strtod_l+0x854>)
 800a97c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a980:	bfb8      	it	lt
 800a982:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a984:	429d      	cmp	r5, r3
 800a986:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a98a:	f280 80af 	bge.w	800aaec <_strtod_l+0x834>
 800a98e:	1b5b      	subs	r3, r3, r5
 800a990:	2b1f      	cmp	r3, #31
 800a992:	eba2 0203 	sub.w	r2, r2, r3
 800a996:	f04f 0701 	mov.w	r7, #1
 800a99a:	f300 809c 	bgt.w	800aad6 <_strtod_l+0x81e>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	fa07 f303 	lsl.w	r3, r7, r3
 800a9a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9a6:	18b7      	adds	r7, r6, r2
 800a9a8:	9b05      	ldr	r3, [sp, #20]
 800a9aa:	42be      	cmp	r6, r7
 800a9ac:	4414      	add	r4, r2
 800a9ae:	441c      	add	r4, r3
 800a9b0:	4633      	mov	r3, r6
 800a9b2:	bfa8      	it	ge
 800a9b4:	463b      	movge	r3, r7
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	bfa8      	it	ge
 800a9ba:	4623      	movge	r3, r4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfc2      	ittt	gt
 800a9c0:	1aff      	subgt	r7, r7, r3
 800a9c2:	1ae4      	subgt	r4, r4, r3
 800a9c4:	1af6      	subgt	r6, r6, r3
 800a9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c8:	b1bb      	cbz	r3, 800a9fa <_strtod_l+0x742>
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	9904      	ldr	r1, [sp, #16]
 800a9ce:	4658      	mov	r0, fp
 800a9d0:	f001 f8ac 	bl	800bb2c <__pow5mult>
 800a9d4:	9004      	str	r0, [sp, #16]
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f43f ae90 	beq.w	800a6fc <_strtod_l+0x444>
 800a9dc:	4601      	mov	r1, r0
 800a9de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9e0:	4658      	mov	r0, fp
 800a9e2:	f001 f80d 	bl	800ba00 <__multiply>
 800a9e6:	9009      	str	r0, [sp, #36]	; 0x24
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f43f ae87 	beq.w	800a6fc <_strtod_l+0x444>
 800a9ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	f000 ff1e 	bl	800b832 <_Bfree>
 800a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f8:	931c      	str	r3, [sp, #112]	; 0x70
 800a9fa:	2f00      	cmp	r7, #0
 800a9fc:	dc7a      	bgt.n	800aaf4 <_strtod_l+0x83c>
 800a9fe:	9b07      	ldr	r3, [sp, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dd08      	ble.n	800aa16 <_strtod_l+0x75e>
 800aa04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa06:	9906      	ldr	r1, [sp, #24]
 800aa08:	4658      	mov	r0, fp
 800aa0a:	f001 f88f 	bl	800bb2c <__pow5mult>
 800aa0e:	9006      	str	r0, [sp, #24]
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f43f ae73 	beq.w	800a6fc <_strtod_l+0x444>
 800aa16:	2c00      	cmp	r4, #0
 800aa18:	dd08      	ble.n	800aa2c <_strtod_l+0x774>
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	9906      	ldr	r1, [sp, #24]
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f001 f8d2 	bl	800bbc8 <__lshift>
 800aa24:	9006      	str	r0, [sp, #24]
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f43f ae68 	beq.w	800a6fc <_strtod_l+0x444>
 800aa2c:	2e00      	cmp	r6, #0
 800aa2e:	dd08      	ble.n	800aa42 <_strtod_l+0x78a>
 800aa30:	4632      	mov	r2, r6
 800aa32:	9904      	ldr	r1, [sp, #16]
 800aa34:	4658      	mov	r0, fp
 800aa36:	f001 f8c7 	bl	800bbc8 <__lshift>
 800aa3a:	9004      	str	r0, [sp, #16]
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f43f ae5d 	beq.w	800a6fc <_strtod_l+0x444>
 800aa42:	9a06      	ldr	r2, [sp, #24]
 800aa44:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa46:	4658      	mov	r0, fp
 800aa48:	f001 f92c 	bl	800bca4 <__mdiff>
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f43f ae54 	beq.w	800a6fc <_strtod_l+0x444>
 800aa54:	2400      	movs	r4, #0
 800aa56:	68c3      	ldr	r3, [r0, #12]
 800aa58:	9904      	ldr	r1, [sp, #16]
 800aa5a:	60c4      	str	r4, [r0, #12]
 800aa5c:	930c      	str	r3, [sp, #48]	; 0x30
 800aa5e:	f001 f907 	bl	800bc70 <__mcmp>
 800aa62:	42a0      	cmp	r0, r4
 800aa64:	da54      	bge.n	800ab10 <_strtod_l+0x858>
 800aa66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa68:	b9f3      	cbnz	r3, 800aaa8 <_strtod_l+0x7f0>
 800aa6a:	f1b9 0f00 	cmp.w	r9, #0
 800aa6e:	d11b      	bne.n	800aaa8 <_strtod_l+0x7f0>
 800aa70:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800aa74:	b9c3      	cbnz	r3, 800aaa8 <_strtod_l+0x7f0>
 800aa76:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800aa7a:	0d1b      	lsrs	r3, r3, #20
 800aa7c:	051b      	lsls	r3, r3, #20
 800aa7e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa82:	d911      	bls.n	800aaa8 <_strtod_l+0x7f0>
 800aa84:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800aa88:	b91b      	cbnz	r3, 800aa92 <_strtod_l+0x7da>
 800aa8a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	dd0a      	ble.n	800aaa8 <_strtod_l+0x7f0>
 800aa92:	4641      	mov	r1, r8
 800aa94:	2201      	movs	r2, #1
 800aa96:	4658      	mov	r0, fp
 800aa98:	f001 f896 	bl	800bbc8 <__lshift>
 800aa9c:	9904      	ldr	r1, [sp, #16]
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	f001 f8e6 	bl	800bc70 <__mcmp>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	dc68      	bgt.n	800ab7a <_strtod_l+0x8c2>
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d172      	bne.n	800ab94 <_strtod_l+0x8dc>
 800aaae:	e630      	b.n	800a712 <_strtod_l+0x45a>
 800aab0:	f018 0f01 	tst.w	r8, #1
 800aab4:	d004      	beq.n	800aac0 <_strtod_l+0x808>
 800aab6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaba:	f7f5 fd0d 	bl	80004d8 <__aeabi_dmul>
 800aabe:	2301      	movs	r3, #1
 800aac0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aac4:	3508      	adds	r5, #8
 800aac6:	e6dc      	b.n	800a882 <_strtod_l+0x5ca>
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aacc:	fa02 f303 	lsl.w	r3, r2, r3
 800aad0:	ea03 0909 	and.w	r9, r3, r9
 800aad4:	e6f6      	b.n	800a8c4 <_strtod_l+0x60c>
 800aad6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800aada:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800aade:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800aae2:	35e2      	adds	r5, #226	; 0xe2
 800aae4:	fa07 f505 	lsl.w	r5, r7, r5
 800aae8:	970f      	str	r7, [sp, #60]	; 0x3c
 800aaea:	e75c      	b.n	800a9a6 <_strtod_l+0x6ee>
 800aaec:	2301      	movs	r3, #1
 800aaee:	2500      	movs	r5, #0
 800aaf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaf2:	e758      	b.n	800a9a6 <_strtod_l+0x6ee>
 800aaf4:	463a      	mov	r2, r7
 800aaf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aaf8:	4658      	mov	r0, fp
 800aafa:	f001 f865 	bl	800bbc8 <__lshift>
 800aafe:	901c      	str	r0, [sp, #112]	; 0x70
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f47f af7c 	bne.w	800a9fe <_strtod_l+0x746>
 800ab06:	e5f9      	b.n	800a6fc <_strtod_l+0x444>
 800ab08:	0800cba8 	.word	0x0800cba8
 800ab0c:	fffffc02 	.word	0xfffffc02
 800ab10:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ab14:	f040 8089 	bne.w	800ac2a <_strtod_l+0x972>
 800ab18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab1a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ab1e:	b342      	cbz	r2, 800ab72 <_strtod_l+0x8ba>
 800ab20:	4aaf      	ldr	r2, [pc, #700]	; (800ade0 <_strtod_l+0xb28>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d156      	bne.n	800abd4 <_strtod_l+0x91c>
 800ab26:	9b05      	ldr	r3, [sp, #20]
 800ab28:	4648      	mov	r0, r9
 800ab2a:	b1eb      	cbz	r3, 800ab68 <_strtod_l+0x8b0>
 800ab2c:	4653      	mov	r3, sl
 800ab2e:	4aad      	ldr	r2, [pc, #692]	; (800ade4 <_strtod_l+0xb2c>)
 800ab30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ab34:	401a      	ands	r2, r3
 800ab36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ab3a:	d818      	bhi.n	800ab6e <_strtod_l+0x8b6>
 800ab3c:	0d12      	lsrs	r2, r2, #20
 800ab3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab42:	fa01 f303 	lsl.w	r3, r1, r3
 800ab46:	4298      	cmp	r0, r3
 800ab48:	d144      	bne.n	800abd4 <_strtod_l+0x91c>
 800ab4a:	4ba7      	ldr	r3, [pc, #668]	; (800ade8 <_strtod_l+0xb30>)
 800ab4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d102      	bne.n	800ab58 <_strtod_l+0x8a0>
 800ab52:	3001      	adds	r0, #1
 800ab54:	f43f add2 	beq.w	800a6fc <_strtod_l+0x444>
 800ab58:	4ba2      	ldr	r3, [pc, #648]	; (800ade4 <_strtod_l+0xb2c>)
 800ab5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab5c:	f04f 0900 	mov.w	r9, #0
 800ab60:	401a      	ands	r2, r3
 800ab62:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ab66:	e79f      	b.n	800aaa8 <_strtod_l+0x7f0>
 800ab68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab6c:	e7eb      	b.n	800ab46 <_strtod_l+0x88e>
 800ab6e:	460b      	mov	r3, r1
 800ab70:	e7e9      	b.n	800ab46 <_strtod_l+0x88e>
 800ab72:	bb7b      	cbnz	r3, 800abd4 <_strtod_l+0x91c>
 800ab74:	f1b9 0f00 	cmp.w	r9, #0
 800ab78:	d12c      	bne.n	800abd4 <_strtod_l+0x91c>
 800ab7a:	9905      	ldr	r1, [sp, #20]
 800ab7c:	4653      	mov	r3, sl
 800ab7e:	4a99      	ldr	r2, [pc, #612]	; (800ade4 <_strtod_l+0xb2c>)
 800ab80:	b1f1      	cbz	r1, 800abc0 <_strtod_l+0x908>
 800ab82:	ea02 010a 	and.w	r1, r2, sl
 800ab86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab8a:	dc19      	bgt.n	800abc0 <_strtod_l+0x908>
 800ab8c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab90:	f77f ae51 	ble.w	800a836 <_strtod_l+0x57e>
 800ab94:	2300      	movs	r3, #0
 800ab96:	4a95      	ldr	r2, [pc, #596]	; (800adec <_strtod_l+0xb34>)
 800ab98:	4648      	mov	r0, r9
 800ab9a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ab9e:	4651      	mov	r1, sl
 800aba0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aba4:	f7f5 fc98 	bl	80004d8 <__aeabi_dmul>
 800aba8:	4681      	mov	r9, r0
 800abaa:	468a      	mov	sl, r1
 800abac:	2900      	cmp	r1, #0
 800abae:	f47f adb0 	bne.w	800a712 <_strtod_l+0x45a>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	f47f adad 	bne.w	800a712 <_strtod_l+0x45a>
 800abb8:	2322      	movs	r3, #34	; 0x22
 800abba:	f8cb 3000 	str.w	r3, [fp]
 800abbe:	e5a8      	b.n	800a712 <_strtod_l+0x45a>
 800abc0:	4013      	ands	r3, r2
 800abc2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abc6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800abca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800abce:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800abd2:	e769      	b.n	800aaa8 <_strtod_l+0x7f0>
 800abd4:	b19d      	cbz	r5, 800abfe <_strtod_l+0x946>
 800abd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd8:	421d      	tst	r5, r3
 800abda:	f43f af65 	beq.w	800aaa8 <_strtod_l+0x7f0>
 800abde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe0:	9a05      	ldr	r2, [sp, #20]
 800abe2:	4648      	mov	r0, r9
 800abe4:	4651      	mov	r1, sl
 800abe6:	b173      	cbz	r3, 800ac06 <_strtod_l+0x94e>
 800abe8:	f7ff fb45 	bl	800a276 <sulp>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abf4:	f7f5 faba 	bl	800016c <__adddf3>
 800abf8:	4681      	mov	r9, r0
 800abfa:	468a      	mov	sl, r1
 800abfc:	e754      	b.n	800aaa8 <_strtod_l+0x7f0>
 800abfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac00:	ea13 0f09 	tst.w	r3, r9
 800ac04:	e7e9      	b.n	800abda <_strtod_l+0x922>
 800ac06:	f7ff fb36 	bl	800a276 <sulp>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac12:	f7f5 faa9 	bl	8000168 <__aeabi_dsub>
 800ac16:	2200      	movs	r2, #0
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4681      	mov	r9, r0
 800ac1c:	468a      	mov	sl, r1
 800ac1e:	f7f5 fec3 	bl	80009a8 <__aeabi_dcmpeq>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f47f ae07 	bne.w	800a836 <_strtod_l+0x57e>
 800ac28:	e73e      	b.n	800aaa8 <_strtod_l+0x7f0>
 800ac2a:	9904      	ldr	r1, [sp, #16]
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	f001 f95c 	bl	800beea <__ratio>
 800ac32:	2200      	movs	r2, #0
 800ac34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	f7f5 fec8 	bl	80009d0 <__aeabi_dcmple>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d075      	beq.n	800ad30 <_strtod_l+0xa78>
 800ac44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d047      	beq.n	800acda <_strtod_l+0xa22>
 800ac4a:	2600      	movs	r6, #0
 800ac4c:	4f68      	ldr	r7, [pc, #416]	; (800adf0 <_strtod_l+0xb38>)
 800ac4e:	4d68      	ldr	r5, [pc, #416]	; (800adf0 <_strtod_l+0xb38>)
 800ac50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac56:	0d1b      	lsrs	r3, r3, #20
 800ac58:	051b      	lsls	r3, r3, #20
 800ac5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac5e:	4b65      	ldr	r3, [pc, #404]	; (800adf4 <_strtod_l+0xb3c>)
 800ac60:	429a      	cmp	r2, r3
 800ac62:	f040 80cf 	bne.w	800ae04 <_strtod_l+0xb4c>
 800ac66:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac6a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ac6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac70:	4648      	mov	r0, r9
 800ac72:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800ac76:	4651      	mov	r1, sl
 800ac78:	f001 f872 	bl	800bd60 <__ulp>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 fc28 	bl	80004d8 <__aeabi_dmul>
 800ac88:	464a      	mov	r2, r9
 800ac8a:	4653      	mov	r3, sl
 800ac8c:	f7f5 fa6e 	bl	800016c <__adddf3>
 800ac90:	460b      	mov	r3, r1
 800ac92:	4954      	ldr	r1, [pc, #336]	; (800ade4 <_strtod_l+0xb2c>)
 800ac94:	4a58      	ldr	r2, [pc, #352]	; (800adf8 <_strtod_l+0xb40>)
 800ac96:	4019      	ands	r1, r3
 800ac98:	4291      	cmp	r1, r2
 800ac9a:	4681      	mov	r9, r0
 800ac9c:	d95e      	bls.n	800ad5c <_strtod_l+0xaa4>
 800ac9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aca0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d103      	bne.n	800acb0 <_strtod_l+0x9f8>
 800aca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acaa:	3301      	adds	r3, #1
 800acac:	f43f ad26 	beq.w	800a6fc <_strtod_l+0x444>
 800acb0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800acb4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800ade8 <_strtod_l+0xb30>
 800acb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acba:	4658      	mov	r0, fp
 800acbc:	f000 fdb9 	bl	800b832 <_Bfree>
 800acc0:	9906      	ldr	r1, [sp, #24]
 800acc2:	4658      	mov	r0, fp
 800acc4:	f000 fdb5 	bl	800b832 <_Bfree>
 800acc8:	9904      	ldr	r1, [sp, #16]
 800acca:	4658      	mov	r0, fp
 800accc:	f000 fdb1 	bl	800b832 <_Bfree>
 800acd0:	4641      	mov	r1, r8
 800acd2:	4658      	mov	r0, fp
 800acd4:	f000 fdad 	bl	800b832 <_Bfree>
 800acd8:	e617      	b.n	800a90a <_strtod_l+0x652>
 800acda:	f1b9 0f00 	cmp.w	r9, #0
 800acde:	d119      	bne.n	800ad14 <_strtod_l+0xa5c>
 800ace0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ace6:	b9e3      	cbnz	r3, 800ad22 <_strtod_l+0xa6a>
 800ace8:	2200      	movs	r2, #0
 800acea:	4b41      	ldr	r3, [pc, #260]	; (800adf0 <_strtod_l+0xb38>)
 800acec:	4630      	mov	r0, r6
 800acee:	4639      	mov	r1, r7
 800acf0:	f7f5 fe64 	bl	80009bc <__aeabi_dcmplt>
 800acf4:	b9c8      	cbnz	r0, 800ad2a <_strtod_l+0xa72>
 800acf6:	2200      	movs	r2, #0
 800acf8:	4b40      	ldr	r3, [pc, #256]	; (800adfc <_strtod_l+0xb44>)
 800acfa:	4630      	mov	r0, r6
 800acfc:	4639      	mov	r1, r7
 800acfe:	f7f5 fbeb 	bl	80004d8 <__aeabi_dmul>
 800ad02:	4604      	mov	r4, r0
 800ad04:	460d      	mov	r5, r1
 800ad06:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ad0a:	9418      	str	r4, [sp, #96]	; 0x60
 800ad0c:	9319      	str	r3, [sp, #100]	; 0x64
 800ad0e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ad12:	e79d      	b.n	800ac50 <_strtod_l+0x998>
 800ad14:	f1b9 0f01 	cmp.w	r9, #1
 800ad18:	d103      	bne.n	800ad22 <_strtod_l+0xa6a>
 800ad1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f43f ad8a 	beq.w	800a836 <_strtod_l+0x57e>
 800ad22:	2600      	movs	r6, #0
 800ad24:	4f36      	ldr	r7, [pc, #216]	; (800ae00 <_strtod_l+0xb48>)
 800ad26:	2400      	movs	r4, #0
 800ad28:	e791      	b.n	800ac4e <_strtod_l+0x996>
 800ad2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ad2c:	4d33      	ldr	r5, [pc, #204]	; (800adfc <_strtod_l+0xb44>)
 800ad2e:	e7ea      	b.n	800ad06 <_strtod_l+0xa4e>
 800ad30:	4b32      	ldr	r3, [pc, #200]	; (800adfc <_strtod_l+0xb44>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	4630      	mov	r0, r6
 800ad36:	4639      	mov	r1, r7
 800ad38:	f7f5 fbce 	bl	80004d8 <__aeabi_dmul>
 800ad3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	b933      	cbnz	r3, 800ad52 <_strtod_l+0xa9a>
 800ad44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad48:	9010      	str	r0, [sp, #64]	; 0x40
 800ad4a:	9311      	str	r3, [sp, #68]	; 0x44
 800ad4c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ad50:	e77e      	b.n	800ac50 <_strtod_l+0x998>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ad5a:	e7f7      	b.n	800ad4c <_strtod_l+0xa94>
 800ad5c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ad60:	9b05      	ldr	r3, [sp, #20]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1a8      	bne.n	800acb8 <_strtod_l+0xa00>
 800ad66:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ad6a:	0d1b      	lsrs	r3, r3, #20
 800ad6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad6e:	051b      	lsls	r3, r3, #20
 800ad70:	429a      	cmp	r2, r3
 800ad72:	4656      	mov	r6, sl
 800ad74:	d1a0      	bne.n	800acb8 <_strtod_l+0xa00>
 800ad76:	4629      	mov	r1, r5
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7f5 fe5d 	bl	8000a38 <__aeabi_d2iz>
 800ad7e:	f7f5 fb41 	bl	8000404 <__aeabi_i2d>
 800ad82:	460b      	mov	r3, r1
 800ad84:	4602      	mov	r2, r0
 800ad86:	4629      	mov	r1, r5
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7f5 f9ed 	bl	8000168 <__aeabi_dsub>
 800ad8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	b933      	cbnz	r3, 800ada4 <_strtod_l+0xaec>
 800ad96:	f1b9 0f00 	cmp.w	r9, #0
 800ad9a:	d103      	bne.n	800ada4 <_strtod_l+0xaec>
 800ad9c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800ada0:	2e00      	cmp	r6, #0
 800ada2:	d06a      	beq.n	800ae7a <_strtod_l+0xbc2>
 800ada4:	a30a      	add	r3, pc, #40	; (adr r3, 800add0 <_strtod_l+0xb18>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 fe05 	bl	80009bc <__aeabi_dcmplt>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	f47f acad 	bne.w	800a712 <_strtod_l+0x45a>
 800adb8:	a307      	add	r3, pc, #28	; (adr r3, 800add8 <_strtod_l+0xb20>)
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 fe19 	bl	80009f8 <__aeabi_dcmpgt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f43f af76 	beq.w	800acb8 <_strtod_l+0xa00>
 800adcc:	e4a1      	b.n	800a712 <_strtod_l+0x45a>
 800adce:	bf00      	nop
 800add0:	94a03595 	.word	0x94a03595
 800add4:	3fdfffff 	.word	0x3fdfffff
 800add8:	35afe535 	.word	0x35afe535
 800addc:	3fe00000 	.word	0x3fe00000
 800ade0:	000fffff 	.word	0x000fffff
 800ade4:	7ff00000 	.word	0x7ff00000
 800ade8:	7fefffff 	.word	0x7fefffff
 800adec:	39500000 	.word	0x39500000
 800adf0:	3ff00000 	.word	0x3ff00000
 800adf4:	7fe00000 	.word	0x7fe00000
 800adf8:	7c9fffff 	.word	0x7c9fffff
 800adfc:	3fe00000 	.word	0x3fe00000
 800ae00:	bff00000 	.word	0xbff00000
 800ae04:	9b05      	ldr	r3, [sp, #20]
 800ae06:	b313      	cbz	r3, 800ae4e <_strtod_l+0xb96>
 800ae08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae0e:	d81e      	bhi.n	800ae4e <_strtod_l+0xb96>
 800ae10:	a325      	add	r3, pc, #148	; (adr r3, 800aea8 <_strtod_l+0xbf0>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	4620      	mov	r0, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7f5 fdd9 	bl	80009d0 <__aeabi_dcmple>
 800ae1e:	b190      	cbz	r0, 800ae46 <_strtod_l+0xb8e>
 800ae20:	4629      	mov	r1, r5
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7f5 fe30 	bl	8000a88 <__aeabi_d2uiz>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	bf08      	it	eq
 800ae2c:	2001      	moveq	r0, #1
 800ae2e:	f7f5 fad9 	bl	80003e4 <__aeabi_ui2d>
 800ae32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae34:	4604      	mov	r4, r0
 800ae36:	460d      	mov	r5, r1
 800ae38:	b9d3      	cbnz	r3, 800ae70 <_strtod_l+0xbb8>
 800ae3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae3e:	9012      	str	r0, [sp, #72]	; 0x48
 800ae40:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae42:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ae46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae48:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ae4c:	1a9f      	subs	r7, r3, r2
 800ae4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae52:	f000 ff85 	bl	800bd60 <__ulp>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	f7f5 fb3b 	bl	80004d8 <__aeabi_dmul>
 800ae62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae66:	f7f5 f981 	bl	800016c <__adddf3>
 800ae6a:	4681      	mov	r9, r0
 800ae6c:	468a      	mov	sl, r1
 800ae6e:	e777      	b.n	800ad60 <_strtod_l+0xaa8>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ae78:	e7e3      	b.n	800ae42 <_strtod_l+0xb8a>
 800ae7a:	a30d      	add	r3, pc, #52	; (adr r3, 800aeb0 <_strtod_l+0xbf8>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f7f5 fd9c 	bl	80009bc <__aeabi_dcmplt>
 800ae84:	e79f      	b.n	800adc6 <_strtod_l+0xb0e>
 800ae86:	2300      	movs	r3, #0
 800ae88:	930d      	str	r3, [sp, #52]	; 0x34
 800ae8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	f7ff ba55 	b.w	800a33e <_strtod_l+0x86>
 800ae94:	2b65      	cmp	r3, #101	; 0x65
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	f43f ab42 	beq.w	800a522 <_strtod_l+0x26a>
 800ae9e:	2101      	movs	r1, #1
 800aea0:	4614      	mov	r4, r2
 800aea2:	9105      	str	r1, [sp, #20]
 800aea4:	f7ff babf 	b.w	800a426 <_strtod_l+0x16e>
 800aea8:	ffc00000 	.word	0xffc00000
 800aeac:	41dfffff 	.word	0x41dfffff
 800aeb0:	94a03595 	.word	0x94a03595
 800aeb4:	3fcfffff 	.word	0x3fcfffff

0800aeb8 <strtod>:
 800aeb8:	4b06      	ldr	r3, [pc, #24]	; (800aed4 <strtod+0x1c>)
 800aeba:	b410      	push	{r4}
 800aebc:	681c      	ldr	r4, [r3, #0]
 800aebe:	4a06      	ldr	r2, [pc, #24]	; (800aed8 <strtod+0x20>)
 800aec0:	6a23      	ldr	r3, [r4, #32]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bf08      	it	eq
 800aec6:	4613      	moveq	r3, r2
 800aec8:	460a      	mov	r2, r1
 800aeca:	4601      	mov	r1, r0
 800aecc:	4620      	mov	r0, r4
 800aece:	bc10      	pop	{r4}
 800aed0:	f7ff b9f2 	b.w	800a2b8 <_strtod_l>
 800aed4:	20000374 	.word	0x20000374
 800aed8:	200003d8 	.word	0x200003d8

0800aedc <strtok>:
 800aedc:	4b13      	ldr	r3, [pc, #76]	; (800af2c <strtok+0x50>)
 800aede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	681d      	ldr	r5, [r3, #0]
 800aee4:	4606      	mov	r6, r0
 800aee6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800aee8:	460f      	mov	r7, r1
 800aeea:	b9b4      	cbnz	r4, 800af1a <strtok+0x3e>
 800aeec:	2050      	movs	r0, #80	; 0x50
 800aeee:	f000 fc47 	bl	800b780 <malloc>
 800aef2:	65a8      	str	r0, [r5, #88]	; 0x58
 800aef4:	e9c0 4400 	strd	r4, r4, [r0]
 800aef8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aefc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800af00:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800af04:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800af08:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800af0c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800af10:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800af14:	6184      	str	r4, [r0, #24]
 800af16:	7704      	strb	r4, [r0, #28]
 800af18:	6244      	str	r4, [r0, #36]	; 0x24
 800af1a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800af1c:	4639      	mov	r1, r7
 800af1e:	4630      	mov	r0, r6
 800af20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af24:	2301      	movs	r3, #1
 800af26:	f000 b803 	b.w	800af30 <__strtok_r>
 800af2a:	bf00      	nop
 800af2c:	20000374 	.word	0x20000374

0800af30 <__strtok_r>:
 800af30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af32:	b918      	cbnz	r0, 800af3c <__strtok_r+0xc>
 800af34:	6810      	ldr	r0, [r2, #0]
 800af36:	b908      	cbnz	r0, 800af3c <__strtok_r+0xc>
 800af38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3a:	4620      	mov	r0, r4
 800af3c:	4604      	mov	r4, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af44:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af48:	b91e      	cbnz	r6, 800af52 <__strtok_r+0x22>
 800af4a:	b96d      	cbnz	r5, 800af68 <__strtok_r+0x38>
 800af4c:	6015      	str	r5, [r2, #0]
 800af4e:	4628      	mov	r0, r5
 800af50:	e7f2      	b.n	800af38 <__strtok_r+0x8>
 800af52:	42b5      	cmp	r5, r6
 800af54:	d1f6      	bne.n	800af44 <__strtok_r+0x14>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1ef      	bne.n	800af3a <__strtok_r+0xa>
 800af5a:	6014      	str	r4, [r2, #0]
 800af5c:	7003      	strb	r3, [r0, #0]
 800af5e:	e7eb      	b.n	800af38 <__strtok_r+0x8>
 800af60:	462b      	mov	r3, r5
 800af62:	e00d      	b.n	800af80 <__strtok_r+0x50>
 800af64:	b926      	cbnz	r6, 800af70 <__strtok_r+0x40>
 800af66:	461c      	mov	r4, r3
 800af68:	4623      	mov	r3, r4
 800af6a:	460f      	mov	r7, r1
 800af6c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800af70:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af74:	42b5      	cmp	r5, r6
 800af76:	d1f5      	bne.n	800af64 <__strtok_r+0x34>
 800af78:	2d00      	cmp	r5, #0
 800af7a:	d0f1      	beq.n	800af60 <__strtok_r+0x30>
 800af7c:	2100      	movs	r1, #0
 800af7e:	7021      	strb	r1, [r4, #0]
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	e7d9      	b.n	800af38 <__strtok_r+0x8>

0800af84 <_strtol_l.isra.0>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	4680      	mov	r8, r0
 800af8a:	4689      	mov	r9, r1
 800af8c:	4692      	mov	sl, r2
 800af8e:	461e      	mov	r6, r3
 800af90:	460f      	mov	r7, r1
 800af92:	463d      	mov	r5, r7
 800af94:	9808      	ldr	r0, [sp, #32]
 800af96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af9a:	f000 fbeb 	bl	800b774 <__locale_ctype_ptr_l>
 800af9e:	4420      	add	r0, r4
 800afa0:	7843      	ldrb	r3, [r0, #1]
 800afa2:	f013 0308 	ands.w	r3, r3, #8
 800afa6:	d132      	bne.n	800b00e <_strtol_l.isra.0+0x8a>
 800afa8:	2c2d      	cmp	r4, #45	; 0x2d
 800afaa:	d132      	bne.n	800b012 <_strtol_l.isra.0+0x8e>
 800afac:	2201      	movs	r2, #1
 800afae:	787c      	ldrb	r4, [r7, #1]
 800afb0:	1cbd      	adds	r5, r7, #2
 800afb2:	2e00      	cmp	r6, #0
 800afb4:	d05d      	beq.n	800b072 <_strtol_l.isra.0+0xee>
 800afb6:	2e10      	cmp	r6, #16
 800afb8:	d109      	bne.n	800afce <_strtol_l.isra.0+0x4a>
 800afba:	2c30      	cmp	r4, #48	; 0x30
 800afbc:	d107      	bne.n	800afce <_strtol_l.isra.0+0x4a>
 800afbe:	782b      	ldrb	r3, [r5, #0]
 800afc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afc4:	2b58      	cmp	r3, #88	; 0x58
 800afc6:	d14f      	bne.n	800b068 <_strtol_l.isra.0+0xe4>
 800afc8:	2610      	movs	r6, #16
 800afca:	786c      	ldrb	r4, [r5, #1]
 800afcc:	3502      	adds	r5, #2
 800afce:	2a00      	cmp	r2, #0
 800afd0:	bf14      	ite	ne
 800afd2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800afd6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800afda:	2700      	movs	r7, #0
 800afdc:	fbb1 fcf6 	udiv	ip, r1, r6
 800afe0:	4638      	mov	r0, r7
 800afe2:	fb06 1e1c 	mls	lr, r6, ip, r1
 800afe6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800afea:	2b09      	cmp	r3, #9
 800afec:	d817      	bhi.n	800b01e <_strtol_l.isra.0+0x9a>
 800afee:	461c      	mov	r4, r3
 800aff0:	42a6      	cmp	r6, r4
 800aff2:	dd23      	ble.n	800b03c <_strtol_l.isra.0+0xb8>
 800aff4:	1c7b      	adds	r3, r7, #1
 800aff6:	d007      	beq.n	800b008 <_strtol_l.isra.0+0x84>
 800aff8:	4584      	cmp	ip, r0
 800affa:	d31c      	bcc.n	800b036 <_strtol_l.isra.0+0xb2>
 800affc:	d101      	bne.n	800b002 <_strtol_l.isra.0+0x7e>
 800affe:	45a6      	cmp	lr, r4
 800b000:	db19      	blt.n	800b036 <_strtol_l.isra.0+0xb2>
 800b002:	2701      	movs	r7, #1
 800b004:	fb00 4006 	mla	r0, r0, r6, r4
 800b008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b00c:	e7eb      	b.n	800afe6 <_strtol_l.isra.0+0x62>
 800b00e:	462f      	mov	r7, r5
 800b010:	e7bf      	b.n	800af92 <_strtol_l.isra.0+0xe>
 800b012:	2c2b      	cmp	r4, #43	; 0x2b
 800b014:	bf04      	itt	eq
 800b016:	1cbd      	addeq	r5, r7, #2
 800b018:	787c      	ldrbeq	r4, [r7, #1]
 800b01a:	461a      	mov	r2, r3
 800b01c:	e7c9      	b.n	800afb2 <_strtol_l.isra.0+0x2e>
 800b01e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b022:	2b19      	cmp	r3, #25
 800b024:	d801      	bhi.n	800b02a <_strtol_l.isra.0+0xa6>
 800b026:	3c37      	subs	r4, #55	; 0x37
 800b028:	e7e2      	b.n	800aff0 <_strtol_l.isra.0+0x6c>
 800b02a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b02e:	2b19      	cmp	r3, #25
 800b030:	d804      	bhi.n	800b03c <_strtol_l.isra.0+0xb8>
 800b032:	3c57      	subs	r4, #87	; 0x57
 800b034:	e7dc      	b.n	800aff0 <_strtol_l.isra.0+0x6c>
 800b036:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b03a:	e7e5      	b.n	800b008 <_strtol_l.isra.0+0x84>
 800b03c:	1c7b      	adds	r3, r7, #1
 800b03e:	d108      	bne.n	800b052 <_strtol_l.isra.0+0xce>
 800b040:	2322      	movs	r3, #34	; 0x22
 800b042:	4608      	mov	r0, r1
 800b044:	f8c8 3000 	str.w	r3, [r8]
 800b048:	f1ba 0f00 	cmp.w	sl, #0
 800b04c:	d107      	bne.n	800b05e <_strtol_l.isra.0+0xda>
 800b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b052:	b102      	cbz	r2, 800b056 <_strtol_l.isra.0+0xd2>
 800b054:	4240      	negs	r0, r0
 800b056:	f1ba 0f00 	cmp.w	sl, #0
 800b05a:	d0f8      	beq.n	800b04e <_strtol_l.isra.0+0xca>
 800b05c:	b10f      	cbz	r7, 800b062 <_strtol_l.isra.0+0xde>
 800b05e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b062:	f8ca 9000 	str.w	r9, [sl]
 800b066:	e7f2      	b.n	800b04e <_strtol_l.isra.0+0xca>
 800b068:	2430      	movs	r4, #48	; 0x30
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d1af      	bne.n	800afce <_strtol_l.isra.0+0x4a>
 800b06e:	2608      	movs	r6, #8
 800b070:	e7ad      	b.n	800afce <_strtol_l.isra.0+0x4a>
 800b072:	2c30      	cmp	r4, #48	; 0x30
 800b074:	d0a3      	beq.n	800afbe <_strtol_l.isra.0+0x3a>
 800b076:	260a      	movs	r6, #10
 800b078:	e7a9      	b.n	800afce <_strtol_l.isra.0+0x4a>
	...

0800b07c <strtol>:
 800b07c:	4b08      	ldr	r3, [pc, #32]	; (800b0a0 <strtol+0x24>)
 800b07e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b080:	681c      	ldr	r4, [r3, #0]
 800b082:	4d08      	ldr	r5, [pc, #32]	; (800b0a4 <strtol+0x28>)
 800b084:	6a23      	ldr	r3, [r4, #32]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bf08      	it	eq
 800b08a:	462b      	moveq	r3, r5
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	4613      	mov	r3, r2
 800b090:	460a      	mov	r2, r1
 800b092:	4601      	mov	r1, r0
 800b094:	4620      	mov	r0, r4
 800b096:	f7ff ff75 	bl	800af84 <_strtol_l.isra.0>
 800b09a:	b003      	add	sp, #12
 800b09c:	bd30      	pop	{r4, r5, pc}
 800b09e:	bf00      	nop
 800b0a0:	20000374 	.word	0x20000374
 800b0a4:	200003d8 	.word	0x200003d8

0800b0a8 <__utoa>:
 800b0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0aa:	b08b      	sub	sp, #44	; 0x2c
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	466e      	mov	r6, sp
 800b0b2:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <__utoa+0x78>)
 800b0b4:	f103 0c20 	add.w	ip, r3, #32
 800b0b8:	4637      	mov	r7, r6
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	6859      	ldr	r1, [r3, #4]
 800b0be:	3308      	adds	r3, #8
 800b0c0:	c703      	stmia	r7!, {r0, r1}
 800b0c2:	4563      	cmp	r3, ip
 800b0c4:	463e      	mov	r6, r7
 800b0c6:	d1f7      	bne.n	800b0b8 <__utoa+0x10>
 800b0c8:	6818      	ldr	r0, [r3, #0]
 800b0ca:	791b      	ldrb	r3, [r3, #4]
 800b0cc:	6038      	str	r0, [r7, #0]
 800b0ce:	713b      	strb	r3, [r7, #4]
 800b0d0:	1e93      	subs	r3, r2, #2
 800b0d2:	2b22      	cmp	r3, #34	; 0x22
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	d904      	bls.n	800b0e4 <__utoa+0x3c>
 800b0da:	7023      	strb	r3, [r4, #0]
 800b0dc:	461c      	mov	r4, r3
 800b0de:	4620      	mov	r0, r4
 800b0e0:	b00b      	add	sp, #44	; 0x2c
 800b0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e4:	1e66      	subs	r6, r4, #1
 800b0e6:	fbb5 f0f2 	udiv	r0, r5, r2
 800b0ea:	fb02 5510 	mls	r5, r2, r0, r5
 800b0ee:	af0a      	add	r7, sp, #40	; 0x28
 800b0f0:	443d      	add	r5, r7
 800b0f2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b0f6:	1c59      	adds	r1, r3, #1
 800b0f8:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	b968      	cbnz	r0, 800b11c <__utoa+0x74>
 800b100:	4622      	mov	r2, r4
 800b102:	5460      	strb	r0, [r4, r1]
 800b104:	4423      	add	r3, r4
 800b106:	1b19      	subs	r1, r3, r4
 800b108:	1b10      	subs	r0, r2, r4
 800b10a:	4281      	cmp	r1, r0
 800b10c:	dde7      	ble.n	800b0de <__utoa+0x36>
 800b10e:	7811      	ldrb	r1, [r2, #0]
 800b110:	7818      	ldrb	r0, [r3, #0]
 800b112:	f802 0b01 	strb.w	r0, [r2], #1
 800b116:	f803 1901 	strb.w	r1, [r3], #-1
 800b11a:	e7f4      	b.n	800b106 <__utoa+0x5e>
 800b11c:	460b      	mov	r3, r1
 800b11e:	e7e2      	b.n	800b0e6 <__utoa+0x3e>
 800b120:	0800cbd0 	.word	0x0800cbd0

0800b124 <rshift>:
 800b124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b126:	6906      	ldr	r6, [r0, #16]
 800b128:	114b      	asrs	r3, r1, #5
 800b12a:	429e      	cmp	r6, r3
 800b12c:	f100 0414 	add.w	r4, r0, #20
 800b130:	dd31      	ble.n	800b196 <rshift+0x72>
 800b132:	f011 011f 	ands.w	r1, r1, #31
 800b136:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b13a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b13e:	d108      	bne.n	800b152 <rshift+0x2e>
 800b140:	4621      	mov	r1, r4
 800b142:	42b2      	cmp	r2, r6
 800b144:	460b      	mov	r3, r1
 800b146:	d211      	bcs.n	800b16c <rshift+0x48>
 800b148:	f852 3b04 	ldr.w	r3, [r2], #4
 800b14c:	f841 3b04 	str.w	r3, [r1], #4
 800b150:	e7f7      	b.n	800b142 <rshift+0x1e>
 800b152:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b156:	4623      	mov	r3, r4
 800b158:	f1c1 0c20 	rsb	ip, r1, #32
 800b15c:	40cd      	lsrs	r5, r1
 800b15e:	3204      	adds	r2, #4
 800b160:	42b2      	cmp	r2, r6
 800b162:	4617      	mov	r7, r2
 800b164:	d30d      	bcc.n	800b182 <rshift+0x5e>
 800b166:	601d      	str	r5, [r3, #0]
 800b168:	b105      	cbz	r5, 800b16c <rshift+0x48>
 800b16a:	3304      	adds	r3, #4
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	eba3 0204 	sub.w	r2, r3, r4
 800b172:	bf08      	it	eq
 800b174:	2300      	moveq	r3, #0
 800b176:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b17a:	6102      	str	r2, [r0, #16]
 800b17c:	bf08      	it	eq
 800b17e:	6143      	streq	r3, [r0, #20]
 800b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b182:	683f      	ldr	r7, [r7, #0]
 800b184:	fa07 f70c 	lsl.w	r7, r7, ip
 800b188:	433d      	orrs	r5, r7
 800b18a:	f843 5b04 	str.w	r5, [r3], #4
 800b18e:	f852 5b04 	ldr.w	r5, [r2], #4
 800b192:	40cd      	lsrs	r5, r1
 800b194:	e7e4      	b.n	800b160 <rshift+0x3c>
 800b196:	4623      	mov	r3, r4
 800b198:	e7e8      	b.n	800b16c <rshift+0x48>

0800b19a <__hexdig_fun>:
 800b19a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b19e:	2b09      	cmp	r3, #9
 800b1a0:	d802      	bhi.n	800b1a8 <__hexdig_fun+0xe>
 800b1a2:	3820      	subs	r0, #32
 800b1a4:	b2c0      	uxtb	r0, r0
 800b1a6:	4770      	bx	lr
 800b1a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1ac:	2b05      	cmp	r3, #5
 800b1ae:	d801      	bhi.n	800b1b4 <__hexdig_fun+0x1a>
 800b1b0:	3847      	subs	r0, #71	; 0x47
 800b1b2:	e7f7      	b.n	800b1a4 <__hexdig_fun+0xa>
 800b1b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b1b8:	2b05      	cmp	r3, #5
 800b1ba:	d801      	bhi.n	800b1c0 <__hexdig_fun+0x26>
 800b1bc:	3827      	subs	r0, #39	; 0x27
 800b1be:	e7f1      	b.n	800b1a4 <__hexdig_fun+0xa>
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4770      	bx	lr

0800b1c4 <__gethex>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	b08b      	sub	sp, #44	; 0x2c
 800b1ca:	9002      	str	r0, [sp, #8]
 800b1cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b1ce:	468a      	mov	sl, r1
 800b1d0:	4690      	mov	r8, r2
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	f000 fad1 	bl	800b77a <__localeconv_l>
 800b1d8:	6803      	ldr	r3, [r0, #0]
 800b1da:	f04f 0b00 	mov.w	fp, #0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	9303      	str	r3, [sp, #12]
 800b1e2:	f7f4 ffb5 	bl	8000150 <strlen>
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	9001      	str	r0, [sp, #4]
 800b1ea:	4403      	add	r3, r0
 800b1ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1f0:	9307      	str	r3, [sp, #28]
 800b1f2:	f8da 3000 	ldr.w	r3, [sl]
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	461f      	mov	r7, r3
 800b1fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1fe:	2830      	cmp	r0, #48	; 0x30
 800b200:	d06c      	beq.n	800b2dc <__gethex+0x118>
 800b202:	f7ff ffca 	bl	800b19a <__hexdig_fun>
 800b206:	4604      	mov	r4, r0
 800b208:	2800      	cmp	r0, #0
 800b20a:	d16a      	bne.n	800b2e2 <__gethex+0x11e>
 800b20c:	9a01      	ldr	r2, [sp, #4]
 800b20e:	9903      	ldr	r1, [sp, #12]
 800b210:	4638      	mov	r0, r7
 800b212:	f000 ff4b 	bl	800c0ac <strncmp>
 800b216:	2800      	cmp	r0, #0
 800b218:	d166      	bne.n	800b2e8 <__gethex+0x124>
 800b21a:	9b01      	ldr	r3, [sp, #4]
 800b21c:	5cf8      	ldrb	r0, [r7, r3]
 800b21e:	18fe      	adds	r6, r7, r3
 800b220:	f7ff ffbb 	bl	800b19a <__hexdig_fun>
 800b224:	2800      	cmp	r0, #0
 800b226:	d062      	beq.n	800b2ee <__gethex+0x12a>
 800b228:	4633      	mov	r3, r6
 800b22a:	7818      	ldrb	r0, [r3, #0]
 800b22c:	461f      	mov	r7, r3
 800b22e:	2830      	cmp	r0, #48	; 0x30
 800b230:	f103 0301 	add.w	r3, r3, #1
 800b234:	d0f9      	beq.n	800b22a <__gethex+0x66>
 800b236:	f7ff ffb0 	bl	800b19a <__hexdig_fun>
 800b23a:	fab0 f580 	clz	r5, r0
 800b23e:	4634      	mov	r4, r6
 800b240:	f04f 0b01 	mov.w	fp, #1
 800b244:	096d      	lsrs	r5, r5, #5
 800b246:	463a      	mov	r2, r7
 800b248:	4616      	mov	r6, r2
 800b24a:	7830      	ldrb	r0, [r6, #0]
 800b24c:	3201      	adds	r2, #1
 800b24e:	f7ff ffa4 	bl	800b19a <__hexdig_fun>
 800b252:	2800      	cmp	r0, #0
 800b254:	d1f8      	bne.n	800b248 <__gethex+0x84>
 800b256:	9a01      	ldr	r2, [sp, #4]
 800b258:	9903      	ldr	r1, [sp, #12]
 800b25a:	4630      	mov	r0, r6
 800b25c:	f000 ff26 	bl	800c0ac <strncmp>
 800b260:	b950      	cbnz	r0, 800b278 <__gethex+0xb4>
 800b262:	b954      	cbnz	r4, 800b27a <__gethex+0xb6>
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	18f4      	adds	r4, r6, r3
 800b268:	4622      	mov	r2, r4
 800b26a:	4616      	mov	r6, r2
 800b26c:	7830      	ldrb	r0, [r6, #0]
 800b26e:	3201      	adds	r2, #1
 800b270:	f7ff ff93 	bl	800b19a <__hexdig_fun>
 800b274:	2800      	cmp	r0, #0
 800b276:	d1f8      	bne.n	800b26a <__gethex+0xa6>
 800b278:	b10c      	cbz	r4, 800b27e <__gethex+0xba>
 800b27a:	1ba4      	subs	r4, r4, r6
 800b27c:	00a4      	lsls	r4, r4, #2
 800b27e:	7833      	ldrb	r3, [r6, #0]
 800b280:	2b50      	cmp	r3, #80	; 0x50
 800b282:	d001      	beq.n	800b288 <__gethex+0xc4>
 800b284:	2b70      	cmp	r3, #112	; 0x70
 800b286:	d140      	bne.n	800b30a <__gethex+0x146>
 800b288:	7873      	ldrb	r3, [r6, #1]
 800b28a:	2b2b      	cmp	r3, #43	; 0x2b
 800b28c:	d031      	beq.n	800b2f2 <__gethex+0x12e>
 800b28e:	2b2d      	cmp	r3, #45	; 0x2d
 800b290:	d033      	beq.n	800b2fa <__gethex+0x136>
 800b292:	f04f 0900 	mov.w	r9, #0
 800b296:	1c71      	adds	r1, r6, #1
 800b298:	7808      	ldrb	r0, [r1, #0]
 800b29a:	f7ff ff7e 	bl	800b19a <__hexdig_fun>
 800b29e:	1e43      	subs	r3, r0, #1
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b18      	cmp	r3, #24
 800b2a4:	d831      	bhi.n	800b30a <__gethex+0x146>
 800b2a6:	f1a0 0210 	sub.w	r2, r0, #16
 800b2aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2ae:	f7ff ff74 	bl	800b19a <__hexdig_fun>
 800b2b2:	1e43      	subs	r3, r0, #1
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b18      	cmp	r3, #24
 800b2b8:	d922      	bls.n	800b300 <__gethex+0x13c>
 800b2ba:	f1b9 0f00 	cmp.w	r9, #0
 800b2be:	d000      	beq.n	800b2c2 <__gethex+0xfe>
 800b2c0:	4252      	negs	r2, r2
 800b2c2:	4414      	add	r4, r2
 800b2c4:	f8ca 1000 	str.w	r1, [sl]
 800b2c8:	b30d      	cbz	r5, 800b30e <__gethex+0x14a>
 800b2ca:	f1bb 0f00 	cmp.w	fp, #0
 800b2ce:	bf0c      	ite	eq
 800b2d0:	2706      	moveq	r7, #6
 800b2d2:	2700      	movne	r7, #0
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	b00b      	add	sp, #44	; 0x2c
 800b2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2dc:	f10b 0b01 	add.w	fp, fp, #1
 800b2e0:	e78a      	b.n	800b1f8 <__gethex+0x34>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	462c      	mov	r4, r5
 800b2e6:	e7ae      	b.n	800b246 <__gethex+0x82>
 800b2e8:	463e      	mov	r6, r7
 800b2ea:	2501      	movs	r5, #1
 800b2ec:	e7c7      	b.n	800b27e <__gethex+0xba>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	e7fb      	b.n	800b2ea <__gethex+0x126>
 800b2f2:	f04f 0900 	mov.w	r9, #0
 800b2f6:	1cb1      	adds	r1, r6, #2
 800b2f8:	e7ce      	b.n	800b298 <__gethex+0xd4>
 800b2fa:	f04f 0901 	mov.w	r9, #1
 800b2fe:	e7fa      	b.n	800b2f6 <__gethex+0x132>
 800b300:	230a      	movs	r3, #10
 800b302:	fb03 0202 	mla	r2, r3, r2, r0
 800b306:	3a10      	subs	r2, #16
 800b308:	e7cf      	b.n	800b2aa <__gethex+0xe6>
 800b30a:	4631      	mov	r1, r6
 800b30c:	e7da      	b.n	800b2c4 <__gethex+0x100>
 800b30e:	4629      	mov	r1, r5
 800b310:	1bf3      	subs	r3, r6, r7
 800b312:	3b01      	subs	r3, #1
 800b314:	2b07      	cmp	r3, #7
 800b316:	dc49      	bgt.n	800b3ac <__gethex+0x1e8>
 800b318:	9802      	ldr	r0, [sp, #8]
 800b31a:	f000 fa56 	bl	800b7ca <_Balloc>
 800b31e:	f04f 0b00 	mov.w	fp, #0
 800b322:	4605      	mov	r5, r0
 800b324:	46da      	mov	sl, fp
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	f100 0914 	add.w	r9, r0, #20
 800b32c:	f1c3 0301 	rsb	r3, r3, #1
 800b330:	f8cd 9010 	str.w	r9, [sp, #16]
 800b334:	9308      	str	r3, [sp, #32]
 800b336:	42b7      	cmp	r7, r6
 800b338:	d33b      	bcc.n	800b3b2 <__gethex+0x1ee>
 800b33a:	9804      	ldr	r0, [sp, #16]
 800b33c:	f840 ab04 	str.w	sl, [r0], #4
 800b340:	eba0 0009 	sub.w	r0, r0, r9
 800b344:	1080      	asrs	r0, r0, #2
 800b346:	6128      	str	r0, [r5, #16]
 800b348:	0147      	lsls	r7, r0, #5
 800b34a:	4650      	mov	r0, sl
 800b34c:	f000 fb01 	bl	800b952 <__hi0bits>
 800b350:	f8d8 6000 	ldr.w	r6, [r8]
 800b354:	1a3f      	subs	r7, r7, r0
 800b356:	42b7      	cmp	r7, r6
 800b358:	dd64      	ble.n	800b424 <__gethex+0x260>
 800b35a:	1bbf      	subs	r7, r7, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 fe0b 	bl	800bf7a <__any_on>
 800b364:	4682      	mov	sl, r0
 800b366:	b178      	cbz	r0, 800b388 <__gethex+0x1c4>
 800b368:	f04f 0a01 	mov.w	sl, #1
 800b36c:	1e7b      	subs	r3, r7, #1
 800b36e:	1159      	asrs	r1, r3, #5
 800b370:	f003 021f 	and.w	r2, r3, #31
 800b374:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b378:	fa0a f202 	lsl.w	r2, sl, r2
 800b37c:	420a      	tst	r2, r1
 800b37e:	d003      	beq.n	800b388 <__gethex+0x1c4>
 800b380:	4553      	cmp	r3, sl
 800b382:	dc46      	bgt.n	800b412 <__gethex+0x24e>
 800b384:	f04f 0a02 	mov.w	sl, #2
 800b388:	4639      	mov	r1, r7
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7ff feca 	bl	800b124 <rshift>
 800b390:	443c      	add	r4, r7
 800b392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b396:	42a3      	cmp	r3, r4
 800b398:	da52      	bge.n	800b440 <__gethex+0x27c>
 800b39a:	4629      	mov	r1, r5
 800b39c:	9802      	ldr	r0, [sp, #8]
 800b39e:	f000 fa48 	bl	800b832 <_Bfree>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3a6:	27a3      	movs	r7, #163	; 0xa3
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	e793      	b.n	800b2d4 <__gethex+0x110>
 800b3ac:	3101      	adds	r1, #1
 800b3ae:	105b      	asrs	r3, r3, #1
 800b3b0:	e7b0      	b.n	800b314 <__gethex+0x150>
 800b3b2:	1e73      	subs	r3, r6, #1
 800b3b4:	9305      	str	r3, [sp, #20]
 800b3b6:	9a07      	ldr	r2, [sp, #28]
 800b3b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d018      	beq.n	800b3f2 <__gethex+0x22e>
 800b3c0:	f1bb 0f20 	cmp.w	fp, #32
 800b3c4:	d107      	bne.n	800b3d6 <__gethex+0x212>
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	f8c3 a000 	str.w	sl, [r3]
 800b3cc:	f04f 0a00 	mov.w	sl, #0
 800b3d0:	46d3      	mov	fp, sl
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	9304      	str	r3, [sp, #16]
 800b3d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b3da:	f7ff fede 	bl	800b19a <__hexdig_fun>
 800b3de:	f000 000f 	and.w	r0, r0, #15
 800b3e2:	fa00 f00b 	lsl.w	r0, r0, fp
 800b3e6:	ea4a 0a00 	orr.w	sl, sl, r0
 800b3ea:	f10b 0b04 	add.w	fp, fp, #4
 800b3ee:	9b05      	ldr	r3, [sp, #20]
 800b3f0:	e00d      	b.n	800b40e <__gethex+0x24a>
 800b3f2:	9b05      	ldr	r3, [sp, #20]
 800b3f4:	9a08      	ldr	r2, [sp, #32]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	42bb      	cmp	r3, r7
 800b3fa:	d3e1      	bcc.n	800b3c0 <__gethex+0x1fc>
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	9a01      	ldr	r2, [sp, #4]
 800b400:	9903      	ldr	r1, [sp, #12]
 800b402:	9309      	str	r3, [sp, #36]	; 0x24
 800b404:	f000 fe52 	bl	800c0ac <strncmp>
 800b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d1d8      	bne.n	800b3c0 <__gethex+0x1fc>
 800b40e:	461e      	mov	r6, r3
 800b410:	e791      	b.n	800b336 <__gethex+0x172>
 800b412:	1eb9      	subs	r1, r7, #2
 800b414:	4628      	mov	r0, r5
 800b416:	f000 fdb0 	bl	800bf7a <__any_on>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d0b2      	beq.n	800b384 <__gethex+0x1c0>
 800b41e:	f04f 0a03 	mov.w	sl, #3
 800b422:	e7b1      	b.n	800b388 <__gethex+0x1c4>
 800b424:	da09      	bge.n	800b43a <__gethex+0x276>
 800b426:	1bf7      	subs	r7, r6, r7
 800b428:	4629      	mov	r1, r5
 800b42a:	463a      	mov	r2, r7
 800b42c:	9802      	ldr	r0, [sp, #8]
 800b42e:	f000 fbcb 	bl	800bbc8 <__lshift>
 800b432:	4605      	mov	r5, r0
 800b434:	1be4      	subs	r4, r4, r7
 800b436:	f100 0914 	add.w	r9, r0, #20
 800b43a:	f04f 0a00 	mov.w	sl, #0
 800b43e:	e7a8      	b.n	800b392 <__gethex+0x1ce>
 800b440:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b444:	42a0      	cmp	r0, r4
 800b446:	dd6b      	ble.n	800b520 <__gethex+0x35c>
 800b448:	1b04      	subs	r4, r0, r4
 800b44a:	42a6      	cmp	r6, r4
 800b44c:	dc2e      	bgt.n	800b4ac <__gethex+0x2e8>
 800b44e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b452:	2b02      	cmp	r3, #2
 800b454:	d022      	beq.n	800b49c <__gethex+0x2d8>
 800b456:	2b03      	cmp	r3, #3
 800b458:	d024      	beq.n	800b4a4 <__gethex+0x2e0>
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d115      	bne.n	800b48a <__gethex+0x2c6>
 800b45e:	42a6      	cmp	r6, r4
 800b460:	d113      	bne.n	800b48a <__gethex+0x2c6>
 800b462:	2e01      	cmp	r6, #1
 800b464:	dc0b      	bgt.n	800b47e <__gethex+0x2ba>
 800b466:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b46a:	9a06      	ldr	r2, [sp, #24]
 800b46c:	2762      	movs	r7, #98	; 0x62
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	2301      	movs	r3, #1
 800b472:	612b      	str	r3, [r5, #16]
 800b474:	f8c9 3000 	str.w	r3, [r9]
 800b478:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b47a:	601d      	str	r5, [r3, #0]
 800b47c:	e72a      	b.n	800b2d4 <__gethex+0x110>
 800b47e:	1e71      	subs	r1, r6, #1
 800b480:	4628      	mov	r0, r5
 800b482:	f000 fd7a 	bl	800bf7a <__any_on>
 800b486:	2800      	cmp	r0, #0
 800b488:	d1ed      	bne.n	800b466 <__gethex+0x2a2>
 800b48a:	4629      	mov	r1, r5
 800b48c:	9802      	ldr	r0, [sp, #8]
 800b48e:	f000 f9d0 	bl	800b832 <_Bfree>
 800b492:	2300      	movs	r3, #0
 800b494:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b496:	2750      	movs	r7, #80	; 0x50
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	e71b      	b.n	800b2d4 <__gethex+0x110>
 800b49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d0e1      	beq.n	800b466 <__gethex+0x2a2>
 800b4a2:	e7f2      	b.n	800b48a <__gethex+0x2c6>
 800b4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1dd      	bne.n	800b466 <__gethex+0x2a2>
 800b4aa:	e7ee      	b.n	800b48a <__gethex+0x2c6>
 800b4ac:	1e67      	subs	r7, r4, #1
 800b4ae:	f1ba 0f00 	cmp.w	sl, #0
 800b4b2:	d132      	bne.n	800b51a <__gethex+0x356>
 800b4b4:	b127      	cbz	r7, 800b4c0 <__gethex+0x2fc>
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f000 fd5e 	bl	800bf7a <__any_on>
 800b4be:	4682      	mov	sl, r0
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	117a      	asrs	r2, r7, #5
 800b4c4:	f007 071f 	and.w	r7, r7, #31
 800b4c8:	fa03 f707 	lsl.w	r7, r3, r7
 800b4cc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	421f      	tst	r7, r3
 800b4d4:	f04f 0702 	mov.w	r7, #2
 800b4d8:	4628      	mov	r0, r5
 800b4da:	bf18      	it	ne
 800b4dc:	f04a 0a02 	orrne.w	sl, sl, #2
 800b4e0:	1b36      	subs	r6, r6, r4
 800b4e2:	f7ff fe1f 	bl	800b124 <rshift>
 800b4e6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b4ea:	f1ba 0f00 	cmp.w	sl, #0
 800b4ee:	d048      	beq.n	800b582 <__gethex+0x3be>
 800b4f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d015      	beq.n	800b524 <__gethex+0x360>
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d017      	beq.n	800b52c <__gethex+0x368>
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d109      	bne.n	800b514 <__gethex+0x350>
 800b500:	f01a 0f02 	tst.w	sl, #2
 800b504:	d006      	beq.n	800b514 <__gethex+0x350>
 800b506:	f8d9 3000 	ldr.w	r3, [r9]
 800b50a:	ea4a 0a03 	orr.w	sl, sl, r3
 800b50e:	f01a 0f01 	tst.w	sl, #1
 800b512:	d10e      	bne.n	800b532 <__gethex+0x36e>
 800b514:	f047 0710 	orr.w	r7, r7, #16
 800b518:	e033      	b.n	800b582 <__gethex+0x3be>
 800b51a:	f04f 0a01 	mov.w	sl, #1
 800b51e:	e7cf      	b.n	800b4c0 <__gethex+0x2fc>
 800b520:	2701      	movs	r7, #1
 800b522:	e7e2      	b.n	800b4ea <__gethex+0x326>
 800b524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b526:	f1c3 0301 	rsb	r3, r3, #1
 800b52a:	9315      	str	r3, [sp, #84]	; 0x54
 800b52c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0f0      	beq.n	800b514 <__gethex+0x350>
 800b532:	f04f 0c00 	mov.w	ip, #0
 800b536:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b53a:	f105 0314 	add.w	r3, r5, #20
 800b53e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b542:	eb03 010a 	add.w	r1, r3, sl
 800b546:	4618      	mov	r0, r3
 800b548:	f853 2b04 	ldr.w	r2, [r3], #4
 800b54c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b550:	d01c      	beq.n	800b58c <__gethex+0x3c8>
 800b552:	3201      	adds	r2, #1
 800b554:	6002      	str	r2, [r0, #0]
 800b556:	2f02      	cmp	r7, #2
 800b558:	f105 0314 	add.w	r3, r5, #20
 800b55c:	d138      	bne.n	800b5d0 <__gethex+0x40c>
 800b55e:	f8d8 2000 	ldr.w	r2, [r8]
 800b562:	3a01      	subs	r2, #1
 800b564:	42b2      	cmp	r2, r6
 800b566:	d10a      	bne.n	800b57e <__gethex+0x3ba>
 800b568:	2201      	movs	r2, #1
 800b56a:	1171      	asrs	r1, r6, #5
 800b56c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b570:	f006 061f 	and.w	r6, r6, #31
 800b574:	fa02 f606 	lsl.w	r6, r2, r6
 800b578:	421e      	tst	r6, r3
 800b57a:	bf18      	it	ne
 800b57c:	4617      	movne	r7, r2
 800b57e:	f047 0720 	orr.w	r7, r7, #32
 800b582:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b584:	601d      	str	r5, [r3, #0]
 800b586:	9b06      	ldr	r3, [sp, #24]
 800b588:	601c      	str	r4, [r3, #0]
 800b58a:	e6a3      	b.n	800b2d4 <__gethex+0x110>
 800b58c:	4299      	cmp	r1, r3
 800b58e:	f843 cc04 	str.w	ip, [r3, #-4]
 800b592:	d8d8      	bhi.n	800b546 <__gethex+0x382>
 800b594:	68ab      	ldr	r3, [r5, #8]
 800b596:	4599      	cmp	r9, r3
 800b598:	db12      	blt.n	800b5c0 <__gethex+0x3fc>
 800b59a:	6869      	ldr	r1, [r5, #4]
 800b59c:	9802      	ldr	r0, [sp, #8]
 800b59e:	3101      	adds	r1, #1
 800b5a0:	f000 f913 	bl	800b7ca <_Balloc>
 800b5a4:	4683      	mov	fp, r0
 800b5a6:	692a      	ldr	r2, [r5, #16]
 800b5a8:	f105 010c 	add.w	r1, r5, #12
 800b5ac:	3202      	adds	r2, #2
 800b5ae:	0092      	lsls	r2, r2, #2
 800b5b0:	300c      	adds	r0, #12
 800b5b2:	f000 f8ff 	bl	800b7b4 <memcpy>
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	9802      	ldr	r0, [sp, #8]
 800b5ba:	f000 f93a 	bl	800b832 <_Bfree>
 800b5be:	465d      	mov	r5, fp
 800b5c0:	692b      	ldr	r3, [r5, #16]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	612a      	str	r2, [r5, #16]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b5cc:	615a      	str	r2, [r3, #20]
 800b5ce:	e7c2      	b.n	800b556 <__gethex+0x392>
 800b5d0:	692a      	ldr	r2, [r5, #16]
 800b5d2:	454a      	cmp	r2, r9
 800b5d4:	dd0b      	ble.n	800b5ee <__gethex+0x42a>
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f7ff fda3 	bl	800b124 <rshift>
 800b5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	f6ff aed8 	blt.w	800b39a <__gethex+0x1d6>
 800b5ea:	2701      	movs	r7, #1
 800b5ec:	e7c7      	b.n	800b57e <__gethex+0x3ba>
 800b5ee:	f016 061f 	ands.w	r6, r6, #31
 800b5f2:	d0fa      	beq.n	800b5ea <__gethex+0x426>
 800b5f4:	449a      	add	sl, r3
 800b5f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b5fa:	f000 f9aa 	bl	800b952 <__hi0bits>
 800b5fe:	f1c6 0620 	rsb	r6, r6, #32
 800b602:	42b0      	cmp	r0, r6
 800b604:	dbe7      	blt.n	800b5d6 <__gethex+0x412>
 800b606:	e7f0      	b.n	800b5ea <__gethex+0x426>

0800b608 <L_shift>:
 800b608:	f1c2 0208 	rsb	r2, r2, #8
 800b60c:	0092      	lsls	r2, r2, #2
 800b60e:	b570      	push	{r4, r5, r6, lr}
 800b610:	f1c2 0620 	rsb	r6, r2, #32
 800b614:	6843      	ldr	r3, [r0, #4]
 800b616:	6804      	ldr	r4, [r0, #0]
 800b618:	fa03 f506 	lsl.w	r5, r3, r6
 800b61c:	432c      	orrs	r4, r5
 800b61e:	40d3      	lsrs	r3, r2
 800b620:	6004      	str	r4, [r0, #0]
 800b622:	f840 3f04 	str.w	r3, [r0, #4]!
 800b626:	4288      	cmp	r0, r1
 800b628:	d3f4      	bcc.n	800b614 <L_shift+0xc>
 800b62a:	bd70      	pop	{r4, r5, r6, pc}

0800b62c <__match>:
 800b62c:	b530      	push	{r4, r5, lr}
 800b62e:	6803      	ldr	r3, [r0, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b636:	b914      	cbnz	r4, 800b63e <__match+0x12>
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	2001      	movs	r0, #1
 800b63c:	bd30      	pop	{r4, r5, pc}
 800b63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b646:	2d19      	cmp	r5, #25
 800b648:	bf98      	it	ls
 800b64a:	3220      	addls	r2, #32
 800b64c:	42a2      	cmp	r2, r4
 800b64e:	d0f0      	beq.n	800b632 <__match+0x6>
 800b650:	2000      	movs	r0, #0
 800b652:	e7f3      	b.n	800b63c <__match+0x10>

0800b654 <__hexnan>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	2500      	movs	r5, #0
 800b65a:	680b      	ldr	r3, [r1, #0]
 800b65c:	4682      	mov	sl, r0
 800b65e:	115f      	asrs	r7, r3, #5
 800b660:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b664:	f013 031f 	ands.w	r3, r3, #31
 800b668:	bf18      	it	ne
 800b66a:	3704      	addne	r7, #4
 800b66c:	1f3e      	subs	r6, r7, #4
 800b66e:	4690      	mov	r8, r2
 800b670:	46b1      	mov	r9, r6
 800b672:	4634      	mov	r4, r6
 800b674:	46ab      	mov	fp, r5
 800b676:	b087      	sub	sp, #28
 800b678:	6801      	ldr	r1, [r0, #0]
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	f847 5c04 	str.w	r5, [r7, #-4]
 800b680:	9502      	str	r5, [sp, #8]
 800b682:	784a      	ldrb	r2, [r1, #1]
 800b684:	1c4b      	adds	r3, r1, #1
 800b686:	9303      	str	r3, [sp, #12]
 800b688:	b342      	cbz	r2, 800b6dc <__hexnan+0x88>
 800b68a:	4610      	mov	r0, r2
 800b68c:	9105      	str	r1, [sp, #20]
 800b68e:	9204      	str	r2, [sp, #16]
 800b690:	f7ff fd83 	bl	800b19a <__hexdig_fun>
 800b694:	2800      	cmp	r0, #0
 800b696:	d143      	bne.n	800b720 <__hexnan+0xcc>
 800b698:	9a04      	ldr	r2, [sp, #16]
 800b69a:	9905      	ldr	r1, [sp, #20]
 800b69c:	2a20      	cmp	r2, #32
 800b69e:	d818      	bhi.n	800b6d2 <__hexnan+0x7e>
 800b6a0:	9b02      	ldr	r3, [sp, #8]
 800b6a2:	459b      	cmp	fp, r3
 800b6a4:	dd13      	ble.n	800b6ce <__hexnan+0x7a>
 800b6a6:	454c      	cmp	r4, r9
 800b6a8:	d206      	bcs.n	800b6b8 <__hexnan+0x64>
 800b6aa:	2d07      	cmp	r5, #7
 800b6ac:	dc04      	bgt.n	800b6b8 <__hexnan+0x64>
 800b6ae:	462a      	mov	r2, r5
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7ff ffa8 	bl	800b608 <L_shift>
 800b6b8:	4544      	cmp	r4, r8
 800b6ba:	d944      	bls.n	800b746 <__hexnan+0xf2>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f1a4 0904 	sub.w	r9, r4, #4
 800b6c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6c6:	461d      	mov	r5, r3
 800b6c8:	464c      	mov	r4, r9
 800b6ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b6ce:	9903      	ldr	r1, [sp, #12]
 800b6d0:	e7d7      	b.n	800b682 <__hexnan+0x2e>
 800b6d2:	2a29      	cmp	r2, #41	; 0x29
 800b6d4:	d14a      	bne.n	800b76c <__hexnan+0x118>
 800b6d6:	3102      	adds	r1, #2
 800b6d8:	f8ca 1000 	str.w	r1, [sl]
 800b6dc:	f1bb 0f00 	cmp.w	fp, #0
 800b6e0:	d044      	beq.n	800b76c <__hexnan+0x118>
 800b6e2:	454c      	cmp	r4, r9
 800b6e4:	d206      	bcs.n	800b6f4 <__hexnan+0xa0>
 800b6e6:	2d07      	cmp	r5, #7
 800b6e8:	dc04      	bgt.n	800b6f4 <__hexnan+0xa0>
 800b6ea:	462a      	mov	r2, r5
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f7ff ff8a 	bl	800b608 <L_shift>
 800b6f4:	4544      	cmp	r4, r8
 800b6f6:	d928      	bls.n	800b74a <__hexnan+0xf6>
 800b6f8:	4643      	mov	r3, r8
 800b6fa:	f854 2b04 	ldr.w	r2, [r4], #4
 800b6fe:	42a6      	cmp	r6, r4
 800b700:	f843 2b04 	str.w	r2, [r3], #4
 800b704:	d2f9      	bcs.n	800b6fa <__hexnan+0xa6>
 800b706:	2200      	movs	r2, #0
 800b708:	f843 2b04 	str.w	r2, [r3], #4
 800b70c:	429e      	cmp	r6, r3
 800b70e:	d2fb      	bcs.n	800b708 <__hexnan+0xb4>
 800b710:	6833      	ldr	r3, [r6, #0]
 800b712:	b91b      	cbnz	r3, 800b71c <__hexnan+0xc8>
 800b714:	4546      	cmp	r6, r8
 800b716:	d127      	bne.n	800b768 <__hexnan+0x114>
 800b718:	2301      	movs	r3, #1
 800b71a:	6033      	str	r3, [r6, #0]
 800b71c:	2005      	movs	r0, #5
 800b71e:	e026      	b.n	800b76e <__hexnan+0x11a>
 800b720:	3501      	adds	r5, #1
 800b722:	2d08      	cmp	r5, #8
 800b724:	f10b 0b01 	add.w	fp, fp, #1
 800b728:	dd06      	ble.n	800b738 <__hexnan+0xe4>
 800b72a:	4544      	cmp	r4, r8
 800b72c:	d9cf      	bls.n	800b6ce <__hexnan+0x7a>
 800b72e:	2300      	movs	r3, #0
 800b730:	2501      	movs	r5, #1
 800b732:	f844 3c04 	str.w	r3, [r4, #-4]
 800b736:	3c04      	subs	r4, #4
 800b738:	6822      	ldr	r2, [r4, #0]
 800b73a:	f000 000f 	and.w	r0, r0, #15
 800b73e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b742:	6020      	str	r0, [r4, #0]
 800b744:	e7c3      	b.n	800b6ce <__hexnan+0x7a>
 800b746:	2508      	movs	r5, #8
 800b748:	e7c1      	b.n	800b6ce <__hexnan+0x7a>
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d0df      	beq.n	800b710 <__hexnan+0xbc>
 800b750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b754:	f1c3 0320 	rsb	r3, r3, #32
 800b758:	fa22 f303 	lsr.w	r3, r2, r3
 800b75c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b760:	401a      	ands	r2, r3
 800b762:	f847 2c04 	str.w	r2, [r7, #-4]
 800b766:	e7d3      	b.n	800b710 <__hexnan+0xbc>
 800b768:	3e04      	subs	r6, #4
 800b76a:	e7d1      	b.n	800b710 <__hexnan+0xbc>
 800b76c:	2004      	movs	r0, #4
 800b76e:	b007      	add	sp, #28
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b774 <__locale_ctype_ptr_l>:
 800b774:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b778:	4770      	bx	lr

0800b77a <__localeconv_l>:
 800b77a:	30f0      	adds	r0, #240	; 0xf0
 800b77c:	4770      	bx	lr
	...

0800b780 <malloc>:
 800b780:	4b02      	ldr	r3, [pc, #8]	; (800b78c <malloc+0xc>)
 800b782:	4601      	mov	r1, r0
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	f000 bc27 	b.w	800bfd8 <_malloc_r>
 800b78a:	bf00      	nop
 800b78c:	20000374 	.word	0x20000374

0800b790 <__ascii_mbtowc>:
 800b790:	b082      	sub	sp, #8
 800b792:	b901      	cbnz	r1, 800b796 <__ascii_mbtowc+0x6>
 800b794:	a901      	add	r1, sp, #4
 800b796:	b142      	cbz	r2, 800b7aa <__ascii_mbtowc+0x1a>
 800b798:	b14b      	cbz	r3, 800b7ae <__ascii_mbtowc+0x1e>
 800b79a:	7813      	ldrb	r3, [r2, #0]
 800b79c:	600b      	str	r3, [r1, #0]
 800b79e:	7812      	ldrb	r2, [r2, #0]
 800b7a0:	1c10      	adds	r0, r2, #0
 800b7a2:	bf18      	it	ne
 800b7a4:	2001      	movne	r0, #1
 800b7a6:	b002      	add	sp, #8
 800b7a8:	4770      	bx	lr
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	e7fb      	b.n	800b7a6 <__ascii_mbtowc+0x16>
 800b7ae:	f06f 0001 	mvn.w	r0, #1
 800b7b2:	e7f8      	b.n	800b7a6 <__ascii_mbtowc+0x16>

0800b7b4 <memcpy>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	1e43      	subs	r3, r0, #1
 800b7b8:	440a      	add	r2, r1
 800b7ba:	4291      	cmp	r1, r2
 800b7bc:	d100      	bne.n	800b7c0 <memcpy+0xc>
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7c8:	e7f7      	b.n	800b7ba <memcpy+0x6>

0800b7ca <_Balloc>:
 800b7ca:	b570      	push	{r4, r5, r6, lr}
 800b7cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460e      	mov	r6, r1
 800b7d2:	b93d      	cbnz	r5, 800b7e4 <_Balloc+0x1a>
 800b7d4:	2010      	movs	r0, #16
 800b7d6:	f7ff ffd3 	bl	800b780 <malloc>
 800b7da:	6260      	str	r0, [r4, #36]	; 0x24
 800b7dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7e0:	6005      	str	r5, [r0, #0]
 800b7e2:	60c5      	str	r5, [r0, #12]
 800b7e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b7e6:	68eb      	ldr	r3, [r5, #12]
 800b7e8:	b183      	cbz	r3, 800b80c <_Balloc+0x42>
 800b7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b7f2:	b9b8      	cbnz	r0, 800b824 <_Balloc+0x5a>
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	fa01 f506 	lsl.w	r5, r1, r6
 800b7fa:	1d6a      	adds	r2, r5, #5
 800b7fc:	0092      	lsls	r2, r2, #2
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 fbdc 	bl	800bfbc <_calloc_r>
 800b804:	b160      	cbz	r0, 800b820 <_Balloc+0x56>
 800b806:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b80a:	e00e      	b.n	800b82a <_Balloc+0x60>
 800b80c:	2221      	movs	r2, #33	; 0x21
 800b80e:	2104      	movs	r1, #4
 800b810:	4620      	mov	r0, r4
 800b812:	f000 fbd3 	bl	800bfbc <_calloc_r>
 800b816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b818:	60e8      	str	r0, [r5, #12]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e4      	bne.n	800b7ea <_Balloc+0x20>
 800b820:	2000      	movs	r0, #0
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	6802      	ldr	r2, [r0, #0]
 800b826:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b82a:	2300      	movs	r3, #0
 800b82c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b830:	e7f7      	b.n	800b822 <_Balloc+0x58>

0800b832 <_Bfree>:
 800b832:	b570      	push	{r4, r5, r6, lr}
 800b834:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b836:	4606      	mov	r6, r0
 800b838:	460d      	mov	r5, r1
 800b83a:	b93c      	cbnz	r4, 800b84c <_Bfree+0x1a>
 800b83c:	2010      	movs	r0, #16
 800b83e:	f7ff ff9f 	bl	800b780 <malloc>
 800b842:	6270      	str	r0, [r6, #36]	; 0x24
 800b844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b848:	6004      	str	r4, [r0, #0]
 800b84a:	60c4      	str	r4, [r0, #12]
 800b84c:	b13d      	cbz	r5, 800b85e <_Bfree+0x2c>
 800b84e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b850:	686a      	ldr	r2, [r5, #4]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b858:	6029      	str	r1, [r5, #0]
 800b85a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b85e:	bd70      	pop	{r4, r5, r6, pc}

0800b860 <__multadd>:
 800b860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b864:	461f      	mov	r7, r3
 800b866:	4606      	mov	r6, r0
 800b868:	460c      	mov	r4, r1
 800b86a:	2300      	movs	r3, #0
 800b86c:	690d      	ldr	r5, [r1, #16]
 800b86e:	f101 0c14 	add.w	ip, r1, #20
 800b872:	f8dc 0000 	ldr.w	r0, [ip]
 800b876:	3301      	adds	r3, #1
 800b878:	b281      	uxth	r1, r0
 800b87a:	fb02 7101 	mla	r1, r2, r1, r7
 800b87e:	0c00      	lsrs	r0, r0, #16
 800b880:	0c0f      	lsrs	r7, r1, #16
 800b882:	fb02 7000 	mla	r0, r2, r0, r7
 800b886:	b289      	uxth	r1, r1
 800b888:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b88c:	429d      	cmp	r5, r3
 800b88e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b892:	f84c 1b04 	str.w	r1, [ip], #4
 800b896:	dcec      	bgt.n	800b872 <__multadd+0x12>
 800b898:	b1d7      	cbz	r7, 800b8d0 <__multadd+0x70>
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	42ab      	cmp	r3, r5
 800b89e:	dc12      	bgt.n	800b8c6 <__multadd+0x66>
 800b8a0:	6861      	ldr	r1, [r4, #4]
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	3101      	adds	r1, #1
 800b8a6:	f7ff ff90 	bl	800b7ca <_Balloc>
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	6922      	ldr	r2, [r4, #16]
 800b8ae:	f104 010c 	add.w	r1, r4, #12
 800b8b2:	3202      	adds	r2, #2
 800b8b4:	0092      	lsls	r2, r2, #2
 800b8b6:	300c      	adds	r0, #12
 800b8b8:	f7ff ff7c 	bl	800b7b4 <memcpy>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7ff ffb7 	bl	800b832 <_Bfree>
 800b8c4:	4644      	mov	r4, r8
 800b8c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8ca:	3501      	adds	r5, #1
 800b8cc:	615f      	str	r7, [r3, #20]
 800b8ce:	6125      	str	r5, [r4, #16]
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8d6 <__s2b>:
 800b8d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8da:	4615      	mov	r5, r2
 800b8dc:	2209      	movs	r2, #9
 800b8de:	461f      	mov	r7, r3
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	db20      	blt.n	800b934 <__s2b+0x5e>
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f7ff ff69 	bl	800b7ca <_Balloc>
 800b8f8:	9b08      	ldr	r3, [sp, #32]
 800b8fa:	2d09      	cmp	r5, #9
 800b8fc:	6143      	str	r3, [r0, #20]
 800b8fe:	f04f 0301 	mov.w	r3, #1
 800b902:	6103      	str	r3, [r0, #16]
 800b904:	dd19      	ble.n	800b93a <__s2b+0x64>
 800b906:	f104 0809 	add.w	r8, r4, #9
 800b90a:	46c1      	mov	r9, r8
 800b90c:	442c      	add	r4, r5
 800b90e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b912:	4601      	mov	r1, r0
 800b914:	3b30      	subs	r3, #48	; 0x30
 800b916:	220a      	movs	r2, #10
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff ffa1 	bl	800b860 <__multadd>
 800b91e:	45a1      	cmp	r9, r4
 800b920:	d1f5      	bne.n	800b90e <__s2b+0x38>
 800b922:	eb08 0405 	add.w	r4, r8, r5
 800b926:	3c08      	subs	r4, #8
 800b928:	1b2d      	subs	r5, r5, r4
 800b92a:	1963      	adds	r3, r4, r5
 800b92c:	42bb      	cmp	r3, r7
 800b92e:	db07      	blt.n	800b940 <__s2b+0x6a>
 800b930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b934:	0052      	lsls	r2, r2, #1
 800b936:	3101      	adds	r1, #1
 800b938:	e7d9      	b.n	800b8ee <__s2b+0x18>
 800b93a:	340a      	adds	r4, #10
 800b93c:	2509      	movs	r5, #9
 800b93e:	e7f3      	b.n	800b928 <__s2b+0x52>
 800b940:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b944:	4601      	mov	r1, r0
 800b946:	3b30      	subs	r3, #48	; 0x30
 800b948:	220a      	movs	r2, #10
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7ff ff88 	bl	800b860 <__multadd>
 800b950:	e7eb      	b.n	800b92a <__s2b+0x54>

0800b952 <__hi0bits>:
 800b952:	0c02      	lsrs	r2, r0, #16
 800b954:	0412      	lsls	r2, r2, #16
 800b956:	4603      	mov	r3, r0
 800b958:	b9b2      	cbnz	r2, 800b988 <__hi0bits+0x36>
 800b95a:	0403      	lsls	r3, r0, #16
 800b95c:	2010      	movs	r0, #16
 800b95e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b962:	bf04      	itt	eq
 800b964:	021b      	lsleq	r3, r3, #8
 800b966:	3008      	addeq	r0, #8
 800b968:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b96c:	bf04      	itt	eq
 800b96e:	011b      	lsleq	r3, r3, #4
 800b970:	3004      	addeq	r0, #4
 800b972:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b976:	bf04      	itt	eq
 800b978:	009b      	lsleq	r3, r3, #2
 800b97a:	3002      	addeq	r0, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	db06      	blt.n	800b98e <__hi0bits+0x3c>
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	d503      	bpl.n	800b98c <__hi0bits+0x3a>
 800b984:	3001      	adds	r0, #1
 800b986:	4770      	bx	lr
 800b988:	2000      	movs	r0, #0
 800b98a:	e7e8      	b.n	800b95e <__hi0bits+0xc>
 800b98c:	2020      	movs	r0, #32
 800b98e:	4770      	bx	lr

0800b990 <__lo0bits>:
 800b990:	6803      	ldr	r3, [r0, #0]
 800b992:	4601      	mov	r1, r0
 800b994:	f013 0207 	ands.w	r2, r3, #7
 800b998:	d00b      	beq.n	800b9b2 <__lo0bits+0x22>
 800b99a:	07da      	lsls	r2, r3, #31
 800b99c:	d423      	bmi.n	800b9e6 <__lo0bits+0x56>
 800b99e:	0798      	lsls	r0, r3, #30
 800b9a0:	bf49      	itett	mi
 800b9a2:	085b      	lsrmi	r3, r3, #1
 800b9a4:	089b      	lsrpl	r3, r3, #2
 800b9a6:	2001      	movmi	r0, #1
 800b9a8:	600b      	strmi	r3, [r1, #0]
 800b9aa:	bf5c      	itt	pl
 800b9ac:	600b      	strpl	r3, [r1, #0]
 800b9ae:	2002      	movpl	r0, #2
 800b9b0:	4770      	bx	lr
 800b9b2:	b298      	uxth	r0, r3
 800b9b4:	b9a8      	cbnz	r0, 800b9e2 <__lo0bits+0x52>
 800b9b6:	2010      	movs	r0, #16
 800b9b8:	0c1b      	lsrs	r3, r3, #16
 800b9ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b9be:	bf04      	itt	eq
 800b9c0:	0a1b      	lsreq	r3, r3, #8
 800b9c2:	3008      	addeq	r0, #8
 800b9c4:	071a      	lsls	r2, r3, #28
 800b9c6:	bf04      	itt	eq
 800b9c8:	091b      	lsreq	r3, r3, #4
 800b9ca:	3004      	addeq	r0, #4
 800b9cc:	079a      	lsls	r2, r3, #30
 800b9ce:	bf04      	itt	eq
 800b9d0:	089b      	lsreq	r3, r3, #2
 800b9d2:	3002      	addeq	r0, #2
 800b9d4:	07da      	lsls	r2, r3, #31
 800b9d6:	d402      	bmi.n	800b9de <__lo0bits+0x4e>
 800b9d8:	085b      	lsrs	r3, r3, #1
 800b9da:	d006      	beq.n	800b9ea <__lo0bits+0x5a>
 800b9dc:	3001      	adds	r0, #1
 800b9de:	600b      	str	r3, [r1, #0]
 800b9e0:	4770      	bx	lr
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	e7e9      	b.n	800b9ba <__lo0bits+0x2a>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	4770      	bx	lr
 800b9ea:	2020      	movs	r0, #32
 800b9ec:	4770      	bx	lr

0800b9ee <__i2b>:
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	f7ff fee9 	bl	800b7ca <_Balloc>
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	6144      	str	r4, [r0, #20]
 800b9fc:	6102      	str	r2, [r0, #16]
 800b9fe:	bd10      	pop	{r4, pc}

0800ba00 <__multiply>:
 800ba00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4614      	mov	r4, r2
 800ba06:	690a      	ldr	r2, [r1, #16]
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	4688      	mov	r8, r1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	bfbe      	ittt	lt
 800ba10:	460b      	movlt	r3, r1
 800ba12:	46a0      	movlt	r8, r4
 800ba14:	461c      	movlt	r4, r3
 800ba16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba26:	eb07 0609 	add.w	r6, r7, r9
 800ba2a:	42b3      	cmp	r3, r6
 800ba2c:	bfb8      	it	lt
 800ba2e:	3101      	addlt	r1, #1
 800ba30:	f7ff fecb 	bl	800b7ca <_Balloc>
 800ba34:	f100 0514 	add.w	r5, r0, #20
 800ba38:	462b      	mov	r3, r5
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ba40:	4573      	cmp	r3, lr
 800ba42:	d316      	bcc.n	800ba72 <__multiply+0x72>
 800ba44:	f104 0214 	add.w	r2, r4, #20
 800ba48:	f108 0114 	add.w	r1, r8, #20
 800ba4c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ba50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	9201      	str	r2, [sp, #4]
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d80c      	bhi.n	800ba78 <__multiply+0x78>
 800ba5e:	2e00      	cmp	r6, #0
 800ba60:	dd03      	ble.n	800ba6a <__multiply+0x6a>
 800ba62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d05d      	beq.n	800bb26 <__multiply+0x126>
 800ba6a:	6106      	str	r6, [r0, #16]
 800ba6c:	b003      	add	sp, #12
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	f843 2b04 	str.w	r2, [r3], #4
 800ba76:	e7e3      	b.n	800ba40 <__multiply+0x40>
 800ba78:	f8b2 b000 	ldrh.w	fp, [r2]
 800ba7c:	f1bb 0f00 	cmp.w	fp, #0
 800ba80:	d023      	beq.n	800baca <__multiply+0xca>
 800ba82:	4689      	mov	r9, r1
 800ba84:	46ac      	mov	ip, r5
 800ba86:	f04f 0800 	mov.w	r8, #0
 800ba8a:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba8e:	f8dc a000 	ldr.w	sl, [ip]
 800ba92:	b2a3      	uxth	r3, r4
 800ba94:	fa1f fa8a 	uxth.w	sl, sl
 800ba98:	fb0b a303 	mla	r3, fp, r3, sl
 800ba9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800baa0:	f8dc 4000 	ldr.w	r4, [ip]
 800baa4:	4443      	add	r3, r8
 800baa6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800baaa:	fb0b 840a 	mla	r4, fp, sl, r8
 800baae:	46e2      	mov	sl, ip
 800bab0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800baba:	454f      	cmp	r7, r9
 800babc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bac0:	f84a 3b04 	str.w	r3, [sl], #4
 800bac4:	d82b      	bhi.n	800bb1e <__multiply+0x11e>
 800bac6:	f8cc 8004 	str.w	r8, [ip, #4]
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	3204      	adds	r2, #4
 800bace:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bad2:	f1ba 0f00 	cmp.w	sl, #0
 800bad6:	d020      	beq.n	800bb1a <__multiply+0x11a>
 800bad8:	4689      	mov	r9, r1
 800bada:	46a8      	mov	r8, r5
 800badc:	f04f 0b00 	mov.w	fp, #0
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	f8b9 c000 	ldrh.w	ip, [r9]
 800bae6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800baea:	b29b      	uxth	r3, r3
 800baec:	fb0a 440c 	mla	r4, sl, ip, r4
 800baf0:	46c4      	mov	ip, r8
 800baf2:	445c      	add	r4, fp
 800baf4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800baf8:	f84c 3b04 	str.w	r3, [ip], #4
 800bafc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb00:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bb04:	0c1b      	lsrs	r3, r3, #16
 800bb06:	fb0a b303 	mla	r3, sl, r3, fp
 800bb0a:	454f      	cmp	r7, r9
 800bb0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bb10:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bb14:	d805      	bhi.n	800bb22 <__multiply+0x122>
 800bb16:	f8c8 3004 	str.w	r3, [r8, #4]
 800bb1a:	3504      	adds	r5, #4
 800bb1c:	e79b      	b.n	800ba56 <__multiply+0x56>
 800bb1e:	46d4      	mov	ip, sl
 800bb20:	e7b3      	b.n	800ba8a <__multiply+0x8a>
 800bb22:	46e0      	mov	r8, ip
 800bb24:	e7dd      	b.n	800bae2 <__multiply+0xe2>
 800bb26:	3e01      	subs	r6, #1
 800bb28:	e799      	b.n	800ba5e <__multiply+0x5e>
	...

0800bb2c <__pow5mult>:
 800bb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb30:	4615      	mov	r5, r2
 800bb32:	f012 0203 	ands.w	r2, r2, #3
 800bb36:	4606      	mov	r6, r0
 800bb38:	460f      	mov	r7, r1
 800bb3a:	d007      	beq.n	800bb4c <__pow5mult+0x20>
 800bb3c:	4c21      	ldr	r4, [pc, #132]	; (800bbc4 <__pow5mult+0x98>)
 800bb3e:	3a01      	subs	r2, #1
 800bb40:	2300      	movs	r3, #0
 800bb42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb46:	f7ff fe8b 	bl	800b860 <__multadd>
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	10ad      	asrs	r5, r5, #2
 800bb4e:	d035      	beq.n	800bbbc <__pow5mult+0x90>
 800bb50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb52:	b93c      	cbnz	r4, 800bb64 <__pow5mult+0x38>
 800bb54:	2010      	movs	r0, #16
 800bb56:	f7ff fe13 	bl	800b780 <malloc>
 800bb5a:	6270      	str	r0, [r6, #36]	; 0x24
 800bb5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb60:	6004      	str	r4, [r0, #0]
 800bb62:	60c4      	str	r4, [r0, #12]
 800bb64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb6c:	b94c      	cbnz	r4, 800bb82 <__pow5mult+0x56>
 800bb6e:	f240 2171 	movw	r1, #625	; 0x271
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7ff ff3b 	bl	800b9ee <__i2b>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb80:	6003      	str	r3, [r0, #0]
 800bb82:	f04f 0800 	mov.w	r8, #0
 800bb86:	07eb      	lsls	r3, r5, #31
 800bb88:	d50a      	bpl.n	800bba0 <__pow5mult+0x74>
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ff36 	bl	800ba00 <__multiply>
 800bb94:	4681      	mov	r9, r0
 800bb96:	4639      	mov	r1, r7
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7ff fe4a 	bl	800b832 <_Bfree>
 800bb9e:	464f      	mov	r7, r9
 800bba0:	106d      	asrs	r5, r5, #1
 800bba2:	d00b      	beq.n	800bbbc <__pow5mult+0x90>
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	b938      	cbnz	r0, 800bbb8 <__pow5mult+0x8c>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7ff ff27 	bl	800ba00 <__multiply>
 800bbb2:	6020      	str	r0, [r4, #0]
 800bbb4:	f8c0 8000 	str.w	r8, [r0]
 800bbb8:	4604      	mov	r4, r0
 800bbba:	e7e4      	b.n	800bb86 <__pow5mult+0x5a>
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800ccf0 	.word	0x0800ccf0

0800bbc8 <__lshift>:
 800bbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbcc:	460c      	mov	r4, r1
 800bbce:	4607      	mov	r7, r0
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	6923      	ldr	r3, [r4, #16]
 800bbd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbd8:	eb0a 0903 	add.w	r9, sl, r3
 800bbdc:	6849      	ldr	r1, [r1, #4]
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	f109 0501 	add.w	r5, r9, #1
 800bbe4:	42ab      	cmp	r3, r5
 800bbe6:	db32      	blt.n	800bc4e <__lshift+0x86>
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f7ff fdee 	bl	800b7ca <_Balloc>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4680      	mov	r8, r0
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f100 0114 	add.w	r1, r0, #20
 800bbf8:	4553      	cmp	r3, sl
 800bbfa:	db2b      	blt.n	800bc54 <__lshift+0x8c>
 800bbfc:	6920      	ldr	r0, [r4, #16]
 800bbfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc02:	f104 0314 	add.w	r3, r4, #20
 800bc06:	f016 021f 	ands.w	r2, r6, #31
 800bc0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc12:	d025      	beq.n	800bc60 <__lshift+0x98>
 800bc14:	2000      	movs	r0, #0
 800bc16:	f1c2 0e20 	rsb	lr, r2, #32
 800bc1a:	468a      	mov	sl, r1
 800bc1c:	681e      	ldr	r6, [r3, #0]
 800bc1e:	4096      	lsls	r6, r2
 800bc20:	4330      	orrs	r0, r6
 800bc22:	f84a 0b04 	str.w	r0, [sl], #4
 800bc26:	f853 0b04 	ldr.w	r0, [r3], #4
 800bc2a:	459c      	cmp	ip, r3
 800bc2c:	fa20 f00e 	lsr.w	r0, r0, lr
 800bc30:	d814      	bhi.n	800bc5c <__lshift+0x94>
 800bc32:	6048      	str	r0, [r1, #4]
 800bc34:	b108      	cbz	r0, 800bc3a <__lshift+0x72>
 800bc36:	f109 0502 	add.w	r5, r9, #2
 800bc3a:	3d01      	subs	r5, #1
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	f8c8 5010 	str.w	r5, [r8, #16]
 800bc42:	4621      	mov	r1, r4
 800bc44:	f7ff fdf5 	bl	800b832 <_Bfree>
 800bc48:	4640      	mov	r0, r8
 800bc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4e:	3101      	adds	r1, #1
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	e7c7      	b.n	800bbe4 <__lshift+0x1c>
 800bc54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	e7cd      	b.n	800bbf8 <__lshift+0x30>
 800bc5c:	4651      	mov	r1, sl
 800bc5e:	e7dc      	b.n	800bc1a <__lshift+0x52>
 800bc60:	3904      	subs	r1, #4
 800bc62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc66:	459c      	cmp	ip, r3
 800bc68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc6c:	d8f9      	bhi.n	800bc62 <__lshift+0x9a>
 800bc6e:	e7e4      	b.n	800bc3a <__lshift+0x72>

0800bc70 <__mcmp>:
 800bc70:	6903      	ldr	r3, [r0, #16]
 800bc72:	690a      	ldr	r2, [r1, #16]
 800bc74:	b530      	push	{r4, r5, lr}
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	d10c      	bne.n	800bc94 <__mcmp+0x24>
 800bc7a:	0092      	lsls	r2, r2, #2
 800bc7c:	3014      	adds	r0, #20
 800bc7e:	3114      	adds	r1, #20
 800bc80:	1884      	adds	r4, r0, r2
 800bc82:	4411      	add	r1, r2
 800bc84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc8c:	4295      	cmp	r5, r2
 800bc8e:	d003      	beq.n	800bc98 <__mcmp+0x28>
 800bc90:	d305      	bcc.n	800bc9e <__mcmp+0x2e>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4618      	mov	r0, r3
 800bc96:	bd30      	pop	{r4, r5, pc}
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d3f3      	bcc.n	800bc84 <__mcmp+0x14>
 800bc9c:	e7fa      	b.n	800bc94 <__mcmp+0x24>
 800bc9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bca2:	e7f7      	b.n	800bc94 <__mcmp+0x24>

0800bca4 <__mdiff>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	460d      	mov	r5, r1
 800bcaa:	4607      	mov	r7, r0
 800bcac:	4611      	mov	r1, r2
 800bcae:	4628      	mov	r0, r5
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	f7ff ffdd 	bl	800bc70 <__mcmp>
 800bcb6:	1e06      	subs	r6, r0, #0
 800bcb8:	d108      	bne.n	800bccc <__mdiff+0x28>
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff fd84 	bl	800b7ca <_Balloc>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bcc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bccc:	bfa4      	itt	ge
 800bcce:	4623      	movge	r3, r4
 800bcd0:	462c      	movge	r4, r5
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	6861      	ldr	r1, [r4, #4]
 800bcd6:	bfa6      	itte	ge
 800bcd8:	461d      	movge	r5, r3
 800bcda:	2600      	movge	r6, #0
 800bcdc:	2601      	movlt	r6, #1
 800bcde:	f7ff fd74 	bl	800b7ca <_Balloc>
 800bce2:	f04f 0e00 	mov.w	lr, #0
 800bce6:	60c6      	str	r6, [r0, #12]
 800bce8:	692b      	ldr	r3, [r5, #16]
 800bcea:	6926      	ldr	r6, [r4, #16]
 800bcec:	f104 0214 	add.w	r2, r4, #20
 800bcf0:	f105 0914 	add.w	r9, r5, #20
 800bcf4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bcf8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bcfc:	f100 0114 	add.w	r1, r0, #20
 800bd00:	f852 ab04 	ldr.w	sl, [r2], #4
 800bd04:	f859 5b04 	ldr.w	r5, [r9], #4
 800bd08:	fa1f f38a 	uxth.w	r3, sl
 800bd0c:	4473      	add	r3, lr
 800bd0e:	b2ac      	uxth	r4, r5
 800bd10:	1b1b      	subs	r3, r3, r4
 800bd12:	0c2c      	lsrs	r4, r5, #16
 800bd14:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800bd18:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bd22:	45c8      	cmp	r8, r9
 800bd24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bd28:	4694      	mov	ip, r2
 800bd2a:	f841 4b04 	str.w	r4, [r1], #4
 800bd2e:	d8e7      	bhi.n	800bd00 <__mdiff+0x5c>
 800bd30:	45bc      	cmp	ip, r7
 800bd32:	d304      	bcc.n	800bd3e <__mdiff+0x9a>
 800bd34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bd38:	b183      	cbz	r3, 800bd5c <__mdiff+0xb8>
 800bd3a:	6106      	str	r6, [r0, #16]
 800bd3c:	e7c4      	b.n	800bcc8 <__mdiff+0x24>
 800bd3e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bd42:	b2a2      	uxth	r2, r4
 800bd44:	4472      	add	r2, lr
 800bd46:	1413      	asrs	r3, r2, #16
 800bd48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd52:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bd56:	f841 2b04 	str.w	r2, [r1], #4
 800bd5a:	e7e9      	b.n	800bd30 <__mdiff+0x8c>
 800bd5c:	3e01      	subs	r6, #1
 800bd5e:	e7e9      	b.n	800bd34 <__mdiff+0x90>

0800bd60 <__ulp>:
 800bd60:	4b10      	ldr	r3, [pc, #64]	; (800bda4 <__ulp+0x44>)
 800bd62:	400b      	ands	r3, r1
 800bd64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	dd02      	ble.n	800bd72 <__ulp+0x12>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4770      	bx	lr
 800bd72:	425b      	negs	r3, r3
 800bd74:	151b      	asrs	r3, r3, #20
 800bd76:	2b13      	cmp	r3, #19
 800bd78:	f04f 0000 	mov.w	r0, #0
 800bd7c:	f04f 0100 	mov.w	r1, #0
 800bd80:	dc04      	bgt.n	800bd8c <__ulp+0x2c>
 800bd82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bd86:	fa42 f103 	asr.w	r1, r2, r3
 800bd8a:	4770      	bx	lr
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	3b14      	subs	r3, #20
 800bd90:	2b1e      	cmp	r3, #30
 800bd92:	bfce      	itee	gt
 800bd94:	4613      	movgt	r3, r2
 800bd96:	f1c3 031f 	rsble	r3, r3, #31
 800bd9a:	fa02 f303 	lslle.w	r3, r2, r3
 800bd9e:	4618      	mov	r0, r3
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	7ff00000 	.word	0x7ff00000

0800bda8 <__b2d>:
 800bda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdac:	6907      	ldr	r7, [r0, #16]
 800bdae:	f100 0914 	add.w	r9, r0, #20
 800bdb2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bdb6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bdba:	f1a7 0804 	sub.w	r8, r7, #4
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f7ff fdc7 	bl	800b952 <__hi0bits>
 800bdc4:	f1c0 0320 	rsb	r3, r0, #32
 800bdc8:	280a      	cmp	r0, #10
 800bdca:	600b      	str	r3, [r1, #0]
 800bdcc:	491e      	ldr	r1, [pc, #120]	; (800be48 <__b2d+0xa0>)
 800bdce:	dc17      	bgt.n	800be00 <__b2d+0x58>
 800bdd0:	45c1      	cmp	r9, r8
 800bdd2:	bf28      	it	cs
 800bdd4:	2200      	movcs	r2, #0
 800bdd6:	f1c0 0c0b 	rsb	ip, r0, #11
 800bdda:	fa26 f30c 	lsr.w	r3, r6, ip
 800bdde:	bf38      	it	cc
 800bde0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bde4:	ea43 0501 	orr.w	r5, r3, r1
 800bde8:	f100 0315 	add.w	r3, r0, #21
 800bdec:	fa06 f303 	lsl.w	r3, r6, r3
 800bdf0:	fa22 f20c 	lsr.w	r2, r2, ip
 800bdf4:	ea43 0402 	orr.w	r4, r3, r2
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be00:	45c1      	cmp	r9, r8
 800be02:	bf3a      	itte	cc
 800be04:	f1a7 0808 	subcc.w	r8, r7, #8
 800be08:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800be0c:	2200      	movcs	r2, #0
 800be0e:	f1b0 030b 	subs.w	r3, r0, #11
 800be12:	d015      	beq.n	800be40 <__b2d+0x98>
 800be14:	409e      	lsls	r6, r3
 800be16:	f1c3 0720 	rsb	r7, r3, #32
 800be1a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800be1e:	fa22 f107 	lsr.w	r1, r2, r7
 800be22:	45c8      	cmp	r8, r9
 800be24:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800be28:	ea46 0501 	orr.w	r5, r6, r1
 800be2c:	bf94      	ite	ls
 800be2e:	2100      	movls	r1, #0
 800be30:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800be34:	fa02 f003 	lsl.w	r0, r2, r3
 800be38:	40f9      	lsrs	r1, r7
 800be3a:	ea40 0401 	orr.w	r4, r0, r1
 800be3e:	e7db      	b.n	800bdf8 <__b2d+0x50>
 800be40:	ea46 0501 	orr.w	r5, r6, r1
 800be44:	4614      	mov	r4, r2
 800be46:	e7d7      	b.n	800bdf8 <__b2d+0x50>
 800be48:	3ff00000 	.word	0x3ff00000

0800be4c <__d2b>:
 800be4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800be50:	461c      	mov	r4, r3
 800be52:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800be56:	2101      	movs	r1, #1
 800be58:	4690      	mov	r8, r2
 800be5a:	f7ff fcb6 	bl	800b7ca <_Balloc>
 800be5e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800be62:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800be66:	4607      	mov	r7, r0
 800be68:	bb34      	cbnz	r4, 800beb8 <__d2b+0x6c>
 800be6a:	9201      	str	r2, [sp, #4]
 800be6c:	f1b8 0200 	subs.w	r2, r8, #0
 800be70:	d027      	beq.n	800bec2 <__d2b+0x76>
 800be72:	a802      	add	r0, sp, #8
 800be74:	f840 2d08 	str.w	r2, [r0, #-8]!
 800be78:	f7ff fd8a 	bl	800b990 <__lo0bits>
 800be7c:	9900      	ldr	r1, [sp, #0]
 800be7e:	b1f0      	cbz	r0, 800bebe <__d2b+0x72>
 800be80:	9a01      	ldr	r2, [sp, #4]
 800be82:	f1c0 0320 	rsb	r3, r0, #32
 800be86:	fa02 f303 	lsl.w	r3, r2, r3
 800be8a:	430b      	orrs	r3, r1
 800be8c:	40c2      	lsrs	r2, r0
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	9201      	str	r2, [sp, #4]
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	bf14      	ite	ne
 800be98:	2102      	movne	r1, #2
 800be9a:	2101      	moveq	r1, #1
 800be9c:	61bb      	str	r3, [r7, #24]
 800be9e:	6139      	str	r1, [r7, #16]
 800bea0:	b1c4      	cbz	r4, 800bed4 <__d2b+0x88>
 800bea2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bea6:	4404      	add	r4, r0
 800bea8:	6034      	str	r4, [r6, #0]
 800beaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800beae:	6028      	str	r0, [r5, #0]
 800beb0:	4638      	mov	r0, r7
 800beb2:	b002      	add	sp, #8
 800beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bebc:	e7d5      	b.n	800be6a <__d2b+0x1e>
 800bebe:	6179      	str	r1, [r7, #20]
 800bec0:	e7e7      	b.n	800be92 <__d2b+0x46>
 800bec2:	a801      	add	r0, sp, #4
 800bec4:	f7ff fd64 	bl	800b990 <__lo0bits>
 800bec8:	2101      	movs	r1, #1
 800beca:	9b01      	ldr	r3, [sp, #4]
 800becc:	6139      	str	r1, [r7, #16]
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	3020      	adds	r0, #32
 800bed2:	e7e5      	b.n	800bea0 <__d2b+0x54>
 800bed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bed8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bedc:	6030      	str	r0, [r6, #0]
 800bede:	6918      	ldr	r0, [r3, #16]
 800bee0:	f7ff fd37 	bl	800b952 <__hi0bits>
 800bee4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bee8:	e7e1      	b.n	800beae <__d2b+0x62>

0800beea <__ratio>:
 800beea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beee:	4688      	mov	r8, r1
 800bef0:	4669      	mov	r1, sp
 800bef2:	4681      	mov	r9, r0
 800bef4:	f7ff ff58 	bl	800bda8 <__b2d>
 800bef8:	468b      	mov	fp, r1
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	4640      	mov	r0, r8
 800bf00:	a901      	add	r1, sp, #4
 800bf02:	f7ff ff51 	bl	800bda8 <__b2d>
 800bf06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf0e:	460d      	mov	r5, r1
 800bf10:	eba3 0c02 	sub.w	ip, r3, r2
 800bf14:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf18:	1a9b      	subs	r3, r3, r2
 800bf1a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bfd5      	itete	le
 800bf22:	460a      	movle	r2, r1
 800bf24:	463a      	movgt	r2, r7
 800bf26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf2a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bf2e:	bfd8      	it	le
 800bf30:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800bf34:	462b      	mov	r3, r5
 800bf36:	4602      	mov	r2, r0
 800bf38:	4659      	mov	r1, fp
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f7f4 fbf6 	bl	800072c <__aeabi_ddiv>
 800bf40:	b003      	add	sp, #12
 800bf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf46 <__copybits>:
 800bf46:	3901      	subs	r1, #1
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	1149      	asrs	r1, r1, #5
 800bf4c:	6914      	ldr	r4, [r2, #16]
 800bf4e:	3101      	adds	r1, #1
 800bf50:	f102 0314 	add.w	r3, r2, #20
 800bf54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	4602      	mov	r2, r0
 800bf60:	d303      	bcc.n	800bf6a <__copybits+0x24>
 800bf62:	2300      	movs	r3, #0
 800bf64:	428a      	cmp	r2, r1
 800bf66:	d305      	bcc.n	800bf74 <__copybits+0x2e>
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6e:	f840 2b04 	str.w	r2, [r0], #4
 800bf72:	e7f3      	b.n	800bf5c <__copybits+0x16>
 800bf74:	f842 3b04 	str.w	r3, [r2], #4
 800bf78:	e7f4      	b.n	800bf64 <__copybits+0x1e>

0800bf7a <__any_on>:
 800bf7a:	f100 0214 	add.w	r2, r0, #20
 800bf7e:	6900      	ldr	r0, [r0, #16]
 800bf80:	114b      	asrs	r3, r1, #5
 800bf82:	4298      	cmp	r0, r3
 800bf84:	b510      	push	{r4, lr}
 800bf86:	db11      	blt.n	800bfac <__any_on+0x32>
 800bf88:	dd0a      	ble.n	800bfa0 <__any_on+0x26>
 800bf8a:	f011 011f 	ands.w	r1, r1, #31
 800bf8e:	d007      	beq.n	800bfa0 <__any_on+0x26>
 800bf90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf94:	fa24 f001 	lsr.w	r0, r4, r1
 800bf98:	fa00 f101 	lsl.w	r1, r0, r1
 800bf9c:	428c      	cmp	r4, r1
 800bf9e:	d10b      	bne.n	800bfb8 <__any_on+0x3e>
 800bfa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d803      	bhi.n	800bfb0 <__any_on+0x36>
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	bd10      	pop	{r4, pc}
 800bfac:	4603      	mov	r3, r0
 800bfae:	e7f7      	b.n	800bfa0 <__any_on+0x26>
 800bfb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfb4:	2900      	cmp	r1, #0
 800bfb6:	d0f5      	beq.n	800bfa4 <__any_on+0x2a>
 800bfb8:	2001      	movs	r0, #1
 800bfba:	e7f6      	b.n	800bfaa <__any_on+0x30>

0800bfbc <_calloc_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	fb02 f401 	mul.w	r4, r2, r1
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	f000 f808 	bl	800bfd8 <_malloc_r>
 800bfc8:	4605      	mov	r5, r0
 800bfca:	b118      	cbz	r0, 800bfd4 <_calloc_r+0x18>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	2100      	movs	r1, #0
 800bfd0:	f7fe f918 	bl	800a204 <memset>
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}

0800bfd8 <_malloc_r>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	1ccd      	adds	r5, r1, #3
 800bfdc:	f025 0503 	bic.w	r5, r5, #3
 800bfe0:	3508      	adds	r5, #8
 800bfe2:	2d0c      	cmp	r5, #12
 800bfe4:	bf38      	it	cc
 800bfe6:	250c      	movcc	r5, #12
 800bfe8:	2d00      	cmp	r5, #0
 800bfea:	4606      	mov	r6, r0
 800bfec:	db01      	blt.n	800bff2 <_malloc_r+0x1a>
 800bfee:	42a9      	cmp	r1, r5
 800bff0:	d903      	bls.n	800bffa <_malloc_r+0x22>
 800bff2:	230c      	movs	r3, #12
 800bff4:	6033      	str	r3, [r6, #0]
 800bff6:	2000      	movs	r0, #0
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
 800bffa:	f000 f876 	bl	800c0ea <__malloc_lock>
 800bffe:	4a21      	ldr	r2, [pc, #132]	; (800c084 <_malloc_r+0xac>)
 800c000:	6814      	ldr	r4, [r2, #0]
 800c002:	4621      	mov	r1, r4
 800c004:	b991      	cbnz	r1, 800c02c <_malloc_r+0x54>
 800c006:	4c20      	ldr	r4, [pc, #128]	; (800c088 <_malloc_r+0xb0>)
 800c008:	6823      	ldr	r3, [r4, #0]
 800c00a:	b91b      	cbnz	r3, 800c014 <_malloc_r+0x3c>
 800c00c:	4630      	mov	r0, r6
 800c00e:	f000 f83d 	bl	800c08c <_sbrk_r>
 800c012:	6020      	str	r0, [r4, #0]
 800c014:	4629      	mov	r1, r5
 800c016:	4630      	mov	r0, r6
 800c018:	f000 f838 	bl	800c08c <_sbrk_r>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d124      	bne.n	800c06a <_malloc_r+0x92>
 800c020:	230c      	movs	r3, #12
 800c022:	4630      	mov	r0, r6
 800c024:	6033      	str	r3, [r6, #0]
 800c026:	f000 f861 	bl	800c0ec <__malloc_unlock>
 800c02a:	e7e4      	b.n	800bff6 <_malloc_r+0x1e>
 800c02c:	680b      	ldr	r3, [r1, #0]
 800c02e:	1b5b      	subs	r3, r3, r5
 800c030:	d418      	bmi.n	800c064 <_malloc_r+0x8c>
 800c032:	2b0b      	cmp	r3, #11
 800c034:	d90f      	bls.n	800c056 <_malloc_r+0x7e>
 800c036:	600b      	str	r3, [r1, #0]
 800c038:	18cc      	adds	r4, r1, r3
 800c03a:	50cd      	str	r5, [r1, r3]
 800c03c:	4630      	mov	r0, r6
 800c03e:	f000 f855 	bl	800c0ec <__malloc_unlock>
 800c042:	f104 000b 	add.w	r0, r4, #11
 800c046:	1d23      	adds	r3, r4, #4
 800c048:	f020 0007 	bic.w	r0, r0, #7
 800c04c:	1ac3      	subs	r3, r0, r3
 800c04e:	d0d3      	beq.n	800bff8 <_malloc_r+0x20>
 800c050:	425a      	negs	r2, r3
 800c052:	50e2      	str	r2, [r4, r3]
 800c054:	e7d0      	b.n	800bff8 <_malloc_r+0x20>
 800c056:	684b      	ldr	r3, [r1, #4]
 800c058:	428c      	cmp	r4, r1
 800c05a:	bf16      	itet	ne
 800c05c:	6063      	strne	r3, [r4, #4]
 800c05e:	6013      	streq	r3, [r2, #0]
 800c060:	460c      	movne	r4, r1
 800c062:	e7eb      	b.n	800c03c <_malloc_r+0x64>
 800c064:	460c      	mov	r4, r1
 800c066:	6849      	ldr	r1, [r1, #4]
 800c068:	e7cc      	b.n	800c004 <_malloc_r+0x2c>
 800c06a:	1cc4      	adds	r4, r0, #3
 800c06c:	f024 0403 	bic.w	r4, r4, #3
 800c070:	42a0      	cmp	r0, r4
 800c072:	d005      	beq.n	800c080 <_malloc_r+0xa8>
 800c074:	1a21      	subs	r1, r4, r0
 800c076:	4630      	mov	r0, r6
 800c078:	f000 f808 	bl	800c08c <_sbrk_r>
 800c07c:	3001      	adds	r0, #1
 800c07e:	d0cf      	beq.n	800c020 <_malloc_r+0x48>
 800c080:	6025      	str	r5, [r4, #0]
 800c082:	e7db      	b.n	800c03c <_malloc_r+0x64>
 800c084:	2000078c 	.word	0x2000078c
 800c088:	20000790 	.word	0x20000790

0800c08c <_sbrk_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	2300      	movs	r3, #0
 800c090:	4c05      	ldr	r4, [pc, #20]	; (800c0a8 <_sbrk_r+0x1c>)
 800c092:	4605      	mov	r5, r0
 800c094:	4608      	mov	r0, r1
 800c096:	6023      	str	r3, [r4, #0]
 800c098:	f7fd fb7c 	bl	8009794 <_sbrk>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_sbrk_r+0x1a>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_sbrk_r+0x1a>
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	20001d50 	.word	0x20001d50

0800c0ac <strncmp>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	b16a      	cbz	r2, 800c0cc <strncmp+0x20>
 800c0b0:	3901      	subs	r1, #1
 800c0b2:	1884      	adds	r4, r0, r2
 800c0b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d103      	bne.n	800c0c8 <strncmp+0x1c>
 800c0c0:	42a0      	cmp	r0, r4
 800c0c2:	d001      	beq.n	800c0c8 <strncmp+0x1c>
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1f5      	bne.n	800c0b4 <strncmp+0x8>
 800c0c8:	1a98      	subs	r0, r3, r2
 800c0ca:	bd10      	pop	{r4, pc}
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	e7fc      	b.n	800c0ca <strncmp+0x1e>

0800c0d0 <__ascii_wctomb>:
 800c0d0:	b149      	cbz	r1, 800c0e6 <__ascii_wctomb+0x16>
 800c0d2:	2aff      	cmp	r2, #255	; 0xff
 800c0d4:	bf8b      	itete	hi
 800c0d6:	238a      	movhi	r3, #138	; 0x8a
 800c0d8:	700a      	strbls	r2, [r1, #0]
 800c0da:	6003      	strhi	r3, [r0, #0]
 800c0dc:	2001      	movls	r0, #1
 800c0de:	bf88      	it	hi
 800c0e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c0e4:	4770      	bx	lr
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4770      	bx	lr

0800c0ea <__malloc_lock>:
 800c0ea:	4770      	bx	lr

0800c0ec <__malloc_unlock>:
 800c0ec:	4770      	bx	lr
	...

0800c0f0 <atan>:
 800c0f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	4bb6      	ldr	r3, [pc, #728]	; (800c3d0 <atan+0x2e0>)
 800c0f6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c0fa:	429e      	cmp	r6, r3
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	460d      	mov	r5, r1
 800c100:	468b      	mov	fp, r1
 800c102:	dd17      	ble.n	800c134 <atan+0x44>
 800c104:	4bb3      	ldr	r3, [pc, #716]	; (800c3d4 <atan+0x2e4>)
 800c106:	429e      	cmp	r6, r3
 800c108:	dc01      	bgt.n	800c10e <atan+0x1e>
 800c10a:	d109      	bne.n	800c120 <atan+0x30>
 800c10c:	b140      	cbz	r0, 800c120 <atan+0x30>
 800c10e:	4622      	mov	r2, r4
 800c110:	462b      	mov	r3, r5
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 f829 	bl	800016c <__adddf3>
 800c11a:	4604      	mov	r4, r0
 800c11c:	460d      	mov	r5, r1
 800c11e:	e005      	b.n	800c12c <atan+0x3c>
 800c120:	f1bb 0f00 	cmp.w	fp, #0
 800c124:	4cac      	ldr	r4, [pc, #688]	; (800c3d8 <atan+0x2e8>)
 800c126:	f340 8121 	ble.w	800c36c <atan+0x27c>
 800c12a:	4dac      	ldr	r5, [pc, #688]	; (800c3dc <atan+0x2ec>)
 800c12c:	4620      	mov	r0, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	4baa      	ldr	r3, [pc, #680]	; (800c3e0 <atan+0x2f0>)
 800c136:	429e      	cmp	r6, r3
 800c138:	dc11      	bgt.n	800c15e <atan+0x6e>
 800c13a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c13e:	429e      	cmp	r6, r3
 800c140:	dc0a      	bgt.n	800c158 <atan+0x68>
 800c142:	a38b      	add	r3, pc, #556	; (adr r3, 800c370 <atan+0x280>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f7f4 f810 	bl	800016c <__adddf3>
 800c14c:	2200      	movs	r2, #0
 800c14e:	4ba5      	ldr	r3, [pc, #660]	; (800c3e4 <atan+0x2f4>)
 800c150:	f7f4 fc52 	bl	80009f8 <__aeabi_dcmpgt>
 800c154:	2800      	cmp	r0, #0
 800c156:	d1e9      	bne.n	800c12c <atan+0x3c>
 800c158:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c15c:	e027      	b.n	800c1ae <atan+0xbe>
 800c15e:	f000 f951 	bl	800c404 <fabs>
 800c162:	4ba1      	ldr	r3, [pc, #644]	; (800c3e8 <atan+0x2f8>)
 800c164:	4604      	mov	r4, r0
 800c166:	429e      	cmp	r6, r3
 800c168:	460d      	mov	r5, r1
 800c16a:	f300 80b8 	bgt.w	800c2de <atan+0x1ee>
 800c16e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c172:	429e      	cmp	r6, r3
 800c174:	f300 809c 	bgt.w	800c2b0 <atan+0x1c0>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	f7f3 fff6 	bl	800016c <__adddf3>
 800c180:	2200      	movs	r2, #0
 800c182:	4b98      	ldr	r3, [pc, #608]	; (800c3e4 <atan+0x2f4>)
 800c184:	f7f3 fff0 	bl	8000168 <__aeabi_dsub>
 800c188:	2200      	movs	r2, #0
 800c18a:	4606      	mov	r6, r0
 800c18c:	460f      	mov	r7, r1
 800c18e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c192:	4620      	mov	r0, r4
 800c194:	4629      	mov	r1, r5
 800c196:	f7f3 ffe9 	bl	800016c <__adddf3>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4630      	mov	r0, r6
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	f7f4 fac3 	bl	800072c <__aeabi_ddiv>
 800c1a6:	f04f 0a00 	mov.w	sl, #0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	460d      	mov	r5, r1
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	462b      	mov	r3, r5
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 f98f 	bl	80004d8 <__aeabi_dmul>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4680      	mov	r8, r0
 800c1c0:	4689      	mov	r9, r1
 800c1c2:	f7f4 f989 	bl	80004d8 <__aeabi_dmul>
 800c1c6:	a36c      	add	r3, pc, #432	; (adr r3, 800c378 <atan+0x288>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	f7f4 f982 	bl	80004d8 <__aeabi_dmul>
 800c1d4:	a36a      	add	r3, pc, #424	; (adr r3, 800c380 <atan+0x290>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f3 ffc7 	bl	800016c <__adddf3>
 800c1de:	4632      	mov	r2, r6
 800c1e0:	463b      	mov	r3, r7
 800c1e2:	f7f4 f979 	bl	80004d8 <__aeabi_dmul>
 800c1e6:	a368      	add	r3, pc, #416	; (adr r3, 800c388 <atan+0x298>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f7f3 ffbe 	bl	800016c <__adddf3>
 800c1f0:	4632      	mov	r2, r6
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	f7f4 f970 	bl	80004d8 <__aeabi_dmul>
 800c1f8:	a365      	add	r3, pc, #404	; (adr r3, 800c390 <atan+0x2a0>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	f7f3 ffb5 	bl	800016c <__adddf3>
 800c202:	4632      	mov	r2, r6
 800c204:	463b      	mov	r3, r7
 800c206:	f7f4 f967 	bl	80004d8 <__aeabi_dmul>
 800c20a:	a363      	add	r3, pc, #396	; (adr r3, 800c398 <atan+0x2a8>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f3 ffac 	bl	800016c <__adddf3>
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	f7f4 f95e 	bl	80004d8 <__aeabi_dmul>
 800c21c:	a360      	add	r3, pc, #384	; (adr r3, 800c3a0 <atan+0x2b0>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f7f3 ffa3 	bl	800016c <__adddf3>
 800c226:	4642      	mov	r2, r8
 800c228:	464b      	mov	r3, r9
 800c22a:	f7f4 f955 	bl	80004d8 <__aeabi_dmul>
 800c22e:	a35e      	add	r3, pc, #376	; (adr r3, 800c3a8 <atan+0x2b8>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	4680      	mov	r8, r0
 800c236:	4689      	mov	r9, r1
 800c238:	4630      	mov	r0, r6
 800c23a:	4639      	mov	r1, r7
 800c23c:	f7f4 f94c 	bl	80004d8 <__aeabi_dmul>
 800c240:	a35b      	add	r3, pc, #364	; (adr r3, 800c3b0 <atan+0x2c0>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	f7f3 ff8f 	bl	8000168 <__aeabi_dsub>
 800c24a:	4632      	mov	r2, r6
 800c24c:	463b      	mov	r3, r7
 800c24e:	f7f4 f943 	bl	80004d8 <__aeabi_dmul>
 800c252:	a359      	add	r3, pc, #356	; (adr r3, 800c3b8 <atan+0x2c8>)
 800c254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c258:	f7f3 ff86 	bl	8000168 <__aeabi_dsub>
 800c25c:	4632      	mov	r2, r6
 800c25e:	463b      	mov	r3, r7
 800c260:	f7f4 f93a 	bl	80004d8 <__aeabi_dmul>
 800c264:	a356      	add	r3, pc, #344	; (adr r3, 800c3c0 <atan+0x2d0>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f3 ff7d 	bl	8000168 <__aeabi_dsub>
 800c26e:	4632      	mov	r2, r6
 800c270:	463b      	mov	r3, r7
 800c272:	f7f4 f931 	bl	80004d8 <__aeabi_dmul>
 800c276:	a354      	add	r3, pc, #336	; (adr r3, 800c3c8 <atan+0x2d8>)
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f7f3 ff74 	bl	8000168 <__aeabi_dsub>
 800c280:	4632      	mov	r2, r6
 800c282:	463b      	mov	r3, r7
 800c284:	f7f4 f928 	bl	80004d8 <__aeabi_dmul>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4640      	mov	r0, r8
 800c28e:	4649      	mov	r1, r9
 800c290:	f7f3 ff6c 	bl	800016c <__adddf3>
 800c294:	4622      	mov	r2, r4
 800c296:	462b      	mov	r3, r5
 800c298:	f7f4 f91e 	bl	80004d8 <__aeabi_dmul>
 800c29c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	d144      	bne.n	800c330 <atan+0x240>
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7f3 ff5d 	bl	8000168 <__aeabi_dsub>
 800c2ae:	e734      	b.n	800c11a <atan+0x2a>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4b4c      	ldr	r3, [pc, #304]	; (800c3e4 <atan+0x2f4>)
 800c2b4:	f7f3 ff58 	bl	8000168 <__aeabi_dsub>
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	4b49      	ldr	r3, [pc, #292]	; (800c3e4 <atan+0x2f4>)
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f3 ff52 	bl	800016c <__adddf3>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	f7f4 fa2c 	bl	800072c <__aeabi_ddiv>
 800c2d4:	f04f 0a01 	mov.w	sl, #1
 800c2d8:	4604      	mov	r4, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	e767      	b.n	800c1ae <atan+0xbe>
 800c2de:	4b43      	ldr	r3, [pc, #268]	; (800c3ec <atan+0x2fc>)
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	dc1a      	bgt.n	800c31a <atan+0x22a>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	4b42      	ldr	r3, [pc, #264]	; (800c3f0 <atan+0x300>)
 800c2e8:	f7f3 ff3e 	bl	8000168 <__aeabi_dsub>
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	460f      	mov	r7, r1
 800c2f2:	4b3f      	ldr	r3, [pc, #252]	; (800c3f0 <atan+0x300>)
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f4 f8ee 	bl	80004d8 <__aeabi_dmul>
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4b39      	ldr	r3, [pc, #228]	; (800c3e4 <atan+0x2f4>)
 800c300:	f7f3 ff34 	bl	800016c <__adddf3>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4630      	mov	r0, r6
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f4 fa0e 	bl	800072c <__aeabi_ddiv>
 800c310:	f04f 0a02 	mov.w	sl, #2
 800c314:	4604      	mov	r4, r0
 800c316:	460d      	mov	r5, r1
 800c318:	e749      	b.n	800c1ae <atan+0xbe>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	2000      	movs	r0, #0
 800c320:	4934      	ldr	r1, [pc, #208]	; (800c3f4 <atan+0x304>)
 800c322:	f7f4 fa03 	bl	800072c <__aeabi_ddiv>
 800c326:	f04f 0a03 	mov.w	sl, #3
 800c32a:	4604      	mov	r4, r0
 800c32c:	460d      	mov	r5, r1
 800c32e:	e73e      	b.n	800c1ae <atan+0xbe>
 800c330:	4b31      	ldr	r3, [pc, #196]	; (800c3f8 <atan+0x308>)
 800c332:	4e32      	ldr	r6, [pc, #200]	; (800c3fc <atan+0x30c>)
 800c334:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c338:	4456      	add	r6, sl
 800c33a:	449a      	add	sl, r3
 800c33c:	e9da 2300 	ldrd	r2, r3, [sl]
 800c340:	f7f3 ff12 	bl	8000168 <__aeabi_dsub>
 800c344:	4622      	mov	r2, r4
 800c346:	462b      	mov	r3, r5
 800c348:	f7f3 ff0e 	bl	8000168 <__aeabi_dsub>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c354:	f7f3 ff08 	bl	8000168 <__aeabi_dsub>
 800c358:	f1bb 0f00 	cmp.w	fp, #0
 800c35c:	4604      	mov	r4, r0
 800c35e:	460d      	mov	r5, r1
 800c360:	f6bf aee4 	bge.w	800c12c <atan+0x3c>
 800c364:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c368:	461d      	mov	r5, r3
 800c36a:	e6df      	b.n	800c12c <atan+0x3c>
 800c36c:	4d24      	ldr	r5, [pc, #144]	; (800c400 <atan+0x310>)
 800c36e:	e6dd      	b.n	800c12c <atan+0x3c>
 800c370:	8800759c 	.word	0x8800759c
 800c374:	7e37e43c 	.word	0x7e37e43c
 800c378:	e322da11 	.word	0xe322da11
 800c37c:	3f90ad3a 	.word	0x3f90ad3a
 800c380:	24760deb 	.word	0x24760deb
 800c384:	3fa97b4b 	.word	0x3fa97b4b
 800c388:	a0d03d51 	.word	0xa0d03d51
 800c38c:	3fb10d66 	.word	0x3fb10d66
 800c390:	c54c206e 	.word	0xc54c206e
 800c394:	3fb745cd 	.word	0x3fb745cd
 800c398:	920083ff 	.word	0x920083ff
 800c39c:	3fc24924 	.word	0x3fc24924
 800c3a0:	5555550d 	.word	0x5555550d
 800c3a4:	3fd55555 	.word	0x3fd55555
 800c3a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c3ac:	bfa2b444 	.word	0xbfa2b444
 800c3b0:	52defd9a 	.word	0x52defd9a
 800c3b4:	3fadde2d 	.word	0x3fadde2d
 800c3b8:	af749a6d 	.word	0xaf749a6d
 800c3bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c3c0:	fe231671 	.word	0xfe231671
 800c3c4:	3fbc71c6 	.word	0x3fbc71c6
 800c3c8:	9998ebc4 	.word	0x9998ebc4
 800c3cc:	3fc99999 	.word	0x3fc99999
 800c3d0:	440fffff 	.word	0x440fffff
 800c3d4:	7ff00000 	.word	0x7ff00000
 800c3d8:	54442d18 	.word	0x54442d18
 800c3dc:	3ff921fb 	.word	0x3ff921fb
 800c3e0:	3fdbffff 	.word	0x3fdbffff
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	3ff2ffff 	.word	0x3ff2ffff
 800c3ec:	40037fff 	.word	0x40037fff
 800c3f0:	3ff80000 	.word	0x3ff80000
 800c3f4:	bff00000 	.word	0xbff00000
 800c3f8:	0800ce20 	.word	0x0800ce20
 800c3fc:	0800ce00 	.word	0x0800ce00
 800c400:	bff921fb 	.word	0xbff921fb

0800c404 <fabs>:
 800c404:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c408:	4619      	mov	r1, r3
 800c40a:	4770      	bx	lr

0800c40c <atan2>:
 800c40c:	f000 b854 	b.w	800c4b8 <__ieee754_atan2>

0800c410 <sqrt>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	b08b      	sub	sp, #44	; 0x2c
 800c416:	4604      	mov	r4, r0
 800c418:	460d      	mov	r5, r1
 800c41a:	f000 f92b 	bl	800c674 <__ieee754_sqrt>
 800c41e:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <sqrt+0xa0>)
 800c420:	4680      	mov	r8, r0
 800c422:	f993 a000 	ldrsb.w	sl, [r3]
 800c426:	4689      	mov	r9, r1
 800c428:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c42c:	d02b      	beq.n	800c486 <sqrt+0x76>
 800c42e:	4622      	mov	r2, r4
 800c430:	462b      	mov	r3, r5
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	f7f4 fae9 	bl	8000a0c <__aeabi_dcmpun>
 800c43a:	4683      	mov	fp, r0
 800c43c:	bb18      	cbnz	r0, 800c486 <sqrt+0x76>
 800c43e:	2600      	movs	r6, #0
 800c440:	2700      	movs	r7, #0
 800c442:	4632      	mov	r2, r6
 800c444:	463b      	mov	r3, r7
 800c446:	4620      	mov	r0, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	f7f4 fab7 	bl	80009bc <__aeabi_dcmplt>
 800c44e:	b1d0      	cbz	r0, 800c486 <sqrt+0x76>
 800c450:	2301      	movs	r3, #1
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	4b17      	ldr	r3, [pc, #92]	; (800c4b4 <sqrt+0xa4>)
 800c456:	f8cd b020 	str.w	fp, [sp, #32]
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c460:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c464:	f1ba 0f00 	cmp.w	sl, #0
 800c468:	d112      	bne.n	800c490 <sqrt+0x80>
 800c46a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c46e:	4668      	mov	r0, sp
 800c470:	f000 f9ac 	bl	800c7cc <matherr>
 800c474:	b1b8      	cbz	r0, 800c4a6 <sqrt+0x96>
 800c476:	9b08      	ldr	r3, [sp, #32]
 800c478:	b11b      	cbz	r3, 800c482 <sqrt+0x72>
 800c47a:	f7fd fe7f 	bl	800a17c <__errno>
 800c47e:	9b08      	ldr	r3, [sp, #32]
 800c480:	6003      	str	r3, [r0, #0]
 800c482:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c486:	4640      	mov	r0, r8
 800c488:	4649      	mov	r1, r9
 800c48a:	b00b      	add	sp, #44	; 0x2c
 800c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c490:	4632      	mov	r2, r6
 800c492:	463b      	mov	r3, r7
 800c494:	4630      	mov	r0, r6
 800c496:	4639      	mov	r1, r7
 800c498:	f7f4 f948 	bl	800072c <__aeabi_ddiv>
 800c49c:	f1ba 0f02 	cmp.w	sl, #2
 800c4a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4a4:	d1e3      	bne.n	800c46e <sqrt+0x5e>
 800c4a6:	f7fd fe69 	bl	800a17c <__errno>
 800c4aa:	2321      	movs	r3, #33	; 0x21
 800c4ac:	6003      	str	r3, [r0, #0]
 800c4ae:	e7e2      	b.n	800c476 <sqrt+0x66>
 800c4b0:	20000544 	.word	0x20000544
 800c4b4:	0800ce40 	.word	0x0800ce40

0800c4b8 <__ieee754_atan2>:
 800c4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	4256      	negs	r6, r2
 800c4be:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800c4c2:	4316      	orrs	r6, r2
 800c4c4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800c670 <__ieee754_atan2+0x1b8>
 800c4c8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800c4cc:	454e      	cmp	r6, r9
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	469e      	mov	lr, r3
 800c4d4:	d808      	bhi.n	800c4e8 <__ieee754_atan2+0x30>
 800c4d6:	4246      	negs	r6, r0
 800c4d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c4dc:	4306      	orrs	r6, r0
 800c4de:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800c4e2:	454e      	cmp	r6, r9
 800c4e4:	4688      	mov	r8, r1
 800c4e6:	d906      	bls.n	800c4f6 <__ieee754_atan2+0x3e>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f7f3 fe3e 	bl	800016c <__adddf3>
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	e030      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c4f6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800c4fa:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c4fe:	4316      	orrs	r6, r2
 800c500:	d103      	bne.n	800c50a <__ieee754_atan2+0x52>
 800c502:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c506:	f7ff bdf3 	b.w	800c0f0 <atan>
 800c50a:	179e      	asrs	r6, r3, #30
 800c50c:	f006 0602 	and.w	r6, r6, #2
 800c510:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c514:	ea57 0100 	orrs.w	r1, r7, r0
 800c518:	d107      	bne.n	800c52a <__ieee754_atan2+0x72>
 800c51a:	2e02      	cmp	r6, #2
 800c51c:	d079      	beq.n	800c612 <__ieee754_atan2+0x15a>
 800c51e:	2e03      	cmp	r6, #3
 800c520:	d11a      	bne.n	800c558 <__ieee754_atan2+0xa0>
 800c522:	a541      	add	r5, pc, #260	; (adr r5, 800c628 <__ieee754_atan2+0x170>)
 800c524:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c528:	e016      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c52a:	ea5c 0102 	orrs.w	r1, ip, r2
 800c52e:	d106      	bne.n	800c53e <__ieee754_atan2+0x86>
 800c530:	f1b8 0f00 	cmp.w	r8, #0
 800c534:	da71      	bge.n	800c61a <__ieee754_atan2+0x162>
 800c536:	a53e      	add	r5, pc, #248	; (adr r5, 800c630 <__ieee754_atan2+0x178>)
 800c538:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c53c:	e00c      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c53e:	45cc      	cmp	ip, r9
 800c540:	d123      	bne.n	800c58a <__ieee754_atan2+0xd2>
 800c542:	4567      	cmp	r7, ip
 800c544:	d114      	bne.n	800c570 <__ieee754_atan2+0xb8>
 800c546:	2e02      	cmp	r6, #2
 800c548:	d00a      	beq.n	800c560 <__ieee754_atan2+0xa8>
 800c54a:	2e03      	cmp	r6, #3
 800c54c:	d00c      	beq.n	800c568 <__ieee754_atan2+0xb0>
 800c54e:	2e01      	cmp	r6, #1
 800c550:	d15b      	bne.n	800c60a <__ieee754_atan2+0x152>
 800c552:	a539      	add	r5, pc, #228	; (adr r5, 800c638 <__ieee754_atan2+0x180>)
 800c554:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c558:	4620      	mov	r0, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	a537      	add	r5, pc, #220	; (adr r5, 800c640 <__ieee754_atan2+0x188>)
 800c562:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c566:	e7f7      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c568:	a537      	add	r5, pc, #220	; (adr r5, 800c648 <__ieee754_atan2+0x190>)
 800c56a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c56e:	e7f3      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c570:	2e02      	cmp	r6, #2
 800c572:	d04e      	beq.n	800c612 <__ieee754_atan2+0x15a>
 800c574:	2e03      	cmp	r6, #3
 800c576:	d0d4      	beq.n	800c522 <__ieee754_atan2+0x6a>
 800c578:	2e01      	cmp	r6, #1
 800c57a:	f04f 0400 	mov.w	r4, #0
 800c57e:	d102      	bne.n	800c586 <__ieee754_atan2+0xce>
 800c580:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800c584:	e7e8      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c586:	2500      	movs	r5, #0
 800c588:	e7e6      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c58a:	454f      	cmp	r7, r9
 800c58c:	d0d0      	beq.n	800c530 <__ieee754_atan2+0x78>
 800c58e:	eba7 070c 	sub.w	r7, r7, ip
 800c592:	153f      	asrs	r7, r7, #20
 800c594:	2f3c      	cmp	r7, #60	; 0x3c
 800c596:	dc1e      	bgt.n	800c5d6 <__ieee754_atan2+0x11e>
 800c598:	2b00      	cmp	r3, #0
 800c59a:	da01      	bge.n	800c5a0 <__ieee754_atan2+0xe8>
 800c59c:	373c      	adds	r7, #60	; 0x3c
 800c59e:	db1e      	blt.n	800c5de <__ieee754_atan2+0x126>
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f7f4 f8c2 	bl	800072c <__aeabi_ddiv>
 800c5a8:	f7ff ff2c 	bl	800c404 <fabs>
 800c5ac:	f7ff fda0 	bl	800c0f0 <atan>
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	2e01      	cmp	r6, #1
 800c5b6:	d015      	beq.n	800c5e4 <__ieee754_atan2+0x12c>
 800c5b8:	2e02      	cmp	r6, #2
 800c5ba:	d017      	beq.n	800c5ec <__ieee754_atan2+0x134>
 800c5bc:	2e00      	cmp	r6, #0
 800c5be:	d0cb      	beq.n	800c558 <__ieee754_atan2+0xa0>
 800c5c0:	a323      	add	r3, pc, #140	; (adr r3, 800c650 <__ieee754_atan2+0x198>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f3 fdcd 	bl	8000168 <__aeabi_dsub>
 800c5ce:	a322      	add	r3, pc, #136	; (adr r3, 800c658 <__ieee754_atan2+0x1a0>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	e016      	b.n	800c604 <__ieee754_atan2+0x14c>
 800c5d6:	a522      	add	r5, pc, #136	; (adr r5, 800c660 <__ieee754_atan2+0x1a8>)
 800c5d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c5dc:	e7ea      	b.n	800c5b4 <__ieee754_atan2+0xfc>
 800c5de:	2400      	movs	r4, #0
 800c5e0:	2500      	movs	r5, #0
 800c5e2:	e7e7      	b.n	800c5b4 <__ieee754_atan2+0xfc>
 800c5e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c5e8:	461d      	mov	r5, r3
 800c5ea:	e7b5      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c5ec:	a318      	add	r3, pc, #96	; (adr r3, 800c650 <__ieee754_atan2+0x198>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	f7f3 fdb7 	bl	8000168 <__aeabi_dsub>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	a116      	add	r1, pc, #88	; (adr r1, 800c658 <__ieee754_atan2+0x1a0>)
 800c600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c604:	f7f3 fdb0 	bl	8000168 <__aeabi_dsub>
 800c608:	e772      	b.n	800c4f0 <__ieee754_atan2+0x38>
 800c60a:	a517      	add	r5, pc, #92	; (adr r5, 800c668 <__ieee754_atan2+0x1b0>)
 800c60c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c610:	e7a2      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c612:	a511      	add	r5, pc, #68	; (adr r5, 800c658 <__ieee754_atan2+0x1a0>)
 800c614:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c618:	e79e      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c61a:	a511      	add	r5, pc, #68	; (adr r5, 800c660 <__ieee754_atan2+0x1a8>)
 800c61c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c620:	e79a      	b.n	800c558 <__ieee754_atan2+0xa0>
 800c622:	bf00      	nop
 800c624:	f3af 8000 	nop.w
 800c628:	54442d18 	.word	0x54442d18
 800c62c:	c00921fb 	.word	0xc00921fb
 800c630:	54442d18 	.word	0x54442d18
 800c634:	bff921fb 	.word	0xbff921fb
 800c638:	54442d18 	.word	0x54442d18
 800c63c:	bfe921fb 	.word	0xbfe921fb
 800c640:	7f3321d2 	.word	0x7f3321d2
 800c644:	4002d97c 	.word	0x4002d97c
 800c648:	7f3321d2 	.word	0x7f3321d2
 800c64c:	c002d97c 	.word	0xc002d97c
 800c650:	33145c07 	.word	0x33145c07
 800c654:	3ca1a626 	.word	0x3ca1a626
 800c658:	54442d18 	.word	0x54442d18
 800c65c:	400921fb 	.word	0x400921fb
 800c660:	54442d18 	.word	0x54442d18
 800c664:	3ff921fb 	.word	0x3ff921fb
 800c668:	54442d18 	.word	0x54442d18
 800c66c:	3fe921fb 	.word	0x3fe921fb
 800c670:	7ff00000 	.word	0x7ff00000

0800c674 <__ieee754_sqrt>:
 800c674:	4b54      	ldr	r3, [pc, #336]	; (800c7c8 <__ieee754_sqrt+0x154>)
 800c676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c67a:	438b      	bics	r3, r1
 800c67c:	4606      	mov	r6, r0
 800c67e:	460d      	mov	r5, r1
 800c680:	460a      	mov	r2, r1
 800c682:	460c      	mov	r4, r1
 800c684:	d10f      	bne.n	800c6a6 <__ieee754_sqrt+0x32>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	f7f3 ff25 	bl	80004d8 <__aeabi_dmul>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4630      	mov	r0, r6
 800c694:	4629      	mov	r1, r5
 800c696:	f7f3 fd69 	bl	800016c <__adddf3>
 800c69a:	4606      	mov	r6, r0
 800c69c:	460d      	mov	r5, r1
 800c69e:	4630      	mov	r0, r6
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	dc0e      	bgt.n	800c6cc <__ieee754_sqrt+0x58>
 800c6ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c6b2:	ea5c 0707 	orrs.w	r7, ip, r7
 800c6b6:	d0f2      	beq.n	800c69e <__ieee754_sqrt+0x2a>
 800c6b8:	b141      	cbz	r1, 800c6cc <__ieee754_sqrt+0x58>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	f7f3 fd53 	bl	8000168 <__aeabi_dsub>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	f7f4 f831 	bl	800072c <__aeabi_ddiv>
 800c6ca:	e7e6      	b.n	800c69a <__ieee754_sqrt+0x26>
 800c6cc:	1512      	asrs	r2, r2, #20
 800c6ce:	d074      	beq.n	800c7ba <__ieee754_sqrt+0x146>
 800c6d0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c6d4:	07d5      	lsls	r5, r2, #31
 800c6d6:	f04f 0500 	mov.w	r5, #0
 800c6da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c6de:	bf48      	it	mi
 800c6e0:	0fd9      	lsrmi	r1, r3, #31
 800c6e2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c6e6:	bf44      	itt	mi
 800c6e8:	005b      	lslmi	r3, r3, #1
 800c6ea:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c6ee:	1051      	asrs	r1, r2, #1
 800c6f0:	0fda      	lsrs	r2, r3, #31
 800c6f2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	2216      	movs	r2, #22
 800c6fa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	1987      	adds	r7, r0, r6
 800c702:	42a7      	cmp	r7, r4
 800c704:	bfde      	ittt	le
 800c706:	19b8      	addle	r0, r7, r6
 800c708:	1be4      	suble	r4, r4, r7
 800c70a:	19ad      	addle	r5, r5, r6
 800c70c:	0fdf      	lsrs	r7, r3, #31
 800c70e:	3a01      	subs	r2, #1
 800c710:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c714:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c718:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c71c:	d1f0      	bne.n	800c700 <__ieee754_sqrt+0x8c>
 800c71e:	f04f 0c20 	mov.w	ip, #32
 800c722:	4696      	mov	lr, r2
 800c724:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c728:	4284      	cmp	r4, r0
 800c72a:	eb06 070e 	add.w	r7, r6, lr
 800c72e:	dc02      	bgt.n	800c736 <__ieee754_sqrt+0xc2>
 800c730:	d112      	bne.n	800c758 <__ieee754_sqrt+0xe4>
 800c732:	429f      	cmp	r7, r3
 800c734:	d810      	bhi.n	800c758 <__ieee754_sqrt+0xe4>
 800c736:	2f00      	cmp	r7, #0
 800c738:	eb07 0e06 	add.w	lr, r7, r6
 800c73c:	da42      	bge.n	800c7c4 <__ieee754_sqrt+0x150>
 800c73e:	f1be 0f00 	cmp.w	lr, #0
 800c742:	db3f      	blt.n	800c7c4 <__ieee754_sqrt+0x150>
 800c744:	f100 0801 	add.w	r8, r0, #1
 800c748:	1a24      	subs	r4, r4, r0
 800c74a:	4640      	mov	r0, r8
 800c74c:	429f      	cmp	r7, r3
 800c74e:	bf88      	it	hi
 800c750:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800c754:	1bdb      	subs	r3, r3, r7
 800c756:	4432      	add	r2, r6
 800c758:	0064      	lsls	r4, r4, #1
 800c75a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c75e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c762:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c766:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c76a:	d1dd      	bne.n	800c728 <__ieee754_sqrt+0xb4>
 800c76c:	4323      	orrs	r3, r4
 800c76e:	d006      	beq.n	800c77e <__ieee754_sqrt+0x10a>
 800c770:	1c54      	adds	r4, r2, #1
 800c772:	bf0b      	itete	eq
 800c774:	4662      	moveq	r2, ip
 800c776:	3201      	addne	r2, #1
 800c778:	3501      	addeq	r5, #1
 800c77a:	f022 0201 	bicne.w	r2, r2, #1
 800c77e:	106b      	asrs	r3, r5, #1
 800c780:	0852      	lsrs	r2, r2, #1
 800c782:	07e8      	lsls	r0, r5, #31
 800c784:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c788:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c78c:	bf48      	it	mi
 800c78e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c792:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c796:	4616      	mov	r6, r2
 800c798:	e781      	b.n	800c69e <__ieee754_sqrt+0x2a>
 800c79a:	0adc      	lsrs	r4, r3, #11
 800c79c:	3915      	subs	r1, #21
 800c79e:	055b      	lsls	r3, r3, #21
 800c7a0:	2c00      	cmp	r4, #0
 800c7a2:	d0fa      	beq.n	800c79a <__ieee754_sqrt+0x126>
 800c7a4:	02e6      	lsls	r6, r4, #11
 800c7a6:	d50a      	bpl.n	800c7be <__ieee754_sqrt+0x14a>
 800c7a8:	f1c2 0020 	rsb	r0, r2, #32
 800c7ac:	fa23 f000 	lsr.w	r0, r3, r0
 800c7b0:	1e55      	subs	r5, r2, #1
 800c7b2:	4093      	lsls	r3, r2
 800c7b4:	4304      	orrs	r4, r0
 800c7b6:	1b4a      	subs	r2, r1, r5
 800c7b8:	e78a      	b.n	800c6d0 <__ieee754_sqrt+0x5c>
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	e7f0      	b.n	800c7a0 <__ieee754_sqrt+0x12c>
 800c7be:	0064      	lsls	r4, r4, #1
 800c7c0:	3201      	adds	r2, #1
 800c7c2:	e7ef      	b.n	800c7a4 <__ieee754_sqrt+0x130>
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	e7bf      	b.n	800c748 <__ieee754_sqrt+0xd4>
 800c7c8:	7ff00000 	.word	0x7ff00000

0800c7cc <matherr>:
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	4770      	bx	lr

0800c7d0 <_init>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr

0800c7dc <_fini>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	bf00      	nop
 800c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e2:	bc08      	pop	{r3}
 800c7e4:	469e      	mov	lr, r3
 800c7e6:	4770      	bx	lr
