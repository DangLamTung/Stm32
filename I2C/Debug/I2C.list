
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006ed0  08006ed0  00016ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080071e8  080071e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071e8  080071e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080071f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001e0  080073d0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080073d0  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012888  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002270  00000000  00000000  00032a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00035a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016234  00000000  00000000  000366a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8d5  00000000  00000000  0004c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074e87  00000000  00000000  000571a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  000cc0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006eb8 	.word	0x08006eb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006eb8 	.word	0x08006eb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001036:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800103a:	f042 0210 	orr.w	r2, r2, #16
 800103e:	601a      	str	r2, [r3, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f919 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f805 	bl	8001056 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f003 fc7c 	bl	8004948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105e:	f240 0308 	movw	r3, #8
 8001062:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f240 0304 	movw	r3, #4
 800106c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	fbb3 f3f1 	udiv	r3, r3, r1
 800107c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f920 	bl	80012c6 <HAL_SYSTICK_Config>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e011      	b.n	80010b4 <HAL_InitTick+0x5e>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	d80d      	bhi.n	80010b2 <HAL_InitTick+0x5c>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001096:	2200      	movs	r2, #0
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	f000 f8f6 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a2:	f240 0300 	movw	r3, #0
 80010a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x5e>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	f240 0304 	movw	r3, #4
 80010c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	f240 2308 	movw	r3, #520	; 0x208
 80010d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	441a      	add	r2, r3
 80010d8:	f240 2308 	movw	r3, #520	; 0x208
 80010dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010e0:	601a      	str	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  return uwTick;
 80010ee:	f240 2308 	movw	r3, #520	; 0x208
 80010f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001114:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001122:	4013      	ands	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001136:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001138:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800113c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	60da      	str	r2, [r3, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001152:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001156:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	6039      	str	r1, [r7, #0]
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da0f      	bge.n	800119e <NVIC_SetPriority+0x34>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2d9      	uxtb	r1, r3
 8001182:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001186:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	f002 020f 	and.w	r2, r2, #15
 8001190:	3a04      	subs	r2, #4
 8001192:	0109      	lsls	r1, r1, #4
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00d      	b.n	80011ba <NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2d9      	uxtb	r1, r3
 80011a2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80011a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80011ae:	0109      	lsls	r1, r1, #4
 80011b0:	b2c9      	uxtb	r1, r1
 80011b2:	4413      	add	r3, r2
 80011b4:	460a      	mov	r2, r1
 80011b6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e018      	b.n	8001270 <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001242:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	3a01      	subs	r2, #1
 800124a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124c:	210f      	movs	r1, #15
 800124e:	f04f 30ff 	mov.w	r0, #4294967295
 8001252:	f7ff ff8a 	bl	800116a <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001256:	f24e 0310 	movw	r3, #57360	; 0xe010
 800125a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001266:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800126a:	2207      	movs	r2, #7
 800126c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff3d 	bl	8001100 <NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff55 	bl	800114e <NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8a 	bl	80011c4 <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff56 	bl	800116a <NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffaa 	bl	8001228 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012de:	b480      	push	{r7}
 80012e0:	b08b      	sub	sp, #44	; 0x2c
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001300:	e17e      	b.n	8001600 <HAL_GPIO_Init+0x322>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001302:	2201      	movs	r2, #1
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	429a      	cmp	r2, r3
 800131c:	f040 816d 	bne.w	80015fa <HAL_GPIO_Init+0x31c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d042      	beq.n	80013ae <HAL_GPIO_Init+0xd0>
 8001328:	2b12      	cmp	r3, #18
 800132a:	d80d      	bhi.n	8001348 <HAL_GPIO_Init+0x6a>
 800132c:	2b02      	cmp	r3, #2
 800132e:	d039      	beq.n	80013a4 <HAL_GPIO_Init+0xc6>
 8001330:	2b02      	cmp	r3, #2
 8001332:	d804      	bhi.n	800133e <HAL_GPIO_Init+0x60>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03f      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d02a      	beq.n	8001392 <HAL_GPIO_Init+0xb4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800133c:	e056      	b.n	80013ec <HAL_GPIO_Init+0x10e>
      switch (GPIO_Init->Mode)
 800133e:	2b03      	cmp	r3, #3
 8001340:	d051      	beq.n	80013e6 <HAL_GPIO_Init+0x108>
 8001342:	2b11      	cmp	r3, #17
 8001344:	d029      	beq.n	800139a <HAL_GPIO_Init+0xbc>
          break;
 8001346:	e051      	b.n	80013ec <HAL_GPIO_Init+0x10e>
      switch (GPIO_Init->Mode)
 8001348:	2200      	movs	r2, #0
 800134a:	f2c1 0221 	movt	r2, #4129	; 0x1021
 800134e:	4293      	cmp	r3, r2
 8001350:	d032      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
 8001352:	2200      	movs	r2, #0
 8001354:	f2c1 0221 	movt	r2, #4129	; 0x1021
 8001358:	4293      	cmp	r3, r2
 800135a:	d80a      	bhi.n	8001372 <HAL_GPIO_Init+0x94>
 800135c:	2200      	movs	r2, #0
 800135e:	f2c1 0211 	movt	r2, #4113	; 0x1011
 8001362:	4293      	cmp	r3, r2
 8001364:	d028      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
 8001366:	2200      	movs	r2, #0
 8001368:	f2c1 0212 	movt	r2, #4114	; 0x1012
 800136c:	4293      	cmp	r3, r2
 800136e:	d023      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
          break;
 8001370:	e03c      	b.n	80013ec <HAL_GPIO_Init+0x10e>
      switch (GPIO_Init->Mode)
 8001372:	2200      	movs	r2, #0
 8001374:	f2c1 0231 	movt	r2, #4145	; 0x1031
 8001378:	4293      	cmp	r3, r2
 800137a:	d01d      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
 800137c:	2200      	movs	r2, #0
 800137e:	f2c1 0232 	movt	r2, #4146	; 0x1032
 8001382:	4293      	cmp	r3, r2
 8001384:	d018      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
 8001386:	2200      	movs	r2, #0
 8001388:	f2c1 0222 	movt	r2, #4130	; 0x1022
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_GPIO_Init+0xda>
          break;
 8001390:	e02c      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e028      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	3304      	adds	r3, #4
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e023      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3308      	adds	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e01e      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	330c      	adds	r3, #12
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e019      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <HAL_GPIO_Init+0xe8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c0:	2304      	movs	r3, #4
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e012      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d105      	bne.n	80013da <HAL_GPIO_Init+0xfc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ce:	2308      	movs	r3, #8
 80013d0:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	611a      	str	r2, [r3, #16]
          break;
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x10e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013da:	2308      	movs	r3, #8
 80013dc:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	615a      	str	r2, [r3, #20]
          break;
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x10e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
          break;
 80013ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d801      	bhi.n	80013f6 <HAL_GPIO_Init+0x118>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	e001      	b.n	80013fa <HAL_GPIO_Init+0x11c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d802      	bhi.n	8001408 <HAL_GPIO_Init+0x12a>
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x130>
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	3b08      	subs	r3, #8
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	210f      	movs	r1, #15
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	401a      	ands	r2, r3
 8001420:	6a39      	ldr	r1, [r7, #32]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80df 	beq.w	80015fa <HAL_GPIO_Init+0x31c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001466:	2300      	movs	r3, #0
 8001468:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800146c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146e:	0892      	lsrs	r2, r2, #2
 8001470:	3202      	adds	r2, #2
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4013      	ands	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001494:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001498:	429a      	cmp	r2, r3
 800149a:	d01c      	beq.n	80014d6 <HAL_GPIO_Init+0x1f8>
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x1f4>
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d00a      	beq.n	80014ce <HAL_GPIO_Init+0x1f0>
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x1ec>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x1fa>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x1fa>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x1fa>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x1fa>
 80014d6:	2300      	movs	r3, #0
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	0892      	lsrs	r2, r2, #2
 80014f2:	3202      	adds	r2, #2
 80014f4:	6979      	ldr	r1, [r7, #20]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800150e:	6819      	ldr	r1, [r3, #0]
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00c      	b.n	800153a <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001524:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	43da      	mvns	r2, r3
 800152e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001532:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001536:	400a      	ands	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00c      	beq.n	8001560 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001554:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	e00c      	b.n	800157a <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001564:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001568:	6859      	ldr	r1, [r3, #4]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43da      	mvns	r2, r3
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001576:	400a      	ands	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <HAL_GPIO_Init+0x2c2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800158e:	6899      	ldr	r1, [r3, #8]
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	e00c      	b.n	80015ba <HAL_GPIO_Init+0x2dc>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43da      	mvns	r2, r3
 80015ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015b6:	400a      	ands	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <HAL_GPIO_Init+0x302>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015ce:	68d9      	ldr	r1, [r3, #12]
 80015d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	430a      	orrs	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	e00c      	b.n	80015fa <HAL_GPIO_Init+0x31c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43da      	mvns	r2, r3
 80015ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015f6:	400a      	ands	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae7d 	bls.w	8001302 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	372c      	adds	r7, #44	; 0x2c
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162e:	e003      	b.n	8001638 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0fc      	b.n	8001856 <HAL_I2C_Init+0x214>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f003 f9ad 	bl	80049d0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2224      	movs	r2, #36	; 0x24
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800168e:	f001 fd60 	bl	8003152 <HAL_RCC_GetPCLK1Freq>
 8001692:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800169c:	f2c0 0301 	movt	r3, #1
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d80a      	bhi.n	80016ba <HAL_I2C_Init+0x78>
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	f248 437f 	movw	r3, #33919	; 0x847f
 80016aa:	f2c0 031e 	movt	r3, #30
 80016ae:	429a      	cmp	r2, r3
 80016b0:	bf94      	ite	ls
 80016b2:	2301      	movls	r3, #1
 80016b4:	2300      	movhi	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	e009      	b.n	80016ce <HAL_I2C_Init+0x8c>
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f640 03ff 	movw	r3, #2303	; 0x8ff
 80016c0:	f2c0 033d 	movt	r3, #61	; 0x3d
 80016c4:	429a      	cmp	r2, r3
 80016c6:	bf94      	ite	ls
 80016c8:	2301      	movls	r3, #1
 80016ca:	2300      	movhi	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Init+0x94>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0bf      	b.n	8001856 <HAL_I2C_Init+0x214>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64d 6383 	movw	r3, #56963	; 0xde83
 80016dc:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80016e0:	fba3 2302 	umull	r2, r3, r3, r2
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	f248 63a0 	movw	r3, #34464	; 0x86a0
 80016f8:	f2c0 0301 	movt	r3, #1
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d802      	bhi.n	8001706 <HAL_I2C_Init+0xc4>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	e00c      	b.n	8001720 <HAL_I2C_Init+0xde>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800170c:	fb02 f203 	mul.w	r2, r2, r3
 8001710:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001714:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8001718:	fba3 2302 	umull	r2, r3, r3, r2
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800172e:	f2c0 0301 	movt	r3, #1
 8001732:	429a      	cmp	r2, r3
 8001734:	d80d      	bhi.n	8001752 <HAL_I2C_Init+0x110>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	3301      	adds	r3, #1
 8001746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf38      	it	cc
 800174e:	2304      	movcc	r3, #4
 8001750:	e04f      	b.n	80017f2 <HAL_I2C_Init+0x1b0>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d111      	bne.n	800177e <HAL_I2C_Init+0x13c>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	fbb1 f3f3 	udiv	r3, r1, r3
 800176c:	3301      	adds	r3, #1
 800176e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	e012      	b.n	80017a4 <HAL_I2C_Init+0x162>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1e59      	subs	r1, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	fbb1 f3f3 	udiv	r3, r1, r3
 8001794:	3301      	adds	r3, #1
 8001796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Init+0x16a>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e022      	b.n	80017f2 <HAL_I2C_Init+0x1b0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10e      	bne.n	80017d2 <HAL_I2C_Init+0x190>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1e59      	subs	r1, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d0:	e00f      	b.n	80017f2 <HAL_I2C_Init+0x1b0>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1e59      	subs	r1, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69d9      	ldr	r1, [r3, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6919      	ldr	r1, [r3, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6959      	ldr	r1, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b088      	sub	sp, #32
 8001862:	af02      	add	r7, sp, #8
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	461a      	mov	r2, r3
 800186a:	460b      	mov	r3, r1
 800186c:	817b      	strh	r3, [r7, #10]
 800186e:	4613      	mov	r3, r2
 8001870:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001876:	f7ff fc38 	bl	80010ea <HAL_GetTick>
 800187a:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b20      	cmp	r3, #32
 8001886:	f040 80f2 	bne.w	8001a6e <HAL_I2C_Master_Transmit+0x210>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2319      	movs	r3, #25
 8001890:	2201      	movs	r2, #1
 8001892:	2102      	movs	r1, #2
 8001894:	f2c0 0110 	movt	r1, #16
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fda8 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Master_Transmit+0x4a>
    {
      return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	e0e3      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Master_Transmit+0x58>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e0dc      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d007      	beq.n	80018dc <HAL_I2C_Master_Transmit+0x7e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2221      	movs	r2, #33	; 0x21
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2210      	movs	r2, #16
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	893a      	ldrh	r2, [r7, #8]
 800190c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	2300      	movs	r3, #0
 8001912:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8001916:	62d3      	str	r3, [r2, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fc14 	bl	8002156 <I2C_MasterRequestWrite>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00f      	beq.n	8001954 <HAL_I2C_Master_Transmit+0xf6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b04      	cmp	r3, #4
 800193a:	d105      	bne.n	8001948 <HAL_I2C_Master_Transmit+0xea>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e093      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e08d      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800196a:	e066      	b.n	8001a3a <HAL_I2C_Master_Transmit+0x1dc>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	6a39      	ldr	r1, [r7, #32]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fdfb 	bl	800256c <I2C_WaitOnTXEFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00f      	beq.n	800199c <HAL_I2C_Master_Transmit+0x13e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	2b04      	cmp	r3, #4
 8001982:	d109      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x13a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001992:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e06b      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
        }
        else
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e069      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	6251      	str	r1, [r2, #36]	; 0x24
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d119      	bne.n	8001a0a <HAL_I2C_Master_Transmit+0x1ac>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d015      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0x1ac>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c59      	adds	r1, r3, #1
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	6251      	str	r1, [r2, #36]	; 0x24
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fde9 	bl	80025e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00f      	beq.n	8001a3a <HAL_I2C_Master_Transmit+0x1dc>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d109      	bne.n	8001a36 <HAL_I2C_Master_Transmit+0x1d8>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a30:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e01c      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
        }
        else
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e01a      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
    while(hi2c->XferSize > 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d194      	bne.n	800196c <HAL_I2C_Master_Transmit+0x10e>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x212>
  }
  else
  {
    return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
  }
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	817b      	strh	r3, [r7, #10]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a90:	f7ff fb2b 	bl	80010ea <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	f040 8220 	bne.w	8001ee4 <HAL_I2C_Master_Receive+0x46c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2319      	movs	r3, #25
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2102      	movs	r1, #2
 8001aae:	f2c0 0110 	movt	r1, #16
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fc9b 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Receive+0x4a>
    {
      return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e211      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2C_Master_Receive+0x58>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e20a      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d007      	beq.n	8001af6 <HAL_I2C_Master_Receive+0x7e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2222      	movs	r2, #34	; 0x22
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2210      	movs	r2, #16
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	893a      	ldrh	r2, [r7, #8]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8001b30:	62d3      	str	r3, [r2, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 fb89 	bl	800225a <I2C_MasterRequestRead>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00f      	beq.n	8001b6e <HAL_I2C_Master_Receive+0xf6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d105      	bne.n	8001b62 <HAL_I2C_Master_Receive+0xea>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1c1      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1bb      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
      }
    }

    if(hi2c->XferSize == 0U)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d113      	bne.n	8001b9e <HAL_I2C_Master_Receive+0x126>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e18f      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>
    }
    else if(hi2c->XferSize == 1U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d11d      	bne.n	8001be2 <HAL_I2C_Master_Receive+0x16a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bde:	b662      	cpsie	i
 8001be0:	e16d      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d11d      	bne.n	8001c26 <HAL_I2C_Master_Receive+0x1ae>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c22:	b662      	cpsie	i
 8001c24:	e14b      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001c4c:	e137      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>
    {
      if(hi2c->XferSize <= 3U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	f200 80ee 	bhi.w	8001e34 <HAL_I2C_Master_Receive+0x3bc>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d127      	bne.n	8001cb0 <HAL_I2C_Master_Receive+0x238>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fcfb 	bl	8002660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_I2C_Master_Receive+0x208>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_Master_Receive+0x204>
            {
              return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e134      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
            }
            else
            {
              return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e132      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6918      	ldr	r0, [r3, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	1c59      	adds	r1, r3, #1
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	6251      	str	r1, [r2, #36]	; 0x24
 8001c90:	b2c2      	uxtb	r2, r0
 8001c92:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cae:	e106      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d147      	bne.n	8001d48 <HAL_I2C_Master_Receive+0x2d0>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	f2c0 0101 	movt	r1, #1
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fb91 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Master_Receive+0x25e>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e107      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd6:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6918      	ldr	r0, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	6251      	str	r1, [r2, #36]	; 0x24
 8001cf8:	b2c2      	uxtb	r2, r0
 8001cfa:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d16:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6918      	ldr	r0, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	6251      	str	r1, [r2, #36]	; 0x24
 8001d28:	b2c2      	uxtb	r2, r0
 8001d2a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d46:	e0ba      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2104      	movs	r1, #4
 8001d52:	f2c0 0101 	movt	r1, #1
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fb49 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Master_Receive+0x2ee>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0bf      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d76:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6918      	ldr	r0, [r3, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	6251      	str	r1, [r2, #36]	; 0x24
 8001d88:	b2c2      	uxtb	r2, r0
 8001d8a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	2200      	movs	r2, #0
 8001dae:	2104      	movs	r1, #4
 8001db0:	f2c0 0101 	movt	r1, #1
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fb1a 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Master_Receive+0x34c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e090      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6918      	ldr	r0, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	1c59      	adds	r1, r3, #1
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6251      	str	r1, [r2, #36]	; 0x24
 8001de4:	b2c2      	uxtb	r2, r0
 8001de6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e02:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6918      	ldr	r0, [r3, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	6251      	str	r1, [r2, #36]	; 0x24
 8001e14:	b2c2      	uxtb	r2, r0
 8001e16:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e32:	e044      	b.n	8001ebe <HAL_I2C_Master_Receive+0x446>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fc11 	bl	8002660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_I2C_Master_Receive+0x3dc>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d101      	bne.n	8001e50 <HAL_I2C_Master_Receive+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e04a      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
          }
          else
          {
            return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e048      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6918      	ldr	r0, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	1c59      	adds	r1, r3, #1
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6251      	str	r1, [r2, #36]	; 0x24
 8001e64:	b2c2      	uxtb	r2, r0
 8001e66:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d116      	bne.n	8001ebe <HAL_I2C_Master_Receive+0x446>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6918      	ldr	r0, [r3, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	1c59      	adds	r1, r3, #1
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	6251      	str	r1, [r2, #36]	; 0x24
 8001ea0:	b2c2      	uxtb	r2, r0
 8001ea2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f47f aec3 	bne.w	8001c4e <HAL_I2C_Master_Receive+0x1d6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2C_Master_Receive+0x46e>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b08c      	sub	sp, #48	; 0x30
 8001ef2:	af02      	add	r7, sp, #8
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	460b      	mov	r3, r1
 8001efc:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f12:	f7ff f8ea 	bl	80010ea <HAL_GetTick>
 8001f16:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	f040 8113 	bne.w	800214c <HAL_I2C_IsDeviceReady+0x25e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2319      	movs	r3, #25
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2102      	movs	r1, #2
 8001f30:	f2c0 0110 	movt	r1, #16
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fa5a 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_I2C_IsDeviceReady+0x56>
    {
      return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
 8001f42:	e104      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2C_IsDeviceReady+0x64>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0fd      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d007      	beq.n	8001f78 <HAL_I2C_IsDeviceReady+0x8a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8001f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fae:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fa16 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_IsDeviceReady+0xde>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0c0      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fcc:	897b      	ldrh	r3, [r7, #10]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fda:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f885 	bl	80010ea <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800201a:	e02a      	b.n	8002072 <HAL_I2C_IsDeviceReady+0x184>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_I2C_IsDeviceReady+0x144>
 8002022:	f7ff f862 	bl	80010ea <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d203      	bcs.n	800203a <HAL_I2C_IsDeviceReady+0x14c>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	22a0      	movs	r2, #160	; 0xa0
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b02      	cmp	r3, #2
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_I2C_IsDeviceReady+0x196>
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_I2C_IsDeviceReady+0x196>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2ba0      	cmp	r3, #160	; 0xa0
 8002082:	d1cb      	bne.n	800201c <HAL_I2C_IsDeviceReady+0x12e>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d12b      	bne.n	80020f2 <HAL_I2C_IsDeviceReady+0x204>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2319      	movs	r3, #25
 80020c6:	2201      	movs	r2, #1
 80020c8:	2102      	movs	r1, #2
 80020ca:	f2c0 0110 	movt	r1, #16
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f98d 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_IsDeviceReady+0x1f0>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e037      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e02d      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800210a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2319      	movs	r3, #25
 8002112:	2201      	movs	r2, #1
 8002114:	2102      	movs	r1, #2
 8002116:	f2c0 0110 	movt	r1, #16
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f967 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_IsDeviceReady+0x23c>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e011      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
        }
      }
    }while(I2C_Trials++ < Trials);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	617a      	str	r2, [r7, #20]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	f63f af34 	bhi.w	8001fa0 <HAL_I2C_IsDeviceReady+0xb2>

    hi2c->State = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_I2C_IsDeviceReady+0x260>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af02      	add	r7, sp, #8
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	460b      	mov	r3, r1
 8002164:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d006      	beq.n	8002180 <I2C_MasterRequestWrite+0x2a>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d003      	beq.n	8002180 <I2C_MasterRequestWrite+0x2a>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800217e:	d108      	bne.n	8002192 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e00b      	b.n	80021aa <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	2b12      	cmp	r3, #18
 8002198:	d107      	bne.n	80021aa <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f919 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e045      	b.n	8002252 <I2C_MasterRequestWrite+0xfc>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ce:	d108      	bne.n	80021e2 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d0:	897b      	ldrh	r3, [r7, #10]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	e023      	b.n	800222a <I2C_MasterRequestWrite+0xd4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	11db      	asrs	r3, r3, #7
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0306 	and.w	r3, r3, #6
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f063 030f 	orn	r3, r3, #15
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	2108      	movs	r1, #8
 8002200:	f2c0 0101 	movt	r1, #1
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f943 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <I2C_MasterRequestWrite+0xca>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d101      	bne.n	800221c <I2C_MasterRequestWrite+0xc6>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e01a      	b.n	8002252 <I2C_MasterRequestWrite+0xfc>
      }
      else
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e018      	b.n	8002252 <I2C_MasterRequestWrite+0xfc>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002220:	897b      	ldrh	r3, [r7, #10]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	2102      	movs	r1, #2
 8002230:	f2c0 0101 	movt	r1, #1
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f92b 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <I2C_MasterRequestWrite+0xfa>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b04      	cmp	r3, #4
 8002246:	d101      	bne.n	800224c <I2C_MasterRequestWrite+0xf6>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e002      	b.n	8002252 <I2C_MasterRequestWrite+0xfc>
    }
    else
    {
      return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e000      	b.n	8002252 <I2C_MasterRequestWrite+0xfc>
    }
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af02      	add	r7, sp, #8
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	460b      	mov	r3, r1
 8002268:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800227e:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d006      	beq.n	8002294 <I2C_MasterRequestRead+0x3a>
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d003      	beq.n	8002294 <I2C_MasterRequestRead+0x3a>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002292:	d108      	bne.n	80022a6 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e00b      	b.n	80022be <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2b11      	cmp	r3, #17
 80022ac:	d107      	bne.n	80022be <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f88f 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e085      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022e2:	d108      	bne.n	80022f6 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022e4:	897b      	ldrh	r3, [r7, #10]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	e063      	b.n	80023be <I2C_MasterRequestRead+0x164>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	11db      	asrs	r3, r3, #7
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0306 	and.w	r3, r3, #6
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f063 030f 	orn	r3, r3, #15
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	2108      	movs	r1, #8
 8002314:	f2c0 0101 	movt	r1, #1
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f8b9 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <I2C_MasterRequestRead+0xda>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b04      	cmp	r3, #4
 800232a:	d101      	bne.n	8002330 <I2C_MasterRequestRead+0xd6>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e05a      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
      }
      else
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e058      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002334:	897b      	ldrh	r3, [r7, #10]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	2102      	movs	r1, #2
 8002344:	f2c0 0101 	movt	r1, #1
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f8a1 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <I2C_MasterRequestRead+0x10a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b04      	cmp	r3, #4
 800235a:	d101      	bne.n	8002360 <I2C_MasterRequestRead+0x106>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e042      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
      }
      else
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e040      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002388:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f829 	bl	80023ee <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_MasterRequestRead+0x14c>
    {
      return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e01f      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	11db      	asrs	r3, r3, #7
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 0306 	and.w	r3, r3, #6
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f063 030e 	orn	r3, r3, #14
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	2102      	movs	r1, #2
 80023c4:	f2c0 0101 	movt	r1, #1
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f861 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <I2C_MasterRequestRead+0x18a>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d101      	bne.n	80023e0 <I2C_MasterRequestRead+0x186>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e002      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
    }
    else
    {
      return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e000      	b.n	80023e6 <I2C_MasterRequestRead+0x18c>
    }
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80023fe:	e01f      	b.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d01b      	beq.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <I2C_WaitOnFlagUntilTimeout+0x30>
 800240e:	f7fe fe6c 	bl	80010ea <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d210      	bcs.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e023      	b.n	8002488 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10d      	bne.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x78>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	e00c      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x92>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	429a      	cmp	r2, r3
 8002484:	d0bc      	beq.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249e:	e040      	b.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d11c      	bne.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024c8:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2204      	movs	r2, #4
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e03c      	b.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d017      	beq.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80024f8:	f7fe fdf7 	bl	80010ea <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d20c      	bcs.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e020      	b.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d10c      	bne.n	8002546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e00b      	b.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	43da      	mvns	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4013      	ands	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d19e      	bne.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002578:	e029      	b.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f8ba 	bl	80026f4 <I2C_IsAcknowledgeFailed>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e029      	b.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d01d      	beq.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002598:	f7fe fda7 	bl	80010ea <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d212      	bcs.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e007      	b.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b80      	cmp	r3, #128	; 0x80
 80025da:	d1ce      	bne.n	800257a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f2:	e029      	b.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f87d 	bl	80026f4 <I2C_IsAcknowledgeFailed>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e029      	b.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d01d      	beq.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002612:	f7fe fd6a 	bl	80010ea <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d212      	bcs.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e007      	b.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b04      	cmp	r3, #4
 8002654:	d1ce      	bne.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800266c:	e036      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b10      	cmp	r3, #16
 800267a:	d114      	bne.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80026ac:	f7fe fd1d 	bl	80010ea <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d20f      	bcs.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e007      	b.n	80026ec <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d1c1      	bne.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d114      	bne.n	8002736 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002714:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80c5 	beq.w	80028e6 <HAL_RCC_OscConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002760:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d012      	beq.n	8002794 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002772:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11a      	bne.n	80027b6 <HAL_RCC_OscConfig+0x74>
 8002780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002784:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002792:	d110      	bne.n	80027b6 <HAL_RCC_OscConfig+0x74>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002798:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 809e 	beq.w	80028e4 <HAL_RCC_OscConfig+0x1a2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 8099 	bne.w	80028e4 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e2f3      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x98>
 80027c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e052      	b.n	8002880 <HAL_RCC_OscConfig+0x13e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0xd2>
 80027e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800280c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e035      	b.n	8002880 <HAL_RCC_OscConfig+0x13e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d118      	bne.n	8002850 <HAL_RCC_OscConfig+0x10e>
 800281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002822:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002830:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002848:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e017      	b.n	8002880 <HAL_RCC_OscConfig+0x13e>
 8002850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002854:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002862:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002876:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800287a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800287e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d016      	beq.n	80028b6 <HAL_RCC_OscConfig+0x174>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fc2f 	bl	80010ea <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fc2b 	bl	80010ea <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x160>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e27d      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ed      	beq.n	8002890 <HAL_RCC_OscConfig+0x14e>
 80028b4:	e017      	b.n	80028e6 <HAL_RCC_OscConfig+0x1a4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe fc18 	bl	80010ea <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x18e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028be:	f7fe fc14 	bl	80010ea <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e266      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ed      	bne.n	80028be <HAL_RCC_OscConfig+0x17c>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8086 	beq.w	8002a00 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_RCC_OscConfig+0x1e8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d128      	bne.n	800296a <HAL_RCC_OscConfig+0x228>
 8002918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11f      	bne.n	800296a <HAL_RCC_OscConfig+0x228>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x206>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e22a      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	00da      	lsls	r2, r3, #3
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002968:	e04a      	b.n	8002a00 <HAL_RCC_OscConfig+0x2be>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02b      	beq.n	80029ca <HAL_RCC_OscConfig+0x288>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fbb5 	bl	80010ea <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe fbb1 	bl	80010ea <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e203      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ed      	beq.n	8002984 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	00da      	lsls	r2, r3, #3
 80029bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e01a      	b.n	8002a00 <HAL_RCC_OscConfig+0x2be>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb89 	bl	80010ea <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe fb85 	bl	80010ea <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1d7      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ed      	bne.n	80029dc <HAL_RCC_OscConfig+0x29a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d03f      	beq.n	8002a8c <HAL_RCC_OscConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01f      	beq.n	8002a54 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a14:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8002a18:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fe fb63 	bl	80010ea <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe fb5f 	bl	80010ea <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1b1      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ed      	beq.n	8002a28 <HAL_RCC_OscConfig+0x2e6>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f000 fbac 	bl	80031aa <RCC_Delay>
 8002a52:	e01b      	b.n	8002a8c <HAL_RCC_OscConfig+0x34a>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a54:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8002a58:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fb43 	bl	80010ea <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe fb3f 	bl	80010ea <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x338>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e191      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ed      	bne.n	8002a68 <HAL_RCC_OscConfig+0x326>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80f4 	beq.w	8002c82 <HAL_RCC_OscConfig+0x540>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <HAL_RCC_OscConfig+0x39c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ac2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ac6:	61da      	str	r2, [r3, #28]
 8002ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002acc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002ae2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d121      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002af4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002afe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b08:	f7fe faef 	bl	80010ea <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3e0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe faeb 	bl	80010ea <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3e0>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e13d      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ed      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x414>
 8002b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	e051      	b.n	8002bfa <HAL_RCC_OscConfig+0x4b8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x44e>
 8002b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	621a      	str	r2, [r3, #32]
 8002b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b88:	f022 0204 	bic.w	r2, r2, #4
 8002b8c:	621a      	str	r2, [r3, #32]
 8002b8e:	e034      	b.n	8002bfa <HAL_RCC_OscConfig+0x4b8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d118      	bne.n	8002bca <HAL_RCC_OscConfig+0x488>
 8002b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002baa:	f042 0204 	orr.w	r2, r2, #4
 8002bae:	621a      	str	r2, [r3, #32]
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	621a      	str	r2, [r3, #32]
 8002bc8:	e017      	b.n	8002bfa <HAL_RCC_OscConfig+0x4b8>
 8002bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	621a      	str	r2, [r3, #32]
 8002be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bea:	6a1a      	ldr	r2, [r3, #32]
 8002bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bf4:	f022 0204 	bic.w	r2, r2, #4
 8002bf8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d018      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4f2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fe fa72 	bl	80010ea <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x4de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe fa6e 	bl	80010ea <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x4de>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0be      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0eb      	beq.n	8002c0a <HAL_RCC_OscConfig+0x4c8>
 8002c32:	e017      	b.n	8002c64 <HAL_RCC_OscConfig+0x522>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7fe fa59 	bl	80010ea <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x510>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fa55 	bl	80010ea <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x510>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0a5      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10b      	bne.n	8002c82 <HAL_RCC_OscConfig+0x540>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c80:	61da      	str	r2, [r3, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8088 	beq.w	8002d9c <HAL_RCC_OscConfig+0x65a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d07c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x656>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d15c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x61e>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	2360      	movs	r3, #96	; 0x60
 8002ca8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fa1b 	bl	80010ea <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fa17 	bl	80010ea <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x588>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e069      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ed      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x576>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d10e      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c2>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	2360      	movs	r3, #96	; 0x60
 8002d2a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe f9da 	bl	80010ea <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe f9d6 	bl	80010ea <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e028      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ed      	beq.n	8002d3a <HAL_RCC_OscConfig+0x5f8>
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0x65a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	2360      	movs	r3, #96	; 0x60
 8002d62:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe f9be 	bl	80010ea <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe f9ba 	bl	80010ea <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00c      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ed      	bne.n	8002d72 <HAL_RCC_OscConfig+0x630>
 8002d96:	e001      	b.n	8002d9c <HAL_RCC_OscConfig+0x65a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x65c>
    }
  }
  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d919      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x56>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 0107 	bic.w	r1, r3, #7
 8002dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e12c      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d032      	beq.n	8002e6e <HAL_RCC_ClockConfig+0xc8>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e26:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e2a:	605a      	str	r2, [r3, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_RCC_ClockConfig+0xaa>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e4a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002e4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8083 	beq.w	8002f82 <HAL_RCC_ClockConfig+0x1dc>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10a      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xf4>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11b      	bne.n	8002ece <HAL_RCC_ClockConfig+0x128>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0dd      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x112>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_ClockConfig+0x128>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0ce      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0x128>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0c3      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 0103 	bic.w	r1, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fe f8fd 	bl	80010ea <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x180>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x16c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe f8f5 	bl	80010ea <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0a1      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0x156>
 8002f24:	e02d      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1dc>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d120      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x1ca>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1a0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe f8db 	bl	80010ea <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e087      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x18a>
 8002f58:	e013      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1dc>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5a:	f7fe f8c6 	bl	80010ea <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x1ca>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e072      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1eb      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1b4>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d219      	bcs.n	8002fca <HAL_RCC_ClockConfig+0x224>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 0107 	bic.w	r1, r3, #7
 8002fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e045      	b.n	8003056 <HAL_RCC_ClockConfig+0x2b0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00f      	beq.n	8003020 <HAL_RCC_ClockConfig+0x27a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 5160 	bic.w	r1, r3, #14336	; 0x3800
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00da      	lsls	r2, r3, #3
 8003014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003020:	f000 f81d 	bl	800305e <HAL_RCC_GetSysClockFreq>
 8003024:	4601      	mov	r1, r0
 8003026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800302a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	f646 7360 	movw	r3, #28512	; 0x6f60
 800303a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	fa21 f203 	lsr.w	r2, r1, r3
 8003044:	f240 0308 	movw	r3, #8
 8003048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fe f801 	bl	8001056 <HAL_InitTick>
  
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305e:	b490      	push	{r4, r7}
 8003060:	b08a      	sub	sp, #40	; 0x28
 8003062:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003064:	f646 63d0 	movw	r3, #28368	; 0x6ed0
 8003068:	f6c0 0300 	movt	r3, #2048	; 0x800
 800306c:	1d3c      	adds	r4, r7, #4
 800306e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003074:	f646 63e0 	movw	r3, #28384	; 0x6ee0
 8003078:	f6c0 0300 	movt	r3, #2048	; 0x800
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x52>
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d006      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x5e>
 80030ae:	e039      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xc6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80030b4:	f2c0 037a 	movt	r3, #122	; 0x7a
 80030b8:	623b      	str	r3, [r7, #32]
      break;
 80030ba:	e039      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xd2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	0c9b      	lsrs	r3, r3, #18
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030c8:	4413      	add	r3, r2
 80030ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0xb0>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c5b      	lsrs	r3, r3, #17
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ee:	4413      	add	r3, r2
 80030f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030f4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80030fc:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003100:	fb03 f202 	mul.w	r2, r3, r2
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	e007      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xc0>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003114:	f2c0 033d 	movt	r3, #61	; 0x3d
 8003118:	fb03 f302 	mul.w	r3, r3, r2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	623b      	str	r3, [r7, #32]
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xd2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003128:	f2c0 037a 	movt	r3, #122	; 0x7a
 800312c:	623b      	str	r3, [r7, #32]
      break;
 800312e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003130:	6a3b      	ldr	r3, [r7, #32]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bc90      	pop	{r4, r7}
 800313a:	4770      	bx	lr

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	f240 0308 	movw	r3, #8
 8003144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003148:	681b      	ldr	r3, [r3, #0]
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003156:	f7ff fff1 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315a:	4601      	mov	r1, r0
 800315c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003160:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 0207 	and.w	r2, r3, #7
 800316c:	f646 7370 	movw	r3, #28528	; 0x6f70
 8003170:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800317a:	4618      	mov	r0, r3
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003182:	f7ff ffdb 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003186:	4601      	mov	r1, r0
 8003188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0adb      	lsrs	r3, r3, #11
 8003194:	f003 0207 	and.w	r2, r3, #7
 8003198:	f646 7370 	movw	r3, #28528	; 0x6f70
 800319c:	f6c0 0300 	movt	r3, #2048	; 0x800
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd80      	pop	{r7, pc}

080031aa <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b2:	f240 0308 	movw	r3, #8
 80031b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80031c0:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80031c4:	fba3 2302 	umull	r2, r3, r3, r2
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80031d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	60fa      	str	r2, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f9      	bne.n	80031d2 <RCC_Delay+0x28>
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e01d      	b.n	8003236 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f001 fc2e 	bl	8004a70 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 f8fe 	bl	8003428 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_TIM_ConfigClockSource+0x1c>
 800328a:	2302      	movs	r3, #2
 800328c:	e0c8      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1ae>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d077      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x144>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d80e      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x76>
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	f000 808a 	beq.w	80033e4 <HAL_TIM_ConfigClockSource+0x172>
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d802      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x68>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d07e      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80032d8:	e099      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f000 8089 	beq.w	80033f2 <HAL_TIM_ConfigClockSource+0x180>
 80032e0:	2b30      	cmp	r3, #48	; 0x30
 80032e2:	f000 808d 	beq.w	8003400 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80032e6:	e092      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d016      	beq.n	800331a <HAL_TIM_ConfigClockSource+0xa8>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d804      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x88>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d040      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x104>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d04e      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80032f8:	e089      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d003      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x96>
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d024      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003306:	e082      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0207 	bic.w	r2, r2, #7
 8003316:	609a      	str	r2, [r3, #8]
    break;
 8003318:	e079      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f000 f976 	bl	800361a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003344:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	609a      	str	r2, [r3, #8]
    break;
 800334e:	e05e      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f000 f95b 	bl	800361a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003372:	609a      	str	r2, [r3, #8]
    break;
 8003374:	e04b      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	461a      	mov	r2, r3
 8003384:	f000 f8c5 	bl	8003512 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2150      	movs	r1, #80	; 0x50
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f924 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 8003394:	e03b      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f000 f8e7 	bl	8003576 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2160      	movs	r1, #96	; 0x60
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f914 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 80033b4:	e02b      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 f8a5 	bl	8003512 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f904 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 80033d4:	e01b      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f8fd 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 80033e2:	e014      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2110      	movs	r1, #16
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f8f6 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 80033f0:	e00d      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2120      	movs	r1, #32
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f8ef 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 80033fe:	e006      	b.n	800340e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2130      	movs	r1, #48	; 0x30
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f8e8 	bl	80035dc <TIM_ITRx_SetConfig>
    break;
 800340c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003442:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003446:	429a      	cmp	r2, r3
 8003448:	d011      	beq.n	800346e <TIM_Base_SetConfig+0x46>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d00d      	beq.n	800346e <TIM_Base_SetConfig+0x46>
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003458:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800345c:	429a      	cmp	r2, r3
 800345e:	d006      	beq.n	800346e <TIM_Base_SetConfig+0x46>
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003466:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800346a:	429a      	cmp	r2, r3
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003486:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800348a:	429a      	cmp	r2, r3
 800348c:	d011      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003494:	d00d      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800349c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d006      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80034f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d103      	bne.n	8003502 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	615a      	str	r2, [r3, #20]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003512:	b480      	push	{r7}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f023 0201 	bic.w	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 030a 	bic.w	r3, r3, #10
 8003556:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f023 0210 	bic.w	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	f043 0307 	orr.w	r3, r3, #7
 8003600:	b29b      	uxth	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003638:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	021a      	lsls	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4313      	orrs	r3, r2
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e032      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003692:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e03f      	b.n	8003776 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 f9d6 	bl	8004abc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003726:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f9b1 	bl	8003a90 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b088      	sub	sp, #32
 8003782:	af02      	add	r7, sp, #8
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	f040 8083 	bne.w	80038a6 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Transmit+0x2e>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e07b      	b.n	80038a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Transmit+0x40>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e074      	b.n	80038a8 <HAL_UART_Transmit+0x12a>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2221      	movs	r2, #33	; 0x21
 80037d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037d4:	f7fd fc89 	bl	80010ea <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80037e6:	e042      	b.n	800386e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d122      	bne.n	8003846 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f8f6 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e046      	b.n	80038a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3302      	adds	r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	e017      	b.n	800386e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	e013      	b.n	800386e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f8d3 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e023      	b.n	80038a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	60ba      	str	r2, [r7, #8]
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1b7      	bne.n	80037e8 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8ba 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e00a      	b.n	80038a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	f040 8090 	bne.w	80039f2 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_UART_Receive+0x2e>
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e088      	b.n	80039f4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Receive+0x40>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e081      	b.n	80039f4 <HAL_UART_Receive+0x144>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2222      	movs	r2, #34	; 0x22
 8003902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003906:	f7fd fbf0 	bl	80010ea <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8003918:	e05c      	b.n	80039d4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d12b      	bne.n	800398a <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2120      	movs	r1, #32
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f85d 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e053      	b.n	80039f4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10c      	bne.n	8003972 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003964:	b29a      	uxth	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3302      	adds	r3, #2
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	e030      	b.n	80039d4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	b29b      	uxth	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	b29a      	uxth	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	e024      	b.n	80039d4 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2120      	movs	r1, #32
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f831 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e027      	b.n	80039f4 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	60ba      	str	r2, [r7, #8]
 80039b8:	b2ca      	uxtb	r2, r1
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e00a      	b.n	80039d4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1c59      	adds	r1, r3, #1
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d19d      	bne.n	800391a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a0c:	e02c      	b.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d028      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1c:	f7fd fb65 	bl	80010ea <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d21d      	bcs.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e00f      	b.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d0c3      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ad2:	f023 030c 	bic.w	r3, r3, #12
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003afe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d17c      	bne.n	8003c00 <UART_SetConfig+0x170>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b06:	f7ff fb3a 	bl	800317e <HAL_RCC_GetPCLK2Freq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	f248 531f 	movw	r3, #34079	; 0x851f
 8003b24:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003b28:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	011c      	lsls	r4, r3, #4
 8003b30:	f7ff fb25 	bl	800317e <HAL_RCC_GetPCLK2Freq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b4a:	f7ff fb18 	bl	800317e <HAL_RCC_GetPCLK2Freq>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009a      	lsls	r2, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b64:	f248 531f 	movw	r3, #34079	; 0x851f
 8003b68:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2264      	movs	r2, #100	; 0x64
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	1aeb      	subs	r3, r5, r3
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b80:	f248 531f 	movw	r3, #34079	; 0x851f
 8003b84:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003b88:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b92:	441c      	add	r4, r3
 8003b94:	f7ff faf3 	bl	800317e <HAL_RCC_GetPCLK2Freq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	fbb2 f5f3 	udiv	r5, r2, r3
 8003bae:	f7ff fae6 	bl	800317e <HAL_RCC_GetPCLK2Freq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc8:	f248 531f 	movw	r3, #34079	; 0x851f
 8003bcc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2264      	movs	r2, #100	; 0x64
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	1aeb      	subs	r3, r5, r3
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003be4:	f248 531f 	movw	r3, #34079	; 0x851f
 8003be8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003bec:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4422      	add	r2, r4
 8003bfc:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003bfe:	e07b      	b.n	8003cf8 <UART_SetConfig+0x268>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003c00:	f7ff faa7 	bl	8003152 <HAL_RCC_GetPCLK1Freq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009a      	lsls	r2, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1a:	f248 531f 	movw	r3, #34079	; 0x851f
 8003c1e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011c      	lsls	r4, r3, #4
 8003c2a:	f7ff fa92 	bl	8003152 <HAL_RCC_GetPCLK1Freq>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c44:	f7ff fa85 	bl	8003152 <HAL_RCC_GetPCLK1Freq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009a      	lsls	r2, r3, #2
 8003c52:	441a      	add	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c5e:	f248 531f 	movw	r3, #34079	; 0x851f
 8003c62:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2264      	movs	r2, #100	; 0x64
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	1aeb      	subs	r3, r5, r3
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c7a:	f248 531f 	movw	r3, #34079	; 0x851f
 8003c7e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8c:	441c      	add	r4, r3
 8003c8e:	f7ff fa60 	bl	8003152 <HAL_RCC_GetPCLK1Freq>
 8003c92:	4602      	mov	r2, r0
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009a      	lsls	r2, r3, #2
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ca8:	f7ff fa53 	bl	8003152 <HAL_RCC_GetPCLK1Freq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc2:	f248 531f 	movw	r3, #34079	; 0x851f
 8003cc6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003cca:	fba3 2302 	umull	r2, r3, r3, r2
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2264      	movs	r2, #100	; 0x64
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	1aeb      	subs	r3, r5, r3
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cde:	f248 531f 	movw	r3, #34079	; 0x851f
 8003ce2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	f003 020f 	and.w	r2, r3, #15
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4422      	add	r2, r4
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bdb0      	pop	{r4, r5, r7, pc}

08003d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d06:	f7fd f98d 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d0a:	f000 f823 	bl	8003d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d0e:	f000 f962 	bl	8003fd6 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003d12:	f000 f91d 	bl	8003f50 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003d16:	f000 f862 	bl	8003dde <MX_I2C1_Init>
  MX_TIM1_Init();
 8003d1a:	f000 f8ac 	bl	8003e76 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 8003d1e:	f000 fb3b 	bl	8004398 <init_MPU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char ch;
  while(HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 100)!=HAL_OK);
 8003d22:	bf00      	nop
 8003d24:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8003d28:	2364      	movs	r3, #100	; 0x64
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f240 2074 	movw	r0, #628	; 0x274
 8003d30:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d34:	f7ff fdbc 	bl	80038b0 <HAL_UART_Receive>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f2      	bne.n	8003d24 <main+0x24>
  HAL_TIM_Base_Start(&htim1);
 8003d3e:	f240 20b8 	movw	r0, #696	; 0x2b8
 8003d42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d46:	f7ff fa7a 	bl	800323e <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */


		process_MPU();
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fbe1 	bl	8004514 <process_MPU>
 8003d52:	e7fa      	b.n	8003d4a <main+0x4a>

08003d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b090      	sub	sp, #64	; 0x40
 8003d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d5a:	f107 0318 	add.w	r3, r7, #24
 8003d5e:	2228      	movs	r2, #40	; 0x28
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 fb86 	bl	8005474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003d92:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d98:	f107 0318 	add.w	r3, r7, #24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fcd0 	bl	8002742 <HAL_RCC_OscConfig>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003da8:	f000 f992 	bl	80040d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dac:	230f      	movs	r3, #15
 8003dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db0:	2302      	movs	r3, #2
 8003db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe ffed 	bl	8002da6 <HAL_RCC_ClockConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003dd2:	f000 f97d 	bl	80040d0 <Error_Handler>
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3740      	adds	r7, #64	; 0x40
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003de2:	f240 220c 	movw	r2, #524	; 0x20c
 8003de6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003dea:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003dee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003df2:	6013      	str	r3, [r2, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003df4:	f240 220c 	movw	r2, #524	; 0x20c
 8003df8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003dfc:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8003e00:	f2c0 0301 	movt	r3, #1
 8003e04:	6053      	str	r3, [r2, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	f240 230c 	movw	r3, #524	; 0x20c
 8003e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e12:	f240 230c 	movw	r3, #524	; 0x20c
 8003e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e1e:	f240 230c 	movw	r3, #524	; 0x20c
 8003e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e2c:	f240 230c 	movw	r3, #524	; 0x20c
 8003e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e38:	f240 230c 	movw	r3, #524	; 0x20c
 8003e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e44:	f240 230c 	movw	r3, #524	; 0x20c
 8003e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e50:	f240 230c 	movw	r3, #524	; 0x20c
 8003e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e5c:	f240 200c 	movw	r0, #524	; 0x20c
 8003e60:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003e64:	f7fd fbed 	bl	8001642 <HAL_I2C_Init>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <MX_I2C1_Init+0x94>
  {
    Error_Handler();
 8003e6e:	f000 f92f 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e7c:	f107 0308 	add.w	r3, r7, #8
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e92:	f240 22b8 	movw	r2, #696	; 0x2b8
 8003e96:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003e9a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003e9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ea2:	6013      	str	r3, [r2, #0]
  htim1.Init.Prescaler = 63;
 8003ea4:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003eac:	223f      	movs	r2, #63	; 0x3f
 8003eae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb0:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8003ebc:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ec4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eca:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ed6:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee2:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003eee:	f240 20b8 	movw	r0, #696	; 0x2b8
 8003ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ef6:	f7ff f977 	bl	80031e8 <HAL_TIM_Base_Init>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8003f00:	f000 f8e6 	bl	80040d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f240 20b8 	movw	r0, #696	; 0x2b8
 8003f14:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f18:	f7ff f9ab 	bl	8003272 <HAL_TIM_ConfigClockSource>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8003f22:	f000 f8d5 	bl	80040d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f2e:	463b      	mov	r3, r7
 8003f30:	4619      	mov	r1, r3
 8003f32:	f240 20b8 	movw	r0, #696	; 0x2b8
 8003f36:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003f3a:	f7ff fb8f 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003f44:	f000 f8c4 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f54:	f240 2274 	movw	r2, #628	; 0x274
 8003f58:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003f5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f64:	6013      	str	r3, [r2, #0]
  huart1.Init.BaudRate = 115200;
 8003f66:	f240 2374 	movw	r3, #628	; 0x274
 8003f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f6e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f72:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f74:	f240 2374 	movw	r3, #628	; 0x274
 8003f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f80:	f240 2374 	movw	r3, #628	; 0x274
 8003f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f8c:	f240 2374 	movw	r3, #628	; 0x274
 8003f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f98:	f240 2374 	movw	r3, #628	; 0x274
 8003f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fa0:	220c      	movs	r2, #12
 8003fa2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa4:	f240 2374 	movw	r3, #628	; 0x274
 8003fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb0:	f240 2374 	movw	r3, #628	; 0x274
 8003fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fbc:	f240 2074 	movw	r0, #628	; 0x274
 8003fc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003fc4:	f7ff fb8e 	bl	80036e4 <HAL_UART_Init>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8003fce:	f000 f87f 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b088      	sub	sp, #32
 8003fda:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 0310 	add.w	r3, r7, #16
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ffc:	f042 0210 	orr.w	r2, r2, #16
 8004000:	619a      	str	r2, [r3, #24]
 8004002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004022:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004026:	f042 0220 	orr.w	r2, r2, #32
 800402a:	619a      	str	r2, [r3, #24]
 800402c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004030:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004050:	f042 0204 	orr.w	r2, r2, #4
 8004054:	619a      	str	r2, [r3, #24]
 8004056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800405a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004076:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800407a:	f042 0208 	orr.w	r2, r2, #8
 800407e:	619a      	str	r2, [r3, #24]
 8004080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004092:	2200      	movs	r2, #0
 8004094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004098:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800409c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040a0:	f7fd fab7 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80040a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b2:	2302      	movs	r3, #2
 80040b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b6:	f107 0310 	add.w	r3, r7, #16
 80040ba:	4619      	mov	r1, r3
 80040bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040c0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80040c4:	f7fd f90b 	bl	80012de <HAL_GPIO_Init>

}
 80040c8:	bf00      	nop
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b094      	sub	sp, #80	; 0x50
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80040e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
	char * ptr = buf;
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	char * p = ptr;
 80040f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	2b0a      	cmp	r3, #10
 80040f8:	dd01      	ble.n	80040fe <ftoa+0x22>
		precision = MAX_PRECISION;
 80040fa:	230a      	movs	r3, #10
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28

	// sign stuff
	if (f < 0)
 80040fe:	2300      	movs	r3, #0
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800410a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800410e:	f7fc fc55 	bl	80009bc <__aeabi_dcmplt>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <ftoa+0x52>
	{
		f = -f;
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
 800411c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
		*ptr++ = '-';
 8004124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004126:	1c53      	adds	r3, r2, #1
 8004128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412a:	232d      	movs	r3, #45	; 0x2d
 800412c:	7013      	strb	r3, [r2, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	da74      	bge.n	800421e <ftoa+0x142>
	{
		if (f < 1.0) precision = 6;
 8004134:	2400      	movs	r4, #0
 8004136:	2500      	movs	r5, #0
 8004138:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
 800413c:	4622      	mov	r2, r4
 800413e:	462b      	mov	r3, r5
 8004140:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004144:	f7fc fc3a 	bl	80009bc <__aeabi_dcmplt>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <ftoa+0x78>
 800414e:	2306      	movs	r3, #6
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
 8004152:	e064      	b.n	800421e <ftoa+0x142>
		else if (f < 10.0) precision = 5;
 8004154:	f04f 0800 	mov.w	r8, #0
 8004158:	f04f 0900 	mov.w	r9, #0
 800415c:	f2c4 0924 	movt	r9, #16420	; 0x4024
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004168:	f7fc fc28 	bl	80009bc <__aeabi_dcmplt>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <ftoa+0x9c>
 8004172:	2305      	movs	r3, #5
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
 8004176:	e052      	b.n	800421e <ftoa+0x142>
		else if (f < 100.0) precision = 4;
 8004178:	f04f 0a00 	mov.w	sl, #0
 800417c:	f04f 0b00 	mov.w	fp, #0
 8004180:	f2c4 0b59 	movt	fp, #16473	; 0x4059
 8004184:	4652      	mov	r2, sl
 8004186:	465b      	mov	r3, fp
 8004188:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800418c:	f7fc fc16 	bl	80009bc <__aeabi_dcmplt>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <ftoa+0xc0>
 8004196:	2304      	movs	r3, #4
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
 800419a:	e040      	b.n	800421e <ftoa+0x142>
		else if (f < 1000.0) precision = 3;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f2c4 038f 	movt	r3, #16527	; 0x408f
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80041b6:	f7fc fc01 	bl	80009bc <__aeabi_dcmplt>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <ftoa+0xea>
 80041c0:	2303      	movs	r3, #3
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c4:	e02b      	b.n	800421e <ftoa+0x142>
		else if (f < 10000.0) precision = 2;
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f2c4 03c3 	movt	r3, #16579	; 0x40c3
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80041e0:	f7fc fbec 	bl	80009bc <__aeabi_dcmplt>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <ftoa+0x114>
 80041ea:	2302      	movs	r3, #2
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ee:	e016      	b.n	800421e <ftoa+0x142>
		else if (f < 100000.0) precision = 1;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f2c4 03f8 	movt	r3, #16632	; 0x40f8
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004206:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800420a:	f7fc fbd7 	bl	80009bc <__aeabi_dcmplt>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <ftoa+0x13e>
 8004214:	2301      	movs	r3, #1
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
 8004218:	e001      	b.n	800421e <ftoa+0x142>
		else precision = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// round value according the precision
	if (precision)
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d011      	beq.n	8004248 <ftoa+0x16c>
		f += rounders[precision];
 8004224:	f646 7308 	movw	r3, #28424	; 0x6f08
 8004228:	f6c0 0300 	movt	r3, #2048	; 0x800
 800422c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800422e:	00d2      	lsls	r2, r2, #3
 8004230:	4413      	add	r3, r2
 8004232:	cb18      	ldmia	r3, {r3, r4}
 8004234:	461a      	mov	r2, r3
 8004236:	4623      	mov	r3, r4
 8004238:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800423c:	f7fb ff96 	bl	800016c <__adddf3>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// integer part...
	intPart = f;
 8004248:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800424c:	f7fc fbf4 	bl	8000a38 <__aeabi_d2iz>
 8004250:	4603      	mov	r3, r0
 8004252:	647b      	str	r3, [r7, #68]	; 0x44
	f -= intPart;
 8004254:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004256:	f7fc f8d5 	bl	8000404 <__aeabi_i2d>
 800425a:	4603      	mov	r3, r0
 800425c:	460c      	mov	r4, r1
 800425e:	461a      	mov	r2, r3
 8004260:	4623      	mov	r3, r4
 8004262:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004266:	f7fb ff7f 	bl	8000168 <__aeabi_dsub>
 800426a:	4603      	mov	r3, r0
 800426c:	460c      	mov	r4, r1
 800426e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	if (!intPart)
 8004272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <ftoa+0x1a8>
		*ptr++ = '0';
 8004278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800427e:	2230      	movs	r2, #48	; 0x30
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e040      	b.n	8004306 <ftoa+0x22a>
	else
	{
		// save start pointer
		p = ptr;
 8004284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48

		// convert (reverse order)
		while (intPart)
 8004288:	e020      	b.n	80042cc <ftoa+0x1f0>
		{
			*p++ = '0' + intPart % 10;
 800428a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428c:	f246 6367 	movw	r3, #26215	; 0x6667
 8004290:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8004294:	fb83 1302 	smull	r1, r3, r3, r2
 8004298:	1099      	asrs	r1, r3, #2
 800429a:	17d3      	asrs	r3, r2, #31
 800429c:	1ac9      	subs	r1, r1, r3
 800429e:	460b      	mov	r3, r1
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	1ad1      	subs	r1, r2, r3
 80042a8:	b2ca      	uxtb	r2, r1
 80042aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80042b0:	3230      	adds	r2, #48	; 0x30
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80042b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b8:	f246 6367 	movw	r3, #26215	; 0x6667
 80042bc:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80042c0:	fb83 1302 	smull	r1, r3, r3, r2
 80042c4:	1099      	asrs	r1, r3, #2
 80042c6:	17d3      	asrs	r3, r2, #31
 80042c8:	1acb      	subs	r3, r1, r3
 80042ca:	647b      	str	r3, [r7, #68]	; 0x44
		while (intPart)
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1db      	bne.n	800428a <ftoa+0x1ae>
		}

		// save end pos
		p1 = p;
 80042d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40

		// reverse result
		while (p > ptr)
 80042d6:	e010      	b.n	80042fa <ftoa+0x21e>
		{
			c = *--p;
 80042d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042da:	3b01      	subs	r3, #1
 80042dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			*p = *ptr;
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ec:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80042ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80042f4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80042f8:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80042fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d8ea      	bhi.n	80042d8 <ftoa+0x1fc>
		}

		// restore end pos
		ptr = p1;
 8004302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004304:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	// decimal part
	if (precision)
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03c      	beq.n	8004386 <ftoa+0x2aa>
	{
		// place decimal point
		*ptr++ = '.';
 800430c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004312:	222e      	movs	r2, #46	; 0x2e
 8004314:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8004316:	e031      	b.n	800437c <ftoa+0x2a0>
		{
			f *= 10.0;
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800432c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004330:	f7fc f8d2 	bl	80004d8 <__aeabi_dmul>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			c = f;
 800433c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004340:	f7fc fba2 	bl	8000a88 <__aeabi_d2uiz>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			*ptr++ = '0' + c;
 800434a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004350:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004354:	3230      	adds	r2, #48	; 0x30
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
			f -= c;
 800435a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f850 	bl	8000404 <__aeabi_i2d>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4623      	mov	r3, r4
 800436c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004370:	f7fb fefa 	bl	8000168 <__aeabi_dsub>
 8004374:	4603      	mov	r3, r0
 8004376:	460c      	mov	r4, r1
 8004378:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		while (precision--)
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	62ba      	str	r2, [r7, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1c8      	bne.n	8004318 <ftoa+0x23c>
		}
	}

	// terminating zero
	*ptr = 0;
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]

	return buf;
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800438e:	4618      	mov	r0, r3
 8004390:	3750      	adds	r7, #80	; 0x50
 8004392:	46bd      	mov	sp, r7
 8004394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004398 <init_MPU>:

char init_MPU(){
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af02      	add	r7, sp, #8
    char status = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80043a4:	23d0      	movs	r3, #208	; 0xd0
 80043a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t register_address = WHO_AM_I_REG;
 80043aa:	2375      	movs	r3, #117	; 0x75
 80043ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 80043b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043b4:	b299      	uxth	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ba:	2203      	movs	r2, #3
 80043bc:	f240 200c 	movw	r0, #524	; 0x20c
 80043c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043c4:	f7fd fd93 	bl	8001eee <HAL_I2C_IsDeviceReady>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <init_MPU+0x4a>
    	strcpy( rx_data, "No Device \r \n");
 80043ce:	1d3a      	adds	r2, r7, #4
 80043d0:	f646 63e4 	movw	r3, #28388	; 0x6ee4
 80043d4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80043d8:	4614      	mov	r4, r2
 80043da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043dc:	c407      	stmia	r4!, {r0, r1, r2}
 80043de:	8023      	strh	r3, [r4, #0]
 80043e0:	e00a      	b.n	80043f8 <init_MPU+0x60>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 80043e2:	1d3a      	adds	r2, r7, #4
 80043e4:	f646 63f4 	movw	r3, #28404	; 0x6ef4
 80043e8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80043ec:	4614      	mov	r4, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	7023      	strb	r3, [r4, #0]
      }
    HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
 80043f8:	1d39      	adds	r1, r7, #4
 80043fa:	2364      	movs	r3, #100	; 0x64
 80043fc:	2219      	movs	r2, #25
 80043fe:	f240 2074 	movw	r0, #628	; 0x274
 8004402:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004406:	f7ff f9ba 	bl	800377e <HAL_UART_Transmit>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 800440a:	236b      	movs	r3, #107	; 0x6b
 800440c:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8004416:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800441a:	b299      	uxth	r1, r3
 800441c:	f107 0220 	add.w	r2, r7, #32
 8004420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2302      	movs	r3, #2
 8004428:	f240 200c 	movw	r0, #524	; 0x20c
 800442c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004430:	f7fd fa15 	bl	800185e <HAL_I2C_Master_Transmit>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <init_MPU+0xa8>
	{
		status = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8004440:	2319      	movs	r3, #25
 8004442:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 8004446:	2307      	movs	r3, #7
 8004448:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800444c:	bf00      	nop
 800444e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004452:	b299      	uxth	r1, r3
 8004454:	f107 0220 	add.w	r2, r7, #32
 8004458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2302      	movs	r3, #2
 8004460:	f240 200c 	movw	r0, #524	; 0x20c
 8004464:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004468:	f7fd f9f9 	bl	800185e <HAL_I2C_Master_Transmit>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ed      	bne.n	800444e <init_MPU+0xb6>

	d[0] = GYRO_CONFIG;
 8004472:	231b      	movs	r3, #27
 8004474:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 8004478:	2318      	movs	r3, #24
 800447a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800447e:	bf00      	nop
 8004480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004484:	b299      	uxth	r1, r3
 8004486:	f107 0220 	add.w	r2, r7, #32
 800448a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2302      	movs	r3, #2
 8004492:	f240 200c 	movw	r0, #524	; 0x20c
 8004496:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800449a:	f7fd f9e0 	bl	800185e <HAL_I2C_Master_Transmit>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ed      	bne.n	8004480 <init_MPU+0xe8>

	d[0] = ACCEL_CONFIG;
 80044a4:	231c      	movs	r3, #28
 80044a6:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80044b0:	bf00      	nop
 80044b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044b6:	b299      	uxth	r1, r3
 80044b8:	f107 0220 	add.w	r2, r7, #32
 80044bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2302      	movs	r3, #2
 80044c4:	f240 200c 	movw	r0, #524	; 0x20c
 80044c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044cc:	f7fd f9c7 	bl	800185e <HAL_I2C_Master_Transmit>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1ed      	bne.n	80044b2 <init_MPU+0x11a>

	d[0] = INIT_ENB;
 80044d6:	2338      	movs	r3, #56	; 0x38
 80044d8:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80044e2:	bf00      	nop
 80044e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044e8:	b299      	uxth	r1, r3
 80044ea:	f107 0220 	add.w	r2, r7, #32
 80044ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2302      	movs	r3, #2
 80044f6:	f240 200c 	movw	r0, #524	; 0x20c
 80044fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044fe:	f7fd f9ae 	bl	800185e <HAL_I2C_Master_Transmit>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ed      	bne.n	80044e4 <init_MPU+0x14c>

  return status;
 8004508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800450c:	4618      	mov	r0, r3
 800450e:	3728      	adds	r7, #40	; 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bdb0      	pop	{r4, r5, r7, pc}

08004514 <process_MPU>:
	raw.Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}
mpu_data_processed process_MPU(){
 8004514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	b0a1      	sub	sp, #132	; 0x84
 800451a:	af02      	add	r7, sp, #8
 800451c:	6178      	str	r0, [r7, #20]
	mpu_data_processed data1;
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch;

	uint8_t data[13];
	uint8_t reg = ACCEL_XOUT_H;
 800451e:	233b      	movs	r3, #59	; 0x3b
 8004520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t device_address = MPU_ADDRESS;
 8004524:	23d0      	movs	r3, #208	; 0xd0
 8004526:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    uint8_t register_address = WHO_AM_I_REG;
 800452a:	2375      	movs	r3, #117	; 0x75
 800452c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8004530:	bf00      	nop
 8004532:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004536:	b299      	uxth	r1, r3
 8004538:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800453c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2301      	movs	r3, #1
 8004544:	f240 200c 	movw	r0, #524	; 0x20c
 8004548:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800454c:	f7fd f987 	bl	800185e <HAL_I2C_Master_Transmit>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ed      	bne.n	8004532 <process_MPU+0x1e>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8004556:	bf00      	nop
 8004558:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800455c:	b299      	uxth	r1, r3
 800455e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	230e      	movs	r3, #14
 800456a:	f240 200c 	movw	r0, #524	; 0x20c
 800456e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004572:	f7fd fa81 	bl	8001a78 <HAL_I2C_Master_Receive>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ed      	bne.n	8004558 <process_MPU+0x44>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 800457c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	b21a      	sxth	r2, r3
 8004584:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004588:	b21b      	sxth	r3, r3
 800458a:	4313      	orrs	r3, r2
 800458c:	b21b      	sxth	r3, r3
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fba4 	bl	8000cdc <__aeabi_i2f>
 8004594:	4603      	mov	r3, r0
 8004596:	673b      	str	r3, [r7, #112]	; 0x70
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8004598:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	b21a      	sxth	r2, r3
 80045a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045a4:	b21b      	sxth	r3, r3
 80045a6:	4313      	orrs	r3, r2
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc fb96 	bl	8000cdc <__aeabi_i2f>
 80045b0:	4603      	mov	r3, r0
 80045b2:	66fb      	str	r3, [r7, #108]	; 0x6c
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80045b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	b21a      	sxth	r2, r3
 80045bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	4313      	orrs	r3, r2
 80045c4:	b21b      	sxth	r3, r3
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc fb88 	bl	8000cdc <__aeabi_i2f>
 80045cc:	4603      	mov	r3, r0
 80045ce:	66bb      	str	r3, [r7, #104]	; 0x68

    temp = (int16_t)(data[6] << 8 | data[7]);
 80045d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	b21a      	sxth	r2, r3
 80045d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045dc:	b21b      	sxth	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b21b      	sxth	r3, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fb7a 	bl	8000cdc <__aeabi_i2f>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f240 2370 	movw	r3, #624	; 0x270
 80045ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045f2:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80045f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	b21a      	sxth	r2, r3
 80045fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004600:	b21b      	sxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	b21b      	sxth	r3, r3
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc fb68 	bl	8000cdc <__aeabi_i2f>
 800460c:	4603      	mov	r3, r0
 800460e:	667b      	str	r3, [r7, #100]	; 0x64
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8004610:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	b21a      	sxth	r2, r3
 8004618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800461c:	b21b      	sxth	r3, r3
 800461e:	4313      	orrs	r3, r2
 8004620:	b21b      	sxth	r3, r3
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc fb5a 	bl	8000cdc <__aeabi_i2f>
 8004628:	4603      	mov	r3, r0
 800462a:	663b      	str	r3, [r7, #96]	; 0x60
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 800462c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	b21a      	sxth	r2, r3
 8004634:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004638:	b21b      	sxth	r3, r3
 800463a:	4313      	orrs	r3, r2
 800463c:	b21b      	sxth	r3, r3
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fb4c 	bl	8000cdc <__aeabi_i2f>
 8004644:	4603      	mov	r3, r0
 8004646:	65fb      	str	r3, [r7, #92]	; 0x5c

	Acc_x = Acc_x/((float)accel_factor);
 8004648:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 800464c:	4619      	mov	r1, r3
 800464e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004650:	f7fc fc4c 	bl	8000eec <__aeabi_fdiv>
 8004654:	4603      	mov	r3, r0
 8004656:	673b      	str	r3, [r7, #112]	; 0x70
	Acc_y = Acc_y/((float)accel_factor);
 8004658:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 800465c:	4619      	mov	r1, r3
 800465e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004660:	f7fc fc44 	bl	8000eec <__aeabi_fdiv>
 8004664:	4603      	mov	r3, r0
 8004666:	66fb      	str	r3, [r7, #108]	; 0x6c
	Acc_z = Acc_z/((float)accel_factor);
 8004668:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 800466c:	4619      	mov	r1, r3
 800466e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004670:	f7fc fc3c 	bl	8000eec <__aeabi_fdiv>
 8004674:	4603      	mov	r3, r0
 8004676:	66bb      	str	r3, [r7, #104]	; 0x68

	Gyro_x = Gyro_x/gyro_factor;
 8004678:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800467a:	f7fb fed5 	bl	8000428 <__aeabi_f2d>
 800467e:	f04f 3a66 	mov.w	sl, #1717986918	; 0x66666666
 8004682:	f246 6b66 	movw	fp, #26214	; 0x6666
 8004686:	f2c4 0b30 	movt	fp, #16432	; 0x4030
 800468a:	4652      	mov	r2, sl
 800468c:	465b      	mov	r3, fp
 800468e:	f7fc f84d 	bl	800072c <__aeabi_ddiv>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	f7fc fa15 	bl	8000ac8 <__aeabi_d2f>
 800469e:	4603      	mov	r3, r0
 80046a0:	667b      	str	r3, [r7, #100]	; 0x64
	Gyro_y = Gyro_y/gyro_factor;
 80046a2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80046a4:	f7fb fec0 	bl	8000428 <__aeabi_f2d>
 80046a8:	f04f 3366 	mov.w	r3, #1717986918	; 0x66666666
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	f246 6366 	movw	r3, #26214	; 0x6666
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f2c4 0330 	movt	r3, #16432	; 0x4030
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046c0:	f7fc f834 	bl	800072c <__aeabi_ddiv>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	f7fc f9fc 	bl	8000ac8 <__aeabi_d2f>
 80046d0:	4603      	mov	r3, r0
 80046d2:	663b      	str	r3, [r7, #96]	; 0x60
	Gyro_z = Gyro_z/gyro_factor;
 80046d4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80046d6:	f7fb fea7 	bl	8000428 <__aeabi_f2d>
 80046da:	f04f 3366 	mov.w	r3, #1717986918	; 0x66666666
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	f246 6366 	movw	r3, #26214	; 0x6666
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f2c4 0330 	movt	r3, #16432	; 0x4030
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f2:	f7fc f81b 	bl	800072c <__aeabi_ddiv>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4610      	mov	r0, r2
 80046fc:	4619      	mov	r1, r3
 80046fe:	f7fc f9e3 	bl	8000ac8 <__aeabi_d2f>
 8004702:	4603      	mov	r3, r0
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c


	char buffer[5];
	char n = ' ';
 8004706:	2320      	movs	r3, #32
 8004708:	77fb      	strb	r3, [r7, #31]
	char r = '\n';
 800470a:	230a      	movs	r3, #10
 800470c:	77bb      	strb	r3, [r7, #30]
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 800470e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004710:	f7fb fe8a 	bl	8000428 <__aeabi_f2d>
 8004714:	4682      	mov	sl, r0
 8004716:	468b      	mov	fp, r1
 8004718:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800471a:	f7fb fe85 	bl	8000428 <__aeabi_f2d>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4650      	mov	r0, sl
 8004724:	4659      	mov	r1, fp
 8004726:	f000 fc99 	bl	800505c <atan2>
 800472a:	f242 3872 	movw	r8, #9074	; 0x2372
 800472e:	f6c1 285d 	movt	r8, #6749	; 0x1a5d
 8004732:	f24a 59dc 	movw	r9, #42460	; 0xa5dc
 8004736:	f2c4 094c 	movt	r9, #16460	; 0x404c
 800473a:	4642      	mov	r2, r8
 800473c:	464b      	mov	r3, r9
 800473e:	f7fb fecb 	bl	80004d8 <__aeabi_dmul>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fc f9bd 	bl	8000ac8 <__aeabi_d2f>
 800474e:	4603      	mov	r3, r0
 8004750:	65bb      	str	r3, [r7, #88]	; 0x58
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8004752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004754:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fe65 	bl	8000428 <__aeabi_f2d>
 800475e:	4680      	mov	r8, r0
 8004760:	4689      	mov	r9, r1
 8004762:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004764:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004766:	f7fc fb0d 	bl	8000d84 <__aeabi_fmul>
 800476a:	4603      	mov	r3, r0
 800476c:	461e      	mov	r6, r3
 800476e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004770:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004772:	f7fc fb07 	bl	8000d84 <__aeabi_fmul>
 8004776:	4603      	mov	r3, r0
 8004778:	4619      	mov	r1, r3
 800477a:	4630      	mov	r0, r6
 800477c:	f7fc f9fa 	bl	8000b74 <__addsf3>
 8004780:	4603      	mov	r3, r0
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fe50 	bl	8000428 <__aeabi_f2d>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	f000 fc66 	bl	8005060 <sqrt>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4640      	mov	r0, r8
 800479a:	4649      	mov	r1, r9
 800479c:	f7fb ffc6 	bl	800072c <__aeabi_ddiv>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f000 faca 	bl	8004d40 <atan>
 80047ac:	f242 3472 	movw	r4, #9074	; 0x2372
 80047b0:	f6c1 245d 	movt	r4, #6749	; 0x1a5d
 80047b4:	f24a 55dc 	movw	r5, #42460	; 0xa5dc
 80047b8:	f2c4 054c 	movt	r5, #16460	; 0x404c
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	f7fb fe8a 	bl	80004d8 <__aeabi_dmul>
 80047c4:	4603      	mov	r3, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4618      	mov	r0, r3
 80047ca:	4621      	mov	r1, r4
 80047cc:	f7fc f97c 	bl	8000ac8 <__aeabi_d2f>
 80047d0:	4603      	mov	r3, r0
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54

    ftoa(Acc_x, buffer, 2);
 80047d4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80047d6:	f7fb fe27 	bl	8000428 <__aeabi_f2d>
 80047da:	f107 0220 	add.w	r2, r7, #32
 80047de:	2302      	movs	r3, #2
 80047e0:	f7ff fc7c 	bl	80040dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 80047e4:	f107 0120 	add.w	r1, r7, #32
 80047e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ec:	2205      	movs	r2, #5
 80047ee:	f240 2074 	movw	r0, #628	; 0x274
 80047f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80047f6:	f7fe ffc2 	bl	800377e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 80047fa:	f107 011f 	add.w	r1, r7, #31
 80047fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004802:	2201      	movs	r2, #1
 8004804:	f240 2074 	movw	r0, #628	; 0x274
 8004808:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800480c:	f7fe ffb7 	bl	800377e <HAL_UART_Transmit>

    ftoa(Acc_y, buffer, 2);
 8004810:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004812:	f7fb fe09 	bl	8000428 <__aeabi_f2d>
 8004816:	f107 0220 	add.w	r2, r7, #32
 800481a:	2302      	movs	r3, #2
 800481c:	f7ff fc5e 	bl	80040dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004820:	f107 0120 	add.w	r1, r7, #32
 8004824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004828:	2205      	movs	r2, #5
 800482a:	f240 2074 	movw	r0, #628	; 0x274
 800482e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004832:	f7fe ffa4 	bl	800377e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004836:	f107 011f 	add.w	r1, r7, #31
 800483a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800483e:	2201      	movs	r2, #1
 8004840:	f240 2074 	movw	r0, #628	; 0x274
 8004844:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004848:	f7fe ff99 	bl	800377e <HAL_UART_Transmit>

    ftoa(Acc_z, buffer, 2);
 800484c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800484e:	f7fb fdeb 	bl	8000428 <__aeabi_f2d>
 8004852:	f107 0220 	add.w	r2, r7, #32
 8004856:	2302      	movs	r3, #2
 8004858:	f7ff fc40 	bl	80040dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 800485c:	f107 0120 	add.w	r1, r7, #32
 8004860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004864:	2205      	movs	r2, #5
 8004866:	f240 2074 	movw	r0, #628	; 0x274
 800486a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800486e:	f7fe ff86 	bl	800377e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004872:	f107 011f 	add.w	r1, r7, #31
 8004876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800487a:	2201      	movs	r2, #1
 800487c:	f240 2074 	movw	r0, #628	; 0x274
 8004880:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004884:	f7fe ff7b 	bl	800377e <HAL_UART_Transmit>

    ftoa(Gyro_x, buffer, 2);
 8004888:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800488a:	f7fb fdcd 	bl	8000428 <__aeabi_f2d>
 800488e:	f107 0220 	add.w	r2, r7, #32
 8004892:	2302      	movs	r3, #2
 8004894:	f7ff fc22 	bl	80040dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004898:	f107 0120 	add.w	r1, r7, #32
 800489c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048a0:	2205      	movs	r2, #5
 80048a2:	f240 2074 	movw	r0, #628	; 0x274
 80048a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80048aa:	f7fe ff68 	bl	800377e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 80048ae:	f107 011f 	add.w	r1, r7, #31
 80048b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b6:	2201      	movs	r2, #1
 80048b8:	f240 2074 	movw	r0, #628	; 0x274
 80048bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80048c0:	f7fe ff5d 	bl	800377e <HAL_UART_Transmit>

    ftoa(Gyro_y, buffer, 2);
 80048c4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80048c6:	f7fb fdaf 	bl	8000428 <__aeabi_f2d>
 80048ca:	f107 0220 	add.w	r2, r7, #32
 80048ce:	2302      	movs	r3, #2
 80048d0:	f7ff fc04 	bl	80040dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 80048d4:	f107 0120 	add.w	r1, r7, #32
 80048d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048dc:	2205      	movs	r2, #5
 80048de:	f240 2074 	movw	r0, #628	; 0x274
 80048e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80048e6:	f7fe ff4a 	bl	800377e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 80048ea:	f107 011f 	add.w	r1, r7, #31
 80048ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048f2:	2201      	movs	r2, #1
 80048f4:	f240 2074 	movw	r0, #628	; 0x274
 80048f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80048fc:	f7fe ff3f 	bl	800377e <HAL_UART_Transmit>

    ftoa(Gyro_z, buffer, 2);
 8004900:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004902:	f7fb fd91 	bl	8000428 <__aeabi_f2d>
 8004906:	f107 0220 	add.w	r2, r7, #32
 800490a:	2302      	movs	r3, #2
 800490c:	f7ff fbe6 	bl	80040dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004910:	f107 0120 	add.w	r1, r7, #32
 8004914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004918:	2205      	movs	r2, #5
 800491a:	f240 2074 	movw	r0, #628	; 0x274
 800491e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004922:	f7fe ff2c 	bl	800377e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
 8004926:	f107 011e 	add.w	r1, r7, #30
 800492a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800492e:	2201      	movs	r2, #1
 8004930:	f240 2074 	movw	r0, #628	; 0x274
 8004934:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004938:	f7fe ff21 	bl	800377e <HAL_UART_Transmit>
}
 800493c:	bf00      	nop
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	377c      	adds	r7, #124	; 0x7c
 8004942:	46bd      	mov	sp, r7
 8004944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800494e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004952:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	619a      	str	r2, [r3, #24]
 8004966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004986:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800498a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800498e:	61da      	str	r2, [r3, #28]
 8004990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004994:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80049a2:	2300      	movs	r3, #0
 80049a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	2300      	movs	r3, #0
 80049be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 0310 	add.w	r3, r7, #16
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80049ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d138      	bne.n	8004a68 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a08:	f042 0208 	orr.w	r2, r2, #8
 8004a0c:	619a      	str	r2, [r3, #24]
 8004a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a20:	23c0      	movs	r3, #192	; 0xc0
 8004a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a24:	2312      	movs	r3, #18
 8004a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	4619      	mov	r1, r3
 8004a32:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004a36:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004a3a:	f7fc fc50 	bl	80012de <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a50:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004a54:	61da      	str	r2, [r3, #28]
 8004a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a68:	bf00      	nop
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004a80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d114      	bne.n	8004ab2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ada:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d149      	bne.n	8004b76 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af8:	619a      	str	r2, [r3, #24]
 8004afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004afe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b1e:	f042 0204 	orr.w	r2, r2, #4
 8004b22:	619a      	str	r2, [r3, #24]
 8004b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b40:	2303      	movs	r3, #3
 8004b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b44:	f107 0310 	add.w	r3, r7, #16
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b4e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004b52:	f7fc fbc4 	bl	80012de <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b64:	f107 0310 	add.w	r3, r7, #16
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b6e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004b72:	f7fc fbb4 	bl	80012de <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b76:	bf00      	nop
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b8e:	e7fe      	b.n	8004b8e <HardFault_Handler+0x4>

08004b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b94:	e7fe      	b.n	8004b94 <MemManage_Handler+0x4>

08004b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b9a:	e7fe      	b.n	8004b9a <BusFault_Handler+0x4>

08004b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ba0:	e7fe      	b.n	8004ba0 <UsageFault_Handler+0x4>

08004ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr

08004bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bca:	f7fc fa77 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004bda:	f240 13fc 	movw	r3, #508	; 0x1fc
 8004bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <_sbrk+0x28>
		heap_end = &end;
 8004be8:	f240 13fc 	movw	r3, #508	; 0x1fc
 8004bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bf0:	f240 3208 	movw	r2, #776	; 0x308
 8004bf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004bf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004bfa:	f240 13fc 	movw	r3, #508	; 0x1fc
 8004bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c06:	f240 13fc 	movw	r3, #508	; 0x1fc
 8004c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	466a      	mov	r2, sp
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d907      	bls.n	8004c2a <_sbrk+0x58>
	{
		errno = ENOMEM;
 8004c1a:	f000 fc01 	bl	8005420 <__errno>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	230c      	movs	r3, #12
 8004c22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e00c      	b.n	8004c44 <_sbrk+0x72>
	}

	heap_end += incr;
 8004c2a:	f240 13fc 	movw	r3, #508	; 0x1fc
 8004c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	441a      	add	r2, r3
 8004c38:	f240 13fc 	movw	r3, #508	; 0x1fc
 8004c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c40:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8004c80:	400b      	ands	r3, r1
 8004c82:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c96:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cca:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004cce:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cd8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004cdc:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004cde:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004ce2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cea:	609a      	str	r2, [r3, #8]
#endif 
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004cf4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004cf6:	e003      	b.n	8004d00 <LoopCopyDataInit>

08004cf8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004cfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004cfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004cfe:	3104      	adds	r1, #4

08004d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004d00:	480a      	ldr	r0, [pc, #40]	; (8004d2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004d04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004d06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004d08:	d3f6      	bcc.n	8004cf8 <CopyDataInit>
  ldr r2, =_sbss
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004d0c:	e002      	b.n	8004d14 <LoopFillZerobss>

08004d0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004d0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004d10:	f842 3b04 	str.w	r3, [r2], #4

08004d14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004d16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004d18:	d3f9      	bcc.n	8004d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d1a:	f7ff ff97 	bl	8004c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d1e:	f000 fb85 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d22:	f7fe ffed 	bl	8003d00 <main>
  bx lr
 8004d26:	4770      	bx	lr
  ldr r3, =_sidata
 8004d28:	080071f0 	.word	0x080071f0
  ldr r0, =_sdata
 8004d2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004d30:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8004d34:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8004d38:	20000304 	.word	0x20000304

08004d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d3c:	e7fe      	b.n	8004d3c <ADC1_2_IRQHandler>
	...

08004d40 <atan>:
 8004d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	4bb6      	ldr	r3, [pc, #728]	; (8005020 <atan+0x2e0>)
 8004d46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	460d      	mov	r5, r1
 8004d50:	468b      	mov	fp, r1
 8004d52:	dd17      	ble.n	8004d84 <atan+0x44>
 8004d54:	4bb3      	ldr	r3, [pc, #716]	; (8005024 <atan+0x2e4>)
 8004d56:	429e      	cmp	r6, r3
 8004d58:	dc01      	bgt.n	8004d5e <atan+0x1e>
 8004d5a:	d109      	bne.n	8004d70 <atan+0x30>
 8004d5c:	b140      	cbz	r0, 8004d70 <atan+0x30>
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	4620      	mov	r0, r4
 8004d64:	4629      	mov	r1, r5
 8004d66:	f7fb fa01 	bl	800016c <__adddf3>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	e005      	b.n	8004d7c <atan+0x3c>
 8004d70:	f1bb 0f00 	cmp.w	fp, #0
 8004d74:	4cac      	ldr	r4, [pc, #688]	; (8005028 <atan+0x2e8>)
 8004d76:	f340 8121 	ble.w	8004fbc <atan+0x27c>
 8004d7a:	4dac      	ldr	r5, [pc, #688]	; (800502c <atan+0x2ec>)
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d84:	4baa      	ldr	r3, [pc, #680]	; (8005030 <atan+0x2f0>)
 8004d86:	429e      	cmp	r6, r3
 8004d88:	dc11      	bgt.n	8004dae <atan+0x6e>
 8004d8a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004d8e:	429e      	cmp	r6, r3
 8004d90:	dc0a      	bgt.n	8004da8 <atan+0x68>
 8004d92:	a38b      	add	r3, pc, #556	; (adr r3, 8004fc0 <atan+0x280>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f7fb f9e8 	bl	800016c <__adddf3>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4ba5      	ldr	r3, [pc, #660]	; (8005034 <atan+0x2f4>)
 8004da0:	f7fb fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d1e9      	bne.n	8004d7c <atan+0x3c>
 8004da8:	f04f 3aff 	mov.w	sl, #4294967295
 8004dac:	e027      	b.n	8004dfe <atan+0xbe>
 8004dae:	f000 f951 	bl	8005054 <fabs>
 8004db2:	4ba1      	ldr	r3, [pc, #644]	; (8005038 <atan+0x2f8>)
 8004db4:	4604      	mov	r4, r0
 8004db6:	429e      	cmp	r6, r3
 8004db8:	460d      	mov	r5, r1
 8004dba:	f300 80b8 	bgt.w	8004f2e <atan+0x1ee>
 8004dbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004dc2:	429e      	cmp	r6, r3
 8004dc4:	f300 809c 	bgt.w	8004f00 <atan+0x1c0>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f7fb f9ce 	bl	800016c <__adddf3>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4b98      	ldr	r3, [pc, #608]	; (8005034 <atan+0x2f4>)
 8004dd4:	f7fb f9c8 	bl	8000168 <__aeabi_dsub>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460f      	mov	r7, r1
 8004dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb f9c1 	bl	800016c <__adddf3>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4630      	mov	r0, r6
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fc9b 	bl	800072c <__aeabi_ddiv>
 8004df6:	f04f 0a00 	mov.w	sl, #0
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	462b      	mov	r3, r5
 8004e02:	4620      	mov	r0, r4
 8004e04:	4629      	mov	r1, r5
 8004e06:	f7fb fb67 	bl	80004d8 <__aeabi_dmul>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4680      	mov	r8, r0
 8004e10:	4689      	mov	r9, r1
 8004e12:	f7fb fb61 	bl	80004d8 <__aeabi_dmul>
 8004e16:	a36c      	add	r3, pc, #432	; (adr r3, 8004fc8 <atan+0x288>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	460f      	mov	r7, r1
 8004e20:	f7fb fb5a 	bl	80004d8 <__aeabi_dmul>
 8004e24:	a36a      	add	r3, pc, #424	; (adr r3, 8004fd0 <atan+0x290>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb f99f 	bl	800016c <__adddf3>
 8004e2e:	4632      	mov	r2, r6
 8004e30:	463b      	mov	r3, r7
 8004e32:	f7fb fb51 	bl	80004d8 <__aeabi_dmul>
 8004e36:	a368      	add	r3, pc, #416	; (adr r3, 8004fd8 <atan+0x298>)
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	f7fb f996 	bl	800016c <__adddf3>
 8004e40:	4632      	mov	r2, r6
 8004e42:	463b      	mov	r3, r7
 8004e44:	f7fb fb48 	bl	80004d8 <__aeabi_dmul>
 8004e48:	a365      	add	r3, pc, #404	; (adr r3, 8004fe0 <atan+0x2a0>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb f98d 	bl	800016c <__adddf3>
 8004e52:	4632      	mov	r2, r6
 8004e54:	463b      	mov	r3, r7
 8004e56:	f7fb fb3f 	bl	80004d8 <__aeabi_dmul>
 8004e5a:	a363      	add	r3, pc, #396	; (adr r3, 8004fe8 <atan+0x2a8>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f7fb f984 	bl	800016c <__adddf3>
 8004e64:	4632      	mov	r2, r6
 8004e66:	463b      	mov	r3, r7
 8004e68:	f7fb fb36 	bl	80004d8 <__aeabi_dmul>
 8004e6c:	a360      	add	r3, pc, #384	; (adr r3, 8004ff0 <atan+0x2b0>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb f97b 	bl	800016c <__adddf3>
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	f7fb fb2d 	bl	80004d8 <__aeabi_dmul>
 8004e7e:	a35e      	add	r3, pc, #376	; (adr r3, 8004ff8 <atan+0x2b8>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	4680      	mov	r8, r0
 8004e86:	4689      	mov	r9, r1
 8004e88:	4630      	mov	r0, r6
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	f7fb fb24 	bl	80004d8 <__aeabi_dmul>
 8004e90:	a35b      	add	r3, pc, #364	; (adr r3, 8005000 <atan+0x2c0>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb f967 	bl	8000168 <__aeabi_dsub>
 8004e9a:	4632      	mov	r2, r6
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	f7fb fb1b 	bl	80004d8 <__aeabi_dmul>
 8004ea2:	a359      	add	r3, pc, #356	; (adr r3, 8005008 <atan+0x2c8>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f7fb f95e 	bl	8000168 <__aeabi_dsub>
 8004eac:	4632      	mov	r2, r6
 8004eae:	463b      	mov	r3, r7
 8004eb0:	f7fb fb12 	bl	80004d8 <__aeabi_dmul>
 8004eb4:	a356      	add	r3, pc, #344	; (adr r3, 8005010 <atan+0x2d0>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb f955 	bl	8000168 <__aeabi_dsub>
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	f7fb fb09 	bl	80004d8 <__aeabi_dmul>
 8004ec6:	a354      	add	r3, pc, #336	; (adr r3, 8005018 <atan+0x2d8>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb f94c 	bl	8000168 <__aeabi_dsub>
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	f7fb fb00 	bl	80004d8 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	f7fb f944 	bl	800016c <__adddf3>
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	f7fb faf6 	bl	80004d8 <__aeabi_dmul>
 8004eec:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	d144      	bne.n	8004f80 <atan+0x240>
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f7fb f935 	bl	8000168 <__aeabi_dsub>
 8004efe:	e734      	b.n	8004d6a <atan+0x2a>
 8004f00:	2200      	movs	r2, #0
 8004f02:	4b4c      	ldr	r3, [pc, #304]	; (8005034 <atan+0x2f4>)
 8004f04:	f7fb f930 	bl	8000168 <__aeabi_dsub>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460f      	mov	r7, r1
 8004f0e:	4b49      	ldr	r3, [pc, #292]	; (8005034 <atan+0x2f4>)
 8004f10:	4620      	mov	r0, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	f7fb f92a 	bl	800016c <__adddf3>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	4639      	mov	r1, r7
 8004f20:	f7fb fc04 	bl	800072c <__aeabi_ddiv>
 8004f24:	f04f 0a01 	mov.w	sl, #1
 8004f28:	4604      	mov	r4, r0
 8004f2a:	460d      	mov	r5, r1
 8004f2c:	e767      	b.n	8004dfe <atan+0xbe>
 8004f2e:	4b43      	ldr	r3, [pc, #268]	; (800503c <atan+0x2fc>)
 8004f30:	429e      	cmp	r6, r3
 8004f32:	dc1a      	bgt.n	8004f6a <atan+0x22a>
 8004f34:	2200      	movs	r2, #0
 8004f36:	4b42      	ldr	r3, [pc, #264]	; (8005040 <atan+0x300>)
 8004f38:	f7fb f916 	bl	8000168 <__aeabi_dsub>
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4606      	mov	r6, r0
 8004f40:	460f      	mov	r7, r1
 8004f42:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <atan+0x300>)
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb fac6 	bl	80004d8 <__aeabi_dmul>
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <atan+0x2f4>)
 8004f50:	f7fb f90c 	bl	800016c <__adddf3>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fbe6 	bl	800072c <__aeabi_ddiv>
 8004f60:	f04f 0a02 	mov.w	sl, #2
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	e749      	b.n	8004dfe <atan+0xbe>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	2000      	movs	r0, #0
 8004f70:	4934      	ldr	r1, [pc, #208]	; (8005044 <atan+0x304>)
 8004f72:	f7fb fbdb 	bl	800072c <__aeabi_ddiv>
 8004f76:	f04f 0a03 	mov.w	sl, #3
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	e73e      	b.n	8004dfe <atan+0xbe>
 8004f80:	4b31      	ldr	r3, [pc, #196]	; (8005048 <atan+0x308>)
 8004f82:	4e32      	ldr	r6, [pc, #200]	; (800504c <atan+0x30c>)
 8004f84:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004f88:	4456      	add	r6, sl
 8004f8a:	449a      	add	sl, r3
 8004f8c:	e9da 2300 	ldrd	r2, r3, [sl]
 8004f90:	f7fb f8ea 	bl	8000168 <__aeabi_dsub>
 8004f94:	4622      	mov	r2, r4
 8004f96:	462b      	mov	r3, r5
 8004f98:	f7fb f8e6 	bl	8000168 <__aeabi_dsub>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004fa4:	f7fb f8e0 	bl	8000168 <__aeabi_dsub>
 8004fa8:	f1bb 0f00 	cmp.w	fp, #0
 8004fac:	4604      	mov	r4, r0
 8004fae:	460d      	mov	r5, r1
 8004fb0:	f6bf aee4 	bge.w	8004d7c <atan+0x3c>
 8004fb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fb8:	461d      	mov	r5, r3
 8004fba:	e6df      	b.n	8004d7c <atan+0x3c>
 8004fbc:	4d24      	ldr	r5, [pc, #144]	; (8005050 <atan+0x310>)
 8004fbe:	e6dd      	b.n	8004d7c <atan+0x3c>
 8004fc0:	8800759c 	.word	0x8800759c
 8004fc4:	7e37e43c 	.word	0x7e37e43c
 8004fc8:	e322da11 	.word	0xe322da11
 8004fcc:	3f90ad3a 	.word	0x3f90ad3a
 8004fd0:	24760deb 	.word	0x24760deb
 8004fd4:	3fa97b4b 	.word	0x3fa97b4b
 8004fd8:	a0d03d51 	.word	0xa0d03d51
 8004fdc:	3fb10d66 	.word	0x3fb10d66
 8004fe0:	c54c206e 	.word	0xc54c206e
 8004fe4:	3fb745cd 	.word	0x3fb745cd
 8004fe8:	920083ff 	.word	0x920083ff
 8004fec:	3fc24924 	.word	0x3fc24924
 8004ff0:	5555550d 	.word	0x5555550d
 8004ff4:	3fd55555 	.word	0x3fd55555
 8004ff8:	2c6a6c2f 	.word	0x2c6a6c2f
 8004ffc:	bfa2b444 	.word	0xbfa2b444
 8005000:	52defd9a 	.word	0x52defd9a
 8005004:	3fadde2d 	.word	0x3fadde2d
 8005008:	af749a6d 	.word	0xaf749a6d
 800500c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005010:	fe231671 	.word	0xfe231671
 8005014:	3fbc71c6 	.word	0x3fbc71c6
 8005018:	9998ebc4 	.word	0x9998ebc4
 800501c:	3fc99999 	.word	0x3fc99999
 8005020:	440fffff 	.word	0x440fffff
 8005024:	7ff00000 	.word	0x7ff00000
 8005028:	54442d18 	.word	0x54442d18
 800502c:	3ff921fb 	.word	0x3ff921fb
 8005030:	3fdbffff 	.word	0x3fdbffff
 8005034:	3ff00000 	.word	0x3ff00000
 8005038:	3ff2ffff 	.word	0x3ff2ffff
 800503c:	40037fff 	.word	0x40037fff
 8005040:	3ff80000 	.word	0x3ff80000
 8005044:	bff00000 	.word	0xbff00000
 8005048:	08006f98 	.word	0x08006f98
 800504c:	08006f78 	.word	0x08006f78
 8005050:	bff921fb 	.word	0xbff921fb

08005054 <fabs>:
 8005054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005058:	4619      	mov	r1, r3
 800505a:	4770      	bx	lr

0800505c <atan2>:
 800505c:	f000 b854 	b.w	8005108 <__ieee754_atan2>

08005060 <sqrt>:
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	b08b      	sub	sp, #44	; 0x2c
 8005066:	4604      	mov	r4, r0
 8005068:	460d      	mov	r5, r1
 800506a:	f000 f92b 	bl	80052c4 <__ieee754_sqrt>
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <sqrt+0xa0>)
 8005070:	4680      	mov	r8, r0
 8005072:	f993 a000 	ldrsb.w	sl, [r3]
 8005076:	4689      	mov	r9, r1
 8005078:	f1ba 3fff 	cmp.w	sl, #4294967295
 800507c:	d02b      	beq.n	80050d6 <sqrt+0x76>
 800507e:	4622      	mov	r2, r4
 8005080:	462b      	mov	r3, r5
 8005082:	4620      	mov	r0, r4
 8005084:	4629      	mov	r1, r5
 8005086:	f7fb fcc1 	bl	8000a0c <__aeabi_dcmpun>
 800508a:	4683      	mov	fp, r0
 800508c:	bb18      	cbnz	r0, 80050d6 <sqrt+0x76>
 800508e:	2600      	movs	r6, #0
 8005090:	2700      	movs	r7, #0
 8005092:	4632      	mov	r2, r6
 8005094:	463b      	mov	r3, r7
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb fc8f 	bl	80009bc <__aeabi_dcmplt>
 800509e:	b1d0      	cbz	r0, 80050d6 <sqrt+0x76>
 80050a0:	2301      	movs	r3, #1
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4b17      	ldr	r3, [pc, #92]	; (8005104 <sqrt+0xa4>)
 80050a6:	f8cd b020 	str.w	fp, [sp, #32]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80050b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80050b4:	f1ba 0f00 	cmp.w	sl, #0
 80050b8:	d112      	bne.n	80050e0 <sqrt+0x80>
 80050ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80050be:	4668      	mov	r0, sp
 80050c0:	f000 f9ac 	bl	800541c <matherr>
 80050c4:	b1b8      	cbz	r0, 80050f6 <sqrt+0x96>
 80050c6:	9b08      	ldr	r3, [sp, #32]
 80050c8:	b11b      	cbz	r3, 80050d2 <sqrt+0x72>
 80050ca:	f000 f9a9 	bl	8005420 <__errno>
 80050ce:	9b08      	ldr	r3, [sp, #32]
 80050d0:	6003      	str	r3, [r0, #0]
 80050d2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80050d6:	4640      	mov	r0, r8
 80050d8:	4649      	mov	r1, r9
 80050da:	b00b      	add	sp, #44	; 0x2c
 80050dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e0:	4632      	mov	r2, r6
 80050e2:	463b      	mov	r3, r7
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb fb20 	bl	800072c <__aeabi_ddiv>
 80050ec:	f1ba 0f02 	cmp.w	sl, #2
 80050f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050f4:	d1e3      	bne.n	80050be <sqrt+0x5e>
 80050f6:	f000 f993 	bl	8005420 <__errno>
 80050fa:	2321      	movs	r3, #33	; 0x21
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	e7e2      	b.n	80050c6 <sqrt+0x66>
 8005100:	2000000c 	.word	0x2000000c
 8005104:	08006fb8 	.word	0x08006fb8

08005108 <__ieee754_atan2>:
 8005108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	4256      	negs	r6, r2
 800510e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8005112:	4316      	orrs	r6, r2
 8005114:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80052c0 <__ieee754_atan2+0x1b8>
 8005118:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800511c:	454e      	cmp	r6, r9
 800511e:	4604      	mov	r4, r0
 8005120:	460d      	mov	r5, r1
 8005122:	469e      	mov	lr, r3
 8005124:	d808      	bhi.n	8005138 <__ieee754_atan2+0x30>
 8005126:	4246      	negs	r6, r0
 8005128:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800512c:	4306      	orrs	r6, r0
 800512e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8005132:	454e      	cmp	r6, r9
 8005134:	4688      	mov	r8, r1
 8005136:	d906      	bls.n	8005146 <__ieee754_atan2+0x3e>
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb f816 	bl	800016c <__adddf3>
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
 8005144:	e030      	b.n	80051a8 <__ieee754_atan2+0xa0>
 8005146:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800514a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800514e:	4316      	orrs	r6, r2
 8005150:	d103      	bne.n	800515a <__ieee754_atan2+0x52>
 8005152:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005156:	f7ff bdf3 	b.w	8004d40 <atan>
 800515a:	179e      	asrs	r6, r3, #30
 800515c:	f006 0602 	and.w	r6, r6, #2
 8005160:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005164:	ea57 0100 	orrs.w	r1, r7, r0
 8005168:	d107      	bne.n	800517a <__ieee754_atan2+0x72>
 800516a:	2e02      	cmp	r6, #2
 800516c:	d079      	beq.n	8005262 <__ieee754_atan2+0x15a>
 800516e:	2e03      	cmp	r6, #3
 8005170:	d11a      	bne.n	80051a8 <__ieee754_atan2+0xa0>
 8005172:	a541      	add	r5, pc, #260	; (adr r5, 8005278 <__ieee754_atan2+0x170>)
 8005174:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005178:	e016      	b.n	80051a8 <__ieee754_atan2+0xa0>
 800517a:	ea5c 0102 	orrs.w	r1, ip, r2
 800517e:	d106      	bne.n	800518e <__ieee754_atan2+0x86>
 8005180:	f1b8 0f00 	cmp.w	r8, #0
 8005184:	da71      	bge.n	800526a <__ieee754_atan2+0x162>
 8005186:	a53e      	add	r5, pc, #248	; (adr r5, 8005280 <__ieee754_atan2+0x178>)
 8005188:	e9d5 4500 	ldrd	r4, r5, [r5]
 800518c:	e00c      	b.n	80051a8 <__ieee754_atan2+0xa0>
 800518e:	45cc      	cmp	ip, r9
 8005190:	d123      	bne.n	80051da <__ieee754_atan2+0xd2>
 8005192:	4567      	cmp	r7, ip
 8005194:	d114      	bne.n	80051c0 <__ieee754_atan2+0xb8>
 8005196:	2e02      	cmp	r6, #2
 8005198:	d00a      	beq.n	80051b0 <__ieee754_atan2+0xa8>
 800519a:	2e03      	cmp	r6, #3
 800519c:	d00c      	beq.n	80051b8 <__ieee754_atan2+0xb0>
 800519e:	2e01      	cmp	r6, #1
 80051a0:	d15b      	bne.n	800525a <__ieee754_atan2+0x152>
 80051a2:	a539      	add	r5, pc, #228	; (adr r5, 8005288 <__ieee754_atan2+0x180>)
 80051a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	a537      	add	r5, pc, #220	; (adr r5, 8005290 <__ieee754_atan2+0x188>)
 80051b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80051b6:	e7f7      	b.n	80051a8 <__ieee754_atan2+0xa0>
 80051b8:	a537      	add	r5, pc, #220	; (adr r5, 8005298 <__ieee754_atan2+0x190>)
 80051ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80051be:	e7f3      	b.n	80051a8 <__ieee754_atan2+0xa0>
 80051c0:	2e02      	cmp	r6, #2
 80051c2:	d04e      	beq.n	8005262 <__ieee754_atan2+0x15a>
 80051c4:	2e03      	cmp	r6, #3
 80051c6:	d0d4      	beq.n	8005172 <__ieee754_atan2+0x6a>
 80051c8:	2e01      	cmp	r6, #1
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	d102      	bne.n	80051d6 <__ieee754_atan2+0xce>
 80051d0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80051d4:	e7e8      	b.n	80051a8 <__ieee754_atan2+0xa0>
 80051d6:	2500      	movs	r5, #0
 80051d8:	e7e6      	b.n	80051a8 <__ieee754_atan2+0xa0>
 80051da:	454f      	cmp	r7, r9
 80051dc:	d0d0      	beq.n	8005180 <__ieee754_atan2+0x78>
 80051de:	eba7 070c 	sub.w	r7, r7, ip
 80051e2:	153f      	asrs	r7, r7, #20
 80051e4:	2f3c      	cmp	r7, #60	; 0x3c
 80051e6:	dc1e      	bgt.n	8005226 <__ieee754_atan2+0x11e>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	da01      	bge.n	80051f0 <__ieee754_atan2+0xe8>
 80051ec:	373c      	adds	r7, #60	; 0x3c
 80051ee:	db1e      	blt.n	800522e <__ieee754_atan2+0x126>
 80051f0:	4620      	mov	r0, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	f7fb fa9a 	bl	800072c <__aeabi_ddiv>
 80051f8:	f7ff ff2c 	bl	8005054 <fabs>
 80051fc:	f7ff fda0 	bl	8004d40 <atan>
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	2e01      	cmp	r6, #1
 8005206:	d015      	beq.n	8005234 <__ieee754_atan2+0x12c>
 8005208:	2e02      	cmp	r6, #2
 800520a:	d017      	beq.n	800523c <__ieee754_atan2+0x134>
 800520c:	2e00      	cmp	r6, #0
 800520e:	d0cb      	beq.n	80051a8 <__ieee754_atan2+0xa0>
 8005210:	a323      	add	r3, pc, #140	; (adr r3, 80052a0 <__ieee754_atan2+0x198>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fa ffa5 	bl	8000168 <__aeabi_dsub>
 800521e:	a322      	add	r3, pc, #136	; (adr r3, 80052a8 <__ieee754_atan2+0x1a0>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	e016      	b.n	8005254 <__ieee754_atan2+0x14c>
 8005226:	a522      	add	r5, pc, #136	; (adr r5, 80052b0 <__ieee754_atan2+0x1a8>)
 8005228:	e9d5 4500 	ldrd	r4, r5, [r5]
 800522c:	e7ea      	b.n	8005204 <__ieee754_atan2+0xfc>
 800522e:	2400      	movs	r4, #0
 8005230:	2500      	movs	r5, #0
 8005232:	e7e7      	b.n	8005204 <__ieee754_atan2+0xfc>
 8005234:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005238:	461d      	mov	r5, r3
 800523a:	e7b5      	b.n	80051a8 <__ieee754_atan2+0xa0>
 800523c:	a318      	add	r3, pc, #96	; (adr r3, 80052a0 <__ieee754_atan2+0x198>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	4620      	mov	r0, r4
 8005244:	4629      	mov	r1, r5
 8005246:	f7fa ff8f 	bl	8000168 <__aeabi_dsub>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	a116      	add	r1, pc, #88	; (adr r1, 80052a8 <__ieee754_atan2+0x1a0>)
 8005250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005254:	f7fa ff88 	bl	8000168 <__aeabi_dsub>
 8005258:	e772      	b.n	8005140 <__ieee754_atan2+0x38>
 800525a:	a517      	add	r5, pc, #92	; (adr r5, 80052b8 <__ieee754_atan2+0x1b0>)
 800525c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005260:	e7a2      	b.n	80051a8 <__ieee754_atan2+0xa0>
 8005262:	a511      	add	r5, pc, #68	; (adr r5, 80052a8 <__ieee754_atan2+0x1a0>)
 8005264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005268:	e79e      	b.n	80051a8 <__ieee754_atan2+0xa0>
 800526a:	a511      	add	r5, pc, #68	; (adr r5, 80052b0 <__ieee754_atan2+0x1a8>)
 800526c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005270:	e79a      	b.n	80051a8 <__ieee754_atan2+0xa0>
 8005272:	bf00      	nop
 8005274:	f3af 8000 	nop.w
 8005278:	54442d18 	.word	0x54442d18
 800527c:	c00921fb 	.word	0xc00921fb
 8005280:	54442d18 	.word	0x54442d18
 8005284:	bff921fb 	.word	0xbff921fb
 8005288:	54442d18 	.word	0x54442d18
 800528c:	bfe921fb 	.word	0xbfe921fb
 8005290:	7f3321d2 	.word	0x7f3321d2
 8005294:	4002d97c 	.word	0x4002d97c
 8005298:	7f3321d2 	.word	0x7f3321d2
 800529c:	c002d97c 	.word	0xc002d97c
 80052a0:	33145c07 	.word	0x33145c07
 80052a4:	3ca1a626 	.word	0x3ca1a626
 80052a8:	54442d18 	.word	0x54442d18
 80052ac:	400921fb 	.word	0x400921fb
 80052b0:	54442d18 	.word	0x54442d18
 80052b4:	3ff921fb 	.word	0x3ff921fb
 80052b8:	54442d18 	.word	0x54442d18
 80052bc:	3fe921fb 	.word	0x3fe921fb
 80052c0:	7ff00000 	.word	0x7ff00000

080052c4 <__ieee754_sqrt>:
 80052c4:	4b54      	ldr	r3, [pc, #336]	; (8005418 <__ieee754_sqrt+0x154>)
 80052c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ca:	438b      	bics	r3, r1
 80052cc:	4606      	mov	r6, r0
 80052ce:	460d      	mov	r5, r1
 80052d0:	460a      	mov	r2, r1
 80052d2:	460c      	mov	r4, r1
 80052d4:	d10f      	bne.n	80052f6 <__ieee754_sqrt+0x32>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	f7fb f8fd 	bl	80004d8 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4630      	mov	r0, r6
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ff41 	bl	800016c <__adddf3>
 80052ea:	4606      	mov	r6, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	4630      	mov	r0, r6
 80052f0:	4629      	mov	r1, r5
 80052f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f6:	2900      	cmp	r1, #0
 80052f8:	4607      	mov	r7, r0
 80052fa:	4603      	mov	r3, r0
 80052fc:	dc0e      	bgt.n	800531c <__ieee754_sqrt+0x58>
 80052fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005302:	ea5c 0707 	orrs.w	r7, ip, r7
 8005306:	d0f2      	beq.n	80052ee <__ieee754_sqrt+0x2a>
 8005308:	b141      	cbz	r1, 800531c <__ieee754_sqrt+0x58>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	f7fa ff2b 	bl	8000168 <__aeabi_dsub>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	f7fb fa09 	bl	800072c <__aeabi_ddiv>
 800531a:	e7e6      	b.n	80052ea <__ieee754_sqrt+0x26>
 800531c:	1512      	asrs	r2, r2, #20
 800531e:	d074      	beq.n	800540a <__ieee754_sqrt+0x146>
 8005320:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005324:	07d5      	lsls	r5, r2, #31
 8005326:	f04f 0500 	mov.w	r5, #0
 800532a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800532e:	bf48      	it	mi
 8005330:	0fd9      	lsrmi	r1, r3, #31
 8005332:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005336:	bf44      	itt	mi
 8005338:	005b      	lslmi	r3, r3, #1
 800533a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800533e:	1051      	asrs	r1, r2, #1
 8005340:	0fda      	lsrs	r2, r3, #31
 8005342:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005346:	4628      	mov	r0, r5
 8005348:	2216      	movs	r2, #22
 800534a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	1987      	adds	r7, r0, r6
 8005352:	42a7      	cmp	r7, r4
 8005354:	bfde      	ittt	le
 8005356:	19b8      	addle	r0, r7, r6
 8005358:	1be4      	suble	r4, r4, r7
 800535a:	19ad      	addle	r5, r5, r6
 800535c:	0fdf      	lsrs	r7, r3, #31
 800535e:	3a01      	subs	r2, #1
 8005360:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005364:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005368:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800536c:	d1f0      	bne.n	8005350 <__ieee754_sqrt+0x8c>
 800536e:	f04f 0c20 	mov.w	ip, #32
 8005372:	4696      	mov	lr, r2
 8005374:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005378:	4284      	cmp	r4, r0
 800537a:	eb06 070e 	add.w	r7, r6, lr
 800537e:	dc02      	bgt.n	8005386 <__ieee754_sqrt+0xc2>
 8005380:	d112      	bne.n	80053a8 <__ieee754_sqrt+0xe4>
 8005382:	429f      	cmp	r7, r3
 8005384:	d810      	bhi.n	80053a8 <__ieee754_sqrt+0xe4>
 8005386:	2f00      	cmp	r7, #0
 8005388:	eb07 0e06 	add.w	lr, r7, r6
 800538c:	da42      	bge.n	8005414 <__ieee754_sqrt+0x150>
 800538e:	f1be 0f00 	cmp.w	lr, #0
 8005392:	db3f      	blt.n	8005414 <__ieee754_sqrt+0x150>
 8005394:	f100 0801 	add.w	r8, r0, #1
 8005398:	1a24      	subs	r4, r4, r0
 800539a:	4640      	mov	r0, r8
 800539c:	429f      	cmp	r7, r3
 800539e:	bf88      	it	hi
 80053a0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80053a4:	1bdb      	subs	r3, r3, r7
 80053a6:	4432      	add	r2, r6
 80053a8:	0064      	lsls	r4, r4, #1
 80053aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80053ae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80053b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80053b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053ba:	d1dd      	bne.n	8005378 <__ieee754_sqrt+0xb4>
 80053bc:	4323      	orrs	r3, r4
 80053be:	d006      	beq.n	80053ce <__ieee754_sqrt+0x10a>
 80053c0:	1c54      	adds	r4, r2, #1
 80053c2:	bf0b      	itete	eq
 80053c4:	4662      	moveq	r2, ip
 80053c6:	3201      	addne	r2, #1
 80053c8:	3501      	addeq	r5, #1
 80053ca:	f022 0201 	bicne.w	r2, r2, #1
 80053ce:	106b      	asrs	r3, r5, #1
 80053d0:	0852      	lsrs	r2, r2, #1
 80053d2:	07e8      	lsls	r0, r5, #31
 80053d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80053d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80053dc:	bf48      	it	mi
 80053de:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80053e2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80053e6:	4616      	mov	r6, r2
 80053e8:	e781      	b.n	80052ee <__ieee754_sqrt+0x2a>
 80053ea:	0adc      	lsrs	r4, r3, #11
 80053ec:	3915      	subs	r1, #21
 80053ee:	055b      	lsls	r3, r3, #21
 80053f0:	2c00      	cmp	r4, #0
 80053f2:	d0fa      	beq.n	80053ea <__ieee754_sqrt+0x126>
 80053f4:	02e6      	lsls	r6, r4, #11
 80053f6:	d50a      	bpl.n	800540e <__ieee754_sqrt+0x14a>
 80053f8:	f1c2 0020 	rsb	r0, r2, #32
 80053fc:	fa23 f000 	lsr.w	r0, r3, r0
 8005400:	1e55      	subs	r5, r2, #1
 8005402:	4093      	lsls	r3, r2
 8005404:	4304      	orrs	r4, r0
 8005406:	1b4a      	subs	r2, r1, r5
 8005408:	e78a      	b.n	8005320 <__ieee754_sqrt+0x5c>
 800540a:	4611      	mov	r1, r2
 800540c:	e7f0      	b.n	80053f0 <__ieee754_sqrt+0x12c>
 800540e:	0064      	lsls	r4, r4, #1
 8005410:	3201      	adds	r2, #1
 8005412:	e7ef      	b.n	80053f4 <__ieee754_sqrt+0x130>
 8005414:	4680      	mov	r8, r0
 8005416:	e7bf      	b.n	8005398 <__ieee754_sqrt+0xd4>
 8005418:	7ff00000 	.word	0x7ff00000

0800541c <matherr>:
 800541c:	2000      	movs	r0, #0
 800541e:	4770      	bx	lr

08005420 <__errno>:
 8005420:	4b01      	ldr	r3, [pc, #4]	; (8005428 <__errno+0x8>)
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000010 	.word	0x20000010

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2500      	movs	r5, #0
 8005430:	4e0c      	ldr	r6, [pc, #48]	; (8005464 <__libc_init_array+0x38>)
 8005432:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005434:	1ba4      	subs	r4, r4, r6
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	42a5      	cmp	r5, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	f001 fd3c 	bl	8006eb8 <_init>
 8005440:	2500      	movs	r5, #0
 8005442:	4e0a      	ldr	r6, [pc, #40]	; (800546c <__libc_init_array+0x40>)
 8005444:	4c0a      	ldr	r4, [pc, #40]	; (8005470 <__libc_init_array+0x44>)
 8005446:	1ba4      	subs	r4, r4, r6
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	42a5      	cmp	r5, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005454:	4798      	blx	r3
 8005456:	3501      	adds	r5, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800545e:	4798      	blx	r3
 8005460:	3501      	adds	r5, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	080071e8 	.word	0x080071e8
 8005468:	080071e8 	.word	0x080071e8
 800546c:	080071e8 	.word	0x080071e8
 8005470:	080071ec 	.word	0x080071ec

08005474 <memset>:
 8005474:	4603      	mov	r3, r0
 8005476:	4402      	add	r2, r0
 8005478:	4293      	cmp	r3, r2
 800547a:	d100      	bne.n	800547e <memset+0xa>
 800547c:	4770      	bx	lr
 800547e:	f803 1b01 	strb.w	r1, [r3], #1
 8005482:	e7f9      	b.n	8005478 <memset+0x4>

08005484 <__cvt>:
 8005484:	2b00      	cmp	r3, #0
 8005486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548a:	461e      	mov	r6, r3
 800548c:	bfbb      	ittet	lt
 800548e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005492:	461e      	movlt	r6, r3
 8005494:	2300      	movge	r3, #0
 8005496:	232d      	movlt	r3, #45	; 0x2d
 8005498:	b088      	sub	sp, #32
 800549a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800549c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80054a0:	f027 0720 	bic.w	r7, r7, #32
 80054a4:	2f46      	cmp	r7, #70	; 0x46
 80054a6:	4614      	mov	r4, r2
 80054a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054aa:	700b      	strb	r3, [r1, #0]
 80054ac:	d004      	beq.n	80054b8 <__cvt+0x34>
 80054ae:	2f45      	cmp	r7, #69	; 0x45
 80054b0:	d100      	bne.n	80054b4 <__cvt+0x30>
 80054b2:	3501      	adds	r5, #1
 80054b4:	2302      	movs	r3, #2
 80054b6:	e000      	b.n	80054ba <__cvt+0x36>
 80054b8:	2303      	movs	r3, #3
 80054ba:	aa07      	add	r2, sp, #28
 80054bc:	9204      	str	r2, [sp, #16]
 80054be:	aa06      	add	r2, sp, #24
 80054c0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054c4:	e9cd 3500 	strd	r3, r5, [sp]
 80054c8:	4622      	mov	r2, r4
 80054ca:	4633      	mov	r3, r6
 80054cc:	f000 fba8 	bl	8005c20 <_dtoa_r>
 80054d0:	2f47      	cmp	r7, #71	; 0x47
 80054d2:	4680      	mov	r8, r0
 80054d4:	d102      	bne.n	80054dc <__cvt+0x58>
 80054d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054d8:	07db      	lsls	r3, r3, #31
 80054da:	d526      	bpl.n	800552a <__cvt+0xa6>
 80054dc:	2f46      	cmp	r7, #70	; 0x46
 80054de:	eb08 0905 	add.w	r9, r8, r5
 80054e2:	d111      	bne.n	8005508 <__cvt+0x84>
 80054e4:	f898 3000 	ldrb.w	r3, [r8]
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d10a      	bne.n	8005502 <__cvt+0x7e>
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	4620      	mov	r0, r4
 80054f2:	4631      	mov	r1, r6
 80054f4:	f7fb fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80054f8:	b918      	cbnz	r0, 8005502 <__cvt+0x7e>
 80054fa:	f1c5 0501 	rsb	r5, r5, #1
 80054fe:	f8ca 5000 	str.w	r5, [sl]
 8005502:	f8da 3000 	ldr.w	r3, [sl]
 8005506:	4499      	add	r9, r3
 8005508:	2200      	movs	r2, #0
 800550a:	2300      	movs	r3, #0
 800550c:	4620      	mov	r0, r4
 800550e:	4631      	mov	r1, r6
 8005510:	f7fb fa4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005514:	b938      	cbnz	r0, 8005526 <__cvt+0xa2>
 8005516:	2230      	movs	r2, #48	; 0x30
 8005518:	9b07      	ldr	r3, [sp, #28]
 800551a:	454b      	cmp	r3, r9
 800551c:	d205      	bcs.n	800552a <__cvt+0xa6>
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	9107      	str	r1, [sp, #28]
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e7f8      	b.n	8005518 <__cvt+0x94>
 8005526:	f8cd 901c 	str.w	r9, [sp, #28]
 800552a:	4640      	mov	r0, r8
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005530:	eba3 0308 	sub.w	r3, r3, r8
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	b008      	add	sp, #32
 8005538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800553c <__exponent>:
 800553c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800553e:	2900      	cmp	r1, #0
 8005540:	bfb4      	ite	lt
 8005542:	232d      	movlt	r3, #45	; 0x2d
 8005544:	232b      	movge	r3, #43	; 0x2b
 8005546:	4604      	mov	r4, r0
 8005548:	bfb8      	it	lt
 800554a:	4249      	neglt	r1, r1
 800554c:	2909      	cmp	r1, #9
 800554e:	f804 2b02 	strb.w	r2, [r4], #2
 8005552:	7043      	strb	r3, [r0, #1]
 8005554:	dd21      	ble.n	800559a <__exponent+0x5e>
 8005556:	f10d 0307 	add.w	r3, sp, #7
 800555a:	461f      	mov	r7, r3
 800555c:	260a      	movs	r6, #10
 800555e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005562:	fb06 1115 	mls	r1, r6, r5, r1
 8005566:	2d09      	cmp	r5, #9
 8005568:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800556c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005570:	f103 32ff 	add.w	r2, r3, #4294967295
 8005574:	4629      	mov	r1, r5
 8005576:	dc09      	bgt.n	800558c <__exponent+0x50>
 8005578:	3130      	adds	r1, #48	; 0x30
 800557a:	3b02      	subs	r3, #2
 800557c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005580:	42bb      	cmp	r3, r7
 8005582:	4622      	mov	r2, r4
 8005584:	d304      	bcc.n	8005590 <__exponent+0x54>
 8005586:	1a10      	subs	r0, r2, r0
 8005588:	b003      	add	sp, #12
 800558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558c:	4613      	mov	r3, r2
 800558e:	e7e6      	b.n	800555e <__exponent+0x22>
 8005590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005594:	f804 2b01 	strb.w	r2, [r4], #1
 8005598:	e7f2      	b.n	8005580 <__exponent+0x44>
 800559a:	2330      	movs	r3, #48	; 0x30
 800559c:	4419      	add	r1, r3
 800559e:	7083      	strb	r3, [r0, #2]
 80055a0:	1d02      	adds	r2, r0, #4
 80055a2:	70c1      	strb	r1, [r0, #3]
 80055a4:	e7ef      	b.n	8005586 <__exponent+0x4a>
	...

080055a8 <_printf_float>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	b091      	sub	sp, #68	; 0x44
 80055ae:	460c      	mov	r4, r1
 80055b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80055b2:	4693      	mov	fp, r2
 80055b4:	461e      	mov	r6, r3
 80055b6:	4605      	mov	r5, r0
 80055b8:	f001 f8e6 	bl	8006788 <_localeconv_r>
 80055bc:	6803      	ldr	r3, [r0, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	9309      	str	r3, [sp, #36]	; 0x24
 80055c2:	f7fa fdc5 	bl	8000150 <strlen>
 80055c6:	2300      	movs	r3, #0
 80055c8:	930e      	str	r3, [sp, #56]	; 0x38
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	900a      	str	r0, [sp, #40]	; 0x28
 80055ce:	3307      	adds	r3, #7
 80055d0:	f023 0307 	bic.w	r3, r3, #7
 80055d4:	f103 0208 	add.w	r2, r3, #8
 80055d8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80055dc:	f8d4 a000 	ldr.w	sl, [r4]
 80055e0:	603a      	str	r2, [r7, #0]
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055ea:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80055ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	4ba6      	ldr	r3, [pc, #664]	; (8005894 <_printf_float+0x2ec>)
 80055fa:	4638      	mov	r0, r7
 80055fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055fe:	f7fb fa05 	bl	8000a0c <__aeabi_dcmpun>
 8005602:	bb68      	cbnz	r0, 8005660 <_printf_float+0xb8>
 8005604:	f04f 32ff 	mov.w	r2, #4294967295
 8005608:	4ba2      	ldr	r3, [pc, #648]	; (8005894 <_printf_float+0x2ec>)
 800560a:	4638      	mov	r0, r7
 800560c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800560e:	f7fb f9df 	bl	80009d0 <__aeabi_dcmple>
 8005612:	bb28      	cbnz	r0, 8005660 <_printf_float+0xb8>
 8005614:	2200      	movs	r2, #0
 8005616:	2300      	movs	r3, #0
 8005618:	4638      	mov	r0, r7
 800561a:	4649      	mov	r1, r9
 800561c:	f7fb f9ce 	bl	80009bc <__aeabi_dcmplt>
 8005620:	b110      	cbz	r0, 8005628 <_printf_float+0x80>
 8005622:	232d      	movs	r3, #45	; 0x2d
 8005624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005628:	4f9b      	ldr	r7, [pc, #620]	; (8005898 <_printf_float+0x2f0>)
 800562a:	4b9c      	ldr	r3, [pc, #624]	; (800589c <_printf_float+0x2f4>)
 800562c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005630:	bf98      	it	ls
 8005632:	461f      	movls	r7, r3
 8005634:	2303      	movs	r3, #3
 8005636:	f04f 0900 	mov.w	r9, #0
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	f02a 0304 	bic.w	r3, sl, #4
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	9600      	str	r6, [sp, #0]
 8005644:	465b      	mov	r3, fp
 8005646:	aa0f      	add	r2, sp, #60	; 0x3c
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 f9e2 	bl	8005a14 <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	f040 8090 	bne.w	8005776 <_printf_float+0x1ce>
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
 800565a:	b011      	add	sp, #68	; 0x44
 800565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005660:	463a      	mov	r2, r7
 8005662:	464b      	mov	r3, r9
 8005664:	4638      	mov	r0, r7
 8005666:	4649      	mov	r1, r9
 8005668:	f7fb f9d0 	bl	8000a0c <__aeabi_dcmpun>
 800566c:	b110      	cbz	r0, 8005674 <_printf_float+0xcc>
 800566e:	4f8c      	ldr	r7, [pc, #560]	; (80058a0 <_printf_float+0x2f8>)
 8005670:	4b8c      	ldr	r3, [pc, #560]	; (80058a4 <_printf_float+0x2fc>)
 8005672:	e7db      	b.n	800562c <_printf_float+0x84>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800567a:	1c59      	adds	r1, r3, #1
 800567c:	a80d      	add	r0, sp, #52	; 0x34
 800567e:	a90e      	add	r1, sp, #56	; 0x38
 8005680:	d140      	bne.n	8005704 <_printf_float+0x15c>
 8005682:	2306      	movs	r3, #6
 8005684:	6063      	str	r3, [r4, #4]
 8005686:	f04f 0c00 	mov.w	ip, #0
 800568a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800568e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	6022      	str	r2, [r4, #0]
 8005696:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	463a      	mov	r2, r7
 800569e:	464b      	mov	r3, r9
 80056a0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7ff feed 	bl	8005484 <__cvt>
 80056aa:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80056ae:	2b47      	cmp	r3, #71	; 0x47
 80056b0:	4607      	mov	r7, r0
 80056b2:	d109      	bne.n	80056c8 <_printf_float+0x120>
 80056b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b6:	1cd8      	adds	r0, r3, #3
 80056b8:	db02      	blt.n	80056c0 <_printf_float+0x118>
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	4293      	cmp	r3, r2
 80056be:	dd47      	ble.n	8005750 <_printf_float+0x1a8>
 80056c0:	f1a8 0802 	sub.w	r8, r8, #2
 80056c4:	fa5f f888 	uxtb.w	r8, r8
 80056c8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80056cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056ce:	d824      	bhi.n	800571a <_printf_float+0x172>
 80056d0:	3901      	subs	r1, #1
 80056d2:	4642      	mov	r2, r8
 80056d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056d8:	910d      	str	r1, [sp, #52]	; 0x34
 80056da:	f7ff ff2f 	bl	800553c <__exponent>
 80056de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e0:	4681      	mov	r9, r0
 80056e2:	1813      	adds	r3, r2, r0
 80056e4:	2a01      	cmp	r2, #1
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	dc02      	bgt.n	80056f0 <_printf_float+0x148>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	07d1      	lsls	r1, r2, #31
 80056ee:	d501      	bpl.n	80056f4 <_printf_float+0x14c>
 80056f0:	3301      	adds	r3, #1
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0a2      	beq.n	8005642 <_printf_float+0x9a>
 80056fc:	232d      	movs	r3, #45	; 0x2d
 80056fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005702:	e79e      	b.n	8005642 <_printf_float+0x9a>
 8005704:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005708:	f000 816e 	beq.w	80059e8 <_printf_float+0x440>
 800570c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005710:	d1b9      	bne.n	8005686 <_printf_float+0xde>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1b7      	bne.n	8005686 <_printf_float+0xde>
 8005716:	2301      	movs	r3, #1
 8005718:	e7b4      	b.n	8005684 <_printf_float+0xdc>
 800571a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800571e:	d119      	bne.n	8005754 <_printf_float+0x1ac>
 8005720:	2900      	cmp	r1, #0
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	dd0c      	ble.n	8005740 <_printf_float+0x198>
 8005726:	6121      	str	r1, [r4, #16]
 8005728:	b913      	cbnz	r3, 8005730 <_printf_float+0x188>
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	07d2      	lsls	r2, r2, #31
 800572e:	d502      	bpl.n	8005736 <_printf_float+0x18e>
 8005730:	3301      	adds	r3, #1
 8005732:	440b      	add	r3, r1
 8005734:	6123      	str	r3, [r4, #16]
 8005736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005738:	f04f 0900 	mov.w	r9, #0
 800573c:	65a3      	str	r3, [r4, #88]	; 0x58
 800573e:	e7d9      	b.n	80056f4 <_printf_float+0x14c>
 8005740:	b913      	cbnz	r3, 8005748 <_printf_float+0x1a0>
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	07d0      	lsls	r0, r2, #31
 8005746:	d501      	bpl.n	800574c <_printf_float+0x1a4>
 8005748:	3302      	adds	r3, #2
 800574a:	e7f3      	b.n	8005734 <_printf_float+0x18c>
 800574c:	2301      	movs	r3, #1
 800574e:	e7f1      	b.n	8005734 <_printf_float+0x18c>
 8005750:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005754:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005758:	4293      	cmp	r3, r2
 800575a:	db05      	blt.n	8005768 <_printf_float+0x1c0>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	07d1      	lsls	r1, r2, #31
 8005762:	d5e8      	bpl.n	8005736 <_printf_float+0x18e>
 8005764:	3301      	adds	r3, #1
 8005766:	e7e5      	b.n	8005734 <_printf_float+0x18c>
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfcc      	ite	gt
 800576c:	2301      	movgt	r3, #1
 800576e:	f1c3 0302 	rsble	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	e7de      	b.n	8005734 <_printf_float+0x18c>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	055a      	lsls	r2, r3, #21
 800577a:	d407      	bmi.n	800578c <_printf_float+0x1e4>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	463a      	mov	r2, r7
 8005780:	4659      	mov	r1, fp
 8005782:	4628      	mov	r0, r5
 8005784:	47b0      	blx	r6
 8005786:	3001      	adds	r0, #1
 8005788:	d129      	bne.n	80057de <_printf_float+0x236>
 800578a:	e764      	b.n	8005656 <_printf_float+0xae>
 800578c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005790:	f240 80d7 	bls.w	8005942 <_printf_float+0x39a>
 8005794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	f7fb f904 	bl	80009a8 <__aeabi_dcmpeq>
 80057a0:	b388      	cbz	r0, 8005806 <_printf_float+0x25e>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <_printf_float+0x300>)
 80057a6:	4659      	mov	r1, fp
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b0      	blx	r6
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f af52 	beq.w	8005656 <_printf_float+0xae>
 80057b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057b6:	429a      	cmp	r2, r3
 80057b8:	db02      	blt.n	80057c0 <_printf_float+0x218>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	07d8      	lsls	r0, r3, #31
 80057be:	d50e      	bpl.n	80057de <_printf_float+0x236>
 80057c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c4:	4659      	mov	r1, fp
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b0      	blx	r6
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f af43 	beq.w	8005656 <_printf_float+0xae>
 80057d0:	2700      	movs	r7, #0
 80057d2:	f104 081a 	add.w	r8, r4, #26
 80057d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d8:	3b01      	subs	r3, #1
 80057da:	42bb      	cmp	r3, r7
 80057dc:	dc09      	bgt.n	80057f2 <_printf_float+0x24a>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	079f      	lsls	r7, r3, #30
 80057e2:	f100 80fd 	bmi.w	80059e0 <_printf_float+0x438>
 80057e6:	68e0      	ldr	r0, [r4, #12]
 80057e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ea:	4298      	cmp	r0, r3
 80057ec:	bfb8      	it	lt
 80057ee:	4618      	movlt	r0, r3
 80057f0:	e733      	b.n	800565a <_printf_float+0xb2>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4642      	mov	r2, r8
 80057f6:	4659      	mov	r1, fp
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b0      	blx	r6
 80057fc:	3001      	adds	r0, #1
 80057fe:	f43f af2a 	beq.w	8005656 <_printf_float+0xae>
 8005802:	3701      	adds	r7, #1
 8005804:	e7e7      	b.n	80057d6 <_printf_float+0x22e>
 8005806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	dc2b      	bgt.n	8005864 <_printf_float+0x2bc>
 800580c:	2301      	movs	r3, #1
 800580e:	4a26      	ldr	r2, [pc, #152]	; (80058a8 <_printf_float+0x300>)
 8005810:	4659      	mov	r1, fp
 8005812:	4628      	mov	r0, r5
 8005814:	47b0      	blx	r6
 8005816:	3001      	adds	r0, #1
 8005818:	f43f af1d 	beq.w	8005656 <_printf_float+0xae>
 800581c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800581e:	b923      	cbnz	r3, 800582a <_printf_float+0x282>
 8005820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005822:	b913      	cbnz	r3, 800582a <_printf_float+0x282>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	07d9      	lsls	r1, r3, #31
 8005828:	d5d9      	bpl.n	80057de <_printf_float+0x236>
 800582a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582e:	4659      	mov	r1, fp
 8005830:	4628      	mov	r0, r5
 8005832:	47b0      	blx	r6
 8005834:	3001      	adds	r0, #1
 8005836:	f43f af0e 	beq.w	8005656 <_printf_float+0xae>
 800583a:	f04f 0800 	mov.w	r8, #0
 800583e:	f104 091a 	add.w	r9, r4, #26
 8005842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005844:	425b      	negs	r3, r3
 8005846:	4543      	cmp	r3, r8
 8005848:	dc01      	bgt.n	800584e <_printf_float+0x2a6>
 800584a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800584c:	e797      	b.n	800577e <_printf_float+0x1d6>
 800584e:	2301      	movs	r3, #1
 8005850:	464a      	mov	r2, r9
 8005852:	4659      	mov	r1, fp
 8005854:	4628      	mov	r0, r5
 8005856:	47b0      	blx	r6
 8005858:	3001      	adds	r0, #1
 800585a:	f43f aefc 	beq.w	8005656 <_printf_float+0xae>
 800585e:	f108 0801 	add.w	r8, r8, #1
 8005862:	e7ee      	b.n	8005842 <_printf_float+0x29a>
 8005864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005868:	429a      	cmp	r2, r3
 800586a:	bfa8      	it	ge
 800586c:	461a      	movge	r2, r3
 800586e:	2a00      	cmp	r2, #0
 8005870:	4690      	mov	r8, r2
 8005872:	dd07      	ble.n	8005884 <_printf_float+0x2dc>
 8005874:	4613      	mov	r3, r2
 8005876:	4659      	mov	r1, fp
 8005878:	463a      	mov	r2, r7
 800587a:	4628      	mov	r0, r5
 800587c:	47b0      	blx	r6
 800587e:	3001      	adds	r0, #1
 8005880:	f43f aee9 	beq.w	8005656 <_printf_float+0xae>
 8005884:	f104 031a 	add.w	r3, r4, #26
 8005888:	f04f 0a00 	mov.w	sl, #0
 800588c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005890:	930b      	str	r3, [sp, #44]	; 0x2c
 8005892:	e015      	b.n	80058c0 <_printf_float+0x318>
 8005894:	7fefffff 	.word	0x7fefffff
 8005898:	08006fc1 	.word	0x08006fc1
 800589c:	08006fbd 	.word	0x08006fbd
 80058a0:	08006fc9 	.word	0x08006fc9
 80058a4:	08006fc5 	.word	0x08006fc5
 80058a8:	08006fcd 	.word	0x08006fcd
 80058ac:	2301      	movs	r3, #1
 80058ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058b0:	4659      	mov	r1, fp
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b0      	blx	r6
 80058b6:	3001      	adds	r0, #1
 80058b8:	f43f aecd 	beq.w	8005656 <_printf_float+0xae>
 80058bc:	f10a 0a01 	add.w	sl, sl, #1
 80058c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80058c4:	eba9 0308 	sub.w	r3, r9, r8
 80058c8:	4553      	cmp	r3, sl
 80058ca:	dcef      	bgt.n	80058ac <_printf_float+0x304>
 80058cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058d0:	429a      	cmp	r2, r3
 80058d2:	444f      	add	r7, r9
 80058d4:	db14      	blt.n	8005900 <_printf_float+0x358>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	07da      	lsls	r2, r3, #31
 80058da:	d411      	bmi.n	8005900 <_printf_float+0x358>
 80058dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058e0:	eba3 0209 	sub.w	r2, r3, r9
 80058e4:	eba3 0901 	sub.w	r9, r3, r1
 80058e8:	4591      	cmp	r9, r2
 80058ea:	bfa8      	it	ge
 80058ec:	4691      	movge	r9, r2
 80058ee:	f1b9 0f00 	cmp.w	r9, #0
 80058f2:	dc0d      	bgt.n	8005910 <_printf_float+0x368>
 80058f4:	2700      	movs	r7, #0
 80058f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fa:	f104 081a 	add.w	r8, r4, #26
 80058fe:	e018      	b.n	8005932 <_printf_float+0x38a>
 8005900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005904:	4659      	mov	r1, fp
 8005906:	4628      	mov	r0, r5
 8005908:	47b0      	blx	r6
 800590a:	3001      	adds	r0, #1
 800590c:	d1e6      	bne.n	80058dc <_printf_float+0x334>
 800590e:	e6a2      	b.n	8005656 <_printf_float+0xae>
 8005910:	464b      	mov	r3, r9
 8005912:	463a      	mov	r2, r7
 8005914:	4659      	mov	r1, fp
 8005916:	4628      	mov	r0, r5
 8005918:	47b0      	blx	r6
 800591a:	3001      	adds	r0, #1
 800591c:	d1ea      	bne.n	80058f4 <_printf_float+0x34c>
 800591e:	e69a      	b.n	8005656 <_printf_float+0xae>
 8005920:	2301      	movs	r3, #1
 8005922:	4642      	mov	r2, r8
 8005924:	4659      	mov	r1, fp
 8005926:	4628      	mov	r0, r5
 8005928:	47b0      	blx	r6
 800592a:	3001      	adds	r0, #1
 800592c:	f43f ae93 	beq.w	8005656 <_printf_float+0xae>
 8005930:	3701      	adds	r7, #1
 8005932:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	eba3 0309 	sub.w	r3, r3, r9
 800593c:	42bb      	cmp	r3, r7
 800593e:	dcef      	bgt.n	8005920 <_printf_float+0x378>
 8005940:	e74d      	b.n	80057de <_printf_float+0x236>
 8005942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005944:	2a01      	cmp	r2, #1
 8005946:	dc01      	bgt.n	800594c <_printf_float+0x3a4>
 8005948:	07db      	lsls	r3, r3, #31
 800594a:	d538      	bpl.n	80059be <_printf_float+0x416>
 800594c:	2301      	movs	r3, #1
 800594e:	463a      	mov	r2, r7
 8005950:	4659      	mov	r1, fp
 8005952:	4628      	mov	r0, r5
 8005954:	47b0      	blx	r6
 8005956:	3001      	adds	r0, #1
 8005958:	f43f ae7d 	beq.w	8005656 <_printf_float+0xae>
 800595c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005960:	4659      	mov	r1, fp
 8005962:	4628      	mov	r0, r5
 8005964:	47b0      	blx	r6
 8005966:	3001      	adds	r0, #1
 8005968:	f107 0701 	add.w	r7, r7, #1
 800596c:	f43f ae73 	beq.w	8005656 <_printf_float+0xae>
 8005970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005976:	2200      	movs	r2, #0
 8005978:	f103 38ff 	add.w	r8, r3, #4294967295
 800597c:	2300      	movs	r3, #0
 800597e:	f7fb f813 	bl	80009a8 <__aeabi_dcmpeq>
 8005982:	b9c0      	cbnz	r0, 80059b6 <_printf_float+0x40e>
 8005984:	4643      	mov	r3, r8
 8005986:	463a      	mov	r2, r7
 8005988:	4659      	mov	r1, fp
 800598a:	4628      	mov	r0, r5
 800598c:	47b0      	blx	r6
 800598e:	3001      	adds	r0, #1
 8005990:	d10d      	bne.n	80059ae <_printf_float+0x406>
 8005992:	e660      	b.n	8005656 <_printf_float+0xae>
 8005994:	2301      	movs	r3, #1
 8005996:	4642      	mov	r2, r8
 8005998:	4659      	mov	r1, fp
 800599a:	4628      	mov	r0, r5
 800599c:	47b0      	blx	r6
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f ae59 	beq.w	8005656 <_printf_float+0xae>
 80059a4:	3701      	adds	r7, #1
 80059a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a8:	3b01      	subs	r3, #1
 80059aa:	42bb      	cmp	r3, r7
 80059ac:	dcf2      	bgt.n	8005994 <_printf_float+0x3ec>
 80059ae:	464b      	mov	r3, r9
 80059b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059b4:	e6e4      	b.n	8005780 <_printf_float+0x1d8>
 80059b6:	2700      	movs	r7, #0
 80059b8:	f104 081a 	add.w	r8, r4, #26
 80059bc:	e7f3      	b.n	80059a6 <_printf_float+0x3fe>
 80059be:	2301      	movs	r3, #1
 80059c0:	e7e1      	b.n	8005986 <_printf_float+0x3de>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4642      	mov	r2, r8
 80059c6:	4659      	mov	r1, fp
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b0      	blx	r6
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae42 	beq.w	8005656 <_printf_float+0xae>
 80059d2:	3701      	adds	r7, #1
 80059d4:	68e3      	ldr	r3, [r4, #12]
 80059d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	42bb      	cmp	r3, r7
 80059dc:	dcf1      	bgt.n	80059c2 <_printf_float+0x41a>
 80059de:	e702      	b.n	80057e6 <_printf_float+0x23e>
 80059e0:	2700      	movs	r7, #0
 80059e2:	f104 0819 	add.w	r8, r4, #25
 80059e6:	e7f5      	b.n	80059d4 <_printf_float+0x42c>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f43f ae94 	beq.w	8005716 <_printf_float+0x16e>
 80059ee:	f04f 0c00 	mov.w	ip, #0
 80059f2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80059f6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005a00:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	463a      	mov	r2, r7
 8005a08:	464b      	mov	r3, r9
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f7ff fd3a 	bl	8005484 <__cvt>
 8005a10:	4607      	mov	r7, r0
 8005a12:	e64f      	b.n	80056b4 <_printf_float+0x10c>

08005a14 <_printf_common>:
 8005a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	4691      	mov	r9, r2
 8005a1a:	461f      	mov	r7, r3
 8005a1c:	688a      	ldr	r2, [r1, #8]
 8005a1e:	690b      	ldr	r3, [r1, #16]
 8005a20:	4606      	mov	r6, r0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	bfb8      	it	lt
 8005a26:	4613      	movlt	r3, r2
 8005a28:	f8c9 3000 	str.w	r3, [r9]
 8005a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a30:	460c      	mov	r4, r1
 8005a32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a36:	b112      	cbz	r2, 8005a3e <_printf_common+0x2a>
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f8c9 3000 	str.w	r3, [r9]
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	0699      	lsls	r1, r3, #26
 8005a42:	bf42      	ittt	mi
 8005a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a48:	3302      	addmi	r3, #2
 8005a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d107      	bne.n	8005a66 <_printf_common+0x52>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	42ab      	cmp	r3, r5
 8005a64:	dc29      	bgt.n	8005aba <_printf_common+0xa6>
 8005a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	3300      	adds	r3, #0
 8005a6e:	bf18      	it	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	0692      	lsls	r2, r2, #26
 8005a74:	d42e      	bmi.n	8005ad4 <_printf_common+0xc0>
 8005a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	47c0      	blx	r8
 8005a80:	3001      	adds	r0, #1
 8005a82:	d021      	beq.n	8005ac8 <_printf_common+0xb4>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	68e5      	ldr	r5, [r4, #12]
 8005a88:	f003 0306 	and.w	r3, r3, #6
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	bf18      	it	ne
 8005a90:	2500      	movne	r5, #0
 8005a92:	f8d9 2000 	ldr.w	r2, [r9]
 8005a96:	f04f 0900 	mov.w	r9, #0
 8005a9a:	bf08      	it	eq
 8005a9c:	1aad      	subeq	r5, r5, r2
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	bf08      	it	eq
 8005aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bfc4      	itt	gt
 8005aac:	1a9b      	subgt	r3, r3, r2
 8005aae:	18ed      	addgt	r5, r5, r3
 8005ab0:	341a      	adds	r4, #26
 8005ab2:	454d      	cmp	r5, r9
 8005ab4:	d11a      	bne.n	8005aec <_printf_common+0xd8>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	e008      	b.n	8005acc <_printf_common+0xb8>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4652      	mov	r2, sl
 8005abe:	4639      	mov	r1, r7
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	47c0      	blx	r8
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <_printf_common+0xbc>
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	e7c2      	b.n	8005a5a <_printf_common+0x46>
 8005ad4:	2030      	movs	r0, #48	; 0x30
 8005ad6:	18e1      	adds	r1, r4, r3
 8005ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae2:	4422      	add	r2, r4
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aea:	e7c4      	b.n	8005a76 <_printf_common+0x62>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4622      	mov	r2, r4
 8005af0:	4639      	mov	r1, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d0e6      	beq.n	8005ac8 <_printf_common+0xb4>
 8005afa:	f109 0901 	add.w	r9, r9, #1
 8005afe:	e7d8      	b.n	8005ab2 <_printf_common+0x9e>

08005b00 <quorem>:
 8005b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	6903      	ldr	r3, [r0, #16]
 8005b06:	690c      	ldr	r4, [r1, #16]
 8005b08:	4680      	mov	r8, r0
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	f2c0 8084 	blt.w	8005c18 <quorem+0x118>
 8005b10:	3c01      	subs	r4, #1
 8005b12:	f101 0714 	add.w	r7, r1, #20
 8005b16:	f100 0614 	add.w	r6, r0, #20
 8005b1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b22:	3501      	adds	r5, #1
 8005b24:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b28:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b2c:	eb06 030c 	add.w	r3, r6, ip
 8005b30:	eb07 090c 	add.w	r9, r7, ip
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	b39d      	cbz	r5, 8005ba0 <quorem+0xa0>
 8005b38:	f04f 0a00 	mov.w	sl, #0
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	46b6      	mov	lr, r6
 8005b40:	46d3      	mov	fp, sl
 8005b42:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b46:	b293      	uxth	r3, r2
 8005b48:	fb05 a303 	mla	r3, r5, r3, sl
 8005b4c:	0c12      	lsrs	r2, r2, #16
 8005b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b52:	fb05 a202 	mla	r2, r5, r2, sl
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	ebab 0303 	sub.w	r3, fp, r3
 8005b5c:	f8de b000 	ldr.w	fp, [lr]
 8005b60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b64:	fa1f fb8b 	uxth.w	fp, fp
 8005b68:	445b      	add	r3, fp
 8005b6a:	fa1f fb82 	uxth.w	fp, r2
 8005b6e:	f8de 2000 	ldr.w	r2, [lr]
 8005b72:	4581      	cmp	r9, r0
 8005b74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b82:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b86:	f84e 3b04 	str.w	r3, [lr], #4
 8005b8a:	d2da      	bcs.n	8005b42 <quorem+0x42>
 8005b8c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b90:	b933      	cbnz	r3, 8005ba0 <quorem+0xa0>
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	429e      	cmp	r6, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	d331      	bcc.n	8005c00 <quorem+0x100>
 8005b9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	f001 f827 	bl	8006bf4 <__mcmp>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	db26      	blt.n	8005bf8 <quorem+0xf8>
 8005baa:	4630      	mov	r0, r6
 8005bac:	f04f 0c00 	mov.w	ip, #0
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	f857 1b04 	ldr.w	r1, [r7], #4
 8005bb6:	f8d0 e000 	ldr.w	lr, [r0]
 8005bba:	b28b      	uxth	r3, r1
 8005bbc:	ebac 0303 	sub.w	r3, ip, r3
 8005bc0:	fa1f f28e 	uxth.w	r2, lr
 8005bc4:	4413      	add	r3, r2
 8005bc6:	0c0a      	lsrs	r2, r1, #16
 8005bc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd6:	45b9      	cmp	r9, r7
 8005bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005bdc:	f840 3b04 	str.w	r3, [r0], #4
 8005be0:	d2e7      	bcs.n	8005bb2 <quorem+0xb2>
 8005be2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005be6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005bea:	b92a      	cbnz	r2, 8005bf8 <quorem+0xf8>
 8005bec:	3b04      	subs	r3, #4
 8005bee:	429e      	cmp	r6, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	d30b      	bcc.n	8005c0c <quorem+0x10c>
 8005bf4:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	b003      	add	sp, #12
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	3b04      	subs	r3, #4
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	d1c9      	bne.n	8005b9c <quorem+0x9c>
 8005c08:	3c01      	subs	r4, #1
 8005c0a:	e7c4      	b.n	8005b96 <quorem+0x96>
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	3b04      	subs	r3, #4
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d1ef      	bne.n	8005bf4 <quorem+0xf4>
 8005c14:	3c01      	subs	r4, #1
 8005c16:	e7ea      	b.n	8005bee <quorem+0xee>
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e7ee      	b.n	8005bfa <quorem+0xfa>
 8005c1c:	0000      	movs	r0, r0
	...

08005c20 <_dtoa_r>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	4616      	mov	r6, r2
 8005c26:	461f      	mov	r7, r3
 8005c28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c2a:	b095      	sub	sp, #84	; 0x54
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005c32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c36:	b93d      	cbnz	r5, 8005c48 <_dtoa_r+0x28>
 8005c38:	2010      	movs	r0, #16
 8005c3a:	f000 fdb3 	bl	80067a4 <malloc>
 8005c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c44:	6005      	str	r5, [r0, #0]
 8005c46:	60c5      	str	r5, [r0, #12]
 8005c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c4a:	6819      	ldr	r1, [r3, #0]
 8005c4c:	b151      	cbz	r1, 8005c64 <_dtoa_r+0x44>
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	2301      	movs	r3, #1
 8005c52:	4093      	lsls	r3, r2
 8005c54:	604a      	str	r2, [r1, #4]
 8005c56:	608b      	str	r3, [r1, #8]
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fdea 	bl	8006832 <_Bfree>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	1e3b      	subs	r3, r7, #0
 8005c66:	bfaf      	iteee	ge
 8005c68:	2300      	movge	r3, #0
 8005c6a:	2201      	movlt	r2, #1
 8005c6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c70:	9303      	strlt	r3, [sp, #12]
 8005c72:	bfac      	ite	ge
 8005c74:	f8c8 3000 	strge.w	r3, [r8]
 8005c78:	f8c8 2000 	strlt.w	r2, [r8]
 8005c7c:	4bae      	ldr	r3, [pc, #696]	; (8005f38 <_dtoa_r+0x318>)
 8005c7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c82:	ea33 0308 	bics.w	r3, r3, r8
 8005c86:	d11b      	bne.n	8005cc0 <_dtoa_r+0xa0>
 8005c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	b923      	cbnz	r3, 8005c9e <_dtoa_r+0x7e>
 8005c94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f000 8545 	beq.w	8006728 <_dtoa_r+0xb08>
 8005c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca0:	b953      	cbnz	r3, 8005cb8 <_dtoa_r+0x98>
 8005ca2:	4ba6      	ldr	r3, [pc, #664]	; (8005f3c <_dtoa_r+0x31c>)
 8005ca4:	e021      	b.n	8005cea <_dtoa_r+0xca>
 8005ca6:	4ba6      	ldr	r3, [pc, #664]	; (8005f40 <_dtoa_r+0x320>)
 8005ca8:	9306      	str	r3, [sp, #24]
 8005caa:	3308      	adds	r3, #8
 8005cac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	9806      	ldr	r0, [sp, #24]
 8005cb2:	b015      	add	sp, #84	; 0x54
 8005cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb8:	4ba0      	ldr	r3, [pc, #640]	; (8005f3c <_dtoa_r+0x31c>)
 8005cba:	9306      	str	r3, [sp, #24]
 8005cbc:	3303      	adds	r3, #3
 8005cbe:	e7f5      	b.n	8005cac <_dtoa_r+0x8c>
 8005cc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	b160      	cbz	r0, 8005cee <_dtoa_r+0xce>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8520 	beq.w	8006722 <_dtoa_r+0xb02>
 8005ce2:	4b98      	ldr	r3, [pc, #608]	; (8005f44 <_dtoa_r+0x324>)
 8005ce4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	9306      	str	r3, [sp, #24]
 8005cec:	e7e0      	b.n	8005cb0 <_dtoa_r+0x90>
 8005cee:	ab12      	add	r3, sp, #72	; 0x48
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	ab13      	add	r3, sp, #76	; 0x4c
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fff2 	bl	8006ce4 <__d2b>
 8005d00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d04:	4683      	mov	fp, r0
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	d07d      	beq.n	8005e06 <_dtoa_r+0x1e6>
 8005d0a:	46b0      	mov	r8, r6
 8005d0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d10:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005d14:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005d18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d1c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005d20:	2200      	movs	r2, #0
 8005d22:	4b89      	ldr	r3, [pc, #548]	; (8005f48 <_dtoa_r+0x328>)
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	f7fa fa1e 	bl	8000168 <__aeabi_dsub>
 8005d2c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f20 <_dtoa_r+0x300>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f7fa fbd1 	bl	80004d8 <__aeabi_dmul>
 8005d36:	a37c      	add	r3, pc, #496	; (adr r3, 8005f28 <_dtoa_r+0x308>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fa16 	bl	800016c <__adddf3>
 8005d40:	4606      	mov	r6, r0
 8005d42:	4628      	mov	r0, r5
 8005d44:	460f      	mov	r7, r1
 8005d46:	f7fa fb5d 	bl	8000404 <__aeabi_i2d>
 8005d4a:	a379      	add	r3, pc, #484	; (adr r3, 8005f30 <_dtoa_r+0x310>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fbc2 	bl	80004d8 <__aeabi_dmul>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4630      	mov	r0, r6
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	f7fa fa06 	bl	800016c <__adddf3>
 8005d60:	4606      	mov	r6, r0
 8005d62:	460f      	mov	r7, r1
 8005d64:	f7fa fe68 	bl	8000a38 <__aeabi_d2iz>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4682      	mov	sl, r0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fe23 	bl	80009bc <__aeabi_dcmplt>
 8005d76:	b148      	cbz	r0, 8005d8c <_dtoa_r+0x16c>
 8005d78:	4650      	mov	r0, sl
 8005d7a:	f7fa fb43 	bl	8000404 <__aeabi_i2d>
 8005d7e:	4632      	mov	r2, r6
 8005d80:	463b      	mov	r3, r7
 8005d82:	f7fa fe11 	bl	80009a8 <__aeabi_dcmpeq>
 8005d86:	b908      	cbnz	r0, 8005d8c <_dtoa_r+0x16c>
 8005d88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d8c:	f1ba 0f16 	cmp.w	sl, #22
 8005d90:	d85a      	bhi.n	8005e48 <_dtoa_r+0x228>
 8005d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d96:	496d      	ldr	r1, [pc, #436]	; (8005f4c <_dtoa_r+0x32c>)
 8005d98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005da0:	f7fa fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d051      	beq.n	8005e4c <_dtoa_r+0x22c>
 8005da8:	2300      	movs	r3, #0
 8005daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dae:	930d      	str	r3, [sp, #52]	; 0x34
 8005db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005db2:	1b5d      	subs	r5, r3, r5
 8005db4:	1e6b      	subs	r3, r5, #1
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	bf43      	ittte	mi
 8005dba:	2300      	movmi	r3, #0
 8005dbc:	f1c5 0901 	rsbmi	r9, r5, #1
 8005dc0:	9307      	strmi	r3, [sp, #28]
 8005dc2:	f04f 0900 	movpl.w	r9, #0
 8005dc6:	f1ba 0f00 	cmp.w	sl, #0
 8005dca:	db41      	blt.n	8005e50 <_dtoa_r+0x230>
 8005dcc:	9b07      	ldr	r3, [sp, #28]
 8005dce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005dd2:	4453      	add	r3, sl
 8005dd4:	9307      	str	r3, [sp, #28]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9308      	str	r3, [sp, #32]
 8005dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ddc:	2b09      	cmp	r3, #9
 8005dde:	f200 808f 	bhi.w	8005f00 <_dtoa_r+0x2e0>
 8005de2:	2b05      	cmp	r3, #5
 8005de4:	bfc4      	itt	gt
 8005de6:	3b04      	subgt	r3, #4
 8005de8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005dea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005dec:	bfc8      	it	gt
 8005dee:	2500      	movgt	r5, #0
 8005df0:	f1a3 0302 	sub.w	r3, r3, #2
 8005df4:	bfd8      	it	le
 8005df6:	2501      	movle	r5, #1
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	f200 808d 	bhi.w	8005f18 <_dtoa_r+0x2f8>
 8005dfe:	e8df f003 	tbb	[pc, r3]
 8005e02:	7d7b      	.short	0x7d7b
 8005e04:	6f2f      	.short	0x6f2f
 8005e06:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e0a:	441d      	add	r5, r3
 8005e0c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e10:	2820      	cmp	r0, #32
 8005e12:	dd13      	ble.n	8005e3c <_dtoa_r+0x21c>
 8005e14:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	fa08 f800 	lsl.w	r8, r8, r0
 8005e1e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e22:	fa23 f000 	lsr.w	r0, r3, r0
 8005e26:	ea48 0000 	orr.w	r0, r8, r0
 8005e2a:	f7fa fadb 	bl	80003e4 <__aeabi_ui2d>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4680      	mov	r8, r0
 8005e32:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005e36:	3d01      	subs	r5, #1
 8005e38:	9310      	str	r3, [sp, #64]	; 0x40
 8005e3a:	e771      	b.n	8005d20 <_dtoa_r+0x100>
 8005e3c:	9b02      	ldr	r3, [sp, #8]
 8005e3e:	f1c0 0020 	rsb	r0, r0, #32
 8005e42:	fa03 f000 	lsl.w	r0, r3, r0
 8005e46:	e7f0      	b.n	8005e2a <_dtoa_r+0x20a>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e7b0      	b.n	8005dae <_dtoa_r+0x18e>
 8005e4c:	900d      	str	r0, [sp, #52]	; 0x34
 8005e4e:	e7af      	b.n	8005db0 <_dtoa_r+0x190>
 8005e50:	f1ca 0300 	rsb	r3, sl, #0
 8005e54:	9308      	str	r3, [sp, #32]
 8005e56:	2300      	movs	r3, #0
 8005e58:	eba9 090a 	sub.w	r9, r9, sl
 8005e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e5e:	e7bc      	b.n	8005dda <_dtoa_r+0x1ba>
 8005e60:	2301      	movs	r3, #1
 8005e62:	9309      	str	r3, [sp, #36]	; 0x24
 8005e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd74      	ble.n	8005f54 <_dtoa_r+0x334>
 8005e6a:	4698      	mov	r8, r3
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e72:	6072      	str	r2, [r6, #4]
 8005e74:	2204      	movs	r2, #4
 8005e76:	f102 0014 	add.w	r0, r2, #20
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	6871      	ldr	r1, [r6, #4]
 8005e7e:	d96e      	bls.n	8005f5e <_dtoa_r+0x33e>
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 fca2 	bl	80067ca <_Balloc>
 8005e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e88:	6030      	str	r0, [r6, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b8 0f0e 	cmp.w	r8, #14
 8005e90:	9306      	str	r3, [sp, #24]
 8005e92:	f200 80ed 	bhi.w	8006070 <_dtoa_r+0x450>
 8005e96:	2d00      	cmp	r5, #0
 8005e98:	f000 80ea 	beq.w	8006070 <_dtoa_r+0x450>
 8005e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea0:	f1ba 0f00 	cmp.w	sl, #0
 8005ea4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005ea8:	dd77      	ble.n	8005f9a <_dtoa_r+0x37a>
 8005eaa:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <_dtoa_r+0x32c>)
 8005eac:	f00a 030f 	and.w	r3, sl, #15
 8005eb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005eb8:	06f0      	lsls	r0, r6, #27
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ec2:	d568      	bpl.n	8005f96 <_dtoa_r+0x376>
 8005ec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ec8:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <_dtoa_r+0x330>)
 8005eca:	2503      	movs	r5, #3
 8005ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ed0:	f7fa fc2c 	bl	800072c <__aeabi_ddiv>
 8005ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed8:	f006 060f 	and.w	r6, r6, #15
 8005edc:	4f1c      	ldr	r7, [pc, #112]	; (8005f50 <_dtoa_r+0x330>)
 8005ede:	e04f      	b.n	8005f80 <_dtoa_r+0x360>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ee6:	4453      	add	r3, sl
 8005ee8:	f103 0801 	add.w	r8, r3, #1
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	4643      	mov	r3, r8
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bfb8      	it	lt
 8005ef4:	2301      	movlt	r3, #1
 8005ef6:	e7ba      	b.n	8005e6e <_dtoa_r+0x24e>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e7b2      	b.n	8005e62 <_dtoa_r+0x242>
 8005efc:	2300      	movs	r3, #0
 8005efe:	e7f0      	b.n	8005ee2 <_dtoa_r+0x2c2>
 8005f00:	2501      	movs	r5, #1
 8005f02:	2300      	movs	r3, #0
 8005f04:	9509      	str	r5, [sp, #36]	; 0x24
 8005f06:	931e      	str	r3, [sp, #120]	; 0x78
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	9304      	str	r3, [sp, #16]
 8005f10:	4698      	mov	r8, r3
 8005f12:	2312      	movs	r3, #18
 8005f14:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f16:	e7aa      	b.n	8005e6e <_dtoa_r+0x24e>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1c:	e7f4      	b.n	8005f08 <_dtoa_r+0x2e8>
 8005f1e:	bf00      	nop
 8005f20:	636f4361 	.word	0x636f4361
 8005f24:	3fd287a7 	.word	0x3fd287a7
 8005f28:	8b60c8b3 	.word	0x8b60c8b3
 8005f2c:	3fc68a28 	.word	0x3fc68a28
 8005f30:	509f79fb 	.word	0x509f79fb
 8005f34:	3fd34413 	.word	0x3fd34413
 8005f38:	7ff00000 	.word	0x7ff00000
 8005f3c:	08006fd8 	.word	0x08006fd8
 8005f40:	08006fcf 	.word	0x08006fcf
 8005f44:	08006fce 	.word	0x08006fce
 8005f48:	3ff80000 	.word	0x3ff80000
 8005f4c:	08007008 	.word	0x08007008
 8005f50:	08006fe0 	.word	0x08006fe0
 8005f54:	2301      	movs	r3, #1
 8005f56:	9304      	str	r3, [sp, #16]
 8005f58:	4698      	mov	r8, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	e7da      	b.n	8005f14 <_dtoa_r+0x2f4>
 8005f5e:	3101      	adds	r1, #1
 8005f60:	6071      	str	r1, [r6, #4]
 8005f62:	0052      	lsls	r2, r2, #1
 8005f64:	e787      	b.n	8005e76 <_dtoa_r+0x256>
 8005f66:	07f1      	lsls	r1, r6, #31
 8005f68:	d508      	bpl.n	8005f7c <_dtoa_r+0x35c>
 8005f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f72:	f7fa fab1 	bl	80004d8 <__aeabi_dmul>
 8005f76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f7a:	3501      	adds	r5, #1
 8005f7c:	1076      	asrs	r6, r6, #1
 8005f7e:	3708      	adds	r7, #8
 8005f80:	2e00      	cmp	r6, #0
 8005f82:	d1f0      	bne.n	8005f66 <_dtoa_r+0x346>
 8005f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f8c:	f7fa fbce 	bl	800072c <__aeabi_ddiv>
 8005f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f94:	e01b      	b.n	8005fce <_dtoa_r+0x3ae>
 8005f96:	2502      	movs	r5, #2
 8005f98:	e7a0      	b.n	8005edc <_dtoa_r+0x2bc>
 8005f9a:	f000 80a4 	beq.w	80060e6 <_dtoa_r+0x4c6>
 8005f9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005fa2:	f1ca 0600 	rsb	r6, sl, #0
 8005fa6:	4ba0      	ldr	r3, [pc, #640]	; (8006228 <_dtoa_r+0x608>)
 8005fa8:	f006 020f 	and.w	r2, r6, #15
 8005fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fa90 	bl	80004d8 <__aeabi_dmul>
 8005fb8:	2502      	movs	r5, #2
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc0:	4f9a      	ldr	r7, [pc, #616]	; (800622c <_dtoa_r+0x60c>)
 8005fc2:	1136      	asrs	r6, r6, #4
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	f040 8083 	bne.w	80060d0 <_dtoa_r+0x4b0>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e0      	bne.n	8005f90 <_dtoa_r+0x370>
 8005fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 808a 	beq.w	80060ea <_dtoa_r+0x4ca>
 8005fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005fde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4b92      	ldr	r3, [pc, #584]	; (8006230 <_dtoa_r+0x610>)
 8005fe6:	f7fa fce9 	bl	80009bc <__aeabi_dcmplt>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d07d      	beq.n	80060ea <_dtoa_r+0x4ca>
 8005fee:	f1b8 0f00 	cmp.w	r8, #0
 8005ff2:	d07a      	beq.n	80060ea <_dtoa_r+0x4ca>
 8005ff4:	9b04      	ldr	r3, [sp, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd36      	ble.n	8006068 <_dtoa_r+0x448>
 8005ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ffe:	2200      	movs	r2, #0
 8006000:	4b8c      	ldr	r3, [pc, #560]	; (8006234 <_dtoa_r+0x614>)
 8006002:	f7fa fa69 	bl	80004d8 <__aeabi_dmul>
 8006006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600a:	9e04      	ldr	r6, [sp, #16]
 800600c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006010:	3501      	adds	r5, #1
 8006012:	4628      	mov	r0, r5
 8006014:	f7fa f9f6 	bl	8000404 <__aeabi_i2d>
 8006018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800601c:	f7fa fa5c 	bl	80004d8 <__aeabi_dmul>
 8006020:	2200      	movs	r2, #0
 8006022:	4b85      	ldr	r3, [pc, #532]	; (8006238 <_dtoa_r+0x618>)
 8006024:	f7fa f8a2 	bl	800016c <__adddf3>
 8006028:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800602c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006030:	950b      	str	r5, [sp, #44]	; 0x2c
 8006032:	2e00      	cmp	r6, #0
 8006034:	d15c      	bne.n	80060f0 <_dtoa_r+0x4d0>
 8006036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	4b7f      	ldr	r3, [pc, #508]	; (800623c <_dtoa_r+0x61c>)
 800603e:	f7fa f893 	bl	8000168 <__aeabi_dsub>
 8006042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006044:	462b      	mov	r3, r5
 8006046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800604a:	f7fa fcd5 	bl	80009f8 <__aeabi_dcmpgt>
 800604e:	2800      	cmp	r0, #0
 8006050:	f040 8281 	bne.w	8006556 <_dtoa_r+0x936>
 8006054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800605e:	f7fa fcad 	bl	80009bc <__aeabi_dcmplt>
 8006062:	2800      	cmp	r0, #0
 8006064:	f040 8275 	bne.w	8006552 <_dtoa_r+0x932>
 8006068:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800606c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006072:	2b00      	cmp	r3, #0
 8006074:	f2c0 814b 	blt.w	800630e <_dtoa_r+0x6ee>
 8006078:	f1ba 0f0e 	cmp.w	sl, #14
 800607c:	f300 8147 	bgt.w	800630e <_dtoa_r+0x6ee>
 8006080:	4b69      	ldr	r3, [pc, #420]	; (8006228 <_dtoa_r+0x608>)
 8006082:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800608e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006090:	2b00      	cmp	r3, #0
 8006092:	f280 80d7 	bge.w	8006244 <_dtoa_r+0x624>
 8006096:	f1b8 0f00 	cmp.w	r8, #0
 800609a:	f300 80d3 	bgt.w	8006244 <_dtoa_r+0x624>
 800609e:	f040 8257 	bne.w	8006550 <_dtoa_r+0x930>
 80060a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060a6:	2200      	movs	r2, #0
 80060a8:	4b64      	ldr	r3, [pc, #400]	; (800623c <_dtoa_r+0x61c>)
 80060aa:	f7fa fa15 	bl	80004d8 <__aeabi_dmul>
 80060ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060b2:	f7fa fc97 	bl	80009e4 <__aeabi_dcmpge>
 80060b6:	4646      	mov	r6, r8
 80060b8:	4647      	mov	r7, r8
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f040 822d 	bne.w	800651a <_dtoa_r+0x8fa>
 80060c0:	9b06      	ldr	r3, [sp, #24]
 80060c2:	9a06      	ldr	r2, [sp, #24]
 80060c4:	1c5d      	adds	r5, r3, #1
 80060c6:	2331      	movs	r3, #49	; 0x31
 80060c8:	f10a 0a01 	add.w	sl, sl, #1
 80060cc:	7013      	strb	r3, [r2, #0]
 80060ce:	e228      	b.n	8006522 <_dtoa_r+0x902>
 80060d0:	07f2      	lsls	r2, r6, #31
 80060d2:	d505      	bpl.n	80060e0 <_dtoa_r+0x4c0>
 80060d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d8:	f7fa f9fe 	bl	80004d8 <__aeabi_dmul>
 80060dc:	2301      	movs	r3, #1
 80060de:	3501      	adds	r5, #1
 80060e0:	1076      	asrs	r6, r6, #1
 80060e2:	3708      	adds	r7, #8
 80060e4:	e76e      	b.n	8005fc4 <_dtoa_r+0x3a4>
 80060e6:	2502      	movs	r5, #2
 80060e8:	e771      	b.n	8005fce <_dtoa_r+0x3ae>
 80060ea:	4657      	mov	r7, sl
 80060ec:	4646      	mov	r6, r8
 80060ee:	e790      	b.n	8006012 <_dtoa_r+0x3f2>
 80060f0:	4b4d      	ldr	r3, [pc, #308]	; (8006228 <_dtoa_r+0x608>)
 80060f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80060fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d048      	beq.n	8006192 <_dtoa_r+0x572>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	2000      	movs	r0, #0
 8006106:	494e      	ldr	r1, [pc, #312]	; (8006240 <_dtoa_r+0x620>)
 8006108:	f7fa fb10 	bl	800072c <__aeabi_ddiv>
 800610c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006110:	f7fa f82a 	bl	8000168 <__aeabi_dsub>
 8006114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006118:	9d06      	ldr	r5, [sp, #24]
 800611a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800611e:	f7fa fc8b 	bl	8000a38 <__aeabi_d2iz>
 8006122:	9011      	str	r0, [sp, #68]	; 0x44
 8006124:	f7fa f96e 	bl	8000404 <__aeabi_i2d>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006130:	f7fa f81a 	bl	8000168 <__aeabi_dsub>
 8006134:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800613a:	3330      	adds	r3, #48	; 0x30
 800613c:	f805 3b01 	strb.w	r3, [r5], #1
 8006140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006144:	f7fa fc3a 	bl	80009bc <__aeabi_dcmplt>
 8006148:	2800      	cmp	r0, #0
 800614a:	d163      	bne.n	8006214 <_dtoa_r+0x5f4>
 800614c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006150:	2000      	movs	r0, #0
 8006152:	4937      	ldr	r1, [pc, #220]	; (8006230 <_dtoa_r+0x610>)
 8006154:	f7fa f808 	bl	8000168 <__aeabi_dsub>
 8006158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800615c:	f7fa fc2e 	bl	80009bc <__aeabi_dcmplt>
 8006160:	2800      	cmp	r0, #0
 8006162:	f040 80b5 	bne.w	80062d0 <_dtoa_r+0x6b0>
 8006166:	9b06      	ldr	r3, [sp, #24]
 8006168:	1aeb      	subs	r3, r5, r3
 800616a:	429e      	cmp	r6, r3
 800616c:	f77f af7c 	ble.w	8006068 <_dtoa_r+0x448>
 8006170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006174:	2200      	movs	r2, #0
 8006176:	4b2f      	ldr	r3, [pc, #188]	; (8006234 <_dtoa_r+0x614>)
 8006178:	f7fa f9ae 	bl	80004d8 <__aeabi_dmul>
 800617c:	2200      	movs	r2, #0
 800617e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006186:	4b2b      	ldr	r3, [pc, #172]	; (8006234 <_dtoa_r+0x614>)
 8006188:	f7fa f9a6 	bl	80004d8 <__aeabi_dmul>
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	e7c3      	b.n	800611a <_dtoa_r+0x4fa>
 8006192:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006196:	f7fa f99f 	bl	80004d8 <__aeabi_dmul>
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061a0:	199d      	adds	r5, r3, r6
 80061a2:	461e      	mov	r6, r3
 80061a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a8:	f7fa fc46 	bl	8000a38 <__aeabi_d2iz>
 80061ac:	9011      	str	r0, [sp, #68]	; 0x44
 80061ae:	f7fa f929 	bl	8000404 <__aeabi_i2d>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ba:	f7f9 ffd5 	bl	8000168 <__aeabi_dsub>
 80061be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c4:	3330      	adds	r3, #48	; 0x30
 80061c6:	f806 3b01 	strb.w	r3, [r6], #1
 80061ca:	42ae      	cmp	r6, r5
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	d124      	bne.n	800621c <_dtoa_r+0x5fc>
 80061d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <_dtoa_r+0x620>)
 80061d8:	f7f9 ffc8 	bl	800016c <__adddf3>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e4:	f7fa fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d171      	bne.n	80062d0 <_dtoa_r+0x6b0>
 80061ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061f0:	2000      	movs	r0, #0
 80061f2:	4913      	ldr	r1, [pc, #76]	; (8006240 <_dtoa_r+0x620>)
 80061f4:	f7f9 ffb8 	bl	8000168 <__aeabi_dsub>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006200:	f7fa fbdc 	bl	80009bc <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f43f af2f 	beq.w	8006068 <_dtoa_r+0x448>
 800620a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800620e:	1e6a      	subs	r2, r5, #1
 8006210:	2b30      	cmp	r3, #48	; 0x30
 8006212:	d001      	beq.n	8006218 <_dtoa_r+0x5f8>
 8006214:	46ba      	mov	sl, r7
 8006216:	e04a      	b.n	80062ae <_dtoa_r+0x68e>
 8006218:	4615      	mov	r5, r2
 800621a:	e7f6      	b.n	800620a <_dtoa_r+0x5ea>
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <_dtoa_r+0x614>)
 800621e:	f7fa f95b 	bl	80004d8 <__aeabi_dmul>
 8006222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006226:	e7bd      	b.n	80061a4 <_dtoa_r+0x584>
 8006228:	08007008 	.word	0x08007008
 800622c:	08006fe0 	.word	0x08006fe0
 8006230:	3ff00000 	.word	0x3ff00000
 8006234:	40240000 	.word	0x40240000
 8006238:	401c0000 	.word	0x401c0000
 800623c:	40140000 	.word	0x40140000
 8006240:	3fe00000 	.word	0x3fe00000
 8006244:	9d06      	ldr	r5, [sp, #24]
 8006246:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800624a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800624e:	4630      	mov	r0, r6
 8006250:	4639      	mov	r1, r7
 8006252:	f7fa fa6b 	bl	800072c <__aeabi_ddiv>
 8006256:	f7fa fbef 	bl	8000a38 <__aeabi_d2iz>
 800625a:	4681      	mov	r9, r0
 800625c:	f7fa f8d2 	bl	8000404 <__aeabi_i2d>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	f7fa f938 	bl	80004d8 <__aeabi_dmul>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7f9 ff7a 	bl	8000168 <__aeabi_dsub>
 8006274:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006278:	f805 6b01 	strb.w	r6, [r5], #1
 800627c:	9e06      	ldr	r6, [sp, #24]
 800627e:	4602      	mov	r2, r0
 8006280:	1bae      	subs	r6, r5, r6
 8006282:	45b0      	cmp	r8, r6
 8006284:	460b      	mov	r3, r1
 8006286:	d135      	bne.n	80062f4 <_dtoa_r+0x6d4>
 8006288:	f7f9 ff70 	bl	800016c <__adddf3>
 800628c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006290:	4606      	mov	r6, r0
 8006292:	460f      	mov	r7, r1
 8006294:	f7fa fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8006298:	b9c8      	cbnz	r0, 80062ce <_dtoa_r+0x6ae>
 800629a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80062a6:	b110      	cbz	r0, 80062ae <_dtoa_r+0x68e>
 80062a8:	f019 0f01 	tst.w	r9, #1
 80062ac:	d10f      	bne.n	80062ce <_dtoa_r+0x6ae>
 80062ae:	4659      	mov	r1, fp
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fabe 	bl	8006832 <_Bfree>
 80062b6:	2300      	movs	r3, #0
 80062b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062ba:	702b      	strb	r3, [r5, #0]
 80062bc:	f10a 0301 	add.w	r3, sl, #1
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f43f acf3 	beq.w	8005cb0 <_dtoa_r+0x90>
 80062ca:	601d      	str	r5, [r3, #0]
 80062cc:	e4f0      	b.n	8005cb0 <_dtoa_r+0x90>
 80062ce:	4657      	mov	r7, sl
 80062d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062d4:	1e6b      	subs	r3, r5, #1
 80062d6:	2a39      	cmp	r2, #57	; 0x39
 80062d8:	d106      	bne.n	80062e8 <_dtoa_r+0x6c8>
 80062da:	9a06      	ldr	r2, [sp, #24]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d107      	bne.n	80062f0 <_dtoa_r+0x6d0>
 80062e0:	2330      	movs	r3, #48	; 0x30
 80062e2:	7013      	strb	r3, [r2, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	3701      	adds	r7, #1
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	3201      	adds	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e791      	b.n	8006214 <_dtoa_r+0x5f4>
 80062f0:	461d      	mov	r5, r3
 80062f2:	e7ed      	b.n	80062d0 <_dtoa_r+0x6b0>
 80062f4:	2200      	movs	r2, #0
 80062f6:	4b99      	ldr	r3, [pc, #612]	; (800655c <_dtoa_r+0x93c>)
 80062f8:	f7fa f8ee 	bl	80004d8 <__aeabi_dmul>
 80062fc:	2200      	movs	r2, #0
 80062fe:	2300      	movs	r3, #0
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	f7fa fb50 	bl	80009a8 <__aeabi_dcmpeq>
 8006308:	2800      	cmp	r0, #0
 800630a:	d09e      	beq.n	800624a <_dtoa_r+0x62a>
 800630c:	e7cf      	b.n	80062ae <_dtoa_r+0x68e>
 800630e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006310:	2a00      	cmp	r2, #0
 8006312:	f000 8088 	beq.w	8006426 <_dtoa_r+0x806>
 8006316:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006318:	2a01      	cmp	r2, #1
 800631a:	dc6d      	bgt.n	80063f8 <_dtoa_r+0x7d8>
 800631c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800631e:	2a00      	cmp	r2, #0
 8006320:	d066      	beq.n	80063f0 <_dtoa_r+0x7d0>
 8006322:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006326:	464d      	mov	r5, r9
 8006328:	9e08      	ldr	r6, [sp, #32]
 800632a:	9a07      	ldr	r2, [sp, #28]
 800632c:	2101      	movs	r1, #1
 800632e:	441a      	add	r2, r3
 8006330:	4620      	mov	r0, r4
 8006332:	4499      	add	r9, r3
 8006334:	9207      	str	r2, [sp, #28]
 8006336:	f000 fb1c 	bl	8006972 <__i2b>
 800633a:	4607      	mov	r7, r0
 800633c:	2d00      	cmp	r5, #0
 800633e:	dd0b      	ble.n	8006358 <_dtoa_r+0x738>
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	2b00      	cmp	r3, #0
 8006344:	dd08      	ble.n	8006358 <_dtoa_r+0x738>
 8006346:	42ab      	cmp	r3, r5
 8006348:	bfa8      	it	ge
 800634a:	462b      	movge	r3, r5
 800634c:	9a07      	ldr	r2, [sp, #28]
 800634e:	eba9 0903 	sub.w	r9, r9, r3
 8006352:	1aed      	subs	r5, r5, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	9b08      	ldr	r3, [sp, #32]
 800635a:	b1eb      	cbz	r3, 8006398 <_dtoa_r+0x778>
 800635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d065      	beq.n	800642e <_dtoa_r+0x80e>
 8006362:	b18e      	cbz	r6, 8006388 <_dtoa_r+0x768>
 8006364:	4639      	mov	r1, r7
 8006366:	4632      	mov	r2, r6
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fba1 	bl	8006ab0 <__pow5mult>
 800636e:	465a      	mov	r2, fp
 8006370:	4601      	mov	r1, r0
 8006372:	4607      	mov	r7, r0
 8006374:	4620      	mov	r0, r4
 8006376:	f000 fb05 	bl	8006984 <__multiply>
 800637a:	4659      	mov	r1, fp
 800637c:	900a      	str	r0, [sp, #40]	; 0x28
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fa57 	bl	8006832 <_Bfree>
 8006384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006386:	469b      	mov	fp, r3
 8006388:	9b08      	ldr	r3, [sp, #32]
 800638a:	1b9a      	subs	r2, r3, r6
 800638c:	d004      	beq.n	8006398 <_dtoa_r+0x778>
 800638e:	4659      	mov	r1, fp
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fb8d 	bl	8006ab0 <__pow5mult>
 8006396:	4683      	mov	fp, r0
 8006398:	2101      	movs	r1, #1
 800639a:	4620      	mov	r0, r4
 800639c:	f000 fae9 	bl	8006972 <__i2b>
 80063a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a2:	4606      	mov	r6, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 81c6 	beq.w	8006736 <_dtoa_r+0xb16>
 80063aa:	461a      	mov	r2, r3
 80063ac:	4601      	mov	r1, r0
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 fb7e 	bl	8006ab0 <__pow5mult>
 80063b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063b6:	4606      	mov	r6, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	dc3e      	bgt.n	800643a <_dtoa_r+0x81a>
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d137      	bne.n	8006432 <_dtoa_r+0x812>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d134      	bne.n	8006436 <_dtoa_r+0x816>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063d2:	0d1b      	lsrs	r3, r3, #20
 80063d4:	051b      	lsls	r3, r3, #20
 80063d6:	b12b      	cbz	r3, 80063e4 <_dtoa_r+0x7c4>
 80063d8:	9b07      	ldr	r3, [sp, #28]
 80063da:	f109 0901 	add.w	r9, r9, #1
 80063de:	3301      	adds	r3, #1
 80063e0:	9307      	str	r3, [sp, #28]
 80063e2:	2301      	movs	r3, #1
 80063e4:	9308      	str	r3, [sp, #32]
 80063e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d128      	bne.n	800643e <_dtoa_r+0x81e>
 80063ec:	2001      	movs	r0, #1
 80063ee:	e02e      	b.n	800644e <_dtoa_r+0x82e>
 80063f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063f6:	e796      	b.n	8006326 <_dtoa_r+0x706>
 80063f8:	9b08      	ldr	r3, [sp, #32]
 80063fa:	f108 36ff 	add.w	r6, r8, #4294967295
 80063fe:	42b3      	cmp	r3, r6
 8006400:	bfb7      	itett	lt
 8006402:	9b08      	ldrlt	r3, [sp, #32]
 8006404:	1b9e      	subge	r6, r3, r6
 8006406:	1af2      	sublt	r2, r6, r3
 8006408:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800640a:	bfbf      	itttt	lt
 800640c:	9608      	strlt	r6, [sp, #32]
 800640e:	189b      	addlt	r3, r3, r2
 8006410:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006412:	2600      	movlt	r6, #0
 8006414:	f1b8 0f00 	cmp.w	r8, #0
 8006418:	bfb9      	ittee	lt
 800641a:	eba9 0508 	sublt.w	r5, r9, r8
 800641e:	2300      	movlt	r3, #0
 8006420:	464d      	movge	r5, r9
 8006422:	4643      	movge	r3, r8
 8006424:	e781      	b.n	800632a <_dtoa_r+0x70a>
 8006426:	9e08      	ldr	r6, [sp, #32]
 8006428:	464d      	mov	r5, r9
 800642a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800642c:	e786      	b.n	800633c <_dtoa_r+0x71c>
 800642e:	9a08      	ldr	r2, [sp, #32]
 8006430:	e7ad      	b.n	800638e <_dtoa_r+0x76e>
 8006432:	2300      	movs	r3, #0
 8006434:	e7d6      	b.n	80063e4 <_dtoa_r+0x7c4>
 8006436:	9b02      	ldr	r3, [sp, #8]
 8006438:	e7d4      	b.n	80063e4 <_dtoa_r+0x7c4>
 800643a:	2300      	movs	r3, #0
 800643c:	9308      	str	r3, [sp, #32]
 800643e:	6933      	ldr	r3, [r6, #16]
 8006440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006444:	6918      	ldr	r0, [r3, #16]
 8006446:	f000 fa46 	bl	80068d6 <__hi0bits>
 800644a:	f1c0 0020 	rsb	r0, r0, #32
 800644e:	9b07      	ldr	r3, [sp, #28]
 8006450:	4418      	add	r0, r3
 8006452:	f010 001f 	ands.w	r0, r0, #31
 8006456:	d047      	beq.n	80064e8 <_dtoa_r+0x8c8>
 8006458:	f1c0 0320 	rsb	r3, r0, #32
 800645c:	2b04      	cmp	r3, #4
 800645e:	dd3b      	ble.n	80064d8 <_dtoa_r+0x8b8>
 8006460:	9b07      	ldr	r3, [sp, #28]
 8006462:	f1c0 001c 	rsb	r0, r0, #28
 8006466:	4481      	add	r9, r0
 8006468:	4405      	add	r5, r0
 800646a:	4403      	add	r3, r0
 800646c:	9307      	str	r3, [sp, #28]
 800646e:	f1b9 0f00 	cmp.w	r9, #0
 8006472:	dd05      	ble.n	8006480 <_dtoa_r+0x860>
 8006474:	4659      	mov	r1, fp
 8006476:	464a      	mov	r2, r9
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fb67 	bl	8006b4c <__lshift>
 800647e:	4683      	mov	fp, r0
 8006480:	9b07      	ldr	r3, [sp, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	dd05      	ble.n	8006492 <_dtoa_r+0x872>
 8006486:	4631      	mov	r1, r6
 8006488:	461a      	mov	r2, r3
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fb5e 	bl	8006b4c <__lshift>
 8006490:	4606      	mov	r6, r0
 8006492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006494:	b353      	cbz	r3, 80064ec <_dtoa_r+0x8cc>
 8006496:	4631      	mov	r1, r6
 8006498:	4658      	mov	r0, fp
 800649a:	f000 fbab 	bl	8006bf4 <__mcmp>
 800649e:	2800      	cmp	r0, #0
 80064a0:	da24      	bge.n	80064ec <_dtoa_r+0x8cc>
 80064a2:	2300      	movs	r3, #0
 80064a4:	4659      	mov	r1, fp
 80064a6:	220a      	movs	r2, #10
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 f9d9 	bl	8006860 <__multadd>
 80064ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064b4:	4683      	mov	fp, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8144 	beq.w	8006744 <_dtoa_r+0xb24>
 80064bc:	2300      	movs	r3, #0
 80064be:	4639      	mov	r1, r7
 80064c0:	220a      	movs	r2, #10
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 f9cc 	bl	8006860 <__multadd>
 80064c8:	9b04      	ldr	r3, [sp, #16]
 80064ca:	4607      	mov	r7, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dc4d      	bgt.n	800656c <_dtoa_r+0x94c>
 80064d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	dd4a      	ble.n	800656c <_dtoa_r+0x94c>
 80064d6:	e011      	b.n	80064fc <_dtoa_r+0x8dc>
 80064d8:	d0c9      	beq.n	800646e <_dtoa_r+0x84e>
 80064da:	9a07      	ldr	r2, [sp, #28]
 80064dc:	331c      	adds	r3, #28
 80064de:	441a      	add	r2, r3
 80064e0:	4499      	add	r9, r3
 80064e2:	441d      	add	r5, r3
 80064e4:	4613      	mov	r3, r2
 80064e6:	e7c1      	b.n	800646c <_dtoa_r+0x84c>
 80064e8:	4603      	mov	r3, r0
 80064ea:	e7f6      	b.n	80064da <_dtoa_r+0x8ba>
 80064ec:	f1b8 0f00 	cmp.w	r8, #0
 80064f0:	dc36      	bgt.n	8006560 <_dtoa_r+0x940>
 80064f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	dd33      	ble.n	8006560 <_dtoa_r+0x940>
 80064f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	b963      	cbnz	r3, 800651a <_dtoa_r+0x8fa>
 8006500:	4631      	mov	r1, r6
 8006502:	2205      	movs	r2, #5
 8006504:	4620      	mov	r0, r4
 8006506:	f000 f9ab 	bl	8006860 <__multadd>
 800650a:	4601      	mov	r1, r0
 800650c:	4606      	mov	r6, r0
 800650e:	4658      	mov	r0, fp
 8006510:	f000 fb70 	bl	8006bf4 <__mcmp>
 8006514:	2800      	cmp	r0, #0
 8006516:	f73f add3 	bgt.w	80060c0 <_dtoa_r+0x4a0>
 800651a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800651c:	9d06      	ldr	r5, [sp, #24]
 800651e:	ea6f 0a03 	mvn.w	sl, r3
 8006522:	f04f 0900 	mov.w	r9, #0
 8006526:	4631      	mov	r1, r6
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f982 	bl	8006832 <_Bfree>
 800652e:	2f00      	cmp	r7, #0
 8006530:	f43f aebd 	beq.w	80062ae <_dtoa_r+0x68e>
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	d005      	beq.n	8006546 <_dtoa_r+0x926>
 800653a:	45b9      	cmp	r9, r7
 800653c:	d003      	beq.n	8006546 <_dtoa_r+0x926>
 800653e:	4649      	mov	r1, r9
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f976 	bl	8006832 <_Bfree>
 8006546:	4639      	mov	r1, r7
 8006548:	4620      	mov	r0, r4
 800654a:	f000 f972 	bl	8006832 <_Bfree>
 800654e:	e6ae      	b.n	80062ae <_dtoa_r+0x68e>
 8006550:	2600      	movs	r6, #0
 8006552:	4637      	mov	r7, r6
 8006554:	e7e1      	b.n	800651a <_dtoa_r+0x8fa>
 8006556:	46ba      	mov	sl, r7
 8006558:	4637      	mov	r7, r6
 800655a:	e5b1      	b.n	80060c0 <_dtoa_r+0x4a0>
 800655c:	40240000 	.word	0x40240000
 8006560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006562:	f8cd 8010 	str.w	r8, [sp, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80f3 	beq.w	8006752 <_dtoa_r+0xb32>
 800656c:	2d00      	cmp	r5, #0
 800656e:	dd05      	ble.n	800657c <_dtoa_r+0x95c>
 8006570:	4639      	mov	r1, r7
 8006572:	462a      	mov	r2, r5
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fae9 	bl	8006b4c <__lshift>
 800657a:	4607      	mov	r7, r0
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d04c      	beq.n	800661c <_dtoa_r+0x9fc>
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4620      	mov	r0, r4
 8006586:	f000 f920 	bl	80067ca <_Balloc>
 800658a:	4605      	mov	r5, r0
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	f107 010c 	add.w	r1, r7, #12
 8006592:	3202      	adds	r2, #2
 8006594:	0092      	lsls	r2, r2, #2
 8006596:	300c      	adds	r0, #12
 8006598:	f000 f90c 	bl	80067b4 <memcpy>
 800659c:	2201      	movs	r2, #1
 800659e:	4629      	mov	r1, r5
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fad3 	bl	8006b4c <__lshift>
 80065a6:	46b9      	mov	r9, r7
 80065a8:	4607      	mov	r7, r0
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	9307      	str	r3, [sp, #28]
 80065ae:	9b02      	ldr	r3, [sp, #8]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	9308      	str	r3, [sp, #32]
 80065b6:	4631      	mov	r1, r6
 80065b8:	4658      	mov	r0, fp
 80065ba:	f7ff faa1 	bl	8005b00 <quorem>
 80065be:	4649      	mov	r1, r9
 80065c0:	4605      	mov	r5, r0
 80065c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065c6:	4658      	mov	r0, fp
 80065c8:	f000 fb14 	bl	8006bf4 <__mcmp>
 80065cc:	463a      	mov	r2, r7
 80065ce:	9002      	str	r0, [sp, #8]
 80065d0:	4631      	mov	r1, r6
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 fb28 	bl	8006c28 <__mdiff>
 80065d8:	68c3      	ldr	r3, [r0, #12]
 80065da:	4602      	mov	r2, r0
 80065dc:	bb03      	cbnz	r3, 8006620 <_dtoa_r+0xa00>
 80065de:	4601      	mov	r1, r0
 80065e0:	9009      	str	r0, [sp, #36]	; 0x24
 80065e2:	4658      	mov	r0, fp
 80065e4:	f000 fb06 	bl	8006bf4 <__mcmp>
 80065e8:	4603      	mov	r3, r0
 80065ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ec:	4611      	mov	r1, r2
 80065ee:	4620      	mov	r0, r4
 80065f0:	9309      	str	r3, [sp, #36]	; 0x24
 80065f2:	f000 f91e 	bl	8006832 <_Bfree>
 80065f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f8:	b9a3      	cbnz	r3, 8006624 <_dtoa_r+0xa04>
 80065fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065fc:	b992      	cbnz	r2, 8006624 <_dtoa_r+0xa04>
 80065fe:	9a08      	ldr	r2, [sp, #32]
 8006600:	b982      	cbnz	r2, 8006624 <_dtoa_r+0xa04>
 8006602:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006606:	d029      	beq.n	800665c <_dtoa_r+0xa3c>
 8006608:	9b02      	ldr	r3, [sp, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dd01      	ble.n	8006612 <_dtoa_r+0x9f2>
 800660e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006612:	9b07      	ldr	r3, [sp, #28]
 8006614:	1c5d      	adds	r5, r3, #1
 8006616:	f883 8000 	strb.w	r8, [r3]
 800661a:	e784      	b.n	8006526 <_dtoa_r+0x906>
 800661c:	4638      	mov	r0, r7
 800661e:	e7c2      	b.n	80065a6 <_dtoa_r+0x986>
 8006620:	2301      	movs	r3, #1
 8006622:	e7e3      	b.n	80065ec <_dtoa_r+0x9cc>
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	2a00      	cmp	r2, #0
 8006628:	db04      	blt.n	8006634 <_dtoa_r+0xa14>
 800662a:	d123      	bne.n	8006674 <_dtoa_r+0xa54>
 800662c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800662e:	bb0a      	cbnz	r2, 8006674 <_dtoa_r+0xa54>
 8006630:	9a08      	ldr	r2, [sp, #32]
 8006632:	b9fa      	cbnz	r2, 8006674 <_dtoa_r+0xa54>
 8006634:	2b00      	cmp	r3, #0
 8006636:	ddec      	ble.n	8006612 <_dtoa_r+0x9f2>
 8006638:	4659      	mov	r1, fp
 800663a:	2201      	movs	r2, #1
 800663c:	4620      	mov	r0, r4
 800663e:	f000 fa85 	bl	8006b4c <__lshift>
 8006642:	4631      	mov	r1, r6
 8006644:	4683      	mov	fp, r0
 8006646:	f000 fad5 	bl	8006bf4 <__mcmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	dc03      	bgt.n	8006656 <_dtoa_r+0xa36>
 800664e:	d1e0      	bne.n	8006612 <_dtoa_r+0x9f2>
 8006650:	f018 0f01 	tst.w	r8, #1
 8006654:	d0dd      	beq.n	8006612 <_dtoa_r+0x9f2>
 8006656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800665a:	d1d8      	bne.n	800660e <_dtoa_r+0x9ee>
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	9a07      	ldr	r2, [sp, #28]
 8006660:	1c5d      	adds	r5, r3, #1
 8006662:	2339      	movs	r3, #57	; 0x39
 8006664:	7013      	strb	r3, [r2, #0]
 8006666:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800666a:	1e6a      	subs	r2, r5, #1
 800666c:	2b39      	cmp	r3, #57	; 0x39
 800666e:	d04d      	beq.n	800670c <_dtoa_r+0xaec>
 8006670:	3301      	adds	r3, #1
 8006672:	e052      	b.n	800671a <_dtoa_r+0xafa>
 8006674:	9a07      	ldr	r2, [sp, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f102 0501 	add.w	r5, r2, #1
 800667c:	dd06      	ble.n	800668c <_dtoa_r+0xa6c>
 800667e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006682:	d0eb      	beq.n	800665c <_dtoa_r+0xa3c>
 8006684:	f108 0801 	add.w	r8, r8, #1
 8006688:	9b07      	ldr	r3, [sp, #28]
 800668a:	e7c4      	b.n	8006616 <_dtoa_r+0x9f6>
 800668c:	9b06      	ldr	r3, [sp, #24]
 800668e:	9a04      	ldr	r2, [sp, #16]
 8006690:	1aeb      	subs	r3, r5, r3
 8006692:	4293      	cmp	r3, r2
 8006694:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006698:	d021      	beq.n	80066de <_dtoa_r+0xabe>
 800669a:	4659      	mov	r1, fp
 800669c:	2300      	movs	r3, #0
 800669e:	220a      	movs	r2, #10
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 f8dd 	bl	8006860 <__multadd>
 80066a6:	45b9      	cmp	r9, r7
 80066a8:	4683      	mov	fp, r0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	f04f 020a 	mov.w	r2, #10
 80066b2:	4649      	mov	r1, r9
 80066b4:	4620      	mov	r0, r4
 80066b6:	d105      	bne.n	80066c4 <_dtoa_r+0xaa4>
 80066b8:	f000 f8d2 	bl	8006860 <__multadd>
 80066bc:	4681      	mov	r9, r0
 80066be:	4607      	mov	r7, r0
 80066c0:	9507      	str	r5, [sp, #28]
 80066c2:	e778      	b.n	80065b6 <_dtoa_r+0x996>
 80066c4:	f000 f8cc 	bl	8006860 <__multadd>
 80066c8:	4639      	mov	r1, r7
 80066ca:	4681      	mov	r9, r0
 80066cc:	2300      	movs	r3, #0
 80066ce:	220a      	movs	r2, #10
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 f8c5 	bl	8006860 <__multadd>
 80066d6:	4607      	mov	r7, r0
 80066d8:	e7f2      	b.n	80066c0 <_dtoa_r+0xaa0>
 80066da:	f04f 0900 	mov.w	r9, #0
 80066de:	4659      	mov	r1, fp
 80066e0:	2201      	movs	r2, #1
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 fa32 	bl	8006b4c <__lshift>
 80066e8:	4631      	mov	r1, r6
 80066ea:	4683      	mov	fp, r0
 80066ec:	f000 fa82 	bl	8006bf4 <__mcmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	dcb8      	bgt.n	8006666 <_dtoa_r+0xa46>
 80066f4:	d102      	bne.n	80066fc <_dtoa_r+0xadc>
 80066f6:	f018 0f01 	tst.w	r8, #1
 80066fa:	d1b4      	bne.n	8006666 <_dtoa_r+0xa46>
 80066fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006700:	1e6a      	subs	r2, r5, #1
 8006702:	2b30      	cmp	r3, #48	; 0x30
 8006704:	f47f af0f 	bne.w	8006526 <_dtoa_r+0x906>
 8006708:	4615      	mov	r5, r2
 800670a:	e7f7      	b.n	80066fc <_dtoa_r+0xadc>
 800670c:	9b06      	ldr	r3, [sp, #24]
 800670e:	4293      	cmp	r3, r2
 8006710:	d105      	bne.n	800671e <_dtoa_r+0xafe>
 8006712:	2331      	movs	r3, #49	; 0x31
 8006714:	9a06      	ldr	r2, [sp, #24]
 8006716:	f10a 0a01 	add.w	sl, sl, #1
 800671a:	7013      	strb	r3, [r2, #0]
 800671c:	e703      	b.n	8006526 <_dtoa_r+0x906>
 800671e:	4615      	mov	r5, r2
 8006720:	e7a1      	b.n	8006666 <_dtoa_r+0xa46>
 8006722:	4b17      	ldr	r3, [pc, #92]	; (8006780 <_dtoa_r+0xb60>)
 8006724:	f7ff bae1 	b.w	8005cea <_dtoa_r+0xca>
 8006728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672a:	2b00      	cmp	r3, #0
 800672c:	f47f aabb 	bne.w	8005ca6 <_dtoa_r+0x86>
 8006730:	4b14      	ldr	r3, [pc, #80]	; (8006784 <_dtoa_r+0xb64>)
 8006732:	f7ff bada 	b.w	8005cea <_dtoa_r+0xca>
 8006736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006738:	2b01      	cmp	r3, #1
 800673a:	f77f ae3f 	ble.w	80063bc <_dtoa_r+0x79c>
 800673e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006740:	9308      	str	r3, [sp, #32]
 8006742:	e653      	b.n	80063ec <_dtoa_r+0x7cc>
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dc03      	bgt.n	8006752 <_dtoa_r+0xb32>
 800674a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800674c:	2b02      	cmp	r3, #2
 800674e:	f73f aed5 	bgt.w	80064fc <_dtoa_r+0x8dc>
 8006752:	9d06      	ldr	r5, [sp, #24]
 8006754:	4631      	mov	r1, r6
 8006756:	4658      	mov	r0, fp
 8006758:	f7ff f9d2 	bl	8005b00 <quorem>
 800675c:	9b06      	ldr	r3, [sp, #24]
 800675e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006762:	f805 8b01 	strb.w	r8, [r5], #1
 8006766:	9a04      	ldr	r2, [sp, #16]
 8006768:	1aeb      	subs	r3, r5, r3
 800676a:	429a      	cmp	r2, r3
 800676c:	ddb5      	ble.n	80066da <_dtoa_r+0xaba>
 800676e:	4659      	mov	r1, fp
 8006770:	2300      	movs	r3, #0
 8006772:	220a      	movs	r2, #10
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f873 	bl	8006860 <__multadd>
 800677a:	4683      	mov	fp, r0
 800677c:	e7ea      	b.n	8006754 <_dtoa_r+0xb34>
 800677e:	bf00      	nop
 8006780:	08006fcd 	.word	0x08006fcd
 8006784:	08006fcf 	.word	0x08006fcf

08006788 <_localeconv_r>:
 8006788:	4b04      	ldr	r3, [pc, #16]	; (800679c <_localeconv_r+0x14>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a18      	ldr	r0, [r3, #32]
 800678e:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <_localeconv_r+0x18>)
 8006790:	2800      	cmp	r0, #0
 8006792:	bf08      	it	eq
 8006794:	4618      	moveq	r0, r3
 8006796:	30f0      	adds	r0, #240	; 0xf0
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000010 	.word	0x20000010
 80067a0:	20000074 	.word	0x20000074

080067a4 <malloc>:
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <malloc+0xc>)
 80067a6:	4601      	mov	r1, r0
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	f000 baf9 	b.w	8006da0 <_malloc_r>
 80067ae:	bf00      	nop
 80067b0:	20000010 	.word	0x20000010

080067b4 <memcpy>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	1e43      	subs	r3, r0, #1
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	d100      	bne.n	80067c0 <memcpy+0xc>
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c8:	e7f7      	b.n	80067ba <memcpy+0x6>

080067ca <_Balloc>:
 80067ca:	b570      	push	{r4, r5, r6, lr}
 80067cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067ce:	4604      	mov	r4, r0
 80067d0:	460e      	mov	r6, r1
 80067d2:	b93d      	cbnz	r5, 80067e4 <_Balloc+0x1a>
 80067d4:	2010      	movs	r0, #16
 80067d6:	f7ff ffe5 	bl	80067a4 <malloc>
 80067da:	6260      	str	r0, [r4, #36]	; 0x24
 80067dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067e0:	6005      	str	r5, [r0, #0]
 80067e2:	60c5      	str	r5, [r0, #12]
 80067e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067e6:	68eb      	ldr	r3, [r5, #12]
 80067e8:	b183      	cbz	r3, 800680c <_Balloc+0x42>
 80067ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067f2:	b9b8      	cbnz	r0, 8006824 <_Balloc+0x5a>
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f506 	lsl.w	r5, r1, r6
 80067fa:	1d6a      	adds	r2, r5, #5
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 fabf 	bl	8006d82 <_calloc_r>
 8006804:	b160      	cbz	r0, 8006820 <_Balloc+0x56>
 8006806:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800680a:	e00e      	b.n	800682a <_Balloc+0x60>
 800680c:	2221      	movs	r2, #33	; 0x21
 800680e:	2104      	movs	r1, #4
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fab6 	bl	8006d82 <_calloc_r>
 8006816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006818:	60e8      	str	r0, [r5, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e4      	bne.n	80067ea <_Balloc+0x20>
 8006820:	2000      	movs	r0, #0
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	6802      	ldr	r2, [r0, #0]
 8006826:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800682a:	2300      	movs	r3, #0
 800682c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006830:	e7f7      	b.n	8006822 <_Balloc+0x58>

08006832 <_Bfree>:
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006836:	4606      	mov	r6, r0
 8006838:	460d      	mov	r5, r1
 800683a:	b93c      	cbnz	r4, 800684c <_Bfree+0x1a>
 800683c:	2010      	movs	r0, #16
 800683e:	f7ff ffb1 	bl	80067a4 <malloc>
 8006842:	6270      	str	r0, [r6, #36]	; 0x24
 8006844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006848:	6004      	str	r4, [r0, #0]
 800684a:	60c4      	str	r4, [r0, #12]
 800684c:	b13d      	cbz	r5, 800685e <_Bfree+0x2c>
 800684e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006850:	686a      	ldr	r2, [r5, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006858:	6029      	str	r1, [r5, #0]
 800685a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800685e:	bd70      	pop	{r4, r5, r6, pc}

08006860 <__multadd>:
 8006860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006864:	461f      	mov	r7, r3
 8006866:	4606      	mov	r6, r0
 8006868:	460c      	mov	r4, r1
 800686a:	2300      	movs	r3, #0
 800686c:	690d      	ldr	r5, [r1, #16]
 800686e:	f101 0c14 	add.w	ip, r1, #20
 8006872:	f8dc 0000 	ldr.w	r0, [ip]
 8006876:	3301      	adds	r3, #1
 8006878:	b281      	uxth	r1, r0
 800687a:	fb02 7101 	mla	r1, r2, r1, r7
 800687e:	0c00      	lsrs	r0, r0, #16
 8006880:	0c0f      	lsrs	r7, r1, #16
 8006882:	fb02 7000 	mla	r0, r2, r0, r7
 8006886:	b289      	uxth	r1, r1
 8006888:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800688c:	429d      	cmp	r5, r3
 800688e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006892:	f84c 1b04 	str.w	r1, [ip], #4
 8006896:	dcec      	bgt.n	8006872 <__multadd+0x12>
 8006898:	b1d7      	cbz	r7, 80068d0 <__multadd+0x70>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	42ab      	cmp	r3, r5
 800689e:	dc12      	bgt.n	80068c6 <__multadd+0x66>
 80068a0:	6861      	ldr	r1, [r4, #4]
 80068a2:	4630      	mov	r0, r6
 80068a4:	3101      	adds	r1, #1
 80068a6:	f7ff ff90 	bl	80067ca <_Balloc>
 80068aa:	4680      	mov	r8, r0
 80068ac:	6922      	ldr	r2, [r4, #16]
 80068ae:	f104 010c 	add.w	r1, r4, #12
 80068b2:	3202      	adds	r2, #2
 80068b4:	0092      	lsls	r2, r2, #2
 80068b6:	300c      	adds	r0, #12
 80068b8:	f7ff ff7c 	bl	80067b4 <memcpy>
 80068bc:	4621      	mov	r1, r4
 80068be:	4630      	mov	r0, r6
 80068c0:	f7ff ffb7 	bl	8006832 <_Bfree>
 80068c4:	4644      	mov	r4, r8
 80068c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068ca:	3501      	adds	r5, #1
 80068cc:	615f      	str	r7, [r3, #20]
 80068ce:	6125      	str	r5, [r4, #16]
 80068d0:	4620      	mov	r0, r4
 80068d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068d6 <__hi0bits>:
 80068d6:	0c02      	lsrs	r2, r0, #16
 80068d8:	0412      	lsls	r2, r2, #16
 80068da:	4603      	mov	r3, r0
 80068dc:	b9b2      	cbnz	r2, 800690c <__hi0bits+0x36>
 80068de:	0403      	lsls	r3, r0, #16
 80068e0:	2010      	movs	r0, #16
 80068e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80068e6:	bf04      	itt	eq
 80068e8:	021b      	lsleq	r3, r3, #8
 80068ea:	3008      	addeq	r0, #8
 80068ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80068f0:	bf04      	itt	eq
 80068f2:	011b      	lsleq	r3, r3, #4
 80068f4:	3004      	addeq	r0, #4
 80068f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068fa:	bf04      	itt	eq
 80068fc:	009b      	lsleq	r3, r3, #2
 80068fe:	3002      	addeq	r0, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	db06      	blt.n	8006912 <__hi0bits+0x3c>
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	d503      	bpl.n	8006910 <__hi0bits+0x3a>
 8006908:	3001      	adds	r0, #1
 800690a:	4770      	bx	lr
 800690c:	2000      	movs	r0, #0
 800690e:	e7e8      	b.n	80068e2 <__hi0bits+0xc>
 8006910:	2020      	movs	r0, #32
 8006912:	4770      	bx	lr

08006914 <__lo0bits>:
 8006914:	6803      	ldr	r3, [r0, #0]
 8006916:	4601      	mov	r1, r0
 8006918:	f013 0207 	ands.w	r2, r3, #7
 800691c:	d00b      	beq.n	8006936 <__lo0bits+0x22>
 800691e:	07da      	lsls	r2, r3, #31
 8006920:	d423      	bmi.n	800696a <__lo0bits+0x56>
 8006922:	0798      	lsls	r0, r3, #30
 8006924:	bf49      	itett	mi
 8006926:	085b      	lsrmi	r3, r3, #1
 8006928:	089b      	lsrpl	r3, r3, #2
 800692a:	2001      	movmi	r0, #1
 800692c:	600b      	strmi	r3, [r1, #0]
 800692e:	bf5c      	itt	pl
 8006930:	600b      	strpl	r3, [r1, #0]
 8006932:	2002      	movpl	r0, #2
 8006934:	4770      	bx	lr
 8006936:	b298      	uxth	r0, r3
 8006938:	b9a8      	cbnz	r0, 8006966 <__lo0bits+0x52>
 800693a:	2010      	movs	r0, #16
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006942:	bf04      	itt	eq
 8006944:	0a1b      	lsreq	r3, r3, #8
 8006946:	3008      	addeq	r0, #8
 8006948:	071a      	lsls	r2, r3, #28
 800694a:	bf04      	itt	eq
 800694c:	091b      	lsreq	r3, r3, #4
 800694e:	3004      	addeq	r0, #4
 8006950:	079a      	lsls	r2, r3, #30
 8006952:	bf04      	itt	eq
 8006954:	089b      	lsreq	r3, r3, #2
 8006956:	3002      	addeq	r0, #2
 8006958:	07da      	lsls	r2, r3, #31
 800695a:	d402      	bmi.n	8006962 <__lo0bits+0x4e>
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	d006      	beq.n	800696e <__lo0bits+0x5a>
 8006960:	3001      	adds	r0, #1
 8006962:	600b      	str	r3, [r1, #0]
 8006964:	4770      	bx	lr
 8006966:	4610      	mov	r0, r2
 8006968:	e7e9      	b.n	800693e <__lo0bits+0x2a>
 800696a:	2000      	movs	r0, #0
 800696c:	4770      	bx	lr
 800696e:	2020      	movs	r0, #32
 8006970:	4770      	bx	lr

08006972 <__i2b>:
 8006972:	b510      	push	{r4, lr}
 8006974:	460c      	mov	r4, r1
 8006976:	2101      	movs	r1, #1
 8006978:	f7ff ff27 	bl	80067ca <_Balloc>
 800697c:	2201      	movs	r2, #1
 800697e:	6144      	str	r4, [r0, #20]
 8006980:	6102      	str	r2, [r0, #16]
 8006982:	bd10      	pop	{r4, pc}

08006984 <__multiply>:
 8006984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	4614      	mov	r4, r2
 800698a:	690a      	ldr	r2, [r1, #16]
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	4688      	mov	r8, r1
 8006990:	429a      	cmp	r2, r3
 8006992:	bfbe      	ittt	lt
 8006994:	460b      	movlt	r3, r1
 8006996:	46a0      	movlt	r8, r4
 8006998:	461c      	movlt	r4, r3
 800699a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800699e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80069a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069aa:	eb07 0609 	add.w	r6, r7, r9
 80069ae:	42b3      	cmp	r3, r6
 80069b0:	bfb8      	it	lt
 80069b2:	3101      	addlt	r1, #1
 80069b4:	f7ff ff09 	bl	80067ca <_Balloc>
 80069b8:	f100 0514 	add.w	r5, r0, #20
 80069bc:	462b      	mov	r3, r5
 80069be:	2200      	movs	r2, #0
 80069c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80069c4:	4573      	cmp	r3, lr
 80069c6:	d316      	bcc.n	80069f6 <__multiply+0x72>
 80069c8:	f104 0214 	add.w	r2, r4, #20
 80069cc:	f108 0114 	add.w	r1, r8, #20
 80069d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80069d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	9b00      	ldr	r3, [sp, #0]
 80069dc:	9201      	str	r2, [sp, #4]
 80069de:	4293      	cmp	r3, r2
 80069e0:	d80c      	bhi.n	80069fc <__multiply+0x78>
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	dd03      	ble.n	80069ee <__multiply+0x6a>
 80069e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d05d      	beq.n	8006aaa <__multiply+0x126>
 80069ee:	6106      	str	r6, [r0, #16]
 80069f0:	b003      	add	sp, #12
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	f843 2b04 	str.w	r2, [r3], #4
 80069fa:	e7e3      	b.n	80069c4 <__multiply+0x40>
 80069fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a00:	f1bb 0f00 	cmp.w	fp, #0
 8006a04:	d023      	beq.n	8006a4e <__multiply+0xca>
 8006a06:	4689      	mov	r9, r1
 8006a08:	46ac      	mov	ip, r5
 8006a0a:	f04f 0800 	mov.w	r8, #0
 8006a0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a12:	f8dc a000 	ldr.w	sl, [ip]
 8006a16:	b2a3      	uxth	r3, r4
 8006a18:	fa1f fa8a 	uxth.w	sl, sl
 8006a1c:	fb0b a303 	mla	r3, fp, r3, sl
 8006a20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a24:	f8dc 4000 	ldr.w	r4, [ip]
 8006a28:	4443      	add	r3, r8
 8006a2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a32:	46e2      	mov	sl, ip
 8006a34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a3e:	454f      	cmp	r7, r9
 8006a40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a44:	f84a 3b04 	str.w	r3, [sl], #4
 8006a48:	d82b      	bhi.n	8006aa2 <__multiply+0x11e>
 8006a4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	3204      	adds	r2, #4
 8006a52:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006a56:	f1ba 0f00 	cmp.w	sl, #0
 8006a5a:	d020      	beq.n	8006a9e <__multiply+0x11a>
 8006a5c:	4689      	mov	r9, r1
 8006a5e:	46a8      	mov	r8, r5
 8006a60:	f04f 0b00 	mov.w	fp, #0
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	f8b9 c000 	ldrh.w	ip, [r9]
 8006a6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	fb0a 440c 	mla	r4, sl, ip, r4
 8006a74:	46c4      	mov	ip, r8
 8006a76:	445c      	add	r4, fp
 8006a78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a7c:	f84c 3b04 	str.w	r3, [ip], #4
 8006a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	fb0a b303 	mla	r3, sl, r3, fp
 8006a8e:	454f      	cmp	r7, r9
 8006a90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006a98:	d805      	bhi.n	8006aa6 <__multiply+0x122>
 8006a9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a9e:	3504      	adds	r5, #4
 8006aa0:	e79b      	b.n	80069da <__multiply+0x56>
 8006aa2:	46d4      	mov	ip, sl
 8006aa4:	e7b3      	b.n	8006a0e <__multiply+0x8a>
 8006aa6:	46e0      	mov	r8, ip
 8006aa8:	e7dd      	b.n	8006a66 <__multiply+0xe2>
 8006aaa:	3e01      	subs	r6, #1
 8006aac:	e799      	b.n	80069e2 <__multiply+0x5e>
	...

08006ab0 <__pow5mult>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	4615      	mov	r5, r2
 8006ab6:	f012 0203 	ands.w	r2, r2, #3
 8006aba:	4606      	mov	r6, r0
 8006abc:	460f      	mov	r7, r1
 8006abe:	d007      	beq.n	8006ad0 <__pow5mult+0x20>
 8006ac0:	4c21      	ldr	r4, [pc, #132]	; (8006b48 <__pow5mult+0x98>)
 8006ac2:	3a01      	subs	r2, #1
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aca:	f7ff fec9 	bl	8006860 <__multadd>
 8006ace:	4607      	mov	r7, r0
 8006ad0:	10ad      	asrs	r5, r5, #2
 8006ad2:	d035      	beq.n	8006b40 <__pow5mult+0x90>
 8006ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ad6:	b93c      	cbnz	r4, 8006ae8 <__pow5mult+0x38>
 8006ad8:	2010      	movs	r0, #16
 8006ada:	f7ff fe63 	bl	80067a4 <malloc>
 8006ade:	6270      	str	r0, [r6, #36]	; 0x24
 8006ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ae4:	6004      	str	r4, [r0, #0]
 8006ae6:	60c4      	str	r4, [r0, #12]
 8006ae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006af0:	b94c      	cbnz	r4, 8006b06 <__pow5mult+0x56>
 8006af2:	f240 2171 	movw	r1, #625	; 0x271
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff ff3b 	bl	8006972 <__i2b>
 8006afc:	2300      	movs	r3, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b04:	6003      	str	r3, [r0, #0]
 8006b06:	f04f 0800 	mov.w	r8, #0
 8006b0a:	07eb      	lsls	r3, r5, #31
 8006b0c:	d50a      	bpl.n	8006b24 <__pow5mult+0x74>
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4622      	mov	r2, r4
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ff36 	bl	8006984 <__multiply>
 8006b18:	4681      	mov	r9, r0
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff fe88 	bl	8006832 <_Bfree>
 8006b22:	464f      	mov	r7, r9
 8006b24:	106d      	asrs	r5, r5, #1
 8006b26:	d00b      	beq.n	8006b40 <__pow5mult+0x90>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	b938      	cbnz	r0, 8006b3c <__pow5mult+0x8c>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ff27 	bl	8006984 <__multiply>
 8006b36:	6020      	str	r0, [r4, #0]
 8006b38:	f8c0 8000 	str.w	r8, [r0]
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	e7e4      	b.n	8006b0a <__pow5mult+0x5a>
 8006b40:	4638      	mov	r0, r7
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	bf00      	nop
 8006b48:	080070d0 	.word	0x080070d0

08006b4c <__lshift>:
 8006b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	460c      	mov	r4, r1
 8006b52:	4607      	mov	r7, r0
 8006b54:	4616      	mov	r6, r2
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b5c:	eb0a 0903 	add.w	r9, sl, r3
 8006b60:	6849      	ldr	r1, [r1, #4]
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	f109 0501 	add.w	r5, r9, #1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	db32      	blt.n	8006bd2 <__lshift+0x86>
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f7ff fe2c 	bl	80067ca <_Balloc>
 8006b72:	2300      	movs	r3, #0
 8006b74:	4680      	mov	r8, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	f100 0114 	add.w	r1, r0, #20
 8006b7c:	4553      	cmp	r3, sl
 8006b7e:	db2b      	blt.n	8006bd8 <__lshift+0x8c>
 8006b80:	6920      	ldr	r0, [r4, #16]
 8006b82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b86:	f104 0314 	add.w	r3, r4, #20
 8006b8a:	f016 021f 	ands.w	r2, r6, #31
 8006b8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b96:	d025      	beq.n	8006be4 <__lshift+0x98>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f1c2 0e20 	rsb	lr, r2, #32
 8006b9e:	468a      	mov	sl, r1
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	4096      	lsls	r6, r2
 8006ba4:	4330      	orrs	r0, r6
 8006ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8006baa:	f853 0b04 	ldr.w	r0, [r3], #4
 8006bae:	459c      	cmp	ip, r3
 8006bb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8006bb4:	d814      	bhi.n	8006be0 <__lshift+0x94>
 8006bb6:	6048      	str	r0, [r1, #4]
 8006bb8:	b108      	cbz	r0, 8006bbe <__lshift+0x72>
 8006bba:	f109 0502 	add.w	r5, r9, #2
 8006bbe:	3d01      	subs	r5, #1
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	f7ff fe33 	bl	8006832 <_Bfree>
 8006bcc:	4640      	mov	r0, r8
 8006bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd2:	3101      	adds	r1, #1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	e7c7      	b.n	8006b68 <__lshift+0x1c>
 8006bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	e7cd      	b.n	8006b7c <__lshift+0x30>
 8006be0:	4651      	mov	r1, sl
 8006be2:	e7dc      	b.n	8006b9e <__lshift+0x52>
 8006be4:	3904      	subs	r1, #4
 8006be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bea:	459c      	cmp	ip, r3
 8006bec:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bf0:	d8f9      	bhi.n	8006be6 <__lshift+0x9a>
 8006bf2:	e7e4      	b.n	8006bbe <__lshift+0x72>

08006bf4 <__mcmp>:
 8006bf4:	6903      	ldr	r3, [r0, #16]
 8006bf6:	690a      	ldr	r2, [r1, #16]
 8006bf8:	b530      	push	{r4, r5, lr}
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	d10c      	bne.n	8006c18 <__mcmp+0x24>
 8006bfe:	0092      	lsls	r2, r2, #2
 8006c00:	3014      	adds	r0, #20
 8006c02:	3114      	adds	r1, #20
 8006c04:	1884      	adds	r4, r0, r2
 8006c06:	4411      	add	r1, r2
 8006c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c10:	4295      	cmp	r5, r2
 8006c12:	d003      	beq.n	8006c1c <__mcmp+0x28>
 8006c14:	d305      	bcc.n	8006c22 <__mcmp+0x2e>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd30      	pop	{r4, r5, pc}
 8006c1c:	42a0      	cmp	r0, r4
 8006c1e:	d3f3      	bcc.n	8006c08 <__mcmp+0x14>
 8006c20:	e7fa      	b.n	8006c18 <__mcmp+0x24>
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295
 8006c26:	e7f7      	b.n	8006c18 <__mcmp+0x24>

08006c28 <__mdiff>:
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	4607      	mov	r7, r0
 8006c30:	4611      	mov	r1, r2
 8006c32:	4628      	mov	r0, r5
 8006c34:	4614      	mov	r4, r2
 8006c36:	f7ff ffdd 	bl	8006bf4 <__mcmp>
 8006c3a:	1e06      	subs	r6, r0, #0
 8006c3c:	d108      	bne.n	8006c50 <__mdiff+0x28>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff fdc2 	bl	80067ca <_Balloc>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c50:	bfa4      	itt	ge
 8006c52:	4623      	movge	r3, r4
 8006c54:	462c      	movge	r4, r5
 8006c56:	4638      	mov	r0, r7
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	bfa6      	itte	ge
 8006c5c:	461d      	movge	r5, r3
 8006c5e:	2600      	movge	r6, #0
 8006c60:	2601      	movlt	r6, #1
 8006c62:	f7ff fdb2 	bl	80067ca <_Balloc>
 8006c66:	f04f 0e00 	mov.w	lr, #0
 8006c6a:	60c6      	str	r6, [r0, #12]
 8006c6c:	692b      	ldr	r3, [r5, #16]
 8006c6e:	6926      	ldr	r6, [r4, #16]
 8006c70:	f104 0214 	add.w	r2, r4, #20
 8006c74:	f105 0914 	add.w	r9, r5, #20
 8006c78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006c7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006c80:	f100 0114 	add.w	r1, r0, #20
 8006c84:	f852 ab04 	ldr.w	sl, [r2], #4
 8006c88:	f859 5b04 	ldr.w	r5, [r9], #4
 8006c8c:	fa1f f38a 	uxth.w	r3, sl
 8006c90:	4473      	add	r3, lr
 8006c92:	b2ac      	uxth	r4, r5
 8006c94:	1b1b      	subs	r3, r3, r4
 8006c96:	0c2c      	lsrs	r4, r5, #16
 8006c98:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006c9c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006ca6:	45c8      	cmp	r8, r9
 8006ca8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006cac:	4694      	mov	ip, r2
 8006cae:	f841 4b04 	str.w	r4, [r1], #4
 8006cb2:	d8e7      	bhi.n	8006c84 <__mdiff+0x5c>
 8006cb4:	45bc      	cmp	ip, r7
 8006cb6:	d304      	bcc.n	8006cc2 <__mdiff+0x9a>
 8006cb8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006cbc:	b183      	cbz	r3, 8006ce0 <__mdiff+0xb8>
 8006cbe:	6106      	str	r6, [r0, #16]
 8006cc0:	e7c4      	b.n	8006c4c <__mdiff+0x24>
 8006cc2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006cc6:	b2a2      	uxth	r2, r4
 8006cc8:	4472      	add	r2, lr
 8006cca:	1413      	asrs	r3, r2, #16
 8006ccc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006cd0:	b292      	uxth	r2, r2
 8006cd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cd6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006cda:	f841 2b04 	str.w	r2, [r1], #4
 8006cde:	e7e9      	b.n	8006cb4 <__mdiff+0x8c>
 8006ce0:	3e01      	subs	r6, #1
 8006ce2:	e7e9      	b.n	8006cb8 <__mdiff+0x90>

08006ce4 <__d2b>:
 8006ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ce8:	461c      	mov	r4, r3
 8006cea:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4690      	mov	r8, r2
 8006cf2:	f7ff fd6a 	bl	80067ca <_Balloc>
 8006cf6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006cfa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006cfe:	4607      	mov	r7, r0
 8006d00:	bb34      	cbnz	r4, 8006d50 <__d2b+0x6c>
 8006d02:	9201      	str	r2, [sp, #4]
 8006d04:	f1b8 0200 	subs.w	r2, r8, #0
 8006d08:	d027      	beq.n	8006d5a <__d2b+0x76>
 8006d0a:	a802      	add	r0, sp, #8
 8006d0c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006d10:	f7ff fe00 	bl	8006914 <__lo0bits>
 8006d14:	9900      	ldr	r1, [sp, #0]
 8006d16:	b1f0      	cbz	r0, 8006d56 <__d2b+0x72>
 8006d18:	9a01      	ldr	r2, [sp, #4]
 8006d1a:	f1c0 0320 	rsb	r3, r0, #32
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	430b      	orrs	r3, r1
 8006d24:	40c2      	lsrs	r2, r0
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	2102      	movne	r1, #2
 8006d32:	2101      	moveq	r1, #1
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	6139      	str	r1, [r7, #16]
 8006d38:	b1c4      	cbz	r4, 8006d6c <__d2b+0x88>
 8006d3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d3e:	4404      	add	r4, r0
 8006d40:	6034      	str	r4, [r6, #0]
 8006d42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d46:	6028      	str	r0, [r5, #0]
 8006d48:	4638      	mov	r0, r7
 8006d4a:	b002      	add	sp, #8
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d54:	e7d5      	b.n	8006d02 <__d2b+0x1e>
 8006d56:	6179      	str	r1, [r7, #20]
 8006d58:	e7e7      	b.n	8006d2a <__d2b+0x46>
 8006d5a:	a801      	add	r0, sp, #4
 8006d5c:	f7ff fdda 	bl	8006914 <__lo0bits>
 8006d60:	2101      	movs	r1, #1
 8006d62:	9b01      	ldr	r3, [sp, #4]
 8006d64:	6139      	str	r1, [r7, #16]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	3020      	adds	r0, #32
 8006d6a:	e7e5      	b.n	8006d38 <__d2b+0x54>
 8006d6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d74:	6030      	str	r0, [r6, #0]
 8006d76:	6918      	ldr	r0, [r3, #16]
 8006d78:	f7ff fdad 	bl	80068d6 <__hi0bits>
 8006d7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d80:	e7e1      	b.n	8006d46 <__d2b+0x62>

08006d82 <_calloc_r>:
 8006d82:	b538      	push	{r3, r4, r5, lr}
 8006d84:	fb02 f401 	mul.w	r4, r2, r1
 8006d88:	4621      	mov	r1, r4
 8006d8a:	f000 f809 	bl	8006da0 <_malloc_r>
 8006d8e:	4605      	mov	r5, r0
 8006d90:	b118      	cbz	r0, 8006d9a <_calloc_r+0x18>
 8006d92:	4622      	mov	r2, r4
 8006d94:	2100      	movs	r1, #0
 8006d96:	f7fe fb6d 	bl	8005474 <memset>
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006da0 <_malloc_r>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	1ccd      	adds	r5, r1, #3
 8006da4:	f025 0503 	bic.w	r5, r5, #3
 8006da8:	3508      	adds	r5, #8
 8006daa:	2d0c      	cmp	r5, #12
 8006dac:	bf38      	it	cc
 8006dae:	250c      	movcc	r5, #12
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	4606      	mov	r6, r0
 8006db4:	db01      	blt.n	8006dba <_malloc_r+0x1a>
 8006db6:	42a9      	cmp	r1, r5
 8006db8:	d903      	bls.n	8006dc2 <_malloc_r+0x22>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	f000 f869 	bl	8006e98 <__malloc_lock>
 8006dc6:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <_malloc_r+0xac>)
 8006dc8:	6814      	ldr	r4, [r2, #0]
 8006dca:	4621      	mov	r1, r4
 8006dcc:	b991      	cbnz	r1, 8006df4 <_malloc_r+0x54>
 8006dce:	4c20      	ldr	r4, [pc, #128]	; (8006e50 <_malloc_r+0xb0>)
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	b91b      	cbnz	r3, 8006ddc <_malloc_r+0x3c>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 f83d 	bl	8006e54 <_sbrk_r>
 8006dda:	6020      	str	r0, [r4, #0]
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 f838 	bl	8006e54 <_sbrk_r>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d124      	bne.n	8006e32 <_malloc_r+0x92>
 8006de8:	230c      	movs	r3, #12
 8006dea:	4630      	mov	r0, r6
 8006dec:	6033      	str	r3, [r6, #0]
 8006dee:	f000 f854 	bl	8006e9a <__malloc_unlock>
 8006df2:	e7e4      	b.n	8006dbe <_malloc_r+0x1e>
 8006df4:	680b      	ldr	r3, [r1, #0]
 8006df6:	1b5b      	subs	r3, r3, r5
 8006df8:	d418      	bmi.n	8006e2c <_malloc_r+0x8c>
 8006dfa:	2b0b      	cmp	r3, #11
 8006dfc:	d90f      	bls.n	8006e1e <_malloc_r+0x7e>
 8006dfe:	600b      	str	r3, [r1, #0]
 8006e00:	18cc      	adds	r4, r1, r3
 8006e02:	50cd      	str	r5, [r1, r3]
 8006e04:	4630      	mov	r0, r6
 8006e06:	f000 f848 	bl	8006e9a <__malloc_unlock>
 8006e0a:	f104 000b 	add.w	r0, r4, #11
 8006e0e:	1d23      	adds	r3, r4, #4
 8006e10:	f020 0007 	bic.w	r0, r0, #7
 8006e14:	1ac3      	subs	r3, r0, r3
 8006e16:	d0d3      	beq.n	8006dc0 <_malloc_r+0x20>
 8006e18:	425a      	negs	r2, r3
 8006e1a:	50e2      	str	r2, [r4, r3]
 8006e1c:	e7d0      	b.n	8006dc0 <_malloc_r+0x20>
 8006e1e:	684b      	ldr	r3, [r1, #4]
 8006e20:	428c      	cmp	r4, r1
 8006e22:	bf16      	itet	ne
 8006e24:	6063      	strne	r3, [r4, #4]
 8006e26:	6013      	streq	r3, [r2, #0]
 8006e28:	460c      	movne	r4, r1
 8006e2a:	e7eb      	b.n	8006e04 <_malloc_r+0x64>
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	6849      	ldr	r1, [r1, #4]
 8006e30:	e7cc      	b.n	8006dcc <_malloc_r+0x2c>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d005      	beq.n	8006e48 <_malloc_r+0xa8>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f808 	bl	8006e54 <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d0cf      	beq.n	8006de8 <_malloc_r+0x48>
 8006e48:	6025      	str	r5, [r4, #0]
 8006e4a:	e7db      	b.n	8006e04 <_malloc_r+0x64>
 8006e4c:	20000200 	.word	0x20000200
 8006e50:	20000204 	.word	0x20000204

08006e54 <_sbrk_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4c05      	ldr	r4, [pc, #20]	; (8006e70 <_sbrk_r+0x1c>)
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	f7fd feb7 	bl	8004bd2 <_sbrk>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_sbrk_r+0x1a>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_sbrk_r+0x1a>
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20000300 	.word	0x20000300

08006e74 <__ascii_mbtowc>:
 8006e74:	b082      	sub	sp, #8
 8006e76:	b901      	cbnz	r1, 8006e7a <__ascii_mbtowc+0x6>
 8006e78:	a901      	add	r1, sp, #4
 8006e7a:	b142      	cbz	r2, 8006e8e <__ascii_mbtowc+0x1a>
 8006e7c:	b14b      	cbz	r3, 8006e92 <__ascii_mbtowc+0x1e>
 8006e7e:	7813      	ldrb	r3, [r2, #0]
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	1c10      	adds	r0, r2, #0
 8006e86:	bf18      	it	ne
 8006e88:	2001      	movne	r0, #1
 8006e8a:	b002      	add	sp, #8
 8006e8c:	4770      	bx	lr
 8006e8e:	4610      	mov	r0, r2
 8006e90:	e7fb      	b.n	8006e8a <__ascii_mbtowc+0x16>
 8006e92:	f06f 0001 	mvn.w	r0, #1
 8006e96:	e7f8      	b.n	8006e8a <__ascii_mbtowc+0x16>

08006e98 <__malloc_lock>:
 8006e98:	4770      	bx	lr

08006e9a <__malloc_unlock>:
 8006e9a:	4770      	bx	lr

08006e9c <__ascii_wctomb>:
 8006e9c:	b149      	cbz	r1, 8006eb2 <__ascii_wctomb+0x16>
 8006e9e:	2aff      	cmp	r2, #255	; 0xff
 8006ea0:	bf8b      	itete	hi
 8006ea2:	238a      	movhi	r3, #138	; 0x8a
 8006ea4:	700a      	strbls	r2, [r1, #0]
 8006ea6:	6003      	strhi	r3, [r0, #0]
 8006ea8:	2001      	movls	r0, #1
 8006eaa:	bf88      	it	hi
 8006eac:	f04f 30ff 	movhi.w	r0, #4294967295
 8006eb0:	4770      	bx	lr
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4770      	bx	lr
	...

08006eb8 <_init>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	bf00      	nop
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr

08006ec4 <_fini>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr
