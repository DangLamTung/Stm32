
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08004ee8  08004ee8  00014ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f8  080051f8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080051f8  080051f8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051f8  080051f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001e0  080053e0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080053e0  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fee5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002231  00000000  00000000  000300ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005236  00000000  00000000  0003231f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006a0  00000000  00000000  00037558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bb0  00000000  00000000  00037bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015110  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008887  00000000  00000000  0004d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006d913  00000000  00000000  0005613f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c3a52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001db4  00000000  00000000  000c3ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ed0 	.word	0x08004ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08004ed0 	.word	0x08004ed0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001026:	f240 0300 	movw	r3, #0
 800102a:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 800102e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	7818      	ldrb	r0, [r3, #0]
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	f240 0208 	movw	r2, #8
 800103a:	fbb3 f3f0 	udiv	r3, r3, r0
 800103e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001042:	6810      	ldr	r0, [r2, #0]
 8001044:	fbb0 f0f3 	udiv	r0, r0, r3
 8001048:	f000 f885 	bl	8001156 <HAL_SYSTICK_Config>
 800104c:	4604      	mov	r4, r0
 800104e:	b970      	cbnz	r0, 800106e <HAL_InitTick+0x4a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001050:	2d0f      	cmp	r5, #15
 8001052:	d80c      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	4602      	mov	r2, r0
 8001056:	4629      	mov	r1, r5
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f842 	bl	80010e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	f240 0304 	movw	r3, #4
 8001064:	4620      	mov	r0, r4
 8001066:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106a:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800106c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800106e:	2001      	movs	r0, #1
 8001070:	e7fc      	b.n	800106c <HAL_InitTick+0x48>

08001072 <HAL_Init>:
{
 8001072:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800107c:	681a      	ldr	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	f042 0210 	orr.w	r2, r2, #16
 8001084:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	f000 f81a 	bl	80010be <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ffca 	bl	8001024 <HAL_InitTick>
  HAL_MspInit();
 8001090:	f001 fd4d 	bl	8002b2e <HAL_MspInit>
}
 8001094:	2000      	movs	r0, #0
 8001096:	bd08      	pop	{r3, pc}

08001098 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001098:	f240 2308 	movw	r3, #520	; 0x208
 800109c:	f240 0100 	movw	r1, #0
 80010a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	780a      	ldrb	r2, [r1, #0]
 80010ac:	4402      	add	r2, r0
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	4770      	bx	lr

080010b2 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010b2:	f240 2308 	movw	r3, #520	; 0x208
 80010b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ba:	6818      	ldr	r0, [r3, #0]
}
 80010bc:	4770      	bx	lr

080010be <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010be:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80010c2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80010c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010c8:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ce:	041b      	lsls	r3, r3, #16
 80010d0:	0c1b      	lsrs	r3, r3, #16
 80010d2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010e2:	4770      	bx	lr

080010e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80010e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	f1c4 0507 	rsb	r5, r4, #7
 80010fc:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001102:	bf28      	it	cs
 8001104:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	2b06      	cmp	r3, #6
 8001108:	bf98      	it	ls
 800110a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001110:	bf88      	it	hi
 8001112:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	ea21 0303 	bic.w	r3, r1, r3
  if ((int32_t)(IRQn) < 0)
 8001118:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111a:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111e:	fa06 f404 	lsl.w	r4, r6, r4
 8001122:	ea22 0404 	bic.w	r4, r2, r4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	bfb8      	it	lt
 8001128:	f64e 42fc 	movwlt	r2, #60668	; 0xecfc
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	ea43 0304 	orr.w	r3, r3, r4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	bfb4      	ite	lt
 8001132:	f2ce 0200 	movtlt	r2, #57344	; 0xe000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800113a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	bfb8      	it	lt
 8001140:	f000 000f 	andlt.w	r0, r0, #15
 8001144:	b2db      	uxtb	r3, r3
 8001146:	bfb5      	itete	lt
 8001148:	1812      	addlt	r2, r2, r0
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	7613      	strblt	r3, [r2, #24]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001154:	bd70      	pop	{r4, r5, r6, pc}

08001156 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001156:	3801      	subs	r0, #1
 8001158:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800115c:	d210      	bcs.n	8001180 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	f24e 0310 	movw	r3, #57360	; 0xe010
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001166:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001168:	f2ce 0300 	movt	r3, #57344	; 0xe000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001170:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001176:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001178:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001180:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001182:	4770      	bx	lr

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001188:	f44f 6440 	mov.w	r4, #3072	; 0xc00
{
 800118c:	b089      	sub	sp, #36	; 0x24
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001192:	9402      	str	r4, [sp, #8]
 8001194:	f44f 5480 	mov.w	r4, #4096	; 0x1000
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119c:	f2c4 0401 	movt	r4, #16385	; 0x4001
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a4:	9403      	str	r4, [sp, #12]
 80011a6:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
  uint32_t config = 0x00U;
 80011aa:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	9300      	str	r3, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80011b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011ba:	9404      	str	r4, [sp, #16]
      switch (GPIO_Init->Mode)
 80011bc:	4614      	mov	r4, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	9301      	str	r3, [sp, #4]
      switch (GPIO_Init->Mode)
 80011c0:	4694      	mov	ip, r2
 80011c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c6:	4696      	mov	lr, r2
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011c8:	4616      	mov	r6, r2
      switch (GPIO_Init->Mode)
 80011ca:	f2c1 0421 	movt	r4, #4129	; 0x1021
 80011ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011d2:	9405      	str	r4, [sp, #20]
 80011d4:	f2c1 0c31 	movt	ip, #4145	; 0x1031
 80011d8:	f2c1 0e32 	movt	lr, #4146	; 0x1032
    ioposition = (0x01U << position);
 80011dc:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e0:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80011e2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80011ea:	45a0      	cmp	r8, r4
 80011ec:	d17d      	bne.n	80012ea <HAL_GPIO_Init+0x166>
      switch (GPIO_Init->Mode)
 80011ee:	684d      	ldr	r5, [r1, #4]
 80011f0:	2d12      	cmp	r5, #18
 80011f2:	f000 80b3 	beq.w	800135c <HAL_GPIO_Init+0x1d8>
 80011f6:	f200 8086 	bhi.w	8001306 <HAL_GPIO_Init+0x182>
 80011fa:	2d02      	cmp	r5, #2
 80011fc:	f000 80ab 	beq.w	8001356 <HAL_GPIO_Init+0x1d2>
 8001200:	d87a      	bhi.n	80012f8 <HAL_GPIO_Init+0x174>
 8001202:	2d00      	cmp	r5, #0
 8001204:	f000 8090 	beq.w	8001328 <HAL_GPIO_Init+0x1a4>
 8001208:	2d01      	cmp	r5, #1
 800120a:	f000 80a2 	beq.w	8001352 <HAL_GPIO_Init+0x1ce>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800120e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001212:	2cff      	cmp	r4, #255	; 0xff
 8001214:	bf93      	iteet	ls
 8001216:	4682      	movls	sl, r0
 8001218:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800121c:	3d08      	subhi	r5, #8
 800121e:	f8d0 b000 	ldrls.w	fp, [r0]
 8001222:	bf92      	itee	ls
 8001224:	00b5      	lslls	r5, r6, #2
 8001226:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800122a:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	fa09 f805 	lsl.w	r8, r9, r5
 8001230:	ea2b 0808 	bic.w	r8, fp, r8
 8001234:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001238:	bf88      	it	hi
 800123a:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800123e:	ea48 0505 	orr.w	r5, r8, r5
 8001242:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001246:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800124a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800124e:	d04c      	beq.n	80012ea <HAL_GPIO_Init+0x166>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001250:	9d00      	ldr	r5, [sp, #0]
 8001252:	9f00      	ldr	r7, [sp, #0]
 8001254:	69ad      	ldr	r5, [r5, #24]
 8001256:	f026 0803 	bic.w	r8, r6, #3
 800125a:	f045 0501 	orr.w	r5, r5, #1
 800125e:	61bd      	str	r5, [r7, #24]
 8001260:	9d00      	ldr	r5, [sp, #0]
 8001262:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001266:	69ad      	ldr	r5, [r5, #24]
 8001268:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800126c:	f005 0501 	and.w	r5, r5, #1
 8001270:	9507      	str	r5, [sp, #28]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001272:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	9d07      	ldr	r5, [sp, #28]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001278:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800127c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001280:	fa09 f90b 	lsl.w	r9, r9, fp
 8001284:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001288:	9d01      	ldr	r5, [sp, #4]
 800128a:	42a8      	cmp	r0, r5
 800128c:	d06b      	beq.n	8001366 <HAL_GPIO_Init+0x1e2>
 800128e:	9d02      	ldr	r5, [sp, #8]
 8001290:	42a8      	cmp	r0, r5
 8001292:	d06a      	beq.n	800136a <HAL_GPIO_Init+0x1e6>
 8001294:	9d03      	ldr	r5, [sp, #12]
 8001296:	42a8      	cmp	r0, r5
 8001298:	d069      	beq.n	800136e <HAL_GPIO_Init+0x1ea>
 800129a:	9d04      	ldr	r5, [sp, #16]
 800129c:	42a8      	cmp	r0, r5
 800129e:	bf0c      	ite	eq
 80012a0:	2503      	moveq	r5, #3
 80012a2:	2504      	movne	r5, #4
 80012a4:	fa05 f50b 	lsl.w	r5, r5, fp
 80012a8:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80012ac:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80012b6:	bf14      	ite	ne
 80012b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ba:	43a5      	biceq	r5, r4
 80012bc:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012be:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80012c4:	bf14      	ite	ne
 80012c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c8:	43a5      	biceq	r5, r4
 80012ca:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012cc:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ce:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d2:	bf14      	ite	ne
 80012d4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d6:	43a5      	biceq	r5, r4
 80012d8:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012da:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012dc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e0:	bf14      	ite	ne
 80012e2:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012e4:	ea25 0404 	biceq.w	r4, r5, r4
 80012e8:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	3601      	adds	r6, #1
 80012ec:	2e10      	cmp	r6, #16
 80012ee:	f47f af75 	bne.w	80011dc <HAL_GPIO_Init+0x58>
        }
      }
    }
  }
}
 80012f2:	b009      	add	sp, #36	; 0x24
 80012f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80012f8:	2d03      	cmp	r5, #3
 80012fa:	d028      	beq.n	800134e <HAL_GPIO_Init+0x1ca>
 80012fc:	2d11      	cmp	r5, #17
 80012fe:	d186      	bne.n	800120e <HAL_GPIO_Init+0x8a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001300:	68ca      	ldr	r2, [r1, #12]
 8001302:	3204      	adds	r2, #4
          break;
 8001304:	e783      	b.n	800120e <HAL_GPIO_Init+0x8a>
      switch (GPIO_Init->Mode)
 8001306:	9f05      	ldr	r7, [sp, #20]
 8001308:	42bd      	cmp	r5, r7
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1a4>
 800130c:	d816      	bhi.n	800133c <HAL_GPIO_Init+0x1b8>
 800130e:	f04f 0900 	mov.w	r9, #0
 8001312:	f2c1 0911 	movt	r9, #4113	; 0x1011
 8001316:	454d      	cmp	r5, r9
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_Init+0x1a4>
 800131a:	f04f 0900 	mov.w	r9, #0
 800131e:	f2c1 0912 	movt	r9, #4114	; 0x1012
 8001322:	454d      	cmp	r5, r9
 8001324:	f47f af73 	bne.w	800120e <HAL_GPIO_Init+0x8a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001328:	688a      	ldr	r2, [r1, #8]
 800132a:	b1d2      	cbz	r2, 8001362 <HAL_GPIO_Init+0x1de>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800132c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800132e:	bf0c      	ite	eq
 8001330:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001334:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2208      	movs	r2, #8
 800133a:	e768      	b.n	800120e <HAL_GPIO_Init+0x8a>
      switch (GPIO_Init->Mode)
 800133c:	4565      	cmp	r5, ip
 800133e:	d0f3      	beq.n	8001328 <HAL_GPIO_Init+0x1a4>
 8001340:	4575      	cmp	r5, lr
 8001342:	d0f1      	beq.n	8001328 <HAL_GPIO_Init+0x1a4>
 8001344:	f04f 0900 	mov.w	r9, #0
 8001348:	f2c1 0922 	movt	r9, #4130	; 0x1022
 800134c:	e7e9      	b.n	8001322 <HAL_GPIO_Init+0x19e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800134e:	2200      	movs	r2, #0
 8001350:	e75d      	b.n	800120e <HAL_GPIO_Init+0x8a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001352:	68ca      	ldr	r2, [r1, #12]
          break;
 8001354:	e75b      	b.n	800120e <HAL_GPIO_Init+0x8a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001356:	68ca      	ldr	r2, [r1, #12]
 8001358:	3208      	adds	r2, #8
          break;
 800135a:	e758      	b.n	800120e <HAL_GPIO_Init+0x8a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800135c:	68ca      	ldr	r2, [r1, #12]
 800135e:	320c      	adds	r2, #12
          break;
 8001360:	e755      	b.n	800120e <HAL_GPIO_Init+0x8a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001362:	2204      	movs	r2, #4
 8001364:	e753      	b.n	800120e <HAL_GPIO_Init+0x8a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	2500      	movs	r5, #0
 8001368:	e79c      	b.n	80012a4 <HAL_GPIO_Init+0x120>
 800136a:	2501      	movs	r5, #1
 800136c:	e79a      	b.n	80012a4 <HAL_GPIO_Init+0x120>
 800136e:	2502      	movs	r5, #2
 8001370:	e798      	b.n	80012a4 <HAL_GPIO_Init+0x120>

08001372 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001372:	b10a      	cbz	r2, 8001378 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001374:	6101      	str	r1, [r0, #16]
  }
}
 8001376:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001378:	0409      	lsls	r1, r1, #16
 800137a:	e7fb      	b.n	8001374 <HAL_GPIO_WritePin+0x2>

0800137c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800137c:	6802      	ldr	r2, [r0, #0]
 800137e:	6953      	ldr	r3, [r2, #20]
 8001380:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001384:	d00d      	beq.n	80013a2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001386:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800138a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800138c:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800138e:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001390:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001392:	2300      	movs	r3, #0
 8001394:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001396:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800139a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	4770      	bx	lr
  }
  return HAL_OK;
 80013a2:	4618      	mov	r0, r3
}
 80013a4:	4770      	bx	lr

080013a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80013a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	4616      	mov	r6, r2
 80013ae:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013b0:	b28f      	uxth	r7, r1
 80013b2:	6825      	ldr	r5, [r4, #0]
 80013b4:	6968      	ldr	r0, [r5, #20]
 80013b6:	ea37 0000 	bics.w	r0, r7, r0
 80013ba:	d013      	beq.n	80013e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013bc:	696b      	ldr	r3, [r5, #20]
 80013be:	055a      	lsls	r2, r3, #21
 80013c0:	d512      	bpl.n	80013e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013c2:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80013c4:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013cc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80013d0:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013d2:	2304      	movs	r3, #4
 80013d4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80013d6:	2300      	movs	r3, #0
      return HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80013da:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80013dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80013e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013e8:	1c73      	adds	r3, r6, #1
 80013ea:	d0e3      	beq.n	80013b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013ec:	b946      	cbnz	r6, 8001400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ee:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80013f0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013f2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
 80013fe:	e7f1      	b.n	80013e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001400:	f7ff fe57 	bl	80010b2 <HAL_GetTick>
 8001404:	eba0 0008 	sub.w	r0, r0, r8
 8001408:	42b0      	cmp	r0, r6
 800140a:	d9d2      	bls.n	80013b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 800140c:	e7ef      	b.n	80013ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>

0800140e <I2C_WaitOnFlagUntilTimeout>:
{
 800140e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001412:	4605      	mov	r5, r0
 8001414:	4690      	mov	r8, r2
 8001416:	461f      	mov	r7, r3
 8001418:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800141a:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800141e:	b28c      	uxth	r4, r1
 8001420:	6829      	ldr	r1, [r5, #0]
 8001422:	f1b9 0f01 	cmp.w	r9, #1
 8001426:	bf0c      	ite	eq
 8001428:	694b      	ldreq	r3, [r1, #20]
 800142a:	698b      	ldrne	r3, [r1, #24]
 800142c:	ea34 0303 	bics.w	r3, r4, r3
 8001430:	bf0c      	ite	eq
 8001432:	2301      	moveq	r3, #1
 8001434:	2300      	movne	r3, #0
 8001436:	4598      	cmp	r8, r3
 8001438:	d001      	beq.n	800143e <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800143a:	2000      	movs	r0, #0
 800143c:	e00c      	b.n	8001458 <I2C_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800143e:	1c7b      	adds	r3, r7, #1
 8001440:	d0ef      	beq.n	8001422 <I2C_WaitOnFlagUntilTimeout+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001442:	b95f      	cbnz	r7, 800145c <I2C_WaitOnFlagUntilTimeout+0x4e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001444:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001446:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8001448:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800144a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800144c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001450:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001454:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8001458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800145c:	f7ff fe29 	bl	80010b2 <HAL_GetTick>
 8001460:	1b80      	subs	r0, r0, r6
 8001462:	42b8      	cmp	r0, r7
 8001464:	d9dc      	bls.n	8001420 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001466:	e7ed      	b.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x36>

08001468 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4604      	mov	r4, r0
 800146c:	460d      	mov	r5, r1
 800146e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	d501      	bpl.n	800147c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001478:	2000      	movs	r0, #0
 800147a:	e012      	b.n	80014a2 <I2C_WaitOnTXEFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff7d 	bl	800137c <I2C_IsAcknowledgeFailed>
 8001482:	b9a8      	cbnz	r0, 80014b0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001484:	1c6a      	adds	r2, r5, #1
 8001486:	d0f3      	beq.n	8001470 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001488:	b965      	cbnz	r5, 80014a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800148a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800148c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001494:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001496:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001498:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800149a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800149e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014a4:	f7ff fe05 	bl	80010b2 <HAL_GetTick>
 80014a8:	1b80      	subs	r0, r0, r6
 80014aa:	42a8      	cmp	r0, r5
 80014ac:	d9e0      	bls.n	8001470 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80014ae:	e7ec      	b.n	800148a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
 80014b2:	e7f6      	b.n	80014a2 <I2C_WaitOnTXEFlagUntilTimeout+0x3a>

080014b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	6943      	ldr	r3, [r0, #20]
 80014c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80014c4:	d001      	beq.n	80014ca <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80014c6:	2000      	movs	r0, #0
 80014c8:	e00d      	b.n	80014e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014ca:	6942      	ldr	r2, [r0, #20]
 80014cc:	06d2      	lsls	r2, r2, #27
 80014ce:	d50b      	bpl.n	80014e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d0:	f06f 0210 	mvn.w	r2, #16
 80014d4:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80014d6:	2220      	movs	r2, #32
      return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014da:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80014e0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80014e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014e8:	b95d      	cbnz	r5, 8001502 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014ec:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ee:	f043 0320 	orr.w	r3, r3, #32
 80014f2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80014f4:	2320      	movs	r3, #32
 80014f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80014fa:	2300      	movs	r3, #0
 80014fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001500:	e7f1      	b.n	80014e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001502:	f7ff fdd6 	bl	80010b2 <HAL_GetTick>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	42a8      	cmp	r0, r5
 800150a:	d9d7      	bls.n	80014bc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800150c:	e7ed      	b.n	80014ea <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800150e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800150e:	b570      	push	{r4, r5, r6, lr}
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	075b      	lsls	r3, r3, #29
 800151c:	d501      	bpl.n	8001522 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800151e:	2000      	movs	r0, #0
 8001520:	e012      	b.n	8001548 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff ff2a 	bl	800137c <I2C_IsAcknowledgeFailed>
 8001528:	b9a8      	cbnz	r0, 8001556 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800152a:	1c6a      	adds	r2, r5, #1
 800152c:	d0f3      	beq.n	8001516 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800152e:	b965      	cbnz	r5, 800154a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001530:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001532:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800153a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800153c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800153e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001540:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001544:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8001548:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800154a:	f7ff fdb2 	bl	80010b2 <HAL_GetTick>
 800154e:	1b80      	subs	r0, r0, r6
 8001550:	42a8      	cmp	r0, r5
 8001552:	d9e0      	bls.n	8001516 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001554:	e7ec      	b.n	8001530 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e7f6      	b.n	8001548 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>

0800155a <HAL_I2C_Init>:
{
 800155a:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800155c:	4604      	mov	r4, r0
 800155e:	b908      	cbnz	r0, 8001564 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001560:	2001      	movs	r0, #1
}
 8001562:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001564:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800156c:	b91b      	cbnz	r3, 8001576 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800156e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001572:	f001 fafe 	bl	8002b72 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001576:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001578:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800157a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001586:	f000 fe11 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800158a:	f248 62a0 	movw	r2, #34464	; 0x86a0
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	f2c0 0201 	movt	r2, #1
 8001594:	4293      	cmp	r3, r2
 8001596:	d83a      	bhi.n	800160e <HAL_I2C_Init+0xb4>
 8001598:	f248 427f 	movw	r2, #33919	; 0x847f
 800159c:	f2c0 021e 	movt	r2, #30
 80015a0:	4290      	cmp	r0, r2
 80015a2:	d9dd      	bls.n	8001560 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80015a4:	f244 2240 	movw	r2, #16960	; 0x4240
 80015a8:	f2c0 020f 	movt	r2, #15
 80015ac:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015b4:	3201      	adds	r2, #1
 80015b6:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015b8:	f248 62a0 	movw	r2, #34464	; 0x86a0
 80015bc:	f2c0 0201 	movt	r2, #1
 80015c0:	4293      	cmp	r3, r2
 80015c2:	f100 30ff 	add.w	r0, r0, #4294967295
 80015c6:	d838      	bhi.n	800163a <HAL_I2C_Init+0xe0>
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80015ce:	1c43      	adds	r3, r0, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	bf38      	it	cc
 80015d8:	2304      	movcc	r3, #4
 80015da:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015dc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80015e4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80015ec:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	680b      	ldr	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f6:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001602:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800160c:	e7a9      	b.n	8001562 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800160e:	f640 02ff 	movw	r2, #2303	; 0x8ff
 8001612:	f2c0 023d 	movt	r2, #61	; 0x3d
 8001616:	4290      	cmp	r0, r2
 8001618:	d9a2      	bls.n	8001560 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800161a:	f244 2240 	movw	r2, #16960	; 0x4240
 800161e:	f2c0 020f 	movt	r2, #15
 8001622:	fbb0 f5f2 	udiv	r5, r0, r2
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001626:	f44f 7296 	mov.w	r2, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 800162a:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800162c:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800162e:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001630:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001634:	fbb2 f2f5 	udiv	r2, r2, r5
 8001638:	e7bc      	b.n	80015b4 <HAL_I2C_Init+0x5a>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800163a:	68a2      	ldr	r2, [r4, #8]
 800163c:	b952      	cbnz	r2, 8001654 <HAL_I2C_Init+0xfa>
 800163e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001642:	fbb0 f0f3 	udiv	r0, r0, r3
 8001646:	1c43      	adds	r3, r0, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	b16b      	cbz	r3, 800166a <HAL_I2C_Init+0x110>
 800164e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001652:	e7c2      	b.n	80015da <HAL_I2C_Init+0x80>
 8001654:	2219      	movs	r2, #25
 8001656:	4353      	muls	r3, r2
 8001658:	fbb0 f0f3 	udiv	r0, r0, r3
 800165c:	1c43      	adds	r3, r0, #1
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	b113      	cbz	r3, 800166a <HAL_I2C_Init+0x110>
 8001664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001668:	e7b7      	b.n	80015da <HAL_I2C_Init+0x80>
 800166a:	2301      	movs	r3, #1
 800166c:	e7b5      	b.n	80015da <HAL_I2C_Init+0x80>

0800166e <HAL_I2C_Master_Transmit>:
{
 800166e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001672:	4604      	mov	r4, r0
 8001674:	461f      	mov	r7, r3
 8001676:	460d      	mov	r5, r1
 8001678:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800167a:	f7ff fd1a 	bl	80010b2 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800167e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001682:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001684:	2b20      	cmp	r3, #32
 8001686:	d004      	beq.n	8001692 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001688:	2502      	movs	r5, #2
}
 800168a:	4628      	mov	r0, r5
 800168c:	b004      	add	sp, #16
 800168e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001692:	2102      	movs	r1, #2
 8001694:	9000      	str	r0, [sp, #0]
 8001696:	2319      	movs	r3, #25
 8001698:	2201      	movs	r2, #1
 800169a:	f2c0 0110 	movt	r1, #16
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff feb5 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d1ef      	bne.n	8001688 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80016a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d0eb      	beq.n	8001688 <HAL_I2C_Master_Transmit+0x1a>
 80016b0:	2301      	movs	r3, #1
 80016b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80016bc:	bf5e      	ittt	pl
 80016be:	681a      	ldrpl	r2, [r3, #0]
 80016c0:	f042 0201 	orrpl.w	r2, r2, #1
 80016c4:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016cc:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ce:	2221      	movs	r2, #33	; 0x21
 80016d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016d4:	2210      	movs	r2, #16
 80016d6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016da:	2200      	movs	r2, #0
 80016dc:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016de:	f6cf 72ff 	movt	r2, #65535	; 0xffff
    hi2c->XferCount   = Size;
 80016e2:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80016e8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80016ec:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016f0:	2a04      	cmp	r2, #4
 80016f2:	d004      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x90>
 80016f4:	2a01      	cmp	r2, #1
 80016f6:	d002      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x90>
 80016f8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016fc:	d104      	bne.n	8001708 <HAL_I2C_Master_Transmit+0x9a>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e002      	b.n	800170e <HAL_I2C_Master_Transmit+0xa0>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001708:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800170a:	2a12      	cmp	r2, #18
 800170c:	d0f7      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x90>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800170e:	9600      	str	r6, [sp, #0]
 8001710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fe78 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 800171e:	2800      	cmp	r0, #0
 8001720:	d137      	bne.n	8001792 <HAL_I2C_Master_Transmit+0x124>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001722:	6923      	ldr	r3, [r4, #16]
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800172a:	d122      	bne.n	8001772 <HAL_I2C_Master_Transmit+0x104>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800172c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001730:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001732:	2102      	movs	r1, #2
 8001734:	4633      	mov	r3, r6
 8001736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001738:	f2c0 0101 	movt	r1, #1
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fe32 	bl	80013a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001742:	4605      	mov	r5, r0
 8001744:	bb20      	cbnz	r0, 8001790 <HAL_I2C_Master_Transmit+0x122>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	9003      	str	r0, [sp, #12]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	9203      	str	r2, [sp, #12]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	9303      	str	r3, [sp, #12]
 8001752:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001754:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001756:	bb4b      	cbnz	r3, 80017ac <HAL_I2C_Master_Transmit+0x13e>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001758:	6821      	ldr	r1, [r4, #0]
 800175a:	680a      	ldr	r2, [r1, #0]
 800175c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001760:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001762:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001764:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001770:	e78b      	b.n	800168a <HAL_I2C_Master_Transmit+0x1c>
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001772:	2108      	movs	r1, #8
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001774:	11eb      	asrs	r3, r5, #7
 8001776:	f003 0306 	and.w	r3, r3, #6
 800177a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800177e:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001780:	f2c0 0101 	movt	r1, #1
 8001784:	4633      	mov	r3, r6
 8001786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fe0c 	bl	80013a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800178e:	b148      	cbz	r0, 80017a4 <HAL_I2C_Master_Transmit+0x136>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001790:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001794:	2b04      	cmp	r3, #4
 8001796:	f04f 0300 	mov.w	r3, #0
        __HAL_UNLOCK(hi2c);
 800179a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179e:	d10e      	bne.n	80017be <HAL_I2C_Master_Transmit+0x150>
          return HAL_ERROR;
 80017a0:	2501      	movs	r5, #1
 80017a2:	e772      	b.n	800168a <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	b2ed      	uxtb	r5, r5
 80017a8:	611d      	str	r5, [r3, #16]
 80017aa:	e7c2      	b.n	8001732 <HAL_I2C_Master_Transmit+0xc4>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ac:	4632      	mov	r2, r6
 80017ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff fe59 	bl	8001468 <I2C_WaitOnTXEFlagUntilTimeout>
 80017b6:	b120      	cbz	r0, 80017c2 <HAL_I2C_Master_Transmit+0x154>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d025      	beq.n	800180a <HAL_I2C_Master_Transmit+0x19c>
          return HAL_TIMEOUT;
 80017be:	2503      	movs	r5, #3
 80017c0:	e763      	b.n	800168a <HAL_I2C_Master_Transmit+0x1c>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017c4:	6820      	ldr	r0, [r4, #0]
 80017c6:	1c4b      	adds	r3, r1, #1
 80017c8:	6263      	str	r3, [r4, #36]	; 0x24
 80017ca:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80017cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017ce:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80017d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017d8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80017da:	1e53      	subs	r3, r2, #1
 80017dc:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017de:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80017e0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017e2:	d50a      	bpl.n	80017fa <HAL_I2C_Master_Transmit+0x18c>
 80017e4:	b14b      	cbz	r3, 80017fa <HAL_I2C_Master_Transmit+0x18c>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017e6:	1c8b      	adds	r3, r1, #2
 80017e8:	6263      	str	r3, [r4, #36]	; 0x24
 80017ea:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80017ec:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017ee:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80017f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80017f2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	4632      	mov	r2, r6
 80017fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff fe85 	bl	800150e <I2C_WaitOnBTFFlagUntilTimeout>
 8001804:	2800      	cmp	r0, #0
 8001806:	d0a5      	beq.n	8001754 <HAL_I2C_Master_Transmit+0xe6>
 8001808:	e7d6      	b.n	80017b8 <HAL_I2C_Master_Transmit+0x14a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e7c4      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x132>

08001816 <HAL_I2C_Master_Receive>:
{
 8001816:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181a:	4604      	mov	r4, r0
 800181c:	b089      	sub	sp, #36	; 0x24
 800181e:	4698      	mov	r8, r3
 8001820:	460d      	mov	r5, r1
 8001822:	4691      	mov	r9, r2
 8001824:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001826:	f7ff fc44 	bl	80010b2 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800182a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800182e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001830:	2b20      	cmp	r3, #32
 8001832:	d004      	beq.n	800183e <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001834:	2502      	movs	r5, #2
}
 8001836:	4628      	mov	r0, r5
 8001838:	b009      	add	sp, #36	; 0x24
 800183a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800183e:	2102      	movs	r1, #2
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	2319      	movs	r3, #25
 8001844:	2201      	movs	r2, #1
 8001846:	f2c0 0110 	movt	r1, #16
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff fddf 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001850:	2800      	cmp	r0, #0
 8001852:	d1ef      	bne.n	8001834 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001854:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001858:	2b01      	cmp	r3, #1
 800185a:	d0eb      	beq.n	8001834 <HAL_I2C_Master_Receive+0x1e>
 800185c:	2301      	movs	r3, #1
 800185e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001868:	bf5e      	ittt	pl
 800186a:	681a      	ldrpl	r2, [r3, #0]
 800186c:	f042 0201 	orrpl.w	r2, r2, #1
 8001870:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001878:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800187a:	2222      	movs	r2, #34	; 0x22
 800187c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001880:	2210      	movs	r2, #16
 8001882:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001886:	2200      	movs	r2, #0
 8001888:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800188a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
    hi2c->XferCount   = Size;
 800188e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001892:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001894:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001896:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800189a:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800189c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800189e:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018a0:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018a2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80018a6:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018a8:	d004      	beq.n	80018b4 <HAL_I2C_Master_Receive+0x9e>
 80018aa:	2a01      	cmp	r2, #1
 80018ac:	d002      	beq.n	80018b4 <HAL_I2C_Master_Receive+0x9e>
 80018ae:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80018b2:	d104      	bne.n	80018be <HAL_I2C_Master_Receive+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e002      	b.n	80018c4 <HAL_I2C_Master_Receive+0xae>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80018be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018c0:	2a11      	cmp	r2, #17
 80018c2:	d0f7      	beq.n	80018b4 <HAL_I2C_Master_Receive+0x9e>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c4:	9600      	str	r6, [sp, #0]
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff fd9d 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d154      	bne.n	8001982 <HAL_I2C_Master_Receive+0x16c>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d8:	6922      	ldr	r2, [r4, #16]
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80018e0:	d13e      	bne.n	8001960 <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018e2:	f045 0501 	orr.w	r5, r5, #1
 80018e6:	b2ed      	uxtb	r5, r5
 80018e8:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ea:	2102      	movs	r1, #2
 80018ec:	4633      	mov	r3, r6
 80018ee:	463a      	mov	r2, r7
 80018f0:	f2c0 0101 	movt	r1, #1
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fd56 	bl	80013a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018fa:	4605      	mov	r5, r0
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d13f      	bne.n	8001980 <HAL_I2C_Master_Receive+0x16a>
    if(hi2c->XferSize == 0U)
 8001900:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	2a00      	cmp	r2, #0
 8001906:	d06c      	beq.n	80019e2 <HAL_I2C_Master_Receive+0x1cc>
    else if(hi2c->XferSize == 1U)
 8001908:	2a01      	cmp	r2, #1
 800190a:	d17d      	bne.n	8001a08 <HAL_I2C_Master_Receive+0x1f2>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001912:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	9004      	str	r0, [sp, #16]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	9204      	str	r2, [sp, #16]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	9204      	str	r2, [sp, #16]
 8001922:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800192c:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800192e:	f04f 0804 	mov.w	r8, #4
 8001932:	f2c0 0801 	movt	r8, #1
    while(hi2c->XferSize > 0U)
 8001936:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d05c      	beq.n	80019f6 <HAL_I2C_Master_Receive+0x1e0>
      if(hi2c->XferSize <= 3U)
 800193c:	2b03      	cmp	r3, #3
 800193e:	f200 80ce 	bhi.w	8001ade <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8001942:	2b01      	cmp	r3, #1
 8001944:	d17c      	bne.n	8001a40 <HAL_I2C_Master_Receive+0x22a>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001946:	4632      	mov	r2, r6
 8001948:	4639      	mov	r1, r7
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff fdb2 	bl	80014b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001950:	2800      	cmp	r0, #0
 8001952:	f000 8094 	beq.w	8001a7e <HAL_I2C_Master_Receive+0x268>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001958:	2b20      	cmp	r3, #32
 800195a:	d119      	bne.n	8001990 <HAL_I2C_Master_Receive+0x17a>
              return HAL_TIMEOUT;
 800195c:	2503      	movs	r5, #3
 800195e:	e76a      	b.n	8001836 <HAL_I2C_Master_Receive+0x20>
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001960:	2108      	movs	r1, #8
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001962:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001966:	f008 0806 	and.w	r8, r8, #6
 800196a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800196e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001970:	f2c0 0101 	movt	r1, #1
 8001974:	4633      	mov	r3, r6
 8001976:	463a      	mov	r2, r7
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff fd14 	bl	80013a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800197e:	b148      	cbz	r0, 8001994 <HAL_I2C_Master_Receive+0x17e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001980:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001984:	2b04      	cmp	r3, #4
 8001986:	f04f 0300 	mov.w	r3, #0
        __HAL_UNLOCK(hi2c);
 800198a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198e:	d1e5      	bne.n	800195c <HAL_I2C_Master_Receive+0x146>
              return HAL_ERROR;
 8001990:	2501      	movs	r5, #1
 8001992:	e750      	b.n	8001836 <HAL_I2C_Master_Receive+0x20>
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001994:	2102      	movs	r1, #2
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	b2ed      	uxtb	r5, r5
 800199a:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800199c:	463a      	mov	r2, r7
 800199e:	4633      	mov	r3, r6
 80019a0:	f2c0 0101 	movt	r1, #1
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff fcfe 	bl	80013a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019aa:	4602      	mov	r2, r0
 80019ac:	2800      	cmp	r0, #0
 80019ae:	d1e7      	bne.n	8001980 <HAL_I2C_Master_Receive+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	9007      	str	r0, [sp, #28]
 80019b4:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019b6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b8:	9107      	str	r1, [sp, #28]
 80019ba:	6999      	ldr	r1, [r3, #24]
 80019bc:	9107      	str	r1, [sp, #28]
 80019be:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80019c6:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019c8:	9600      	str	r6, [sp, #0]
 80019ca:	463b      	mov	r3, r7
 80019cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019d0:	f7ff fd1d 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d1d4      	bne.n	8001982 <HAL_I2C_Master_Receive+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80019de:	6113      	str	r3, [r2, #16]
 80019e0:	e783      	b.n	80018ea <HAL_I2C_Master_Receive+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	9003      	str	r0, [sp, #12]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	9203      	str	r2, [sp, #12]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	9203      	str	r2, [sp, #12]
 80019ec:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	2320      	movs	r3, #32
 80019f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001a02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001a06:	e716      	b.n	8001836 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001a08:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001a0a:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001a0c:	d10e      	bne.n	8001a2c <HAL_I2C_Master_Receive+0x216>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	9005      	str	r0, [sp, #20]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	9205      	str	r2, [sp, #20]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	9205      	str	r2, [sp, #20]
 8001a22:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a2a:	e77e      	b.n	800192a <HAL_I2C_Master_Receive+0x114>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a30:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a32:	9006      	str	r0, [sp, #24]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	9206      	str	r2, [sp, #24]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	9306      	str	r3, [sp, #24]
 8001a3c:	9b06      	ldr	r3, [sp, #24]
 8001a3e:	e776      	b.n	800192e <HAL_I2C_Master_Receive+0x118>
        else if(hi2c->XferSize == 2U)
 8001a40:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a42:	9600      	str	r6, [sp, #0]
 8001a44:	463b      	mov	r3, r7
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001a4e:	d124      	bne.n	8001a9a <HAL_I2C_Master_Receive+0x284>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a50:	f7ff fcdd 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d181      	bne.n	800195c <HAL_I2C_Master_Receive+0x146>
 8001a58:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	6261      	str	r1, [r4, #36]	; 0x24
 8001a6c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001a6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a70:	3b01      	subs	r3, #1
 8001a72:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a7c:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a7e:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a84:	1c59      	adds	r1, r3, #1
 8001a86:	6261      	str	r1, [r4, #36]	; 0x24
 8001a88:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001a8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a98:	e74d      	b.n	8001936 <HAL_I2C_Master_Receive+0x120>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a9a:	f7ff fcb8 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	f47f af5b 	bne.w	800195c <HAL_I2C_Master_Receive+0x146>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001aa6:	6821      	ldr	r1, [r4, #0]
 8001aa8:	680b      	ldr	r3, [r1, #0]
 8001aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aae:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab8:	1c58      	adds	r0, r3, #1
 8001aba:	6260      	str	r0, [r4, #36]	; 0x24
 8001abc:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001abe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac0:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac8:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	f7ff fc9b 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d0be      	beq.n	8001a5a <HAL_I2C_Master_Receive+0x244>
 8001adc:	e73e      	b.n	800195c <HAL_I2C_Master_Receive+0x146>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ade:	4632      	mov	r2, r6
 8001ae0:	4639      	mov	r1, r7
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff fce6 	bl	80014b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	f47f af34 	bne.w	8001956 <HAL_I2C_Master_Receive+0x140>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af4:	1c59      	adds	r1, r3, #1
 8001af6:	6261      	str	r1, [r4, #36]	; 0x24
 8001af8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001afa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	0752      	lsls	r2, r2, #29
 8001b0e:	f57f af12 	bpl.w	8001936 <HAL_I2C_Master_Receive+0x120>
 8001b12:	e7b5      	b.n	8001a80 <HAL_I2C_Master_Receive+0x26a>

08001b14 <HAL_I2C_IsDeviceReady>:
{
 8001b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b18:	4604      	mov	r4, r0
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	4698      	mov	r8, r3
 8001b1e:	4689      	mov	r9, r1
 8001b20:	4693      	mov	fp, r2
  tickstart = HAL_GetTick();
 8001b22:	f7ff fac6 	bl	80010b2 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b26:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001b2a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d003      	beq.n	8001b38 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001b30:	2002      	movs	r0, #2
}
 8001b32:	b005      	add	sp, #20
 8001b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b38:	2102      	movs	r1, #2
 8001b3a:	9000      	str	r0, [sp, #0]
 8001b3c:	2319      	movs	r3, #25
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f2c0 0110 	movt	r1, #16
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff fc62 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001b4e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d0ec      	beq.n	8001b30 <HAL_I2C_IsDeviceReady+0x1c>
 8001b56:	2301      	movs	r3, #1
 8001b58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5e:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b60:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b62:	f04f 0a02 	mov.w	sl, #2
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b66:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001b68:	bf58      	it	pl
 8001b6a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b6c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001b70:	bf5c      	itt	pl
 8001b72:	f042 0201 	orrpl.w	r2, r2, #1
 8001b76:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b78:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b7a:	f2c0 0a10 	movt	sl, #16
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b82:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	2324      	movs	r3, #36	; 0x24
 8001b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b90:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b92:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b94:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b9a:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b9c:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ba4:	9600      	str	r6, [sp, #0]
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f7ff fc30 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001bae:	b108      	cbz	r0, 8001bb4 <HAL_I2C_IsDeviceReady+0xa0>
        return HAL_TIMEOUT;
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	e7be      	b.n	8001b32 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb4:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001bb6:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb8:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fa79 	bl	80010b2 <HAL_GetTick>
 8001bc0:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bc6:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001bc8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bcc:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bd0:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001bd4:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001bd6:	b911      	cbnz	r1, 8001bde <HAL_I2C_IsDeviceReady+0xca>
 8001bd8:	b90a      	cbnz	r2, 8001bde <HAL_I2C_IsDeviceReady+0xca>
 8001bda:	2ba0      	cmp	r3, #160	; 0xa0
 8001bdc:	d122      	bne.n	8001c24 <HAL_I2C_IsDeviceReady+0x110>
      hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001be0:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bf4:	d02c      	beq.n	8001c50 <HAL_I2C_IsDeviceReady+0x13c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2200      	movs	r2, #0
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf8:	2102      	movs	r1, #2
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfa:	9203      	str	r2, [sp, #12]
 8001bfc:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bfe:	f2c0 0110 	movt	r1, #16
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	9203      	str	r2, [sp, #12]
 8001c04:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c06:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c0c:	9600      	str	r6, [sp, #0]
 8001c0e:	2319      	movs	r3, #25
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff fbfc 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d1ca      	bne.n	8001bb0 <HAL_I2C_IsDeviceReady+0x9c>
        hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001c1e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001c22:	e786      	b.n	8001b32 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c24:	f1b8 0f00 	cmp.w	r8, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_I2C_IsDeviceReady+0x130>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c2a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c32:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001c34:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c38:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c3c:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e7c8      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0xc2>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c44:	f7ff fa35 	bl	80010b2 <HAL_GetTick>
 8001c48:	1b80      	subs	r0, r0, r6
 8001c4a:	4540      	cmp	r0, r8
 8001c4c:	d8ed      	bhi.n	8001c2a <HAL_I2C_IsDeviceReady+0x116>
 8001c4e:	e7ee      	b.n	8001c2e <HAL_I2C_IsDeviceReady+0x11a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c54:	4651      	mov	r1, sl
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c56:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	4620      	mov	r0, r4
 8001c5a:	9600      	str	r6, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f7ff fbd5 	bl	800140e <I2C_WaitOnFlagUntilTimeout>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d1a3      	bne.n	8001bb0 <HAL_I2C_IsDeviceReady+0x9c>
 8001c68:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001c6a:	45ab      	cmp	fp, r5
 8001c6c:	d892      	bhi.n	8001b94 <HAL_I2C_IsDeviceReady+0x80>
    __HAL_UNLOCK(hi2c);
 8001c6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	e75b      	b.n	8001b32 <HAL_I2C_IsDeviceReady+0x1e>

08001c7a <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	6803      	ldr	r3, [r0, #0]
{
 8001c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c80:	07db      	lsls	r3, r3, #31
{
 8001c82:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	d410      	bmi.n	8001ca8 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	682b      	ldr	r3, [r5, #0]
 8001c88:	079f      	lsls	r7, r3, #30
 8001c8a:	d461      	bmi.n	8001d50 <HAL_RCC_OscConfig+0xd6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	0719      	lsls	r1, r3, #28
 8001c90:	f100 809d 	bmi.w	8001dce <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	075a      	lsls	r2, r3, #29
 8001c98:	f100 80d0 	bmi.w	8001e3c <HAL_RCC_OscConfig+0x1c2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9c:	69ea      	ldr	r2, [r5, #28]
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	f040 813a 	bne.w	8001f18 <HAL_RCC_OscConfig+0x29e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	e017      	b.n	8001cd8 <HAL_RCC_OscConfig+0x5e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001cac:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001cb0:	6863      	ldr	r3, [r4, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d007      	beq.n	8001cca <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x64>
 8001cc4:	6863      	ldr	r3, [r4, #4]
 8001cc6:	03de      	lsls	r6, r3, #15
 8001cc8:	d509      	bpl.n	8001cde <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	039c      	lsls	r4, r3, #14
 8001cce:	d5da      	bpl.n	8001c86 <HAL_RCC_OscConfig+0xc>
 8001cd0:	686b      	ldr	r3, [r5, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1d7      	bne.n	8001c86 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	686b      	ldr	r3, [r5, #4]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d110      	bne.n	8001d08 <HAL_RCC_OscConfig+0x8e>
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cee:	f7ff f9e0 	bl	80010b2 <HAL_GetTick>
 8001cf2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	0398      	lsls	r0, r3, #14
 8001cf8:	d4c5      	bmi.n	8001c86 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfa:	f7ff f9da 	bl	80010b2 <HAL_GetTick>
 8001cfe:	1b80      	subs	r0, r0, r6
 8001d00:	2864      	cmp	r0, #100	; 0x64
 8001d02:	d9f7      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	e7e7      	b.n	8001cd8 <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d08:	b99b      	cbnz	r3, 8001d32 <HAL_RCC_OscConfig+0xb8>
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f9ca 	bl	80010b2 <HAL_GetTick>
 8001d1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	0399      	lsls	r1, r3, #14
 8001d24:	d5af      	bpl.n	8001c86 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d26:	f7ff f9c4 	bl	80010b2 <HAL_GetTick>
 8001d2a:	1b80      	subs	r0, r0, r6
 8001d2c:	2864      	cmp	r0, #100	; 0x64
 8001d2e:	d9f7      	bls.n	8001d20 <HAL_RCC_OscConfig+0xa6>
 8001d30:	e7e8      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	d103      	bne.n	8001d42 <HAL_RCC_OscConfig+0xc8>
 8001d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3e:	6023      	str	r3, [r4, #0]
 8001d40:	e7d1      	b.n	8001ce6 <HAL_RCC_OscConfig+0x6c>
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	e7cd      	b.n	8001cec <HAL_RCC_OscConfig+0x72>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d50:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001d54:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	f013 0f0c 	tst.w	r3, #12
 8001d5e:	d007      	beq.n	8001d70 <HAL_RCC_OscConfig+0xf6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d60:	6863      	ldr	r3, [r4, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d110      	bne.n	8001d8c <HAL_RCC_OscConfig+0x112>
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	03da      	lsls	r2, r3, #15
 8001d6e:	d40d      	bmi.n	8001d8c <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	079b      	lsls	r3, r3, #30
 8001d74:	d502      	bpl.n	8001d7c <HAL_RCC_OscConfig+0x102>
 8001d76:	692b      	ldr	r3, [r5, #16]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d1ac      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	696a      	ldr	r2, [r5, #20]
 8001d80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	e77f      	b.n	8001c8c <HAL_RCC_OscConfig+0x12>
 8001d8c:	2300      	movs	r3, #0
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8e:	692a      	ldr	r2, [r5, #16]
 8001d90:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001d94:	b16a      	cbz	r2, 8001db2 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f98a 	bl	80010b2 <HAL_GetTick>
 8001d9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	079f      	lsls	r7, r3, #30
 8001da4:	d4ea      	bmi.n	8001d7c <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff f984 	bl	80010b2 <HAL_GetTick>
 8001daa:	1b80      	subs	r0, r0, r6
 8001dac:	2802      	cmp	r0, #2
 8001dae:	d9f7      	bls.n	8001da0 <HAL_RCC_OscConfig+0x126>
 8001db0:	e7a8      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001db4:	f7ff f97d 	bl	80010b2 <HAL_GetTick>
 8001db8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	0798      	lsls	r0, r3, #30
 8001dbe:	f57f af65 	bpl.w	8001c8c <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f976 	bl	80010b2 <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d9f6      	bls.n	8001dba <HAL_RCC_OscConfig+0x140>
 8001dcc:	e79a      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
 8001dce:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001dd2:	f44f 6390 	mov.w	r3, #1152	; 0x480
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd6:	69aa      	ldr	r2, [r5, #24]
 8001dd8:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001ddc:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001de0:	b1f2      	cbz	r2, 8001e20 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_LSI_ENABLE();
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001de6:	f7ff f964 	bl	80010b2 <HAL_GetTick>
 8001dea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dee:	079b      	lsls	r3, r3, #30
 8001df0:	d510      	bpl.n	8001e14 <HAL_RCC_OscConfig+0x19a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df2:	f240 0308 	movw	r3, #8
 8001df6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e04:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001e06:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001e08:	9b01      	ldr	r3, [sp, #4]
 8001e0a:	1e5a      	subs	r2, r3, #1
 8001e0c:	9201      	str	r2, [sp, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f9      	bne.n	8001e06 <HAL_RCC_OscConfig+0x18c>
 8001e12:	e73f      	b.n	8001c94 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff f94d 	bl	80010b2 <HAL_GetTick>
 8001e18:	1b80      	subs	r0, r0, r6
 8001e1a:	2802      	cmp	r0, #2
 8001e1c:	d9e6      	bls.n	8001dec <HAL_RCC_OscConfig+0x172>
 8001e1e:	e771      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001e20:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e22:	f7ff f946 	bl	80010b2 <HAL_GetTick>
 8001e26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e2a:	079f      	lsls	r7, r3, #30
 8001e2c:	f57f af32 	bpl.w	8001c94 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff f93f 	bl	80010b2 <HAL_GetTick>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f6      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1ae>
 8001e3a:	e763      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001e40:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001e44:	69e3      	ldr	r3, [r4, #28]
 8001e46:	00d8      	lsls	r0, r3, #3
 8001e48:	d427      	bmi.n	8001e9a <HAL_RCC_OscConfig+0x220>
      pwrclkchanged = SET;
 8001e4a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	69e3      	ldr	r3, [r4, #28]
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	61e3      	str	r3, [r4, #28]
 8001e54:	69e3      	ldr	r3, [r4, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8001e62:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8001e66:	6833      	ldr	r3, [r6, #0]
 8001e68:	05d9      	lsls	r1, r3, #23
 8001e6a:	d518      	bpl.n	8001e9e <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	68eb      	ldr	r3, [r5, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d126      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x246>
 8001e72:	6a23      	ldr	r3, [r4, #32]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f91a 	bl	80010b2 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e82:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	6a23      	ldr	r3, [r4, #32]
 8001e86:	079b      	lsls	r3, r3, #30
 8001e88:	d53f      	bpl.n	8001f0a <HAL_RCC_OscConfig+0x290>
    if(pwrclkchanged == SET)
 8001e8a:	2f00      	cmp	r7, #0
 8001e8c:	f43f af06 	beq.w	8001c9c <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	69e3      	ldr	r3, [r4, #28]
 8001e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e96:	61e3      	str	r3, [r4, #28]
 8001e98:	e700      	b.n	8001c9c <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2700      	movs	r7, #0
 8001e9c:	e7df      	b.n	8001e5e <HAL_RCC_OscConfig+0x1e4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	6833      	ldr	r3, [r6, #0]
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f904 	bl	80010b2 <HAL_GetTick>
 8001eaa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	6833      	ldr	r3, [r6, #0]
 8001eae:	05da      	lsls	r2, r3, #23
 8001eb0:	d4dc      	bmi.n	8001e6c <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff f8fe 	bl	80010b2 <HAL_GetTick>
 8001eb6:	eba0 0008 	sub.w	r0, r0, r8
 8001eba:	2864      	cmp	r0, #100	; 0x64
 8001ebc:	d9f6      	bls.n	8001eac <HAL_RCC_OscConfig+0x232>
 8001ebe:	e721      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	b9ab      	cbnz	r3, 8001eee <HAL_RCC_OscConfig+0x274>
 8001ec2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6223      	str	r3, [r4, #32]
 8001ece:	6a23      	ldr	r3, [r4, #32]
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f8ec 	bl	80010b2 <HAL_GetTick>
 8001eda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	6a23      	ldr	r3, [r4, #32]
 8001ede:	0798      	lsls	r0, r3, #30
 8001ee0:	d5d3      	bpl.n	8001e8a <HAL_RCC_OscConfig+0x210>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff f8e6 	bl	80010b2 <HAL_GetTick>
 8001ee6:	1b80      	subs	r0, r0, r6
 8001ee8:	4540      	cmp	r0, r8
 8001eea:	d9f7      	bls.n	8001edc <HAL_RCC_OscConfig+0x262>
 8001eec:	e70a      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	6a23      	ldr	r3, [r4, #32]
 8001ef2:	d103      	bne.n	8001efc <HAL_RCC_OscConfig+0x282>
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6223      	str	r3, [r4, #32]
 8001efa:	e7ba      	b.n	8001e72 <HAL_RCC_OscConfig+0x1f8>
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6223      	str	r3, [r4, #32]
 8001f02:	6a23      	ldr	r3, [r4, #32]
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	e7b6      	b.n	8001e78 <HAL_RCC_OscConfig+0x1fe>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff f8d2 	bl	80010b2 <HAL_GetTick>
 8001f0e:	eba0 0008 	sub.w	r0, r0, r8
 8001f12:	42b0      	cmp	r0, r6
 8001f14:	d9b6      	bls.n	8001e84 <HAL_RCC_OscConfig+0x20a>
 8001f16:	e6f5      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001f1c:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001f20:	6863      	ldr	r3, [r4, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	f43f aed5 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x5c>
 8001f2c:	2660      	movs	r6, #96	; 0x60
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f2c4 2642 	movt	r6, #16962	; 0x4242
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f36:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f38:	d12b      	bne.n	8001f92 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f8ba 	bl	80010b2 <HAL_GetTick>
 8001f3e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	0199      	lsls	r1, r3, #6
 8001f44:	d41f      	bmi.n	8001f86 <HAL_RCC_OscConfig+0x30c>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f46:	6a2b      	ldr	r3, [r5, #32]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x2e0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	68a9      	ldr	r1, [r5, #8]
 8001f52:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f56:	430a      	orrs	r2, r1
 8001f58:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f5c:	6862      	ldr	r2, [r4, #4]
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f64:	4313      	orrs	r3, r2
 8001f66:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f68:	2301      	movs	r3, #1
 8001f6a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f8a1 	bl	80010b2 <HAL_GetTick>
 8001f70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	019a      	lsls	r2, r3, #6
 8001f76:	f53f ae95 	bmi.w	8001ca4 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7ff f89a 	bl	80010b2 <HAL_GetTick>
 8001f7e:	1b40      	subs	r0, r0, r5
 8001f80:	2802      	cmp	r0, #2
 8001f82:	d9f6      	bls.n	8001f72 <HAL_RCC_OscConfig+0x2f8>
 8001f84:	e6be      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff f894 	bl	80010b2 <HAL_GetTick>
 8001f8a:	1bc0      	subs	r0, r0, r7
 8001f8c:	2802      	cmp	r0, #2
 8001f8e:	d9d7      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2c6>
 8001f90:	e6b8      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001f92:	f7ff f88e 	bl	80010b2 <HAL_GetTick>
 8001f96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	f57f ae82 	bpl.w	8001ca4 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff f887 	bl	80010b2 <HAL_GetTick>
 8001fa4:	1b40      	subs	r0, r0, r5
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9f6      	bls.n	8001f98 <HAL_RCC_OscConfig+0x31e>
 8001faa:	e6ab      	b.n	8001d04 <HAL_RCC_OscConfig+0x8a>

08001fac <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fac:	f644 63e8 	movw	r3, #20200	; 0x4ee8
{
 8001fb0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fb2:	f6c0 0300 	movt	r3, #2048	; 0x800
{
 8001fb6:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fb8:	ac02      	add	r4, sp, #8
 8001fba:	f103 0510 	add.w	r5, r3, #16
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	c203      	stmia	r2!, {r0, r1}
 8001fc8:	42ab      	cmp	r3, r5
 8001fca:	4614      	mov	r4, r2
 8001fcc:	d1f7      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x12>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fce:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fd6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001fda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fde:	6851      	ldr	r1, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	f001 030c 	and.w	r3, r1, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d11e      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x7a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe8:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8001fec:	a806      	add	r0, sp, #24
 8001fee:	4403      	add	r3, r0
 8001ff0:	f813 4c10 	ldrb.w	r4, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff4:	03cb      	lsls	r3, r1, #15
 8001ff6:	d510      	bpl.n	800201a <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffc:	6852      	ldr	r2, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ffe:	f2c0 037a 	movt	r3, #122	; 0x7a
 8002002:	fb03 f004 	mul.w	r0, r3, r4
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002006:	f3c2 4340 	ubfx	r3, r2, #17, #1
 800200a:	aa06      	add	r2, sp, #24
 800200c:	4413      	add	r3, r2
 800200e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002012:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002016:	b007      	add	sp, #28
 8002018:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800201a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800201e:	f2c0 003d 	movt	r0, #61	; 0x3d
 8002022:	4360      	muls	r0, r4
 8002024:	e7f7      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002026:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 800202a:	f2c0 007a 	movt	r0, #122	; 0x7a
  return sysclockfreq;
 800202e:	e7f2      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x6a>

08002030 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002038:	681a      	ldr	r2, [r3, #0]
{
 800203a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800203e:	f002 0207 	and.w	r2, r2, #7
 8002042:	428a      	cmp	r2, r1
{
 8002044:	4605      	mov	r5, r0
 8002046:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002048:	d335      	bcc.n	80020b6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204a:	6829      	ldr	r1, [r5, #0]
 800204c:	078c      	lsls	r4, r1, #30
 800204e:	d43f      	bmi.n	80020d0 <HAL_RCC_ClockConfig+0xa0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002050:	07ca      	lsls	r2, r1, #31
 8002052:	d455      	bmi.n	8002100 <HAL_RCC_ClockConfig+0xd0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002058:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f002 0207 	and.w	r2, r2, #7
 8002062:	42b2      	cmp	r2, r6
 8002064:	f200 8090 	bhi.w	8002188 <HAL_RCC_ClockConfig+0x158>
 8002068:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	682a      	ldr	r2, [r5, #0]
 800206e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8002072:	f012 0f04 	tst.w	r2, #4
 8002076:	f040 8092 	bne.w	800219e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	0713      	lsls	r3, r2, #28
 800207c:	d506      	bpl.n	800208c <HAL_RCC_ClockConfig+0x5c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	692a      	ldr	r2, [r5, #16]
 8002082:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002086:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800208a:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208c:	f7ff ff8e 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8002090:	f644 7170 	movw	r1, #20336	; 0x4f70
 8002094:	f240 0308 	movw	r3, #8
 8002098:	6862      	ldr	r2, [r4, #4]
 800209a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800209e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80020a2:	5c8a      	ldrb	r2, [r1, r2]
 80020a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020a8:	40d0      	lsrs	r0, r2
 80020aa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7fe ffb9 	bl	8001024 <HAL_InitTick>
  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_ClockConfig+0x9c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f022 0207 	bic.w	r2, r2, #7
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	428b      	cmp	r3, r1
 80020c8:	d0bf      	beq.n	800204a <HAL_RCC_ClockConfig+0x1a>
      return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
}
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	f011 0f04 	tst.w	r1, #4
 80020d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020dc:	bf1e      	ittt	ne
 80020de:	685a      	ldrne	r2, [r3, #4]
 80020e0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80020e4:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	bf42      	ittt	mi
 80020ea:	685a      	ldrmi	r2, [r3, #4]
 80020ec:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80020f0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68a8      	ldr	r0, [r5, #8]
 80020f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020fa:	4302      	orrs	r2, r0
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e7a7      	b.n	8002050 <HAL_RCC_ClockConfig+0x20>
 8002100:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002104:	686a      	ldr	r2, [r5, #4]
 8002106:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800210a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	d11b      	bne.n	8002148 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002110:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	d0d9      	beq.n	80020ca <HAL_RCC_ClockConfig+0x9a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	4313      	orrs	r3, r2
 8002122:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002124:	f7fe ffc5 	bl	80010b2 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002128:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800212a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212c:	2b01      	cmp	r3, #1
 800212e:	d113      	bne.n	8002158 <HAL_RCC_ClockConfig+0x128>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d08c      	beq.n	8002054 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe ffba 	bl	80010b2 <HAL_GetTick>
 800213e:	1bc0      	subs	r0, r0, r7
 8002140:	4540      	cmp	r0, r8
 8002142:	d9f5      	bls.n	8002130 <HAL_RCC_ClockConfig+0x100>
          return HAL_TIMEOUT;
 8002144:	2003      	movs	r0, #3
 8002146:	e7c1      	b.n	80020cc <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	2a02      	cmp	r2, #2
 800214a:	d102      	bne.n	8002152 <HAL_RCC_ClockConfig+0x122>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002150:	e7e0      	b.n	8002114 <HAL_RCC_ClockConfig+0xe4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	f013 0f02 	tst.w	r3, #2
 8002156:	e7dd      	b.n	8002114 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002158:	2b02      	cmp	r3, #2
 800215a:	d110      	bne.n	800217e <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	6863      	ldr	r3, [r4, #4]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b08      	cmp	r3, #8
 8002164:	f43f af76 	beq.w	8002054 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe ffa3 	bl	80010b2 <HAL_GetTick>
 800216c:	1bc0      	subs	r0, r0, r7
 800216e:	4540      	cmp	r0, r8
 8002170:	d9f4      	bls.n	800215c <HAL_RCC_ClockConfig+0x12c>
 8002172:	e7e7      	b.n	8002144 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe ff9d 	bl	80010b2 <HAL_GetTick>
 8002178:	1bc0      	subs	r0, r0, r7
 800217a:	4540      	cmp	r0, r8
 800217c:	d8e2      	bhi.n	8002144 <HAL_RCC_ClockConfig+0x114>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	6863      	ldr	r3, [r4, #4]
 8002180:	f013 0f0c 	tst.w	r3, #12
 8002184:	d1f6      	bne.n	8002174 <HAL_RCC_ClockConfig+0x144>
 8002186:	e765      	b.n	8002054 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f022 0207 	bic.w	r2, r2, #7
 800218e:	4332      	orrs	r2, r6
 8002190:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	42b3      	cmp	r3, r6
 800219a:	d196      	bne.n	80020ca <HAL_RCC_ClockConfig+0x9a>
 800219c:	e764      	b.n	8002068 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219e:	6863      	ldr	r3, [r4, #4]
 80021a0:	68e9      	ldr	r1, [r5, #12]
 80021a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021a6:	430b      	orrs	r3, r1
 80021a8:	6063      	str	r3, [r4, #4]
 80021aa:	e766      	b.n	800207a <HAL_RCC_ClockConfig+0x4a>

080021ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	f644 7180 	movw	r1, #20352	; 0x4f80
  return SystemCoreClock;
 80021ba:	f240 0308 	movw	r3, #8
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021be:	f6c0 0100 	movt	r1, #2048	; 0x800
  return SystemCoreClock;
 80021c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c6:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80021ca:	5c8a      	ldrb	r2, [r1, r2]
 80021cc:	6818      	ldr	r0, [r3, #0]
}    
 80021ce:	40d0      	lsrs	r0, r2
 80021d0:	4770      	bx	lr

080021d2 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	f644 7180 	movw	r1, #20352	; 0x4f80
  return SystemCoreClock;
 80021e0:	f240 0308 	movw	r3, #8
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f6c0 0100 	movt	r1, #2048	; 0x800
  return SystemCoreClock;
 80021e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ec:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80021f0:	5c8a      	ldrb	r2, [r1, r2]
 80021f2:	6818      	ldr	r0, [r3, #0]
} 
 80021f4:	40d0      	lsrs	r0, r2
 80021f6:	4770      	bx	lr

080021f8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021fc:	4680      	mov	r8, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021fe:	6803      	ldr	r3, [r0, #0]
 8002200:	68c1      	ldr	r1, [r0, #12]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	2419      	movs	r4, #25
 8002206:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800220a:	430a      	orrs	r2, r1
 800220c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800220e:	6882      	ldr	r2, [r0, #8]
 8002210:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8002212:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002214:	4302      	orrs	r2, r0
 8002216:	f8d8 0014 	ldr.w	r0, [r8, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800221a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800221e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002222:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, 
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800222e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002236:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800223a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800223e:	4293      	cmp	r3, r2
 8002240:	d147      	bne.n	80022d2 <UART_SetConfig+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002242:	f7ff ffc6 	bl	80021d2 <HAL_RCC_GetPCLK2Freq>
 8002246:	fb04 f300 	mul.w	r3, r4, r0
 800224a:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800224e:	2764      	movs	r7, #100	; 0x64
 8002250:	00b6      	lsls	r6, r6, #2
 8002252:	fbb3 f3f6 	udiv	r3, r3, r6
 8002256:	fbb3 f3f7 	udiv	r3, r3, r7
 800225a:	011e      	lsls	r6, r3, #4
 800225c:	f7ff ffb9 	bl	80021d2 <HAL_RCC_GetPCLK2Freq>
 8002260:	4360      	muls	r0, r4
 8002262:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fbb0 f5f3 	udiv	r5, r0, r3
 800226c:	f7ff ffb1 	bl	80021d2 <HAL_RCC_GetPCLK2Freq>
 8002270:	4360      	muls	r0, r4
 8002272:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb0 f3f3 	udiv	r3, r0, r3
 800227c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002280:	fb07 5313 	mls	r3, r7, r3, r5
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	3332      	adds	r3, #50	; 0x32
 8002288:	fbb3 f3f7 	udiv	r3, r3, r7
 800228c:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8002290:	f7ff ff9f 	bl	80021d2 <HAL_RCC_GetPCLK2Freq>
 8002294:	4360      	muls	r0, r4
 8002296:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	fbb0 f9f2 	udiv	r9, r0, r2
 80022a0:	f7ff ff97 	bl	80021d2 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022a4:	4360      	muls	r0, r4
 80022a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80022aa:	f8d8 2000 	ldr.w	r2, [r8]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b4:	fbb3 f3f7 	udiv	r3, r3, r7
 80022b8:	fb07 9313 	mls	r3, r7, r3, r9
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	3332      	adds	r3, #50	; 0x32
 80022c0:	fbb3 f3f7 	udiv	r3, r3, r7
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	432b      	orrs	r3, r5
 80022ca:	4433      	add	r3, r6
 80022cc:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80022ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022d2:	f7ff ff6b 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 80022d6:	fb04 f300 	mul.w	r3, r4, r0
 80022da:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80022de:	2764      	movs	r7, #100	; 0x64
 80022e0:	00b6      	lsls	r6, r6, #2
 80022e2:	fbb3 f3f6 	udiv	r3, r3, r6
 80022e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80022ea:	011e      	lsls	r6, r3, #4
 80022ec:	f7ff ff5e 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 80022f0:	4360      	muls	r0, r4
 80022f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fbb0 f5f3 	udiv	r5, r0, r3
 80022fc:	f7ff ff56 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8002300:	4360      	muls	r0, r4
 8002302:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fbb0 f3f3 	udiv	r3, r0, r3
 800230c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002310:	fb07 5313 	mls	r3, r7, r3, r5
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	3332      	adds	r3, #50	; 0x32
 8002318:	fbb3 f3f7 	udiv	r3, r3, r7
 800231c:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8002320:	f7ff ff44 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8002324:	4360      	muls	r0, r4
 8002326:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	fbb0 f9f2 	udiv	r9, r0, r2
 8002330:	f7ff ff3c 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8002334:	e7b6      	b.n	80022a4 <UART_SetConfig+0xac>

08002336 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002338:	4604      	mov	r4, r0
 800233a:	460e      	mov	r6, r1
 800233c:	4617      	mov	r7, r2
 800233e:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002340:	6821      	ldr	r1, [r4, #0]
 8002342:	680b      	ldr	r3, [r1, #0]
 8002344:	ea36 0303 	bics.w	r3, r6, r3
 8002348:	d101      	bne.n	800234e <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800234a:	2000      	movs	r0, #0
 800234c:	e014      	b.n	8002378 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 800234e:	1c6b      	adds	r3, r5, #1
 8002350:	d0f7      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002352:	b995      	cbnz	r5, 800237a <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002354:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002356:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800235e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002368:	2320      	movs	r3, #32
 800236a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800236e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002372:	2300      	movs	r3, #0
 8002374:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800237a:	f7fe fe9a 	bl	80010b2 <HAL_GetTick>
 800237e:	1bc0      	subs	r0, r0, r7
 8002380:	4285      	cmp	r5, r0
 8002382:	d2dd      	bcs.n	8002340 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002384:	e7e6      	b.n	8002354 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002386 <HAL_UART_Init>:
{
 8002386:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002388:	4604      	mov	r4, r0
 800238a:	b340      	cbz	r0, 80023de <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800238c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002390:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002394:	b91b      	cbnz	r3, 800239e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002396:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800239a:	f000 fc1e 	bl	8002bda <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800239e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80023a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023a6:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80023a8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80023aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023b0:	f7ff ff22 	bl	80021f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b4:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b6:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ce:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80023d0:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023d8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80023dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023de:	2001      	movs	r0, #1
 80023e0:	e7fc      	b.n	80023dc <HAL_UART_Init+0x56>

080023e2 <HAL_UART_Transmit>:
{
 80023e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e6:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80023e8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80023ec:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80023ee:	2b20      	cmp	r3, #32
{
 80023f0:	460d      	mov	r5, r1
 80023f2:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80023f4:	d14c      	bne.n	8002490 <HAL_UART_Transmit+0xae>
    if((pData == NULL) || (Size == 0U))
 80023f6:	2900      	cmp	r1, #0
 80023f8:	d048      	beq.n	800248c <HAL_UART_Transmit+0xaa>
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	d046      	beq.n	800248c <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80023fe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002402:	2b01      	cmp	r3, #1
 8002404:	d044      	beq.n	8002490 <HAL_UART_Transmit+0xae>
 8002406:	2301      	movs	r3, #1
 8002408:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	2300      	movs	r3, #0
 800240e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002410:	2321      	movs	r3, #33	; 0x21
 8002412:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002416:	f7fe fe4c 	bl	80010b2 <HAL_GetTick>
 800241a:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800241c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002420:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002424:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002426:	b29b      	uxth	r3, r3
 8002428:	b963      	cbnz	r3, 8002444 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	463b      	mov	r3, r7
 800242c:	4632      	mov	r2, r6
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ff80 	bl	8002336 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002436:	b9a0      	cbnz	r0, 8002462 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002438:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800243a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800243e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002442:	e00f      	b.n	8002464 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002444:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002448:	3b01      	subs	r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800244e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002450:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	4620      	mov	r0, r4
 8002458:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800245a:	d10e      	bne.n	800247a <HAL_UART_Transmit+0x98>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245c:	f7ff ff6b 	bl	8002336 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002460:	b110      	cbz	r0, 8002468 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8002462:	2003      	movs	r0, #3
}
 8002464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002468:	882b      	ldrh	r3, [r5, #0]
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002470:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002472:	6923      	ldr	r3, [r4, #16]
 8002474:	b943      	cbnz	r3, 8002488 <HAL_UART_Transmit+0xa6>
          pData +=2U;
 8002476:	3502      	adds	r5, #2
 8002478:	e7d4      	b.n	8002424 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247a:	f7ff ff5c 	bl	8002336 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800247e:	2800      	cmp	r0, #0
 8002480:	d1ef      	bne.n	8002462 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	782a      	ldrb	r2, [r5, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	3501      	adds	r5, #1
 800248a:	e7cb      	b.n	8002424 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800248c:	2001      	movs	r0, #1
 800248e:	e7e9      	b.n	8002464 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002490:	2002      	movs	r0, #2
 8002492:	e7e7      	b.n	8002464 <HAL_UART_Transmit+0x82>

08002494 <HAL_UART_Receive>:
{
 8002494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002498:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800249a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800249e:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80024a0:	2b20      	cmp	r3, #32
{
 80024a2:	460d      	mov	r5, r1
 80024a4:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80024a6:	d152      	bne.n	800254e <HAL_UART_Receive+0xba>
    if((pData == NULL) || (Size == 0U))
 80024a8:	2900      	cmp	r1, #0
 80024aa:	d04e      	beq.n	800254a <HAL_UART_Receive+0xb6>
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d04c      	beq.n	800254a <HAL_UART_Receive+0xb6>
    __HAL_LOCK(huart);
 80024b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d04a      	beq.n	800254e <HAL_UART_Receive+0xba>
 80024b8:	2301      	movs	r3, #1
 80024ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024be:	2300      	movs	r3, #0
 80024c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024c2:	2322      	movs	r3, #34	; 0x22
 80024c4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80024c8:	f7fe fdf3 	bl	80010b2 <HAL_GetTick>
 80024cc:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80024ce:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024d2:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80024d6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80024d8:	b280      	uxth	r0, r0
 80024da:	b928      	cbnz	r0, 80024e8 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 80024dc:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80024de:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 80024e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80024e6:	e00f      	b.n	8002508 <HAL_UART_Receive+0x74>
      huart->RxXferCount--;
 80024e8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024ea:	4632      	mov	r2, r6
      huart->RxXferCount--;
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024f2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024f4:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024fa:	4620      	mov	r0, r4
 80024fc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024fe:	d116      	bne.n	800252e <HAL_UART_Receive+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002500:	f7ff ff19 	bl	8002336 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002504:	b110      	cbz	r0, 800250c <HAL_UART_Receive+0x78>
          return HAL_TIMEOUT;
 8002506:	2003      	movs	r0, #3
}
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(huart->Init.Parity == UART_PARITY_NONE)
 800250c:	6922      	ldr	r2, [r4, #16]
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	b93a      	cbnz	r2, 8002522 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	462b      	mov	r3, r5
 8002516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251a:	f823 2b02 	strh.w	r2, [r3], #2
{
 800251e:	461d      	mov	r5, r3
 8002520:	e7d9      	b.n	80024d6 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	462b      	mov	r3, r5
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f823 2b01 	strh.w	r2, [r3], #1
 800252c:	e7f7      	b.n	800251e <HAL_UART_Receive+0x8a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800252e:	f7ff ff02 	bl	8002336 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002532:	2800      	cmp	r0, #0
 8002534:	d1e7      	bne.n	8002506 <HAL_UART_Receive+0x72>
 8002536:	6822      	ldr	r2, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002538:	6921      	ldr	r1, [r4, #16]
 800253a:	1c6b      	adds	r3, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800253c:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800253e:	b909      	cbnz	r1, 8002544 <HAL_UART_Receive+0xb0>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002540:	702a      	strb	r2, [r5, #0]
 8002542:	e7ec      	b.n	800251e <HAL_UART_Receive+0x8a>
 8002544:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002548:	e7fa      	b.n	8002540 <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7dc      	b.n	8002508 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800254e:	2002      	movs	r0, #2
 8002550:	e7da      	b.n	8002508 <HAL_UART_Receive+0x74>

08002552 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002552:	b500      	push	{lr}
 8002554:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	2100      	movs	r1, #0
 800255a:	a807      	add	r0, sp, #28
 800255c:	f000 ff8e 	bl	800347c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002560:	2214      	movs	r2, #20
 8002562:	2100      	movs	r1, #0
 8002564:	a801      	add	r0, sp, #4
 8002566:	f000 ff89 	bl	800347c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800256a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800256c:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800256e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002570:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002572:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002574:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002578:	f7ff fb7f 	bl	8001c7a <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800257c:	2100      	movs	r1, #0
 800257e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002580:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002582:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002586:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800258a:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800258c:	f7ff fd50 	bl	8002030 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002590:	b011      	add	sp, #68	; 0x44
 8002592:	f85d fb04 	ldr.w	pc, [sp], #4

08002596 <main>:
{
 8002596:	b500      	push	{lr}
 8002598:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 800259a:	f7fe fd6a 	bl	8001072 <HAL_Init>
  SystemClock_Config();
 800259e:	f7ff ffd8 	bl	8002552 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	2210      	movs	r2, #16
 80025a4:	2100      	movs	r1, #0
 80025a6:	a80c      	add	r0, sp, #48	; 0x30
 80025a8:	f000 ff68 	bl	800347c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025b8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025be:	f042 0210 	orr.w	r2, r2, #16
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025c6:	f2c4 0001 	movt	r0, #16385	; 0x4001
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	f002 0210 	and.w	r2, r2, #16
 80025ce:	9209      	str	r2, [sp, #36]	; 0x24
 80025d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	f042 0204 	orr.w	r2, r2, #4
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 80025de:	f240 2474 	movw	r4, #628	; 0x274
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	f002 0204 	and.w	r2, r2, #4
 80025e6:	920a      	str	r2, [sp, #40]	; 0x28
 80025e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 80025ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	f042 0208 	orr.w	r2, r2, #8
 80025f4:	619a      	str	r2, [r3, #24]
 80025f6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8002600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002602:	f7fe feb6 	bl	8001372 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	a90c      	add	r1, sp, #48	; 0x30
 8002618:	f2c4 0001 	movt	r0, #16385	; 0x4001
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002620:	f7fe fdb0 	bl	8001184 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8002624:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002628:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800262c:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 800262e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	e9c4 3501 	strd	r3, r5, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002636:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002638:	4620      	mov	r0, r4
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	e9c4 3505 	strd	r3, r5, [r4, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800263e:	e9c4 5503 	strd	r5, r5, [r4, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002642:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002644:	f7ff fe9f 	bl	8002386 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 8002648:	f240 200c 	movw	r0, #524	; 0x20c
 800264c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002650:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002654:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002658:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800265a:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800265e:	f2c0 0301 	movt	r3, #1
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002662:	e9c0 3501 	strd	r3, r5, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800266a:	60c5      	str	r5, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800266c:	e9c0 3504 	strd	r3, r5, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002670:	e9c0 5506 	strd	r5, r5, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002674:	6205      	str	r5, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002676:	f7fe ff70 	bl	800155a <HAL_I2C_Init>
  init_MPU();
 800267a:	f000 f8e7 	bl	800284c <init_MPU>
  while(HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 100)!=HAL_OK);
 800267e:	2364      	movs	r3, #100	; 0x64
 8002680:	2201      	movs	r2, #1
 8002682:	a90c      	add	r1, sp, #48	; 0x30
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ff05 	bl	8002494 <HAL_UART_Receive>
 800268a:	2800      	cmp	r0, #0
 800268c:	d1f7      	bne.n	800267e <main+0xe8>
	  process_MPU();
 800268e:	4668      	mov	r0, sp
 8002690:	f000 f95e 	bl	8002950 <process_MPU>
 8002694:	e7fb      	b.n	800268e <main+0xf8>

08002696 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 8002696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269a:	461c      	mov	r4, r3
 800269c:	4616      	mov	r6, r2
	// check precision bounds
	if (precision > MAX_PRECISION)
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 800269e:	2200      	movs	r2, #0
	if (precision > MAX_PRECISION)
 80026a0:	2c0a      	cmp	r4, #10
{
 80026a2:	4680      	mov	r8, r0
 80026a4:	460f      	mov	r7, r1
	if (f < 0)
 80026a6:	4613      	mov	r3, r2
	if (precision > MAX_PRECISION)
 80026a8:	f300 80c9 	bgt.w	800283e <ftoa+0x1a8>
	if (f < 0)
 80026ac:	f7fe f986 	bl	80009bc <__aeabi_dcmplt>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d078      	beq.n	80027a6 <ftoa+0x110>
	{
		f = -f;
		*ptr++ = '-';
 80026b4:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 80026b6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
		*ptr++ = '-';
 80026ba:	f106 0901 	add.w	r9, r6, #1
 80026be:	7033      	strb	r3, [r6, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	da72      	bge.n	80027aa <ftoa+0x114>
	{
		if (f < 1.0) precision = 6;
 80026c4:	2100      	movs	r1, #0
 80026c6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80026ca:	460b      	mov	r3, r1
 80026cc:	2200      	movs	r2, #0
 80026ce:	4640      	mov	r0, r8
 80026d0:	4639      	mov	r1, r7
 80026d2:	f7fe f973 	bl	80009bc <__aeabi_dcmplt>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d177      	bne.n	80027ca <ftoa+0x134>
		else if (f < 10.0) precision = 5;
 80026da:	2100      	movs	r1, #0
 80026dc:	f2c4 0124 	movt	r1, #16420	; 0x4024
 80026e0:	460b      	mov	r3, r1
 80026e2:	2200      	movs	r2, #0
 80026e4:	4640      	mov	r0, r8
 80026e6:	4639      	mov	r1, r7
 80026e8:	f7fe f968 	bl	80009bc <__aeabi_dcmplt>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d16e      	bne.n	80027ce <ftoa+0x138>
		else if (f < 100.0) precision = 4;
 80026f0:	2100      	movs	r1, #0
 80026f2:	f2c4 0159 	movt	r1, #16473	; 0x4059
 80026f6:	460b      	mov	r3, r1
 80026f8:	2200      	movs	r2, #0
 80026fa:	4640      	mov	r0, r8
 80026fc:	4639      	mov	r1, r7
 80026fe:	f7fe f95d 	bl	80009bc <__aeabi_dcmplt>
 8002702:	2800      	cmp	r0, #0
 8002704:	d165      	bne.n	80027d2 <ftoa+0x13c>
		else if (f < 1000.0) precision = 3;
 8002706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270a:	f2c4 018f 	movt	r1, #16527	; 0x408f
 800270e:	460b      	mov	r3, r1
 8002710:	2200      	movs	r2, #0
 8002712:	4640      	mov	r0, r8
 8002714:	4639      	mov	r1, r7
 8002716:	f7fe f951 	bl	80009bc <__aeabi_dcmplt>
 800271a:	2800      	cmp	r0, #0
 800271c:	d15b      	bne.n	80027d6 <ftoa+0x140>
		else if (f < 10000.0) precision = 2;
 800271e:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8002722:	f2c4 01c3 	movt	r1, #16579	; 0x40c3
 8002726:	460b      	mov	r3, r1
 8002728:	2200      	movs	r2, #0
 800272a:	4640      	mov	r0, r8
 800272c:	4639      	mov	r1, r7
 800272e:	f7fe f945 	bl	80009bc <__aeabi_dcmplt>
 8002732:	2800      	cmp	r0, #0
 8002734:	d151      	bne.n	80027da <ftoa+0x144>
		else if (f < 100000.0) precision = 1;
 8002736:	f44f 41d4 	mov.w	r1, #27136	; 0x6a00
 800273a:	f2c4 01f8 	movt	r1, #16632	; 0x40f8
 800273e:	460b      	mov	r3, r1
 8002740:	2200      	movs	r2, #0
 8002742:	4640      	mov	r0, r8
 8002744:	4639      	mov	r1, r7
 8002746:	f7fe f939 	bl	80009bc <__aeabi_dcmplt>
 800274a:	2800      	cmp	r0, #0
 800274c:	d147      	bne.n	80027de <ftoa+0x148>
		else precision = 0;
 800274e:	4604      	mov	r4, r0
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 8002750:	4640      	mov	r0, r8
 8002752:	4639      	mov	r1, r7
 8002754:	f7fe f970 	bl	8000a38 <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 8002758:	2800      	cmp	r0, #0
 800275a:	d142      	bne.n	80027e2 <ftoa+0x14c>
		*ptr++ = '0';
 800275c:	2330      	movs	r3, #48	; 0x30
 800275e:	f109 0501 	add.w	r5, r9, #1
 8002762:	f889 3000 	strb.w	r3, [r9]
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8002766:	b1b4      	cbz	r4, 8002796 <ftoa+0x100>
	f -= intPart;
 8002768:	f7fd fe4c 	bl	8000404 <__aeabi_i2d>
 800276c:	460b      	mov	r3, r1
 800276e:	4602      	mov	r2, r0
 8002770:	4639      	mov	r1, r7
 8002772:	4640      	mov	r0, r8
 8002774:	f7fd fcf8 	bl	8000168 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 8002778:	232e      	movs	r3, #46	; 0x2e

		// convert
		while (precision--)
		{
			f *= 10.0;
 800277a:	2700      	movs	r7, #0
 800277c:	46aa      	mov	sl, r5
 800277e:	f04f 0b00 	mov.w	fp, #0
		*ptr++ = '.';
 8002782:	702b      	strb	r3, [r5, #0]
 8002784:	192b      	adds	r3, r5, r4
 8002786:	9301      	str	r3, [sp, #4]
			f *= 10.0;
 8002788:	f2c4 0724 	movt	r7, #16420	; 0x4024
		while (precision--)
 800278c:	9b01      	ldr	r3, [sp, #4]
 800278e:	4553      	cmp	r3, sl
 8002790:	d13f      	bne.n	8002812 <ftoa+0x17c>
 8002792:	3401      	adds	r4, #1
 8002794:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 8002796:	2300      	movs	r3, #0

	return buf;
}
 8002798:	4630      	mov	r0, r6
	*ptr = 0;
 800279a:	702b      	strb	r3, [r5, #0]
}
 800279c:	b003      	add	sp, #12
 800279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		precision = MAX_PRECISION;
 80027a2:	240a      	movs	r4, #10
 80027a4:	e786      	b.n	80026b4 <ftoa+0x1e>
 80027a6:	46b1      	mov	r9, r6
 80027a8:	e78a      	b.n	80026c0 <ftoa+0x2a>
	if (precision)
 80027aa:	d0d1      	beq.n	8002750 <ftoa+0xba>
		f += rounders[precision];
 80027ac:	f644 7318 	movw	r3, #20248	; 0x4f18
 80027b0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80027b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80027b8:	4640      	mov	r0, r8
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	4639      	mov	r1, r7
 80027c0:	f7fd fcd4 	bl	800016c <__adddf3>
 80027c4:	4680      	mov	r8, r0
 80027c6:	460f      	mov	r7, r1
 80027c8:	e7c2      	b.n	8002750 <ftoa+0xba>
		if (f < 1.0) precision = 6;
 80027ca:	2406      	movs	r4, #6
 80027cc:	e7ee      	b.n	80027ac <ftoa+0x116>
		else if (f < 10.0) precision = 5;
 80027ce:	2405      	movs	r4, #5
 80027d0:	e7ec      	b.n	80027ac <ftoa+0x116>
		else if (f < 100.0) precision = 4;
 80027d2:	2404      	movs	r4, #4
 80027d4:	e7ea      	b.n	80027ac <ftoa+0x116>
		else if (f < 1000.0) precision = 3;
 80027d6:	2403      	movs	r4, #3
 80027d8:	e7e8      	b.n	80027ac <ftoa+0x116>
		else if (f < 10000.0) precision = 2;
 80027da:	2402      	movs	r4, #2
 80027dc:	e7e6      	b.n	80027ac <ftoa+0x116>
		else if (f < 100000.0) precision = 1;
 80027de:	2401      	movs	r4, #1
 80027e0:	e7e4      	b.n	80027ac <ftoa+0x116>
 80027e2:	4603      	mov	r3, r0
 80027e4:	464d      	mov	r5, r9
			*p++ = '0' + intPart % 10;
 80027e6:	210a      	movs	r1, #10
 80027e8:	fb93 f2f1 	sdiv	r2, r3, r1
 80027ec:	fb01 3312 	mls	r3, r1, r2, r3
 80027f0:	3330      	adds	r3, #48	; 0x30
 80027f2:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 80027f6:	4613      	mov	r3, r2
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	d1f5      	bne.n	80027e8 <ftoa+0x152>
			*p++ = '0' + intPart % 10;
 80027fc:	462b      	mov	r3, r5
		while (p > ptr)
 80027fe:	4599      	cmp	r9, r3
 8002800:	d2b1      	bcs.n	8002766 <ftoa+0xd0>
			c = *--p;
 8002802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 8002806:	f899 1000 	ldrb.w	r1, [r9]
 800280a:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 800280c:	f809 2b01 	strb.w	r2, [r9], #1
 8002810:	e7f5      	b.n	80027fe <ftoa+0x168>
			f *= 10.0;
 8002812:	465a      	mov	r2, fp
 8002814:	463b      	mov	r3, r7
 8002816:	f7fd fe5f 	bl	80004d8 <__aeabi_dmul>
 800281a:	4689      	mov	r9, r1
 800281c:	4680      	mov	r8, r0
			c = f;
 800281e:	f7fe f933 	bl	8000a88 <__aeabi_d2uiz>
 8002822:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 8002824:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002828:	f80a 3f01 	strb.w	r3, [sl, #1]!
			f -= c;
 800282c:	f7fd fdea 	bl	8000404 <__aeabi_i2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4640      	mov	r0, r8
 8002836:	4649      	mov	r1, r9
 8002838:	f7fd fc96 	bl	8000168 <__aeabi_dsub>
 800283c:	e7a6      	b.n	800278c <ftoa+0xf6>
	if (f < 0)
 800283e:	f7fe f8bd 	bl	80009bc <__aeabi_dcmplt>
 8002842:	2800      	cmp	r0, #0
 8002844:	d1ad      	bne.n	80027a2 <ftoa+0x10c>
 8002846:	46b1      	mov	r9, r6
		precision = MAX_PRECISION;
 8002848:	240a      	movs	r4, #10
 800284a:	e7af      	b.n	80027ac <ftoa+0x116>

0800284c <init_MPU>:
    char status = 1;
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
    uint8_t register_address = WHO_AM_I_REG;
    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 800284c:	f240 200c 	movw	r0, #524	; 0x20c
char init_MPU(){
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
char init_MPU(){
 8002856:	b08b      	sub	sp, #44	; 0x2c
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 8002858:	2203      	movs	r2, #3
 800285a:	21d0      	movs	r1, #208	; 0xd0
 800285c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002860:	f7ff f958 	bl	8001b14 <HAL_I2C_IsDeviceReady>
 8002864:	2800      	cmp	r0, #0
 8002866:	d06e      	beq.n	8002946 <init_MPU+0xfa>
    	strcpy( rx_data, "No Device \r \n");
 8002868:	f644 61f8 	movw	r1, #20216	; 0x4ef8
 800286c:	f6c0 0100 	movt	r1, #2048	; 0x800
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 8002870:	a803      	add	r0, sp, #12
 8002872:	f001 f949 	bl	8003b08 <strcpy>
      }
    HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
 8002876:	f240 2074 	movw	r0, #628	; 0x274
 800287a:	2364      	movs	r3, #100	; 0x64
 800287c:	2219      	movs	r2, #25
 800287e:	a903      	add	r1, sp, #12
 8002880:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002884:	f7ff fdad 	bl	80023e2 <HAL_UART_Transmit>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8002888:	236b      	movs	r3, #107	; 0x6b
    d[1] = 0;
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800288a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800288e:	f240 200c 	movw	r0, #524	; 0x20c
	d[0] = PWR_MGMT_1;
 8002892:	ac0a      	add	r4, sp, #40	; 0x28
 8002894:	f824 3d20 	strh.w	r3, [r4, #-32]!
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8002898:	4622      	mov	r2, r4
 800289a:	2302      	movs	r3, #2
 800289c:	9500      	str	r5, [sp, #0]
 800289e:	21d0      	movs	r1, #208	; 0xd0
 80028a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028a4:	f7fe fee3 	bl	800166e <HAL_I2C_Master_Transmit>
		status = 0;
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
	d[1] = sample_1khz;
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80028a8:	f240 270c 	movw	r7, #524	; 0x20c
    char status = 1;
 80028ac:	fab0 f680 	clz	r6, r0
	d[0] = SAMPLE_RATE;
 80028b0:	f240 7319 	movw	r3, #1817	; 0x719
    char status = 1;
 80028b4:	0976      	lsrs	r6, r6, #5
	d[0] = SAMPLE_RATE;
 80028b6:	f8ad 3008 	strh.w	r3, [sp, #8]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80028ba:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80028be:	9500      	str	r5, [sp, #0]
 80028c0:	2302      	movs	r3, #2
 80028c2:	4622      	mov	r2, r4
 80028c4:	21d0      	movs	r1, #208	; 0xd0
 80028c6:	4638      	mov	r0, r7
 80028c8:	f7fe fed1 	bl	800166e <HAL_I2C_Master_Transmit>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d1f6      	bne.n	80028be <init_MPU+0x72>

	d[0] = GYRO_CONFIG;
 80028d0:	f641 031b 	movw	r3, #6171	; 0x181b
	d[1] = gyro_con;
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80028d4:	f240 250c 	movw	r5, #524	; 0x20c
 80028d8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	d[0] = GYRO_CONFIG;
 80028dc:	f8ad 3008 	strh.w	r3, [sp, #8]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80028e0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80028e4:	9700      	str	r7, [sp, #0]
 80028e6:	2302      	movs	r3, #2
 80028e8:	4622      	mov	r2, r4
 80028ea:	21d0      	movs	r1, #208	; 0xd0
 80028ec:	4628      	mov	r0, r5
 80028ee:	f7fe febe 	bl	800166e <HAL_I2C_Master_Transmit>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d1f6      	bne.n	80028e4 <init_MPU+0x98>

	d[0] = ACCEL_CONFIG;
 80028f6:	231c      	movs	r3, #28
	d[1] = 0x00;
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80028f8:	f240 250c 	movw	r5, #524	; 0x20c
 80028fc:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	d[0] = ACCEL_CONFIG;
 8002900:	f8ad 3008 	strh.w	r3, [sp, #8]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8002904:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002908:	9700      	str	r7, [sp, #0]
 800290a:	2302      	movs	r3, #2
 800290c:	4622      	mov	r2, r4
 800290e:	21d0      	movs	r1, #208	; 0xd0
 8002910:	4628      	mov	r0, r5
 8002912:	f7fe feac 	bl	800166e <HAL_I2C_Master_Transmit>
 8002916:	2800      	cmp	r0, #0
 8002918:	d1f6      	bne.n	8002908 <init_MPU+0xbc>

	d[0] = INIT_ENB;
 800291a:	f44f 739c 	mov.w	r3, #312	; 0x138
	d[1] = inter;
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800291e:	f240 250c 	movw	r5, #524	; 0x20c
 8002922:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	d[0] = INIT_ENB;
 8002926:	f8ad 3008 	strh.w	r3, [sp, #8]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800292a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800292e:	9700      	str	r7, [sp, #0]
 8002930:	2302      	movs	r3, #2
 8002932:	4622      	mov	r2, r4
 8002934:	21d0      	movs	r1, #208	; 0xd0
 8002936:	4628      	mov	r0, r5
 8002938:	f7fe fe99 	bl	800166e <HAL_I2C_Master_Transmit>
 800293c:	2800      	cmp	r0, #0
 800293e:	d1f6      	bne.n	800292e <init_MPU+0xe2>

  return status;
}
 8002940:	4630      	mov	r0, r6
 8002942:	b00b      	add	sp, #44	; 0x2c
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	  strcpy( rx_data, "Device found \r \n");
 8002946:	f644 7106 	movw	r1, #20230	; 0x4f06
 800294a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800294e:	e78f      	b.n	8002870 <init_MPU+0x24>

08002950 <process_MPU>:
	raw.Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}
mpu_data_processed process_MPU(){
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mpu_data_processed data1;
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch;

	uint8_t data[13];
	uint8_t reg = ACCEL_XOUT_H;
 8002954:	233b      	movs	r3, #59	; 0x3b
	uint8_t device_address = MPU_ADDRESS;
    uint8_t register_address = WHO_AM_I_REG;

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8002956:	f240 250c 	movw	r5, #524	; 0x20c
mpu_data_processed process_MPU(){
 800295a:	4604      	mov	r4, r0
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 800295c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
mpu_data_processed process_MPU(){
 8002960:	b08b      	sub	sp, #44	; 0x2c
	uint8_t reg = ACCEL_XOUT_H;
 8002962:	ae0a      	add	r6, sp, #40	; 0x28
 8002964:	f806 3d1b 	strb.w	r3, [r6, #-27]!
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8002968:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800296c:	9700      	str	r7, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	4632      	mov	r2, r6
 8002972:	21d0      	movs	r1, #208	; 0xd0
 8002974:	4628      	mov	r0, r5
 8002976:	f7fe fe7a 	bl	800166e <HAL_I2C_Master_Transmit>
 800297a:	2800      	cmp	r0, #0
 800297c:	d1f6      	bne.n	800296c <process_MPU+0x1c>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 800297e:	f240 250c 	movw	r5, #524	; 0x20c
 8002982:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002986:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800298a:	9600      	str	r6, [sp, #0]
 800298c:	230e      	movs	r3, #14
 800298e:	aa06      	add	r2, sp, #24
 8002990:	21d0      	movs	r1, #208	; 0xd0
 8002992:	4628      	mov	r0, r5
 8002994:	f7fe ff3f 	bl	8001816 <HAL_I2C_Master_Receive>
 8002998:	2800      	cmp	r0, #0
 800299a:	d1f6      	bne.n	800298a <process_MPU+0x3a>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 800299c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80029a0:	f89d 0019 	ldrb.w	r0, [sp, #25]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
    temp = (int16_t)(data[6] << 8 | data[7]);
 80029a4:	f240 2570 	movw	r5, #624	; 0x270
	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80029a8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029ac:	b200      	sxth	r0, r0
 80029ae:	f7fe f995 	bl	8000cdc <__aeabi_i2f>
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80029b2:	f89d 301a 	ldrb.w	r3, [sp, #26]
	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80029b6:	4606      	mov	r6, r0
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80029b8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    temp = (int16_t)(data[6] << 8 | data[7]);
 80029bc:	f2c2 0500 	movt	r5, #8192	; 0x2000
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80029c0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029c4:	b200      	sxth	r0, r0
 80029c6:	f7fe f989 	bl	8000cdc <__aeabi_i2f>
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80029ca:	f89d 301c 	ldrb.w	r3, [sp, #28]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80029ce:	4680      	mov	r8, r0
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80029d0:	f89d 001d 	ldrb.w	r0, [sp, #29]
 80029d4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029d8:	b200      	sxth	r0, r0
 80029da:	f7fe f97f 	bl	8000cdc <__aeabi_i2f>
    temp = (int16_t)(data[6] << 8 | data[7]);
 80029de:	f89d 301e 	ldrb.w	r3, [sp, #30]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80029e2:	4607      	mov	r7, r0
    temp = (int16_t)(data[6] << 8 | data[7]);
 80029e4:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80029e8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029ec:	b200      	sxth	r0, r0
 80029ee:	f7fe f975 	bl	8000cdc <__aeabi_i2f>
    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);

	Acc_x = Acc_x/((float)accel_factor);
	Acc_y = Acc_y/((float)accel_factor);
 80029f2:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
    temp = (int16_t)(data[6] << 8 | data[7]);
 80029f6:	6028      	str	r0, [r5, #0]
	Acc_y = Acc_y/((float)accel_factor);
 80029f8:	4640      	mov	r0, r8
 80029fa:	f7fe f9c3 	bl	8000d84 <__aeabi_fmul>
	Acc_z = Acc_z/((float)accel_factor);
 80029fe:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
	Acc_y = Acc_y/((float)accel_factor);
 8002a02:	4605      	mov	r5, r0
	Acc_z = Acc_z/((float)accel_factor);
 8002a04:	4638      	mov	r0, r7
 8002a06:	f7fe f9bd 	bl	8000d84 <__aeabi_fmul>
	Gyro_y = Gyro_y/gyro_factor;
	Gyro_z = Gyro_z/gyro_factor;


	char buffer[7];
	char n = ' ';
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	f88d 300e 	strb.w	r3, [sp, #14]
	char r = '\n';
 8002a10:	230a      	movs	r3, #10
	Acc_z = Acc_z/((float)accel_factor);
 8002a12:	4607      	mov	r7, r0
	char r = '\n';
 8002a14:	f88d 300f 	strb.w	r3, [sp, #15]
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002a18:	f7fd fd06 	bl	8000428 <__aeabi_f2d>
 8002a1c:	4680      	mov	r8, r0
 8002a1e:	4689      	mov	r9, r1
 8002a20:	4628      	mov	r0, r5
 8002a22:	f7fd fd01 	bl	8000428 <__aeabi_f2d>
 8002a26:	4642      	mov	r2, r8
 8002a28:	464b      	mov	r3, r9
 8002a2a:	f000 fb1b 	bl	8003064 <atan2>
 8002a2e:	4680      	mov	r8, r0
 8002a30:	4689      	mov	r9, r1
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8002a32:	4628      	mov	r0, r5
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fe f9a5 	bl	8000d84 <__aeabi_fmul>
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	4605      	mov	r5, r0
 8002a3e:	4638      	mov	r0, r7
 8002a40:	f7fe f9a0 	bl	8000d84 <__aeabi_fmul>
 8002a44:	4601      	mov	r1, r0
 8002a46:	4628      	mov	r0, r5
 8002a48:	f7fe f894 	bl	8000b74 <__addsf3>
 8002a4c:	f7fd fcec 	bl	8000428 <__aeabi_f2d>
 8002a50:	f000 fb0a 	bl	8003068 <sqrt>
 8002a54:	4682      	mov	sl, r0
 8002a56:	468b      	mov	fp, r1
	Acc_x = Acc_x/((float)accel_factor);
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8002a5e:	f7fe f991 	bl	8000d84 <__aeabi_fmul>
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8002a62:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002a66:	f7fd fcdf 	bl	8000428 <__aeabi_f2d>
 8002a6a:	4652      	mov	r2, sl
 8002a6c:	465b      	mov	r3, fp
 8002a6e:	f7fd fe5d 	bl	800072c <__aeabi_ddiv>
 8002a72:	f000 f969 	bl	8002d48 <atan>
 8002a76:	4606      	mov	r6, r0
 8002a78:	460f      	mov	r7, r1
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002a7a:	f242 3072 	movw	r0, #9074	; 0x2372
 8002a7e:	f24a 51dc 	movw	r1, #42460	; 0xa5dc
 8002a82:	f6c1 205d 	movt	r0, #6749	; 0x1a5d
 8002a86:	f2c4 014c 	movt	r1, #16460	; 0x404c
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4640      	mov	r0, r8
 8002a90:	4649      	mov	r1, r9
 8002a92:	f7fd fd21 	bl	80004d8 <__aeabi_dmul>
 8002a96:	f7fe f817 	bl	8000ac8 <__aeabi_d2f>

    ftoa(roll, buffer, 2);
 8002a9a:	f7fd fcc5 	bl	8000428 <__aeabi_f2d>
 8002a9e:	aa04      	add	r2, sp, #16
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f7ff fdf8 	bl	8002696 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
 8002aa6:	f240 2074 	movw	r0, #628	; 0x274
 8002aaa:	a904      	add	r1, sp, #16
 8002aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ab6:	f7ff fc94 	bl	80023e2 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8002aba:	f240 2074 	movw	r0, #628	; 0x274
 8002abe:	f10d 010e 	add.w	r1, sp, #14
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002acc:	f7ff fc89 	bl	80023e2 <HAL_UART_Transmit>
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8002ad0:	f242 3072 	movw	r0, #9074	; 0x2372
 8002ad4:	f24a 51dc 	movw	r1, #42460	; 0xa5dc
 8002ad8:	f6c1 205d 	movt	r0, #6749	; 0x1a5d
 8002adc:	f2c4 014c 	movt	r1, #16460	; 0x404c
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	4639      	mov	r1, r7
 8002ae8:	f7fd fcf6 	bl	80004d8 <__aeabi_dmul>
 8002aec:	f7fd ffec 	bl	8000ac8 <__aeabi_d2f>
    ftoa(pitch, buffer, 2);
 8002af0:	f7fd fc9a 	bl	8000428 <__aeabi_f2d>
 8002af4:	aa04      	add	r2, sp, #16
 8002af6:	2302      	movs	r3, #2
 8002af8:	f7ff fdcd 	bl	8002696 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
 8002afc:	f240 2074 	movw	r0, #628	; 0x274
 8002b00:	a904      	add	r1, sp, #16
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	2207      	movs	r2, #7
 8002b08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b0c:	f7ff fc69 	bl	80023e2 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
 8002b10:	f240 2074 	movw	r0, #628	; 0x274
 8002b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f10d 010f 	add.w	r1, sp, #15
 8002b1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b22:	f7ff fc5e 	bl	80023e2 <HAL_UART_Transmit>
}
 8002b26:	4620      	mov	r0, r4
 8002b28:	b00b      	add	sp, #44	; 0x2c
 8002b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b2e <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b36:	699a      	ldr	r2, [r3, #24]
{
 8002b38:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	619a      	str	r2, [r3, #24]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	f002 0201 	and.w	r2, r2, #1
 8002b46:	9200      	str	r2, [sp, #0]
 8002b48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b50:	61da      	str	r2, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002b52:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	69db      	ldr	r3, [r3, #28]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002b56:	f2c4 0201 	movt	r2, #16385	; 0x4001
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002b62:	6853      	ldr	r3, [r2, #4]
 8002b64:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6e:	b002      	add	sp, #8
 8002b70:	4770      	bx	lr

08002b72 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b72:	b510      	push	{r4, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	2210      	movs	r2, #16
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	a802      	add	r0, sp, #8
 8002b7e:	f000 fc7d 	bl	800347c <memset>
  if(hi2c->Instance==I2C1)
 8002b82:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d122      	bne.n	8002bd6 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b90:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002b94:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8002b98:	69a3      	ldr	r3, [r4, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9a:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	61a3      	str	r3, [r4, #24]
 8002ba2:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb0:	2312      	movs	r3, #18
 8002bb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	a902      	add	r1, sp, #8
 8002bba:	f2c4 0001 	movt	r0, #16385	; 0x4001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bbe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc0:	f7fe fae0 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc4:	69e3      	ldr	r3, [r4, #28]
 8002bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bca:	61e3      	str	r3, [r4, #28]
 8002bcc:	69e3      	ldr	r3, [r4, #28]
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd10      	pop	{r4, pc}

08002bda <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bda:	b510      	push	{r4, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	2210      	movs	r2, #16
 8002be2:	2100      	movs	r1, #0
 8002be4:	a802      	add	r0, sp, #8
 8002be6:	f000 fc49 	bl	800347c <memset>
  if(huart->Instance==USART1)
 8002bea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d130      	bne.n	8002c5a <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c00:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0a:	619a      	str	r2, [r3, #24]
 8002c0c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c10:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c14:	9200      	str	r2, [sp, #0]
 8002c16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c18:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	f042 0204 	orr.w	r2, r2, #4
 8002c22:	619a      	str	r2, [r3, #24]
 8002c24:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f7fe faa2 	bl	8001184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c44:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c4a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002c52:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f7fe fa95 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c5e:	4770      	bx	lr

08002c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c60:	e7fe      	b.n	8002c60 <HardFault_Handler>

08002c62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c62:	e7fe      	b.n	8002c62 <MemManage_Handler>

08002c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c64:	e7fe      	b.n	8002c64 <BusFault_Handler>

08002c66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c66:	e7fe      	b.n	8002c66 <UsageFault_Handler>

08002c68 <SVC_Handler>:
 8002c68:	4770      	bx	lr

08002c6a <DebugMon_Handler>:
 8002c6a:	4770      	bx	lr

08002c6c <PendSV_Handler>:
 8002c6c:	4770      	bx	lr

08002c6e <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6e:	f7fe ba13 	b.w	8001098 <HAL_IncTick>

08002c72 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c72:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c74:	f240 13fc 	movw	r3, #508	; 0x1fc
 8002c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c7c:	6819      	ldr	r1, [r3, #0]
{
 8002c7e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002c80:	b921      	cbnz	r1, 8002c8c <_sbrk+0x1a>
		heap_end = &end;
 8002c82:	f240 21c8 	movw	r1, #712	; 0x2c8
 8002c86:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002c8a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002c8c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002c8e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002c90:	4402      	add	r2, r0
 8002c92:	428a      	cmp	r2, r1
 8002c94:	d906      	bls.n	8002ca4 <_sbrk+0x32>
	{
		errno = ENOMEM;
 8002c96:	f000 fbc7 	bl	8003428 <__errno>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002c9e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002ca2:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002ca4:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002ca6:	e7fc      	b.n	8002ca2 <_sbrk+0x30>

08002ca8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002cb8:	2200      	movs	r2, #0
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	f6cf 02ff 	movt	r2, #63743	; 0xf8ff
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002cde:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ce0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ce4:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ce6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002cf2:	609a      	str	r2, [r3, #8]
#endif 
}
 8002cf4:	4770      	bx	lr
	...

08002cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cfa:	e003      	b.n	8002d04 <LoopCopyDataInit>

08002cfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d02:	3104      	adds	r1, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d04:	480a      	ldr	r0, [pc, #40]	; (8002d30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d0c:	d3f6      	bcc.n	8002cfc <CopyDataInit>
  ldr r2, =_sbss
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d10:	e002      	b.n	8002d18 <LoopFillZerobss>

08002d12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d14:	f842 3b04 	str.w	r3, [r2], #4

08002d18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d1c:	d3f9      	bcc.n	8002d12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d1e:	f7ff ffc3 	bl	8002ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d22:	f000 fb87 	bl	8003434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d26:	f7ff fc36 	bl	8002596 <main>
  bx lr
 8002d2a:	4770      	bx	lr
  ldr r3, =_sidata
 8002d2c:	08005200 	.word	0x08005200
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d34:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002d38:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002d3c:	200002c4 	.word	0x200002c4

08002d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC1_2_IRQHandler>
 8002d42:	0000      	movs	r0, r0
 8002d44:	0000      	movs	r0, r0
	...

08002d48 <atan>:
 8002d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4c:	4bb6      	ldr	r3, [pc, #728]	; (8003028 <atan+0x2e0>)
 8002d4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002d52:	429e      	cmp	r6, r3
 8002d54:	4604      	mov	r4, r0
 8002d56:	460d      	mov	r5, r1
 8002d58:	468b      	mov	fp, r1
 8002d5a:	dd17      	ble.n	8002d8c <atan+0x44>
 8002d5c:	4bb3      	ldr	r3, [pc, #716]	; (800302c <atan+0x2e4>)
 8002d5e:	429e      	cmp	r6, r3
 8002d60:	dc01      	bgt.n	8002d66 <atan+0x1e>
 8002d62:	d109      	bne.n	8002d78 <atan+0x30>
 8002d64:	b140      	cbz	r0, 8002d78 <atan+0x30>
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	f7fd f9fd 	bl	800016c <__adddf3>
 8002d72:	4604      	mov	r4, r0
 8002d74:	460d      	mov	r5, r1
 8002d76:	e005      	b.n	8002d84 <atan+0x3c>
 8002d78:	f1bb 0f00 	cmp.w	fp, #0
 8002d7c:	4cac      	ldr	r4, [pc, #688]	; (8003030 <atan+0x2e8>)
 8002d7e:	f340 8121 	ble.w	8002fc4 <atan+0x27c>
 8002d82:	4dac      	ldr	r5, [pc, #688]	; (8003034 <atan+0x2ec>)
 8002d84:	4620      	mov	r0, r4
 8002d86:	4629      	mov	r1, r5
 8002d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8c:	4baa      	ldr	r3, [pc, #680]	; (8003038 <atan+0x2f0>)
 8002d8e:	429e      	cmp	r6, r3
 8002d90:	dc11      	bgt.n	8002db6 <atan+0x6e>
 8002d92:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8002d96:	429e      	cmp	r6, r3
 8002d98:	dc0a      	bgt.n	8002db0 <atan+0x68>
 8002d9a:	a38b      	add	r3, pc, #556	; (adr r3, 8002fc8 <atan+0x280>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd f9e4 	bl	800016c <__adddf3>
 8002da4:	2200      	movs	r2, #0
 8002da6:	4ba5      	ldr	r3, [pc, #660]	; (800303c <atan+0x2f4>)
 8002da8:	f7fd fe26 	bl	80009f8 <__aeabi_dcmpgt>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d1e9      	bne.n	8002d84 <atan+0x3c>
 8002db0:	f04f 3aff 	mov.w	sl, #4294967295
 8002db4:	e027      	b.n	8002e06 <atan+0xbe>
 8002db6:	f000 f951 	bl	800305c <fabs>
 8002dba:	4ba1      	ldr	r3, [pc, #644]	; (8003040 <atan+0x2f8>)
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	429e      	cmp	r6, r3
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	f300 80b8 	bgt.w	8002f36 <atan+0x1ee>
 8002dc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8002dca:	429e      	cmp	r6, r3
 8002dcc:	f300 809c 	bgt.w	8002f08 <atan+0x1c0>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	f7fd f9ca 	bl	800016c <__adddf3>
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4b98      	ldr	r3, [pc, #608]	; (800303c <atan+0x2f4>)
 8002ddc:	f7fd f9c4 	bl	8000168 <__aeabi_dsub>
 8002de0:	2200      	movs	r2, #0
 8002de2:	4606      	mov	r6, r0
 8002de4:	460f      	mov	r7, r1
 8002de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd f9bd 	bl	800016c <__adddf3>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4630      	mov	r0, r6
 8002df8:	4639      	mov	r1, r7
 8002dfa:	f7fd fc97 	bl	800072c <__aeabi_ddiv>
 8002dfe:	f04f 0a00 	mov.w	sl, #0
 8002e02:	4604      	mov	r4, r0
 8002e04:	460d      	mov	r5, r1
 8002e06:	4622      	mov	r2, r4
 8002e08:	462b      	mov	r3, r5
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fd fb63 	bl	80004d8 <__aeabi_dmul>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4680      	mov	r8, r0
 8002e18:	4689      	mov	r9, r1
 8002e1a:	f7fd fb5d 	bl	80004d8 <__aeabi_dmul>
 8002e1e:	a36c      	add	r3, pc, #432	; (adr r3, 8002fd0 <atan+0x288>)
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	4606      	mov	r6, r0
 8002e26:	460f      	mov	r7, r1
 8002e28:	f7fd fb56 	bl	80004d8 <__aeabi_dmul>
 8002e2c:	a36a      	add	r3, pc, #424	; (adr r3, 8002fd8 <atan+0x290>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd f99b 	bl	800016c <__adddf3>
 8002e36:	4632      	mov	r2, r6
 8002e38:	463b      	mov	r3, r7
 8002e3a:	f7fd fb4d 	bl	80004d8 <__aeabi_dmul>
 8002e3e:	a368      	add	r3, pc, #416	; (adr r3, 8002fe0 <atan+0x298>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f7fd f992 	bl	800016c <__adddf3>
 8002e48:	4632      	mov	r2, r6
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	f7fd fb44 	bl	80004d8 <__aeabi_dmul>
 8002e50:	a365      	add	r3, pc, #404	; (adr r3, 8002fe8 <atan+0x2a0>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd f989 	bl	800016c <__adddf3>
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	f7fd fb3b 	bl	80004d8 <__aeabi_dmul>
 8002e62:	a363      	add	r3, pc, #396	; (adr r3, 8002ff0 <atan+0x2a8>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd f980 	bl	800016c <__adddf3>
 8002e6c:	4632      	mov	r2, r6
 8002e6e:	463b      	mov	r3, r7
 8002e70:	f7fd fb32 	bl	80004d8 <__aeabi_dmul>
 8002e74:	a360      	add	r3, pc, #384	; (adr r3, 8002ff8 <atan+0x2b0>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd f977 	bl	800016c <__adddf3>
 8002e7e:	4642      	mov	r2, r8
 8002e80:	464b      	mov	r3, r9
 8002e82:	f7fd fb29 	bl	80004d8 <__aeabi_dmul>
 8002e86:	a35e      	add	r3, pc, #376	; (adr r3, 8003000 <atan+0x2b8>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	4689      	mov	r9, r1
 8002e90:	4630      	mov	r0, r6
 8002e92:	4639      	mov	r1, r7
 8002e94:	f7fd fb20 	bl	80004d8 <__aeabi_dmul>
 8002e98:	a35b      	add	r3, pc, #364	; (adr r3, 8003008 <atan+0x2c0>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd f963 	bl	8000168 <__aeabi_dsub>
 8002ea2:	4632      	mov	r2, r6
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	f7fd fb17 	bl	80004d8 <__aeabi_dmul>
 8002eaa:	a359      	add	r3, pc, #356	; (adr r3, 8003010 <atan+0x2c8>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd f95a 	bl	8000168 <__aeabi_dsub>
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	f7fd fb0e 	bl	80004d8 <__aeabi_dmul>
 8002ebc:	a356      	add	r3, pc, #344	; (adr r3, 8003018 <atan+0x2d0>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f7fd f951 	bl	8000168 <__aeabi_dsub>
 8002ec6:	4632      	mov	r2, r6
 8002ec8:	463b      	mov	r3, r7
 8002eca:	f7fd fb05 	bl	80004d8 <__aeabi_dmul>
 8002ece:	a354      	add	r3, pc, #336	; (adr r3, 8003020 <atan+0x2d8>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd f948 	bl	8000168 <__aeabi_dsub>
 8002ed8:	4632      	mov	r2, r6
 8002eda:	463b      	mov	r3, r7
 8002edc:	f7fd fafc 	bl	80004d8 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	f7fd f940 	bl	800016c <__adddf3>
 8002eec:	4622      	mov	r2, r4
 8002eee:	462b      	mov	r3, r5
 8002ef0:	f7fd faf2 	bl	80004d8 <__aeabi_dmul>
 8002ef4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	d144      	bne.n	8002f88 <atan+0x240>
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f7fd f931 	bl	8000168 <__aeabi_dsub>
 8002f06:	e734      	b.n	8002d72 <atan+0x2a>
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <atan+0x2f4>)
 8002f0c:	f7fd f92c 	bl	8000168 <__aeabi_dsub>
 8002f10:	2200      	movs	r2, #0
 8002f12:	4606      	mov	r6, r0
 8002f14:	460f      	mov	r7, r1
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <atan+0x2f4>)
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f926 	bl	800016c <__adddf3>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4630      	mov	r0, r6
 8002f26:	4639      	mov	r1, r7
 8002f28:	f7fd fc00 	bl	800072c <__aeabi_ddiv>
 8002f2c:	f04f 0a01 	mov.w	sl, #1
 8002f30:	4604      	mov	r4, r0
 8002f32:	460d      	mov	r5, r1
 8002f34:	e767      	b.n	8002e06 <atan+0xbe>
 8002f36:	4b43      	ldr	r3, [pc, #268]	; (8003044 <atan+0x2fc>)
 8002f38:	429e      	cmp	r6, r3
 8002f3a:	dc1a      	bgt.n	8002f72 <atan+0x22a>
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <atan+0x300>)
 8002f40:	f7fd f912 	bl	8000168 <__aeabi_dsub>
 8002f44:	2200      	movs	r2, #0
 8002f46:	4606      	mov	r6, r0
 8002f48:	460f      	mov	r7, r1
 8002f4a:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <atan+0x300>)
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f7fd fac2 	bl	80004d8 <__aeabi_dmul>
 8002f54:	2200      	movs	r2, #0
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <atan+0x2f4>)
 8002f58:	f7fd f908 	bl	800016c <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4630      	mov	r0, r6
 8002f62:	4639      	mov	r1, r7
 8002f64:	f7fd fbe2 	bl	800072c <__aeabi_ddiv>
 8002f68:	f04f 0a02 	mov.w	sl, #2
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460d      	mov	r5, r1
 8002f70:	e749      	b.n	8002e06 <atan+0xbe>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	2000      	movs	r0, #0
 8002f78:	4934      	ldr	r1, [pc, #208]	; (800304c <atan+0x304>)
 8002f7a:	f7fd fbd7 	bl	800072c <__aeabi_ddiv>
 8002f7e:	f04f 0a03 	mov.w	sl, #3
 8002f82:	4604      	mov	r4, r0
 8002f84:	460d      	mov	r5, r1
 8002f86:	e73e      	b.n	8002e06 <atan+0xbe>
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <atan+0x308>)
 8002f8a:	4e32      	ldr	r6, [pc, #200]	; (8003054 <atan+0x30c>)
 8002f8c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8002f90:	4456      	add	r6, sl
 8002f92:	449a      	add	sl, r3
 8002f94:	e9da 2300 	ldrd	r2, r3, [sl]
 8002f98:	f7fd f8e6 	bl	8000168 <__aeabi_dsub>
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	f7fd f8e2 	bl	8000168 <__aeabi_dsub>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002fac:	f7fd f8dc 	bl	8000168 <__aeabi_dsub>
 8002fb0:	f1bb 0f00 	cmp.w	fp, #0
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	460d      	mov	r5, r1
 8002fb8:	f6bf aee4 	bge.w	8002d84 <atan+0x3c>
 8002fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	e6df      	b.n	8002d84 <atan+0x3c>
 8002fc4:	4d24      	ldr	r5, [pc, #144]	; (8003058 <atan+0x310>)
 8002fc6:	e6dd      	b.n	8002d84 <atan+0x3c>
 8002fc8:	8800759c 	.word	0x8800759c
 8002fcc:	7e37e43c 	.word	0x7e37e43c
 8002fd0:	e322da11 	.word	0xe322da11
 8002fd4:	3f90ad3a 	.word	0x3f90ad3a
 8002fd8:	24760deb 	.word	0x24760deb
 8002fdc:	3fa97b4b 	.word	0x3fa97b4b
 8002fe0:	a0d03d51 	.word	0xa0d03d51
 8002fe4:	3fb10d66 	.word	0x3fb10d66
 8002fe8:	c54c206e 	.word	0xc54c206e
 8002fec:	3fb745cd 	.word	0x3fb745cd
 8002ff0:	920083ff 	.word	0x920083ff
 8002ff4:	3fc24924 	.word	0x3fc24924
 8002ff8:	5555550d 	.word	0x5555550d
 8002ffc:	3fd55555 	.word	0x3fd55555
 8003000:	2c6a6c2f 	.word	0x2c6a6c2f
 8003004:	bfa2b444 	.word	0xbfa2b444
 8003008:	52defd9a 	.word	0x52defd9a
 800300c:	3fadde2d 	.word	0x3fadde2d
 8003010:	af749a6d 	.word	0xaf749a6d
 8003014:	3fb3b0f2 	.word	0x3fb3b0f2
 8003018:	fe231671 	.word	0xfe231671
 800301c:	3fbc71c6 	.word	0x3fbc71c6
 8003020:	9998ebc4 	.word	0x9998ebc4
 8003024:	3fc99999 	.word	0x3fc99999
 8003028:	440fffff 	.word	0x440fffff
 800302c:	7ff00000 	.word	0x7ff00000
 8003030:	54442d18 	.word	0x54442d18
 8003034:	3ff921fb 	.word	0x3ff921fb
 8003038:	3fdbffff 	.word	0x3fdbffff
 800303c:	3ff00000 	.word	0x3ff00000
 8003040:	3ff2ffff 	.word	0x3ff2ffff
 8003044:	40037fff 	.word	0x40037fff
 8003048:	3ff80000 	.word	0x3ff80000
 800304c:	bff00000 	.word	0xbff00000
 8003050:	08004fa8 	.word	0x08004fa8
 8003054:	08004f88 	.word	0x08004f88
 8003058:	bff921fb 	.word	0xbff921fb

0800305c <fabs>:
 800305c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003060:	4619      	mov	r1, r3
 8003062:	4770      	bx	lr

08003064 <atan2>:
 8003064:	f000 b854 	b.w	8003110 <__ieee754_atan2>

08003068 <sqrt>:
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	b08b      	sub	sp, #44	; 0x2c
 800306e:	4604      	mov	r4, r0
 8003070:	460d      	mov	r5, r1
 8003072:	f000 f92b 	bl	80032cc <__ieee754_sqrt>
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <sqrt+0xa0>)
 8003078:	4680      	mov	r8, r0
 800307a:	f993 a000 	ldrsb.w	sl, [r3]
 800307e:	4689      	mov	r9, r1
 8003080:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003084:	d02b      	beq.n	80030de <sqrt+0x76>
 8003086:	4622      	mov	r2, r4
 8003088:	462b      	mov	r3, r5
 800308a:	4620      	mov	r0, r4
 800308c:	4629      	mov	r1, r5
 800308e:	f7fd fcbd 	bl	8000a0c <__aeabi_dcmpun>
 8003092:	4683      	mov	fp, r0
 8003094:	bb18      	cbnz	r0, 80030de <sqrt+0x76>
 8003096:	2600      	movs	r6, #0
 8003098:	2700      	movs	r7, #0
 800309a:	4632      	mov	r2, r6
 800309c:	463b      	mov	r3, r7
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd fc8b 	bl	80009bc <__aeabi_dcmplt>
 80030a6:	b1d0      	cbz	r0, 80030de <sqrt+0x76>
 80030a8:	2301      	movs	r3, #1
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <sqrt+0xa4>)
 80030ae:	f8cd b020 	str.w	fp, [sp, #32]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80030b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80030bc:	f1ba 0f00 	cmp.w	sl, #0
 80030c0:	d112      	bne.n	80030e8 <sqrt+0x80>
 80030c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80030c6:	4668      	mov	r0, sp
 80030c8:	f000 f9ac 	bl	8003424 <matherr>
 80030cc:	b1b8      	cbz	r0, 80030fe <sqrt+0x96>
 80030ce:	9b08      	ldr	r3, [sp, #32]
 80030d0:	b11b      	cbz	r3, 80030da <sqrt+0x72>
 80030d2:	f000 f9a9 	bl	8003428 <__errno>
 80030d6:	9b08      	ldr	r3, [sp, #32]
 80030d8:	6003      	str	r3, [r0, #0]
 80030da:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80030de:	4640      	mov	r0, r8
 80030e0:	4649      	mov	r1, r9
 80030e2:	b00b      	add	sp, #44	; 0x2c
 80030e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e8:	4632      	mov	r2, r6
 80030ea:	463b      	mov	r3, r7
 80030ec:	4630      	mov	r0, r6
 80030ee:	4639      	mov	r1, r7
 80030f0:	f7fd fb1c 	bl	800072c <__aeabi_ddiv>
 80030f4:	f1ba 0f02 	cmp.w	sl, #2
 80030f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80030fc:	d1e3      	bne.n	80030c6 <sqrt+0x5e>
 80030fe:	f000 f993 	bl	8003428 <__errno>
 8003102:	2321      	movs	r3, #33	; 0x21
 8003104:	6003      	str	r3, [r0, #0]
 8003106:	e7e2      	b.n	80030ce <sqrt+0x66>
 8003108:	2000000c 	.word	0x2000000c
 800310c:	08004fc8 	.word	0x08004fc8

08003110 <__ieee754_atan2>:
 8003110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003114:	4256      	negs	r6, r2
 8003116:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800311a:	4316      	orrs	r6, r2
 800311c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80032c8 <__ieee754_atan2+0x1b8>
 8003120:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8003124:	454e      	cmp	r6, r9
 8003126:	4604      	mov	r4, r0
 8003128:	460d      	mov	r5, r1
 800312a:	469e      	mov	lr, r3
 800312c:	d808      	bhi.n	8003140 <__ieee754_atan2+0x30>
 800312e:	4246      	negs	r6, r0
 8003130:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003134:	4306      	orrs	r6, r0
 8003136:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800313a:	454e      	cmp	r6, r9
 800313c:	4688      	mov	r8, r1
 800313e:	d906      	bls.n	800314e <__ieee754_atan2+0x3e>
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f812 	bl	800016c <__adddf3>
 8003148:	4604      	mov	r4, r0
 800314a:	460d      	mov	r5, r1
 800314c:	e030      	b.n	80031b0 <__ieee754_atan2+0xa0>
 800314e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8003152:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003156:	4316      	orrs	r6, r2
 8003158:	d103      	bne.n	8003162 <__ieee754_atan2+0x52>
 800315a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315e:	f7ff bdf3 	b.w	8002d48 <atan>
 8003162:	179e      	asrs	r6, r3, #30
 8003164:	f006 0602 	and.w	r6, r6, #2
 8003168:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800316c:	ea57 0100 	orrs.w	r1, r7, r0
 8003170:	d107      	bne.n	8003182 <__ieee754_atan2+0x72>
 8003172:	2e02      	cmp	r6, #2
 8003174:	d079      	beq.n	800326a <__ieee754_atan2+0x15a>
 8003176:	2e03      	cmp	r6, #3
 8003178:	d11a      	bne.n	80031b0 <__ieee754_atan2+0xa0>
 800317a:	a541      	add	r5, pc, #260	; (adr r5, 8003280 <__ieee754_atan2+0x170>)
 800317c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003180:	e016      	b.n	80031b0 <__ieee754_atan2+0xa0>
 8003182:	ea5c 0102 	orrs.w	r1, ip, r2
 8003186:	d106      	bne.n	8003196 <__ieee754_atan2+0x86>
 8003188:	f1b8 0f00 	cmp.w	r8, #0
 800318c:	da71      	bge.n	8003272 <__ieee754_atan2+0x162>
 800318e:	a53e      	add	r5, pc, #248	; (adr r5, 8003288 <__ieee754_atan2+0x178>)
 8003190:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003194:	e00c      	b.n	80031b0 <__ieee754_atan2+0xa0>
 8003196:	45cc      	cmp	ip, r9
 8003198:	d123      	bne.n	80031e2 <__ieee754_atan2+0xd2>
 800319a:	4567      	cmp	r7, ip
 800319c:	d114      	bne.n	80031c8 <__ieee754_atan2+0xb8>
 800319e:	2e02      	cmp	r6, #2
 80031a0:	d00a      	beq.n	80031b8 <__ieee754_atan2+0xa8>
 80031a2:	2e03      	cmp	r6, #3
 80031a4:	d00c      	beq.n	80031c0 <__ieee754_atan2+0xb0>
 80031a6:	2e01      	cmp	r6, #1
 80031a8:	d15b      	bne.n	8003262 <__ieee754_atan2+0x152>
 80031aa:	a539      	add	r5, pc, #228	; (adr r5, 8003290 <__ieee754_atan2+0x180>)
 80031ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b8:	a537      	add	r5, pc, #220	; (adr r5, 8003298 <__ieee754_atan2+0x188>)
 80031ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80031be:	e7f7      	b.n	80031b0 <__ieee754_atan2+0xa0>
 80031c0:	a537      	add	r5, pc, #220	; (adr r5, 80032a0 <__ieee754_atan2+0x190>)
 80031c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80031c6:	e7f3      	b.n	80031b0 <__ieee754_atan2+0xa0>
 80031c8:	2e02      	cmp	r6, #2
 80031ca:	d04e      	beq.n	800326a <__ieee754_atan2+0x15a>
 80031cc:	2e03      	cmp	r6, #3
 80031ce:	d0d4      	beq.n	800317a <__ieee754_atan2+0x6a>
 80031d0:	2e01      	cmp	r6, #1
 80031d2:	f04f 0400 	mov.w	r4, #0
 80031d6:	d102      	bne.n	80031de <__ieee754_atan2+0xce>
 80031d8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80031dc:	e7e8      	b.n	80031b0 <__ieee754_atan2+0xa0>
 80031de:	2500      	movs	r5, #0
 80031e0:	e7e6      	b.n	80031b0 <__ieee754_atan2+0xa0>
 80031e2:	454f      	cmp	r7, r9
 80031e4:	d0d0      	beq.n	8003188 <__ieee754_atan2+0x78>
 80031e6:	eba7 070c 	sub.w	r7, r7, ip
 80031ea:	153f      	asrs	r7, r7, #20
 80031ec:	2f3c      	cmp	r7, #60	; 0x3c
 80031ee:	dc1e      	bgt.n	800322e <__ieee754_atan2+0x11e>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da01      	bge.n	80031f8 <__ieee754_atan2+0xe8>
 80031f4:	373c      	adds	r7, #60	; 0x3c
 80031f6:	db1e      	blt.n	8003236 <__ieee754_atan2+0x126>
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fd fa96 	bl	800072c <__aeabi_ddiv>
 8003200:	f7ff ff2c 	bl	800305c <fabs>
 8003204:	f7ff fda0 	bl	8002d48 <atan>
 8003208:	4604      	mov	r4, r0
 800320a:	460d      	mov	r5, r1
 800320c:	2e01      	cmp	r6, #1
 800320e:	d015      	beq.n	800323c <__ieee754_atan2+0x12c>
 8003210:	2e02      	cmp	r6, #2
 8003212:	d017      	beq.n	8003244 <__ieee754_atan2+0x134>
 8003214:	2e00      	cmp	r6, #0
 8003216:	d0cb      	beq.n	80031b0 <__ieee754_atan2+0xa0>
 8003218:	a323      	add	r3, pc, #140	; (adr r3, 80032a8 <__ieee754_atan2+0x198>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fc ffa1 	bl	8000168 <__aeabi_dsub>
 8003226:	a322      	add	r3, pc, #136	; (adr r3, 80032b0 <__ieee754_atan2+0x1a0>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	e016      	b.n	800325c <__ieee754_atan2+0x14c>
 800322e:	a522      	add	r5, pc, #136	; (adr r5, 80032b8 <__ieee754_atan2+0x1a8>)
 8003230:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003234:	e7ea      	b.n	800320c <__ieee754_atan2+0xfc>
 8003236:	2400      	movs	r4, #0
 8003238:	2500      	movs	r5, #0
 800323a:	e7e7      	b.n	800320c <__ieee754_atan2+0xfc>
 800323c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003240:	461d      	mov	r5, r3
 8003242:	e7b5      	b.n	80031b0 <__ieee754_atan2+0xa0>
 8003244:	a318      	add	r3, pc, #96	; (adr r3, 80032a8 <__ieee754_atan2+0x198>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fc ff8b 	bl	8000168 <__aeabi_dsub>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	a116      	add	r1, pc, #88	; (adr r1, 80032b0 <__ieee754_atan2+0x1a0>)
 8003258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800325c:	f7fc ff84 	bl	8000168 <__aeabi_dsub>
 8003260:	e772      	b.n	8003148 <__ieee754_atan2+0x38>
 8003262:	a517      	add	r5, pc, #92	; (adr r5, 80032c0 <__ieee754_atan2+0x1b0>)
 8003264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003268:	e7a2      	b.n	80031b0 <__ieee754_atan2+0xa0>
 800326a:	a511      	add	r5, pc, #68	; (adr r5, 80032b0 <__ieee754_atan2+0x1a0>)
 800326c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003270:	e79e      	b.n	80031b0 <__ieee754_atan2+0xa0>
 8003272:	a511      	add	r5, pc, #68	; (adr r5, 80032b8 <__ieee754_atan2+0x1a8>)
 8003274:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003278:	e79a      	b.n	80031b0 <__ieee754_atan2+0xa0>
 800327a:	bf00      	nop
 800327c:	f3af 8000 	nop.w
 8003280:	54442d18 	.word	0x54442d18
 8003284:	c00921fb 	.word	0xc00921fb
 8003288:	54442d18 	.word	0x54442d18
 800328c:	bff921fb 	.word	0xbff921fb
 8003290:	54442d18 	.word	0x54442d18
 8003294:	bfe921fb 	.word	0xbfe921fb
 8003298:	7f3321d2 	.word	0x7f3321d2
 800329c:	4002d97c 	.word	0x4002d97c
 80032a0:	7f3321d2 	.word	0x7f3321d2
 80032a4:	c002d97c 	.word	0xc002d97c
 80032a8:	33145c07 	.word	0x33145c07
 80032ac:	3ca1a626 	.word	0x3ca1a626
 80032b0:	54442d18 	.word	0x54442d18
 80032b4:	400921fb 	.word	0x400921fb
 80032b8:	54442d18 	.word	0x54442d18
 80032bc:	3ff921fb 	.word	0x3ff921fb
 80032c0:	54442d18 	.word	0x54442d18
 80032c4:	3fe921fb 	.word	0x3fe921fb
 80032c8:	7ff00000 	.word	0x7ff00000

080032cc <__ieee754_sqrt>:
 80032cc:	4b54      	ldr	r3, [pc, #336]	; (8003420 <__ieee754_sqrt+0x154>)
 80032ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d2:	438b      	bics	r3, r1
 80032d4:	4606      	mov	r6, r0
 80032d6:	460d      	mov	r5, r1
 80032d8:	460a      	mov	r2, r1
 80032da:	460c      	mov	r4, r1
 80032dc:	d10f      	bne.n	80032fe <__ieee754_sqrt+0x32>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	f7fd f8f9 	bl	80004d8 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4630      	mov	r0, r6
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7fc ff3d 	bl	800016c <__adddf3>
 80032f2:	4606      	mov	r6, r0
 80032f4:	460d      	mov	r5, r1
 80032f6:	4630      	mov	r0, r6
 80032f8:	4629      	mov	r1, r5
 80032fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032fe:	2900      	cmp	r1, #0
 8003300:	4607      	mov	r7, r0
 8003302:	4603      	mov	r3, r0
 8003304:	dc0e      	bgt.n	8003324 <__ieee754_sqrt+0x58>
 8003306:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800330a:	ea5c 0707 	orrs.w	r7, ip, r7
 800330e:	d0f2      	beq.n	80032f6 <__ieee754_sqrt+0x2a>
 8003310:	b141      	cbz	r1, 8003324 <__ieee754_sqrt+0x58>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	f7fc ff27 	bl	8000168 <__aeabi_dsub>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	f7fd fa05 	bl	800072c <__aeabi_ddiv>
 8003322:	e7e6      	b.n	80032f2 <__ieee754_sqrt+0x26>
 8003324:	1512      	asrs	r2, r2, #20
 8003326:	d074      	beq.n	8003412 <__ieee754_sqrt+0x146>
 8003328:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800332c:	07d5      	lsls	r5, r2, #31
 800332e:	f04f 0500 	mov.w	r5, #0
 8003332:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003336:	bf48      	it	mi
 8003338:	0fd9      	lsrmi	r1, r3, #31
 800333a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800333e:	bf44      	itt	mi
 8003340:	005b      	lslmi	r3, r3, #1
 8003342:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8003346:	1051      	asrs	r1, r2, #1
 8003348:	0fda      	lsrs	r2, r3, #31
 800334a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800334e:	4628      	mov	r0, r5
 8003350:	2216      	movs	r2, #22
 8003352:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	1987      	adds	r7, r0, r6
 800335a:	42a7      	cmp	r7, r4
 800335c:	bfde      	ittt	le
 800335e:	19b8      	addle	r0, r7, r6
 8003360:	1be4      	suble	r4, r4, r7
 8003362:	19ad      	addle	r5, r5, r6
 8003364:	0fdf      	lsrs	r7, r3, #31
 8003366:	3a01      	subs	r2, #1
 8003368:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800336c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003370:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003374:	d1f0      	bne.n	8003358 <__ieee754_sqrt+0x8c>
 8003376:	f04f 0c20 	mov.w	ip, #32
 800337a:	4696      	mov	lr, r2
 800337c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003380:	4284      	cmp	r4, r0
 8003382:	eb06 070e 	add.w	r7, r6, lr
 8003386:	dc02      	bgt.n	800338e <__ieee754_sqrt+0xc2>
 8003388:	d112      	bne.n	80033b0 <__ieee754_sqrt+0xe4>
 800338a:	429f      	cmp	r7, r3
 800338c:	d810      	bhi.n	80033b0 <__ieee754_sqrt+0xe4>
 800338e:	2f00      	cmp	r7, #0
 8003390:	eb07 0e06 	add.w	lr, r7, r6
 8003394:	da42      	bge.n	800341c <__ieee754_sqrt+0x150>
 8003396:	f1be 0f00 	cmp.w	lr, #0
 800339a:	db3f      	blt.n	800341c <__ieee754_sqrt+0x150>
 800339c:	f100 0801 	add.w	r8, r0, #1
 80033a0:	1a24      	subs	r4, r4, r0
 80033a2:	4640      	mov	r0, r8
 80033a4:	429f      	cmp	r7, r3
 80033a6:	bf88      	it	hi
 80033a8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80033ac:	1bdb      	subs	r3, r3, r7
 80033ae:	4432      	add	r2, r6
 80033b0:	0064      	lsls	r4, r4, #1
 80033b2:	f1bc 0c01 	subs.w	ip, ip, #1
 80033b6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80033ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80033be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80033c2:	d1dd      	bne.n	8003380 <__ieee754_sqrt+0xb4>
 80033c4:	4323      	orrs	r3, r4
 80033c6:	d006      	beq.n	80033d6 <__ieee754_sqrt+0x10a>
 80033c8:	1c54      	adds	r4, r2, #1
 80033ca:	bf0b      	itete	eq
 80033cc:	4662      	moveq	r2, ip
 80033ce:	3201      	addne	r2, #1
 80033d0:	3501      	addeq	r5, #1
 80033d2:	f022 0201 	bicne.w	r2, r2, #1
 80033d6:	106b      	asrs	r3, r5, #1
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	07e8      	lsls	r0, r5, #31
 80033dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80033e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80033e4:	bf48      	it	mi
 80033e6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80033ea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80033ee:	4616      	mov	r6, r2
 80033f0:	e781      	b.n	80032f6 <__ieee754_sqrt+0x2a>
 80033f2:	0adc      	lsrs	r4, r3, #11
 80033f4:	3915      	subs	r1, #21
 80033f6:	055b      	lsls	r3, r3, #21
 80033f8:	2c00      	cmp	r4, #0
 80033fa:	d0fa      	beq.n	80033f2 <__ieee754_sqrt+0x126>
 80033fc:	02e6      	lsls	r6, r4, #11
 80033fe:	d50a      	bpl.n	8003416 <__ieee754_sqrt+0x14a>
 8003400:	f1c2 0020 	rsb	r0, r2, #32
 8003404:	fa23 f000 	lsr.w	r0, r3, r0
 8003408:	1e55      	subs	r5, r2, #1
 800340a:	4093      	lsls	r3, r2
 800340c:	4304      	orrs	r4, r0
 800340e:	1b4a      	subs	r2, r1, r5
 8003410:	e78a      	b.n	8003328 <__ieee754_sqrt+0x5c>
 8003412:	4611      	mov	r1, r2
 8003414:	e7f0      	b.n	80033f8 <__ieee754_sqrt+0x12c>
 8003416:	0064      	lsls	r4, r4, #1
 8003418:	3201      	adds	r2, #1
 800341a:	e7ef      	b.n	80033fc <__ieee754_sqrt+0x130>
 800341c:	4680      	mov	r8, r0
 800341e:	e7bf      	b.n	80033a0 <__ieee754_sqrt+0xd4>
 8003420:	7ff00000 	.word	0x7ff00000

08003424 <matherr>:
 8003424:	2000      	movs	r0, #0
 8003426:	4770      	bx	lr

08003428 <__errno>:
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <__errno+0x8>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000010 	.word	0x20000010

08003434 <__libc_init_array>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	2500      	movs	r5, #0
 8003438:	4e0c      	ldr	r6, [pc, #48]	; (800346c <__libc_init_array+0x38>)
 800343a:	4c0d      	ldr	r4, [pc, #52]	; (8003470 <__libc_init_array+0x3c>)
 800343c:	1ba4      	subs	r4, r4, r6
 800343e:	10a4      	asrs	r4, r4, #2
 8003440:	42a5      	cmp	r5, r4
 8003442:	d109      	bne.n	8003458 <__libc_init_array+0x24>
 8003444:	f001 fd44 	bl	8004ed0 <_init>
 8003448:	2500      	movs	r5, #0
 800344a:	4e0a      	ldr	r6, [pc, #40]	; (8003474 <__libc_init_array+0x40>)
 800344c:	4c0a      	ldr	r4, [pc, #40]	; (8003478 <__libc_init_array+0x44>)
 800344e:	1ba4      	subs	r4, r4, r6
 8003450:	10a4      	asrs	r4, r4, #2
 8003452:	42a5      	cmp	r5, r4
 8003454:	d105      	bne.n	8003462 <__libc_init_array+0x2e>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800345c:	4798      	blx	r3
 800345e:	3501      	adds	r5, #1
 8003460:	e7ee      	b.n	8003440 <__libc_init_array+0xc>
 8003462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003466:	4798      	blx	r3
 8003468:	3501      	adds	r5, #1
 800346a:	e7f2      	b.n	8003452 <__libc_init_array+0x1e>
 800346c:	080051f8 	.word	0x080051f8
 8003470:	080051f8 	.word	0x080051f8
 8003474:	080051f8 	.word	0x080051f8
 8003478:	080051fc 	.word	0x080051fc

0800347c <memset>:
 800347c:	4603      	mov	r3, r0
 800347e:	4402      	add	r2, r0
 8003480:	4293      	cmp	r3, r2
 8003482:	d100      	bne.n	8003486 <memset+0xa>
 8003484:	4770      	bx	lr
 8003486:	f803 1b01 	strb.w	r1, [r3], #1
 800348a:	e7f9      	b.n	8003480 <memset+0x4>

0800348c <__cvt>:
 800348c:	2b00      	cmp	r3, #0
 800348e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003492:	461e      	mov	r6, r3
 8003494:	bfbb      	ittet	lt
 8003496:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800349a:	461e      	movlt	r6, r3
 800349c:	2300      	movge	r3, #0
 800349e:	232d      	movlt	r3, #45	; 0x2d
 80034a0:	b088      	sub	sp, #32
 80034a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80034a4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80034a8:	f027 0720 	bic.w	r7, r7, #32
 80034ac:	2f46      	cmp	r7, #70	; 0x46
 80034ae:	4614      	mov	r4, r2
 80034b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034b2:	700b      	strb	r3, [r1, #0]
 80034b4:	d004      	beq.n	80034c0 <__cvt+0x34>
 80034b6:	2f45      	cmp	r7, #69	; 0x45
 80034b8:	d100      	bne.n	80034bc <__cvt+0x30>
 80034ba:	3501      	adds	r5, #1
 80034bc:	2302      	movs	r3, #2
 80034be:	e000      	b.n	80034c2 <__cvt+0x36>
 80034c0:	2303      	movs	r3, #3
 80034c2:	aa07      	add	r2, sp, #28
 80034c4:	9204      	str	r2, [sp, #16]
 80034c6:	aa06      	add	r2, sp, #24
 80034c8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034cc:	e9cd 3500 	strd	r3, r5, [sp]
 80034d0:	4622      	mov	r2, r4
 80034d2:	4633      	mov	r3, r6
 80034d4:	f000 fbb0 	bl	8003c38 <_dtoa_r>
 80034d8:	2f47      	cmp	r7, #71	; 0x47
 80034da:	4680      	mov	r8, r0
 80034dc:	d102      	bne.n	80034e4 <__cvt+0x58>
 80034de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034e0:	07db      	lsls	r3, r3, #31
 80034e2:	d526      	bpl.n	8003532 <__cvt+0xa6>
 80034e4:	2f46      	cmp	r7, #70	; 0x46
 80034e6:	eb08 0905 	add.w	r9, r8, r5
 80034ea:	d111      	bne.n	8003510 <__cvt+0x84>
 80034ec:	f898 3000 	ldrb.w	r3, [r8]
 80034f0:	2b30      	cmp	r3, #48	; 0x30
 80034f2:	d10a      	bne.n	800350a <__cvt+0x7e>
 80034f4:	2200      	movs	r2, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	4620      	mov	r0, r4
 80034fa:	4631      	mov	r1, r6
 80034fc:	f7fd fa54 	bl	80009a8 <__aeabi_dcmpeq>
 8003500:	b918      	cbnz	r0, 800350a <__cvt+0x7e>
 8003502:	f1c5 0501 	rsb	r5, r5, #1
 8003506:	f8ca 5000 	str.w	r5, [sl]
 800350a:	f8da 3000 	ldr.w	r3, [sl]
 800350e:	4499      	add	r9, r3
 8003510:	2200      	movs	r2, #0
 8003512:	2300      	movs	r3, #0
 8003514:	4620      	mov	r0, r4
 8003516:	4631      	mov	r1, r6
 8003518:	f7fd fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800351c:	b938      	cbnz	r0, 800352e <__cvt+0xa2>
 800351e:	2230      	movs	r2, #48	; 0x30
 8003520:	9b07      	ldr	r3, [sp, #28]
 8003522:	454b      	cmp	r3, r9
 8003524:	d205      	bcs.n	8003532 <__cvt+0xa6>
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	9107      	str	r1, [sp, #28]
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e7f8      	b.n	8003520 <__cvt+0x94>
 800352e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003532:	4640      	mov	r0, r8
 8003534:	9b07      	ldr	r3, [sp, #28]
 8003536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003538:	eba3 0308 	sub.w	r3, r3, r8
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	b008      	add	sp, #32
 8003540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003544 <__exponent>:
 8003544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003546:	2900      	cmp	r1, #0
 8003548:	bfb4      	ite	lt
 800354a:	232d      	movlt	r3, #45	; 0x2d
 800354c:	232b      	movge	r3, #43	; 0x2b
 800354e:	4604      	mov	r4, r0
 8003550:	bfb8      	it	lt
 8003552:	4249      	neglt	r1, r1
 8003554:	2909      	cmp	r1, #9
 8003556:	f804 2b02 	strb.w	r2, [r4], #2
 800355a:	7043      	strb	r3, [r0, #1]
 800355c:	dd21      	ble.n	80035a2 <__exponent+0x5e>
 800355e:	f10d 0307 	add.w	r3, sp, #7
 8003562:	461f      	mov	r7, r3
 8003564:	260a      	movs	r6, #10
 8003566:	fb91 f5f6 	sdiv	r5, r1, r6
 800356a:	fb06 1115 	mls	r1, r6, r5, r1
 800356e:	2d09      	cmp	r5, #9
 8003570:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003574:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003578:	f103 32ff 	add.w	r2, r3, #4294967295
 800357c:	4629      	mov	r1, r5
 800357e:	dc09      	bgt.n	8003594 <__exponent+0x50>
 8003580:	3130      	adds	r1, #48	; 0x30
 8003582:	3b02      	subs	r3, #2
 8003584:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003588:	42bb      	cmp	r3, r7
 800358a:	4622      	mov	r2, r4
 800358c:	d304      	bcc.n	8003598 <__exponent+0x54>
 800358e:	1a10      	subs	r0, r2, r0
 8003590:	b003      	add	sp, #12
 8003592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003594:	4613      	mov	r3, r2
 8003596:	e7e6      	b.n	8003566 <__exponent+0x22>
 8003598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800359c:	f804 2b01 	strb.w	r2, [r4], #1
 80035a0:	e7f2      	b.n	8003588 <__exponent+0x44>
 80035a2:	2330      	movs	r3, #48	; 0x30
 80035a4:	4419      	add	r1, r3
 80035a6:	7083      	strb	r3, [r0, #2]
 80035a8:	1d02      	adds	r2, r0, #4
 80035aa:	70c1      	strb	r1, [r0, #3]
 80035ac:	e7ef      	b.n	800358e <__exponent+0x4a>
	...

080035b0 <_printf_float>:
 80035b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b4:	b091      	sub	sp, #68	; 0x44
 80035b6:	460c      	mov	r4, r1
 80035b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80035ba:	4693      	mov	fp, r2
 80035bc:	461e      	mov	r6, r3
 80035be:	4605      	mov	r5, r0
 80035c0:	f001 f8ee 	bl	80047a0 <_localeconv_r>
 80035c4:	6803      	ldr	r3, [r0, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ca:	f7fc fdc1 	bl	8000150 <strlen>
 80035ce:	2300      	movs	r3, #0
 80035d0:	930e      	str	r3, [sp, #56]	; 0x38
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	900a      	str	r0, [sp, #40]	; 0x28
 80035d6:	3307      	adds	r3, #7
 80035d8:	f023 0307 	bic.w	r3, r3, #7
 80035dc:	f103 0208 	add.w	r2, r3, #8
 80035e0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80035e4:	f8d4 a000 	ldr.w	sl, [r4]
 80035e8:	603a      	str	r2, [r7, #0]
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035f2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80035f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80035fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	4ba6      	ldr	r3, [pc, #664]	; (800389c <_printf_float+0x2ec>)
 8003602:	4638      	mov	r0, r7
 8003604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003606:	f7fd fa01 	bl	8000a0c <__aeabi_dcmpun>
 800360a:	bb68      	cbnz	r0, 8003668 <_printf_float+0xb8>
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	4ba2      	ldr	r3, [pc, #648]	; (800389c <_printf_float+0x2ec>)
 8003612:	4638      	mov	r0, r7
 8003614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003616:	f7fd f9db 	bl	80009d0 <__aeabi_dcmple>
 800361a:	bb28      	cbnz	r0, 8003668 <_printf_float+0xb8>
 800361c:	2200      	movs	r2, #0
 800361e:	2300      	movs	r3, #0
 8003620:	4638      	mov	r0, r7
 8003622:	4649      	mov	r1, r9
 8003624:	f7fd f9ca 	bl	80009bc <__aeabi_dcmplt>
 8003628:	b110      	cbz	r0, 8003630 <_printf_float+0x80>
 800362a:	232d      	movs	r3, #45	; 0x2d
 800362c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003630:	4f9b      	ldr	r7, [pc, #620]	; (80038a0 <_printf_float+0x2f0>)
 8003632:	4b9c      	ldr	r3, [pc, #624]	; (80038a4 <_printf_float+0x2f4>)
 8003634:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003638:	bf98      	it	ls
 800363a:	461f      	movls	r7, r3
 800363c:	2303      	movs	r3, #3
 800363e:	f04f 0900 	mov.w	r9, #0
 8003642:	6123      	str	r3, [r4, #16]
 8003644:	f02a 0304 	bic.w	r3, sl, #4
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	9600      	str	r6, [sp, #0]
 800364c:	465b      	mov	r3, fp
 800364e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003650:	4621      	mov	r1, r4
 8003652:	4628      	mov	r0, r5
 8003654:	f000 f9e2 	bl	8003a1c <_printf_common>
 8003658:	3001      	adds	r0, #1
 800365a:	f040 8090 	bne.w	800377e <_printf_float+0x1ce>
 800365e:	f04f 30ff 	mov.w	r0, #4294967295
 8003662:	b011      	add	sp, #68	; 0x44
 8003664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003668:	463a      	mov	r2, r7
 800366a:	464b      	mov	r3, r9
 800366c:	4638      	mov	r0, r7
 800366e:	4649      	mov	r1, r9
 8003670:	f7fd f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8003674:	b110      	cbz	r0, 800367c <_printf_float+0xcc>
 8003676:	4f8c      	ldr	r7, [pc, #560]	; (80038a8 <_printf_float+0x2f8>)
 8003678:	4b8c      	ldr	r3, [pc, #560]	; (80038ac <_printf_float+0x2fc>)
 800367a:	e7db      	b.n	8003634 <_printf_float+0x84>
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	a80d      	add	r0, sp, #52	; 0x34
 8003686:	a90e      	add	r1, sp, #56	; 0x38
 8003688:	d140      	bne.n	800370c <_printf_float+0x15c>
 800368a:	2306      	movs	r3, #6
 800368c:	6063      	str	r3, [r4, #4]
 800368e:	f04f 0c00 	mov.w	ip, #0
 8003692:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003696:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800369a:	6863      	ldr	r3, [r4, #4]
 800369c:	6022      	str	r2, [r4, #0]
 800369e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	463a      	mov	r2, r7
 80036a6:	464b      	mov	r3, r9
 80036a8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036ac:	4628      	mov	r0, r5
 80036ae:	f7ff feed 	bl	800348c <__cvt>
 80036b2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80036b6:	2b47      	cmp	r3, #71	; 0x47
 80036b8:	4607      	mov	r7, r0
 80036ba:	d109      	bne.n	80036d0 <_printf_float+0x120>
 80036bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036be:	1cd8      	adds	r0, r3, #3
 80036c0:	db02      	blt.n	80036c8 <_printf_float+0x118>
 80036c2:	6862      	ldr	r2, [r4, #4]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	dd47      	ble.n	8003758 <_printf_float+0x1a8>
 80036c8:	f1a8 0802 	sub.w	r8, r8, #2
 80036cc:	fa5f f888 	uxtb.w	r8, r8
 80036d0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80036d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036d6:	d824      	bhi.n	8003722 <_printf_float+0x172>
 80036d8:	3901      	subs	r1, #1
 80036da:	4642      	mov	r2, r8
 80036dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80036e0:	910d      	str	r1, [sp, #52]	; 0x34
 80036e2:	f7ff ff2f 	bl	8003544 <__exponent>
 80036e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036e8:	4681      	mov	r9, r0
 80036ea:	1813      	adds	r3, r2, r0
 80036ec:	2a01      	cmp	r2, #1
 80036ee:	6123      	str	r3, [r4, #16]
 80036f0:	dc02      	bgt.n	80036f8 <_printf_float+0x148>
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	07d1      	lsls	r1, r2, #31
 80036f6:	d501      	bpl.n	80036fc <_printf_float+0x14c>
 80036f8:	3301      	adds	r3, #1
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0a2      	beq.n	800364a <_printf_float+0x9a>
 8003704:	232d      	movs	r3, #45	; 0x2d
 8003706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370a:	e79e      	b.n	800364a <_printf_float+0x9a>
 800370c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003710:	f000 816e 	beq.w	80039f0 <_printf_float+0x440>
 8003714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003718:	d1b9      	bne.n	800368e <_printf_float+0xde>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1b7      	bne.n	800368e <_printf_float+0xde>
 800371e:	2301      	movs	r3, #1
 8003720:	e7b4      	b.n	800368c <_printf_float+0xdc>
 8003722:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003726:	d119      	bne.n	800375c <_printf_float+0x1ac>
 8003728:	2900      	cmp	r1, #0
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	dd0c      	ble.n	8003748 <_printf_float+0x198>
 800372e:	6121      	str	r1, [r4, #16]
 8003730:	b913      	cbnz	r3, 8003738 <_printf_float+0x188>
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	07d2      	lsls	r2, r2, #31
 8003736:	d502      	bpl.n	800373e <_printf_float+0x18e>
 8003738:	3301      	adds	r3, #1
 800373a:	440b      	add	r3, r1
 800373c:	6123      	str	r3, [r4, #16]
 800373e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003740:	f04f 0900 	mov.w	r9, #0
 8003744:	65a3      	str	r3, [r4, #88]	; 0x58
 8003746:	e7d9      	b.n	80036fc <_printf_float+0x14c>
 8003748:	b913      	cbnz	r3, 8003750 <_printf_float+0x1a0>
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	07d0      	lsls	r0, r2, #31
 800374e:	d501      	bpl.n	8003754 <_printf_float+0x1a4>
 8003750:	3302      	adds	r3, #2
 8003752:	e7f3      	b.n	800373c <_printf_float+0x18c>
 8003754:	2301      	movs	r3, #1
 8003756:	e7f1      	b.n	800373c <_printf_float+0x18c>
 8003758:	f04f 0867 	mov.w	r8, #103	; 0x67
 800375c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003760:	4293      	cmp	r3, r2
 8003762:	db05      	blt.n	8003770 <_printf_float+0x1c0>
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	07d1      	lsls	r1, r2, #31
 800376a:	d5e8      	bpl.n	800373e <_printf_float+0x18e>
 800376c:	3301      	adds	r3, #1
 800376e:	e7e5      	b.n	800373c <_printf_float+0x18c>
 8003770:	2b00      	cmp	r3, #0
 8003772:	bfcc      	ite	gt
 8003774:	2301      	movgt	r3, #1
 8003776:	f1c3 0302 	rsble	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	e7de      	b.n	800373c <_printf_float+0x18c>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	055a      	lsls	r2, r3, #21
 8003782:	d407      	bmi.n	8003794 <_printf_float+0x1e4>
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	463a      	mov	r2, r7
 8003788:	4659      	mov	r1, fp
 800378a:	4628      	mov	r0, r5
 800378c:	47b0      	blx	r6
 800378e:	3001      	adds	r0, #1
 8003790:	d129      	bne.n	80037e6 <_printf_float+0x236>
 8003792:	e764      	b.n	800365e <_printf_float+0xae>
 8003794:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003798:	f240 80d7 	bls.w	800394a <_printf_float+0x39a>
 800379c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037a0:	2200      	movs	r2, #0
 80037a2:	2300      	movs	r3, #0
 80037a4:	f7fd f900 	bl	80009a8 <__aeabi_dcmpeq>
 80037a8:	b388      	cbz	r0, 800380e <_printf_float+0x25e>
 80037aa:	2301      	movs	r3, #1
 80037ac:	4a40      	ldr	r2, [pc, #256]	; (80038b0 <_printf_float+0x300>)
 80037ae:	4659      	mov	r1, fp
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b0      	blx	r6
 80037b4:	3001      	adds	r0, #1
 80037b6:	f43f af52 	beq.w	800365e <_printf_float+0xae>
 80037ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037be:	429a      	cmp	r2, r3
 80037c0:	db02      	blt.n	80037c8 <_printf_float+0x218>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	07d8      	lsls	r0, r3, #31
 80037c6:	d50e      	bpl.n	80037e6 <_printf_float+0x236>
 80037c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037cc:	4659      	mov	r1, fp
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b0      	blx	r6
 80037d2:	3001      	adds	r0, #1
 80037d4:	f43f af43 	beq.w	800365e <_printf_float+0xae>
 80037d8:	2700      	movs	r7, #0
 80037da:	f104 081a 	add.w	r8, r4, #26
 80037de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037e0:	3b01      	subs	r3, #1
 80037e2:	42bb      	cmp	r3, r7
 80037e4:	dc09      	bgt.n	80037fa <_printf_float+0x24a>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	079f      	lsls	r7, r3, #30
 80037ea:	f100 80fd 	bmi.w	80039e8 <_printf_float+0x438>
 80037ee:	68e0      	ldr	r0, [r4, #12]
 80037f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037f2:	4298      	cmp	r0, r3
 80037f4:	bfb8      	it	lt
 80037f6:	4618      	movlt	r0, r3
 80037f8:	e733      	b.n	8003662 <_printf_float+0xb2>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4642      	mov	r2, r8
 80037fe:	4659      	mov	r1, fp
 8003800:	4628      	mov	r0, r5
 8003802:	47b0      	blx	r6
 8003804:	3001      	adds	r0, #1
 8003806:	f43f af2a 	beq.w	800365e <_printf_float+0xae>
 800380a:	3701      	adds	r7, #1
 800380c:	e7e7      	b.n	80037de <_printf_float+0x22e>
 800380e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003810:	2b00      	cmp	r3, #0
 8003812:	dc2b      	bgt.n	800386c <_printf_float+0x2bc>
 8003814:	2301      	movs	r3, #1
 8003816:	4a26      	ldr	r2, [pc, #152]	; (80038b0 <_printf_float+0x300>)
 8003818:	4659      	mov	r1, fp
 800381a:	4628      	mov	r0, r5
 800381c:	47b0      	blx	r6
 800381e:	3001      	adds	r0, #1
 8003820:	f43f af1d 	beq.w	800365e <_printf_float+0xae>
 8003824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003826:	b923      	cbnz	r3, 8003832 <_printf_float+0x282>
 8003828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800382a:	b913      	cbnz	r3, 8003832 <_printf_float+0x282>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	07d9      	lsls	r1, r3, #31
 8003830:	d5d9      	bpl.n	80037e6 <_printf_float+0x236>
 8003832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003836:	4659      	mov	r1, fp
 8003838:	4628      	mov	r0, r5
 800383a:	47b0      	blx	r6
 800383c:	3001      	adds	r0, #1
 800383e:	f43f af0e 	beq.w	800365e <_printf_float+0xae>
 8003842:	f04f 0800 	mov.w	r8, #0
 8003846:	f104 091a 	add.w	r9, r4, #26
 800384a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800384c:	425b      	negs	r3, r3
 800384e:	4543      	cmp	r3, r8
 8003850:	dc01      	bgt.n	8003856 <_printf_float+0x2a6>
 8003852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003854:	e797      	b.n	8003786 <_printf_float+0x1d6>
 8003856:	2301      	movs	r3, #1
 8003858:	464a      	mov	r2, r9
 800385a:	4659      	mov	r1, fp
 800385c:	4628      	mov	r0, r5
 800385e:	47b0      	blx	r6
 8003860:	3001      	adds	r0, #1
 8003862:	f43f aefc 	beq.w	800365e <_printf_float+0xae>
 8003866:	f108 0801 	add.w	r8, r8, #1
 800386a:	e7ee      	b.n	800384a <_printf_float+0x29a>
 800386c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800386e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003870:	429a      	cmp	r2, r3
 8003872:	bfa8      	it	ge
 8003874:	461a      	movge	r2, r3
 8003876:	2a00      	cmp	r2, #0
 8003878:	4690      	mov	r8, r2
 800387a:	dd07      	ble.n	800388c <_printf_float+0x2dc>
 800387c:	4613      	mov	r3, r2
 800387e:	4659      	mov	r1, fp
 8003880:	463a      	mov	r2, r7
 8003882:	4628      	mov	r0, r5
 8003884:	47b0      	blx	r6
 8003886:	3001      	adds	r0, #1
 8003888:	f43f aee9 	beq.w	800365e <_printf_float+0xae>
 800388c:	f104 031a 	add.w	r3, r4, #26
 8003890:	f04f 0a00 	mov.w	sl, #0
 8003894:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003898:	930b      	str	r3, [sp, #44]	; 0x2c
 800389a:	e015      	b.n	80038c8 <_printf_float+0x318>
 800389c:	7fefffff 	.word	0x7fefffff
 80038a0:	08004fd1 	.word	0x08004fd1
 80038a4:	08004fcd 	.word	0x08004fcd
 80038a8:	08004fd9 	.word	0x08004fd9
 80038ac:	08004fd5 	.word	0x08004fd5
 80038b0:	08004fdd 	.word	0x08004fdd
 80038b4:	2301      	movs	r3, #1
 80038b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038b8:	4659      	mov	r1, fp
 80038ba:	4628      	mov	r0, r5
 80038bc:	47b0      	blx	r6
 80038be:	3001      	adds	r0, #1
 80038c0:	f43f aecd 	beq.w	800365e <_printf_float+0xae>
 80038c4:	f10a 0a01 	add.w	sl, sl, #1
 80038c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80038cc:	eba9 0308 	sub.w	r3, r9, r8
 80038d0:	4553      	cmp	r3, sl
 80038d2:	dcef      	bgt.n	80038b4 <_printf_float+0x304>
 80038d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038d8:	429a      	cmp	r2, r3
 80038da:	444f      	add	r7, r9
 80038dc:	db14      	blt.n	8003908 <_printf_float+0x358>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	07da      	lsls	r2, r3, #31
 80038e2:	d411      	bmi.n	8003908 <_printf_float+0x358>
 80038e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038e8:	eba3 0209 	sub.w	r2, r3, r9
 80038ec:	eba3 0901 	sub.w	r9, r3, r1
 80038f0:	4591      	cmp	r9, r2
 80038f2:	bfa8      	it	ge
 80038f4:	4691      	movge	r9, r2
 80038f6:	f1b9 0f00 	cmp.w	r9, #0
 80038fa:	dc0d      	bgt.n	8003918 <_printf_float+0x368>
 80038fc:	2700      	movs	r7, #0
 80038fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003902:	f104 081a 	add.w	r8, r4, #26
 8003906:	e018      	b.n	800393a <_printf_float+0x38a>
 8003908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800390c:	4659      	mov	r1, fp
 800390e:	4628      	mov	r0, r5
 8003910:	47b0      	blx	r6
 8003912:	3001      	adds	r0, #1
 8003914:	d1e6      	bne.n	80038e4 <_printf_float+0x334>
 8003916:	e6a2      	b.n	800365e <_printf_float+0xae>
 8003918:	464b      	mov	r3, r9
 800391a:	463a      	mov	r2, r7
 800391c:	4659      	mov	r1, fp
 800391e:	4628      	mov	r0, r5
 8003920:	47b0      	blx	r6
 8003922:	3001      	adds	r0, #1
 8003924:	d1ea      	bne.n	80038fc <_printf_float+0x34c>
 8003926:	e69a      	b.n	800365e <_printf_float+0xae>
 8003928:	2301      	movs	r3, #1
 800392a:	4642      	mov	r2, r8
 800392c:	4659      	mov	r1, fp
 800392e:	4628      	mov	r0, r5
 8003930:	47b0      	blx	r6
 8003932:	3001      	adds	r0, #1
 8003934:	f43f ae93 	beq.w	800365e <_printf_float+0xae>
 8003938:	3701      	adds	r7, #1
 800393a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	eba3 0309 	sub.w	r3, r3, r9
 8003944:	42bb      	cmp	r3, r7
 8003946:	dcef      	bgt.n	8003928 <_printf_float+0x378>
 8003948:	e74d      	b.n	80037e6 <_printf_float+0x236>
 800394a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800394c:	2a01      	cmp	r2, #1
 800394e:	dc01      	bgt.n	8003954 <_printf_float+0x3a4>
 8003950:	07db      	lsls	r3, r3, #31
 8003952:	d538      	bpl.n	80039c6 <_printf_float+0x416>
 8003954:	2301      	movs	r3, #1
 8003956:	463a      	mov	r2, r7
 8003958:	4659      	mov	r1, fp
 800395a:	4628      	mov	r0, r5
 800395c:	47b0      	blx	r6
 800395e:	3001      	adds	r0, #1
 8003960:	f43f ae7d 	beq.w	800365e <_printf_float+0xae>
 8003964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003968:	4659      	mov	r1, fp
 800396a:	4628      	mov	r0, r5
 800396c:	47b0      	blx	r6
 800396e:	3001      	adds	r0, #1
 8003970:	f107 0701 	add.w	r7, r7, #1
 8003974:	f43f ae73 	beq.w	800365e <_printf_float+0xae>
 8003978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800397c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800397e:	2200      	movs	r2, #0
 8003980:	f103 38ff 	add.w	r8, r3, #4294967295
 8003984:	2300      	movs	r3, #0
 8003986:	f7fd f80f 	bl	80009a8 <__aeabi_dcmpeq>
 800398a:	b9c0      	cbnz	r0, 80039be <_printf_float+0x40e>
 800398c:	4643      	mov	r3, r8
 800398e:	463a      	mov	r2, r7
 8003990:	4659      	mov	r1, fp
 8003992:	4628      	mov	r0, r5
 8003994:	47b0      	blx	r6
 8003996:	3001      	adds	r0, #1
 8003998:	d10d      	bne.n	80039b6 <_printf_float+0x406>
 800399a:	e660      	b.n	800365e <_printf_float+0xae>
 800399c:	2301      	movs	r3, #1
 800399e:	4642      	mov	r2, r8
 80039a0:	4659      	mov	r1, fp
 80039a2:	4628      	mov	r0, r5
 80039a4:	47b0      	blx	r6
 80039a6:	3001      	adds	r0, #1
 80039a8:	f43f ae59 	beq.w	800365e <_printf_float+0xae>
 80039ac:	3701      	adds	r7, #1
 80039ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039b0:	3b01      	subs	r3, #1
 80039b2:	42bb      	cmp	r3, r7
 80039b4:	dcf2      	bgt.n	800399c <_printf_float+0x3ec>
 80039b6:	464b      	mov	r3, r9
 80039b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039bc:	e6e4      	b.n	8003788 <_printf_float+0x1d8>
 80039be:	2700      	movs	r7, #0
 80039c0:	f104 081a 	add.w	r8, r4, #26
 80039c4:	e7f3      	b.n	80039ae <_printf_float+0x3fe>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e7e1      	b.n	800398e <_printf_float+0x3de>
 80039ca:	2301      	movs	r3, #1
 80039cc:	4642      	mov	r2, r8
 80039ce:	4659      	mov	r1, fp
 80039d0:	4628      	mov	r0, r5
 80039d2:	47b0      	blx	r6
 80039d4:	3001      	adds	r0, #1
 80039d6:	f43f ae42 	beq.w	800365e <_printf_float+0xae>
 80039da:	3701      	adds	r7, #1
 80039dc:	68e3      	ldr	r3, [r4, #12]
 80039de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	42bb      	cmp	r3, r7
 80039e4:	dcf1      	bgt.n	80039ca <_printf_float+0x41a>
 80039e6:	e702      	b.n	80037ee <_printf_float+0x23e>
 80039e8:	2700      	movs	r7, #0
 80039ea:	f104 0819 	add.w	r8, r4, #25
 80039ee:	e7f5      	b.n	80039dc <_printf_float+0x42c>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f43f ae94 	beq.w	800371e <_printf_float+0x16e>
 80039f6:	f04f 0c00 	mov.w	ip, #0
 80039fa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80039fe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003a02:	6022      	str	r2, [r4, #0]
 8003a04:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003a08:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	463a      	mov	r2, r7
 8003a10:	464b      	mov	r3, r9
 8003a12:	4628      	mov	r0, r5
 8003a14:	f7ff fd3a 	bl	800348c <__cvt>
 8003a18:	4607      	mov	r7, r0
 8003a1a:	e64f      	b.n	80036bc <_printf_float+0x10c>

08003a1c <_printf_common>:
 8003a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a20:	4691      	mov	r9, r2
 8003a22:	461f      	mov	r7, r3
 8003a24:	688a      	ldr	r2, [r1, #8]
 8003a26:	690b      	ldr	r3, [r1, #16]
 8003a28:	4606      	mov	r6, r0
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	bfb8      	it	lt
 8003a2e:	4613      	movlt	r3, r2
 8003a30:	f8c9 3000 	str.w	r3, [r9]
 8003a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a38:	460c      	mov	r4, r1
 8003a3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a3e:	b112      	cbz	r2, 8003a46 <_printf_common+0x2a>
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c9 3000 	str.w	r3, [r9]
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	0699      	lsls	r1, r3, #26
 8003a4a:	bf42      	ittt	mi
 8003a4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a50:	3302      	addmi	r3, #2
 8003a52:	f8c9 3000 	strmi.w	r3, [r9]
 8003a56:	6825      	ldr	r5, [r4, #0]
 8003a58:	f015 0506 	ands.w	r5, r5, #6
 8003a5c:	d107      	bne.n	8003a6e <_printf_common+0x52>
 8003a5e:	f104 0a19 	add.w	sl, r4, #25
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	f8d9 2000 	ldr.w	r2, [r9]
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	42ab      	cmp	r3, r5
 8003a6c:	dc29      	bgt.n	8003ac2 <_printf_common+0xa6>
 8003a6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	3300      	adds	r3, #0
 8003a76:	bf18      	it	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	0692      	lsls	r2, r2, #26
 8003a7c:	d42e      	bmi.n	8003adc <_printf_common+0xc0>
 8003a7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a82:	4639      	mov	r1, r7
 8003a84:	4630      	mov	r0, r6
 8003a86:	47c0      	blx	r8
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d021      	beq.n	8003ad0 <_printf_common+0xb4>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	68e5      	ldr	r5, [r4, #12]
 8003a90:	f003 0306 	and.w	r3, r3, #6
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	bf18      	it	ne
 8003a98:	2500      	movne	r5, #0
 8003a9a:	f8d9 2000 	ldr.w	r2, [r9]
 8003a9e:	f04f 0900 	mov.w	r9, #0
 8003aa2:	bf08      	it	eq
 8003aa4:	1aad      	subeq	r5, r5, r2
 8003aa6:	68a3      	ldr	r3, [r4, #8]
 8003aa8:	6922      	ldr	r2, [r4, #16]
 8003aaa:	bf08      	it	eq
 8003aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfc4      	itt	gt
 8003ab4:	1a9b      	subgt	r3, r3, r2
 8003ab6:	18ed      	addgt	r5, r5, r3
 8003ab8:	341a      	adds	r4, #26
 8003aba:	454d      	cmp	r5, r9
 8003abc:	d11a      	bne.n	8003af4 <_printf_common+0xd8>
 8003abe:	2000      	movs	r0, #0
 8003ac0:	e008      	b.n	8003ad4 <_printf_common+0xb8>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4652      	mov	r2, sl
 8003ac6:	4639      	mov	r1, r7
 8003ac8:	4630      	mov	r0, r6
 8003aca:	47c0      	blx	r8
 8003acc:	3001      	adds	r0, #1
 8003ace:	d103      	bne.n	8003ad8 <_printf_common+0xbc>
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	3501      	adds	r5, #1
 8003ada:	e7c2      	b.n	8003a62 <_printf_common+0x46>
 8003adc:	2030      	movs	r0, #48	; 0x30
 8003ade:	18e1      	adds	r1, r4, r3
 8003ae0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aea:	4422      	add	r2, r4
 8003aec:	3302      	adds	r3, #2
 8003aee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003af2:	e7c4      	b.n	8003a7e <_printf_common+0x62>
 8003af4:	2301      	movs	r3, #1
 8003af6:	4622      	mov	r2, r4
 8003af8:	4639      	mov	r1, r7
 8003afa:	4630      	mov	r0, r6
 8003afc:	47c0      	blx	r8
 8003afe:	3001      	adds	r0, #1
 8003b00:	d0e6      	beq.n	8003ad0 <_printf_common+0xb4>
 8003b02:	f109 0901 	add.w	r9, r9, #1
 8003b06:	e7d8      	b.n	8003aba <_printf_common+0x9e>

08003b08 <strcpy>:
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b0e:	f803 2b01 	strb.w	r2, [r3], #1
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	d1f9      	bne.n	8003b0a <strcpy+0x2>
 8003b16:	4770      	bx	lr

08003b18 <quorem>:
 8003b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	6903      	ldr	r3, [r0, #16]
 8003b1e:	690c      	ldr	r4, [r1, #16]
 8003b20:	4680      	mov	r8, r0
 8003b22:	42a3      	cmp	r3, r4
 8003b24:	f2c0 8084 	blt.w	8003c30 <quorem+0x118>
 8003b28:	3c01      	subs	r4, #1
 8003b2a:	f101 0714 	add.w	r7, r1, #20
 8003b2e:	f100 0614 	add.w	r6, r0, #20
 8003b32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003b36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003b3a:	3501      	adds	r5, #1
 8003b3c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003b40:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003b44:	eb06 030c 	add.w	r3, r6, ip
 8003b48:	eb07 090c 	add.w	r9, r7, ip
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	b39d      	cbz	r5, 8003bb8 <quorem+0xa0>
 8003b50:	f04f 0a00 	mov.w	sl, #0
 8003b54:	4638      	mov	r0, r7
 8003b56:	46b6      	mov	lr, r6
 8003b58:	46d3      	mov	fp, sl
 8003b5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b5e:	b293      	uxth	r3, r2
 8003b60:	fb05 a303 	mla	r3, r5, r3, sl
 8003b64:	0c12      	lsrs	r2, r2, #16
 8003b66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b6a:	fb05 a202 	mla	r2, r5, r2, sl
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	ebab 0303 	sub.w	r3, fp, r3
 8003b74:	f8de b000 	ldr.w	fp, [lr]
 8003b78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003b7c:	fa1f fb8b 	uxth.w	fp, fp
 8003b80:	445b      	add	r3, fp
 8003b82:	fa1f fb82 	uxth.w	fp, r2
 8003b86:	f8de 2000 	ldr.w	r2, [lr]
 8003b8a:	4581      	cmp	r9, r0
 8003b8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b9a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003b9e:	f84e 3b04 	str.w	r3, [lr], #4
 8003ba2:	d2da      	bcs.n	8003b5a <quorem+0x42>
 8003ba4:	f856 300c 	ldr.w	r3, [r6, ip]
 8003ba8:	b933      	cbnz	r3, 8003bb8 <quorem+0xa0>
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	3b04      	subs	r3, #4
 8003bae:	429e      	cmp	r6, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	d331      	bcc.n	8003c18 <quorem+0x100>
 8003bb4:	f8c8 4010 	str.w	r4, [r8, #16]
 8003bb8:	4640      	mov	r0, r8
 8003bba:	f001 f827 	bl	8004c0c <__mcmp>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	db26      	blt.n	8003c10 <quorem+0xf8>
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f04f 0c00 	mov.w	ip, #0
 8003bc8:	3501      	adds	r5, #1
 8003bca:	f857 1b04 	ldr.w	r1, [r7], #4
 8003bce:	f8d0 e000 	ldr.w	lr, [r0]
 8003bd2:	b28b      	uxth	r3, r1
 8003bd4:	ebac 0303 	sub.w	r3, ip, r3
 8003bd8:	fa1f f28e 	uxth.w	r2, lr
 8003bdc:	4413      	add	r3, r2
 8003bde:	0c0a      	lsrs	r2, r1, #16
 8003be0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bee:	45b9      	cmp	r9, r7
 8003bf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003bf4:	f840 3b04 	str.w	r3, [r0], #4
 8003bf8:	d2e7      	bcs.n	8003bca <quorem+0xb2>
 8003bfa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003bfe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003c02:	b92a      	cbnz	r2, 8003c10 <quorem+0xf8>
 8003c04:	3b04      	subs	r3, #4
 8003c06:	429e      	cmp	r6, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	d30b      	bcc.n	8003c24 <quorem+0x10c>
 8003c0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c10:	4628      	mov	r0, r5
 8003c12:	b003      	add	sp, #12
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	3b04      	subs	r3, #4
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	d1c9      	bne.n	8003bb4 <quorem+0x9c>
 8003c20:	3c01      	subs	r4, #1
 8003c22:	e7c4      	b.n	8003bae <quorem+0x96>
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	3b04      	subs	r3, #4
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	d1ef      	bne.n	8003c0c <quorem+0xf4>
 8003c2c:	3c01      	subs	r4, #1
 8003c2e:	e7ea      	b.n	8003c06 <quorem+0xee>
 8003c30:	2000      	movs	r0, #0
 8003c32:	e7ee      	b.n	8003c12 <quorem+0xfa>
 8003c34:	0000      	movs	r0, r0
	...

08003c38 <_dtoa_r>:
 8003c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	4616      	mov	r6, r2
 8003c3e:	461f      	mov	r7, r3
 8003c40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003c42:	b095      	sub	sp, #84	; 0x54
 8003c44:	4604      	mov	r4, r0
 8003c46:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003c4a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003c4e:	b93d      	cbnz	r5, 8003c60 <_dtoa_r+0x28>
 8003c50:	2010      	movs	r0, #16
 8003c52:	f000 fdb3 	bl	80047bc <malloc>
 8003c56:	6260      	str	r0, [r4, #36]	; 0x24
 8003c58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003c5c:	6005      	str	r5, [r0, #0]
 8003c5e:	60c5      	str	r5, [r0, #12]
 8003c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	b151      	cbz	r1, 8003c7c <_dtoa_r+0x44>
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	4093      	lsls	r3, r2
 8003c6c:	604a      	str	r2, [r1, #4]
 8003c6e:	608b      	str	r3, [r1, #8]
 8003c70:	4620      	mov	r0, r4
 8003c72:	f000 fdea 	bl	800484a <_Bfree>
 8003c76:	2200      	movs	r2, #0
 8003c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	1e3b      	subs	r3, r7, #0
 8003c7e:	bfaf      	iteee	ge
 8003c80:	2300      	movge	r3, #0
 8003c82:	2201      	movlt	r2, #1
 8003c84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c88:	9303      	strlt	r3, [sp, #12]
 8003c8a:	bfac      	ite	ge
 8003c8c:	f8c8 3000 	strge.w	r3, [r8]
 8003c90:	f8c8 2000 	strlt.w	r2, [r8]
 8003c94:	4bae      	ldr	r3, [pc, #696]	; (8003f50 <_dtoa_r+0x318>)
 8003c96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003c9a:	ea33 0308 	bics.w	r3, r3, r8
 8003c9e:	d11b      	bne.n	8003cd8 <_dtoa_r+0xa0>
 8003ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	9b02      	ldr	r3, [sp, #8]
 8003caa:	b923      	cbnz	r3, 8003cb6 <_dtoa_r+0x7e>
 8003cac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f000 8545 	beq.w	8004740 <_dtoa_r+0xb08>
 8003cb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cb8:	b953      	cbnz	r3, 8003cd0 <_dtoa_r+0x98>
 8003cba:	4ba6      	ldr	r3, [pc, #664]	; (8003f54 <_dtoa_r+0x31c>)
 8003cbc:	e021      	b.n	8003d02 <_dtoa_r+0xca>
 8003cbe:	4ba6      	ldr	r3, [pc, #664]	; (8003f58 <_dtoa_r+0x320>)
 8003cc0:	9306      	str	r3, [sp, #24]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	9806      	ldr	r0, [sp, #24]
 8003cca:	b015      	add	sp, #84	; 0x54
 8003ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd0:	4ba0      	ldr	r3, [pc, #640]	; (8003f54 <_dtoa_r+0x31c>)
 8003cd2:	9306      	str	r3, [sp, #24]
 8003cd4:	3303      	adds	r3, #3
 8003cd6:	e7f5      	b.n	8003cc4 <_dtoa_r+0x8c>
 8003cd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fe60 	bl	80009a8 <__aeabi_dcmpeq>
 8003ce8:	4682      	mov	sl, r0
 8003cea:	b160      	cbz	r0, 8003d06 <_dtoa_r+0xce>
 8003cec:	2301      	movs	r3, #1
 8003cee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8520 	beq.w	800473a <_dtoa_r+0xb02>
 8003cfa:	4b98      	ldr	r3, [pc, #608]	; (8003f5c <_dtoa_r+0x324>)
 8003cfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	9306      	str	r3, [sp, #24]
 8003d04:	e7e0      	b.n	8003cc8 <_dtoa_r+0x90>
 8003d06:	ab12      	add	r3, sp, #72	; 0x48
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	ab13      	add	r3, sp, #76	; 0x4c
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4632      	mov	r2, r6
 8003d10:	463b      	mov	r3, r7
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 fff2 	bl	8004cfc <__d2b>
 8003d18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d1c:	4683      	mov	fp, r0
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	d07d      	beq.n	8003e1e <_dtoa_r+0x1e6>
 8003d22:	46b0      	mov	r8, r6
 8003d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d28:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003d2c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003d30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d34:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4b89      	ldr	r3, [pc, #548]	; (8003f60 <_dtoa_r+0x328>)
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4649      	mov	r1, r9
 8003d40:	f7fc fa12 	bl	8000168 <__aeabi_dsub>
 8003d44:	a37c      	add	r3, pc, #496	; (adr r3, 8003f38 <_dtoa_r+0x300>)
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f7fc fbc5 	bl	80004d8 <__aeabi_dmul>
 8003d4e:	a37c      	add	r3, pc, #496	; (adr r3, 8003f40 <_dtoa_r+0x308>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fa0a 	bl	800016c <__adddf3>
 8003d58:	4606      	mov	r6, r0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	460f      	mov	r7, r1
 8003d5e:	f7fc fb51 	bl	8000404 <__aeabi_i2d>
 8003d62:	a379      	add	r3, pc, #484	; (adr r3, 8003f48 <_dtoa_r+0x310>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc fbb6 	bl	80004d8 <__aeabi_dmul>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4630      	mov	r0, r6
 8003d72:	4639      	mov	r1, r7
 8003d74:	f7fc f9fa 	bl	800016c <__adddf3>
 8003d78:	4606      	mov	r6, r0
 8003d7a:	460f      	mov	r7, r1
 8003d7c:	f7fc fe5c 	bl	8000a38 <__aeabi_d2iz>
 8003d80:	2200      	movs	r2, #0
 8003d82:	4682      	mov	sl, r0
 8003d84:	2300      	movs	r3, #0
 8003d86:	4630      	mov	r0, r6
 8003d88:	4639      	mov	r1, r7
 8003d8a:	f7fc fe17 	bl	80009bc <__aeabi_dcmplt>
 8003d8e:	b148      	cbz	r0, 8003da4 <_dtoa_r+0x16c>
 8003d90:	4650      	mov	r0, sl
 8003d92:	f7fc fb37 	bl	8000404 <__aeabi_i2d>
 8003d96:	4632      	mov	r2, r6
 8003d98:	463b      	mov	r3, r7
 8003d9a:	f7fc fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8003d9e:	b908      	cbnz	r0, 8003da4 <_dtoa_r+0x16c>
 8003da0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003da4:	f1ba 0f16 	cmp.w	sl, #22
 8003da8:	d85a      	bhi.n	8003e60 <_dtoa_r+0x228>
 8003daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dae:	496d      	ldr	r1, [pc, #436]	; (8003f64 <_dtoa_r+0x32c>)
 8003db0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003db8:	f7fc fe1e 	bl	80009f8 <__aeabi_dcmpgt>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d051      	beq.n	8003e64 <_dtoa_r+0x22c>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dc6:	930d      	str	r3, [sp, #52]	; 0x34
 8003dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003dca:	1b5d      	subs	r5, r3, r5
 8003dcc:	1e6b      	subs	r3, r5, #1
 8003dce:	9307      	str	r3, [sp, #28]
 8003dd0:	bf43      	ittte	mi
 8003dd2:	2300      	movmi	r3, #0
 8003dd4:	f1c5 0901 	rsbmi	r9, r5, #1
 8003dd8:	9307      	strmi	r3, [sp, #28]
 8003dda:	f04f 0900 	movpl.w	r9, #0
 8003dde:	f1ba 0f00 	cmp.w	sl, #0
 8003de2:	db41      	blt.n	8003e68 <_dtoa_r+0x230>
 8003de4:	9b07      	ldr	r3, [sp, #28]
 8003de6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003dea:	4453      	add	r3, sl
 8003dec:	9307      	str	r3, [sp, #28]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9308      	str	r3, [sp, #32]
 8003df2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003df4:	2b09      	cmp	r3, #9
 8003df6:	f200 808f 	bhi.w	8003f18 <_dtoa_r+0x2e0>
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	bfc4      	itt	gt
 8003dfe:	3b04      	subgt	r3, #4
 8003e00:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003e02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e04:	bfc8      	it	gt
 8003e06:	2500      	movgt	r5, #0
 8003e08:	f1a3 0302 	sub.w	r3, r3, #2
 8003e0c:	bfd8      	it	le
 8003e0e:	2501      	movle	r5, #1
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	f200 808d 	bhi.w	8003f30 <_dtoa_r+0x2f8>
 8003e16:	e8df f003 	tbb	[pc, r3]
 8003e1a:	7d7b      	.short	0x7d7b
 8003e1c:	6f2f      	.short	0x6f2f
 8003e1e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003e22:	441d      	add	r5, r3
 8003e24:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003e28:	2820      	cmp	r0, #32
 8003e2a:	dd13      	ble.n	8003e54 <_dtoa_r+0x21c>
 8003e2c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003e30:	9b02      	ldr	r3, [sp, #8]
 8003e32:	fa08 f800 	lsl.w	r8, r8, r0
 8003e36:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003e3a:	fa23 f000 	lsr.w	r0, r3, r0
 8003e3e:	ea48 0000 	orr.w	r0, r8, r0
 8003e42:	f7fc facf 	bl	80003e4 <__aeabi_ui2d>
 8003e46:	2301      	movs	r3, #1
 8003e48:	4680      	mov	r8, r0
 8003e4a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003e4e:	3d01      	subs	r5, #1
 8003e50:	9310      	str	r3, [sp, #64]	; 0x40
 8003e52:	e771      	b.n	8003d38 <_dtoa_r+0x100>
 8003e54:	9b02      	ldr	r3, [sp, #8]
 8003e56:	f1c0 0020 	rsb	r0, r0, #32
 8003e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e5e:	e7f0      	b.n	8003e42 <_dtoa_r+0x20a>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e7b0      	b.n	8003dc6 <_dtoa_r+0x18e>
 8003e64:	900d      	str	r0, [sp, #52]	; 0x34
 8003e66:	e7af      	b.n	8003dc8 <_dtoa_r+0x190>
 8003e68:	f1ca 0300 	rsb	r3, sl, #0
 8003e6c:	9308      	str	r3, [sp, #32]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	eba9 090a 	sub.w	r9, r9, sl
 8003e74:	930c      	str	r3, [sp, #48]	; 0x30
 8003e76:	e7bc      	b.n	8003df2 <_dtoa_r+0x1ba>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	dd74      	ble.n	8003f6c <_dtoa_r+0x334>
 8003e82:	4698      	mov	r8, r3
 8003e84:	9304      	str	r3, [sp, #16]
 8003e86:	2200      	movs	r2, #0
 8003e88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e8a:	6072      	str	r2, [r6, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	f102 0014 	add.w	r0, r2, #20
 8003e92:	4298      	cmp	r0, r3
 8003e94:	6871      	ldr	r1, [r6, #4]
 8003e96:	d96e      	bls.n	8003f76 <_dtoa_r+0x33e>
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 fca2 	bl	80047e2 <_Balloc>
 8003e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ea0:	6030      	str	r0, [r6, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b8 0f0e 	cmp.w	r8, #14
 8003ea8:	9306      	str	r3, [sp, #24]
 8003eaa:	f200 80ed 	bhi.w	8004088 <_dtoa_r+0x450>
 8003eae:	2d00      	cmp	r5, #0
 8003eb0:	f000 80ea 	beq.w	8004088 <_dtoa_r+0x450>
 8003eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eb8:	f1ba 0f00 	cmp.w	sl, #0
 8003ebc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003ec0:	dd77      	ble.n	8003fb2 <_dtoa_r+0x37a>
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <_dtoa_r+0x32c>)
 8003ec4:	f00a 030f 	and.w	r3, sl, #15
 8003ec8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003ecc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ed0:	06f0      	lsls	r0, r6, #27
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003eda:	d568      	bpl.n	8003fae <_dtoa_r+0x376>
 8003edc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <_dtoa_r+0x330>)
 8003ee2:	2503      	movs	r5, #3
 8003ee4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ee8:	f7fc fc20 	bl	800072c <__aeabi_ddiv>
 8003eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef0:	f006 060f 	and.w	r6, r6, #15
 8003ef4:	4f1c      	ldr	r7, [pc, #112]	; (8003f68 <_dtoa_r+0x330>)
 8003ef6:	e04f      	b.n	8003f98 <_dtoa_r+0x360>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	9309      	str	r3, [sp, #36]	; 0x24
 8003efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003efe:	4453      	add	r3, sl
 8003f00:	f103 0801 	add.w	r8, r3, #1
 8003f04:	9304      	str	r3, [sp, #16]
 8003f06:	4643      	mov	r3, r8
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	bfb8      	it	lt
 8003f0c:	2301      	movlt	r3, #1
 8003f0e:	e7ba      	b.n	8003e86 <_dtoa_r+0x24e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e7b2      	b.n	8003e7a <_dtoa_r+0x242>
 8003f14:	2300      	movs	r3, #0
 8003f16:	e7f0      	b.n	8003efa <_dtoa_r+0x2c2>
 8003f18:	2501      	movs	r5, #1
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9509      	str	r5, [sp, #36]	; 0x24
 8003f1e:	931e      	str	r3, [sp, #120]	; 0x78
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	2200      	movs	r2, #0
 8003f26:	9304      	str	r3, [sp, #16]
 8003f28:	4698      	mov	r8, r3
 8003f2a:	2312      	movs	r3, #18
 8003f2c:	921f      	str	r2, [sp, #124]	; 0x7c
 8003f2e:	e7aa      	b.n	8003e86 <_dtoa_r+0x24e>
 8003f30:	2301      	movs	r3, #1
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
 8003f34:	e7f4      	b.n	8003f20 <_dtoa_r+0x2e8>
 8003f36:	bf00      	nop
 8003f38:	636f4361 	.word	0x636f4361
 8003f3c:	3fd287a7 	.word	0x3fd287a7
 8003f40:	8b60c8b3 	.word	0x8b60c8b3
 8003f44:	3fc68a28 	.word	0x3fc68a28
 8003f48:	509f79fb 	.word	0x509f79fb
 8003f4c:	3fd34413 	.word	0x3fd34413
 8003f50:	7ff00000 	.word	0x7ff00000
 8003f54:	08004fe8 	.word	0x08004fe8
 8003f58:	08004fdf 	.word	0x08004fdf
 8003f5c:	08004fde 	.word	0x08004fde
 8003f60:	3ff80000 	.word	0x3ff80000
 8003f64:	08005018 	.word	0x08005018
 8003f68:	08004ff0 	.word	0x08004ff0
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	4698      	mov	r8, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	e7da      	b.n	8003f2c <_dtoa_r+0x2f4>
 8003f76:	3101      	adds	r1, #1
 8003f78:	6071      	str	r1, [r6, #4]
 8003f7a:	0052      	lsls	r2, r2, #1
 8003f7c:	e787      	b.n	8003e8e <_dtoa_r+0x256>
 8003f7e:	07f1      	lsls	r1, r6, #31
 8003f80:	d508      	bpl.n	8003f94 <_dtoa_r+0x35c>
 8003f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f8a:	f7fc faa5 	bl	80004d8 <__aeabi_dmul>
 8003f8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f92:	3501      	adds	r5, #1
 8003f94:	1076      	asrs	r6, r6, #1
 8003f96:	3708      	adds	r7, #8
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	d1f0      	bne.n	8003f7e <_dtoa_r+0x346>
 8003f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fa4:	f7fc fbc2 	bl	800072c <__aeabi_ddiv>
 8003fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fac:	e01b      	b.n	8003fe6 <_dtoa_r+0x3ae>
 8003fae:	2502      	movs	r5, #2
 8003fb0:	e7a0      	b.n	8003ef4 <_dtoa_r+0x2bc>
 8003fb2:	f000 80a4 	beq.w	80040fe <_dtoa_r+0x4c6>
 8003fb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003fba:	f1ca 0600 	rsb	r6, sl, #0
 8003fbe:	4ba0      	ldr	r3, [pc, #640]	; (8004240 <_dtoa_r+0x608>)
 8003fc0:	f006 020f 	and.w	r2, r6, #15
 8003fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fa84 	bl	80004d8 <__aeabi_dmul>
 8003fd0:	2502      	movs	r5, #2
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fd8:	4f9a      	ldr	r7, [pc, #616]	; (8004244 <_dtoa_r+0x60c>)
 8003fda:	1136      	asrs	r6, r6, #4
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	f040 8083 	bne.w	80040e8 <_dtoa_r+0x4b0>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e0      	bne.n	8003fa8 <_dtoa_r+0x370>
 8003fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 808a 	beq.w	8004102 <_dtoa_r+0x4ca>
 8003fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ff2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003ff6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4b92      	ldr	r3, [pc, #584]	; (8004248 <_dtoa_r+0x610>)
 8003ffe:	f7fc fcdd 	bl	80009bc <__aeabi_dcmplt>
 8004002:	2800      	cmp	r0, #0
 8004004:	d07d      	beq.n	8004102 <_dtoa_r+0x4ca>
 8004006:	f1b8 0f00 	cmp.w	r8, #0
 800400a:	d07a      	beq.n	8004102 <_dtoa_r+0x4ca>
 800400c:	9b04      	ldr	r3, [sp, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	dd36      	ble.n	8004080 <_dtoa_r+0x448>
 8004012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004016:	2200      	movs	r2, #0
 8004018:	4b8c      	ldr	r3, [pc, #560]	; (800424c <_dtoa_r+0x614>)
 800401a:	f7fc fa5d 	bl	80004d8 <__aeabi_dmul>
 800401e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004022:	9e04      	ldr	r6, [sp, #16]
 8004024:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004028:	3501      	adds	r5, #1
 800402a:	4628      	mov	r0, r5
 800402c:	f7fc f9ea 	bl	8000404 <__aeabi_i2d>
 8004030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004034:	f7fc fa50 	bl	80004d8 <__aeabi_dmul>
 8004038:	2200      	movs	r2, #0
 800403a:	4b85      	ldr	r3, [pc, #532]	; (8004250 <_dtoa_r+0x618>)
 800403c:	f7fc f896 	bl	800016c <__adddf3>
 8004040:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004044:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004048:	950b      	str	r5, [sp, #44]	; 0x2c
 800404a:	2e00      	cmp	r6, #0
 800404c:	d15c      	bne.n	8004108 <_dtoa_r+0x4d0>
 800404e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	4b7f      	ldr	r3, [pc, #508]	; (8004254 <_dtoa_r+0x61c>)
 8004056:	f7fc f887 	bl	8000168 <__aeabi_dsub>
 800405a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405c:	462b      	mov	r3, r5
 800405e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004062:	f7fc fcc9 	bl	80009f8 <__aeabi_dcmpgt>
 8004066:	2800      	cmp	r0, #0
 8004068:	f040 8281 	bne.w	800456e <_dtoa_r+0x936>
 800406c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004072:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004076:	f7fc fca1 	bl	80009bc <__aeabi_dcmplt>
 800407a:	2800      	cmp	r0, #0
 800407c:	f040 8275 	bne.w	800456a <_dtoa_r+0x932>
 8004080:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800408a:	2b00      	cmp	r3, #0
 800408c:	f2c0 814b 	blt.w	8004326 <_dtoa_r+0x6ee>
 8004090:	f1ba 0f0e 	cmp.w	sl, #14
 8004094:	f300 8147 	bgt.w	8004326 <_dtoa_r+0x6ee>
 8004098:	4b69      	ldr	r3, [pc, #420]	; (8004240 <_dtoa_r+0x608>)
 800409a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f280 80d7 	bge.w	800425c <_dtoa_r+0x624>
 80040ae:	f1b8 0f00 	cmp.w	r8, #0
 80040b2:	f300 80d3 	bgt.w	800425c <_dtoa_r+0x624>
 80040b6:	f040 8257 	bne.w	8004568 <_dtoa_r+0x930>
 80040ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040be:	2200      	movs	r2, #0
 80040c0:	4b64      	ldr	r3, [pc, #400]	; (8004254 <_dtoa_r+0x61c>)
 80040c2:	f7fc fa09 	bl	80004d8 <__aeabi_dmul>
 80040c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040ca:	f7fc fc8b 	bl	80009e4 <__aeabi_dcmpge>
 80040ce:	4646      	mov	r6, r8
 80040d0:	4647      	mov	r7, r8
 80040d2:	2800      	cmp	r0, #0
 80040d4:	f040 822d 	bne.w	8004532 <_dtoa_r+0x8fa>
 80040d8:	9b06      	ldr	r3, [sp, #24]
 80040da:	9a06      	ldr	r2, [sp, #24]
 80040dc:	1c5d      	adds	r5, r3, #1
 80040de:	2331      	movs	r3, #49	; 0x31
 80040e0:	f10a 0a01 	add.w	sl, sl, #1
 80040e4:	7013      	strb	r3, [r2, #0]
 80040e6:	e228      	b.n	800453a <_dtoa_r+0x902>
 80040e8:	07f2      	lsls	r2, r6, #31
 80040ea:	d505      	bpl.n	80040f8 <_dtoa_r+0x4c0>
 80040ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f0:	f7fc f9f2 	bl	80004d8 <__aeabi_dmul>
 80040f4:	2301      	movs	r3, #1
 80040f6:	3501      	adds	r5, #1
 80040f8:	1076      	asrs	r6, r6, #1
 80040fa:	3708      	adds	r7, #8
 80040fc:	e76e      	b.n	8003fdc <_dtoa_r+0x3a4>
 80040fe:	2502      	movs	r5, #2
 8004100:	e771      	b.n	8003fe6 <_dtoa_r+0x3ae>
 8004102:	4657      	mov	r7, sl
 8004104:	4646      	mov	r6, r8
 8004106:	e790      	b.n	800402a <_dtoa_r+0x3f2>
 8004108:	4b4d      	ldr	r3, [pc, #308]	; (8004240 <_dtoa_r+0x608>)
 800410a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800410e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d048      	beq.n	80041aa <_dtoa_r+0x572>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	2000      	movs	r0, #0
 800411e:	494e      	ldr	r1, [pc, #312]	; (8004258 <_dtoa_r+0x620>)
 8004120:	f7fc fb04 	bl	800072c <__aeabi_ddiv>
 8004124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004128:	f7fc f81e 	bl	8000168 <__aeabi_dsub>
 800412c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004130:	9d06      	ldr	r5, [sp, #24]
 8004132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004136:	f7fc fc7f 	bl	8000a38 <__aeabi_d2iz>
 800413a:	9011      	str	r0, [sp, #68]	; 0x44
 800413c:	f7fc f962 	bl	8000404 <__aeabi_i2d>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004148:	f7fc f80e 	bl	8000168 <__aeabi_dsub>
 800414c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800414e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004152:	3330      	adds	r3, #48	; 0x30
 8004154:	f805 3b01 	strb.w	r3, [r5], #1
 8004158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800415c:	f7fc fc2e 	bl	80009bc <__aeabi_dcmplt>
 8004160:	2800      	cmp	r0, #0
 8004162:	d163      	bne.n	800422c <_dtoa_r+0x5f4>
 8004164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004168:	2000      	movs	r0, #0
 800416a:	4937      	ldr	r1, [pc, #220]	; (8004248 <_dtoa_r+0x610>)
 800416c:	f7fb fffc 	bl	8000168 <__aeabi_dsub>
 8004170:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004174:	f7fc fc22 	bl	80009bc <__aeabi_dcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	f040 80b5 	bne.w	80042e8 <_dtoa_r+0x6b0>
 800417e:	9b06      	ldr	r3, [sp, #24]
 8004180:	1aeb      	subs	r3, r5, r3
 8004182:	429e      	cmp	r6, r3
 8004184:	f77f af7c 	ble.w	8004080 <_dtoa_r+0x448>
 8004188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800418c:	2200      	movs	r2, #0
 800418e:	4b2f      	ldr	r3, [pc, #188]	; (800424c <_dtoa_r+0x614>)
 8004190:	f7fc f9a2 	bl	80004d8 <__aeabi_dmul>
 8004194:	2200      	movs	r2, #0
 8004196:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800419a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <_dtoa_r+0x614>)
 80041a0:	f7fc f99a 	bl	80004d8 <__aeabi_dmul>
 80041a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041a8:	e7c3      	b.n	8004132 <_dtoa_r+0x4fa>
 80041aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041ae:	f7fc f993 	bl	80004d8 <__aeabi_dmul>
 80041b2:	9b06      	ldr	r3, [sp, #24]
 80041b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041b8:	199d      	adds	r5, r3, r6
 80041ba:	461e      	mov	r6, r3
 80041bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041c0:	f7fc fc3a 	bl	8000a38 <__aeabi_d2iz>
 80041c4:	9011      	str	r0, [sp, #68]	; 0x44
 80041c6:	f7fc f91d 	bl	8000404 <__aeabi_i2d>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041d2:	f7fb ffc9 	bl	8000168 <__aeabi_dsub>
 80041d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041dc:	3330      	adds	r3, #48	; 0x30
 80041de:	f806 3b01 	strb.w	r3, [r6], #1
 80041e2:	42ae      	cmp	r6, r5
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	d124      	bne.n	8004234 <_dtoa_r+0x5fc>
 80041ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <_dtoa_r+0x620>)
 80041f0:	f7fb ffbc 	bl	800016c <__adddf3>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041fc:	f7fc fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 8004200:	2800      	cmp	r0, #0
 8004202:	d171      	bne.n	80042e8 <_dtoa_r+0x6b0>
 8004204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004208:	2000      	movs	r0, #0
 800420a:	4913      	ldr	r1, [pc, #76]	; (8004258 <_dtoa_r+0x620>)
 800420c:	f7fb ffac 	bl	8000168 <__aeabi_dsub>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004218:	f7fc fbd0 	bl	80009bc <__aeabi_dcmplt>
 800421c:	2800      	cmp	r0, #0
 800421e:	f43f af2f 	beq.w	8004080 <_dtoa_r+0x448>
 8004222:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004226:	1e6a      	subs	r2, r5, #1
 8004228:	2b30      	cmp	r3, #48	; 0x30
 800422a:	d001      	beq.n	8004230 <_dtoa_r+0x5f8>
 800422c:	46ba      	mov	sl, r7
 800422e:	e04a      	b.n	80042c6 <_dtoa_r+0x68e>
 8004230:	4615      	mov	r5, r2
 8004232:	e7f6      	b.n	8004222 <_dtoa_r+0x5ea>
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <_dtoa_r+0x614>)
 8004236:	f7fc f94f 	bl	80004d8 <__aeabi_dmul>
 800423a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800423e:	e7bd      	b.n	80041bc <_dtoa_r+0x584>
 8004240:	08005018 	.word	0x08005018
 8004244:	08004ff0 	.word	0x08004ff0
 8004248:	3ff00000 	.word	0x3ff00000
 800424c:	40240000 	.word	0x40240000
 8004250:	401c0000 	.word	0x401c0000
 8004254:	40140000 	.word	0x40140000
 8004258:	3fe00000 	.word	0x3fe00000
 800425c:	9d06      	ldr	r5, [sp, #24]
 800425e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004266:	4630      	mov	r0, r6
 8004268:	4639      	mov	r1, r7
 800426a:	f7fc fa5f 	bl	800072c <__aeabi_ddiv>
 800426e:	f7fc fbe3 	bl	8000a38 <__aeabi_d2iz>
 8004272:	4681      	mov	r9, r0
 8004274:	f7fc f8c6 	bl	8000404 <__aeabi_i2d>
 8004278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800427c:	f7fc f92c 	bl	80004d8 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fb ff6e 	bl	8000168 <__aeabi_dsub>
 800428c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004290:	f805 6b01 	strb.w	r6, [r5], #1
 8004294:	9e06      	ldr	r6, [sp, #24]
 8004296:	4602      	mov	r2, r0
 8004298:	1bae      	subs	r6, r5, r6
 800429a:	45b0      	cmp	r8, r6
 800429c:	460b      	mov	r3, r1
 800429e:	d135      	bne.n	800430c <_dtoa_r+0x6d4>
 80042a0:	f7fb ff64 	bl	800016c <__adddf3>
 80042a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042a8:	4606      	mov	r6, r0
 80042aa:	460f      	mov	r7, r1
 80042ac:	f7fc fba4 	bl	80009f8 <__aeabi_dcmpgt>
 80042b0:	b9c8      	cbnz	r0, 80042e6 <_dtoa_r+0x6ae>
 80042b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042b6:	4630      	mov	r0, r6
 80042b8:	4639      	mov	r1, r7
 80042ba:	f7fc fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80042be:	b110      	cbz	r0, 80042c6 <_dtoa_r+0x68e>
 80042c0:	f019 0f01 	tst.w	r9, #1
 80042c4:	d10f      	bne.n	80042e6 <_dtoa_r+0x6ae>
 80042c6:	4659      	mov	r1, fp
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fabe 	bl	800484a <_Bfree>
 80042ce:	2300      	movs	r3, #0
 80042d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042d2:	702b      	strb	r3, [r5, #0]
 80042d4:	f10a 0301 	add.w	r3, sl, #1
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f43f acf3 	beq.w	8003cc8 <_dtoa_r+0x90>
 80042e2:	601d      	str	r5, [r3, #0]
 80042e4:	e4f0      	b.n	8003cc8 <_dtoa_r+0x90>
 80042e6:	4657      	mov	r7, sl
 80042e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80042ec:	1e6b      	subs	r3, r5, #1
 80042ee:	2a39      	cmp	r2, #57	; 0x39
 80042f0:	d106      	bne.n	8004300 <_dtoa_r+0x6c8>
 80042f2:	9a06      	ldr	r2, [sp, #24]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d107      	bne.n	8004308 <_dtoa_r+0x6d0>
 80042f8:	2330      	movs	r3, #48	; 0x30
 80042fa:	7013      	strb	r3, [r2, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	3701      	adds	r7, #1
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	3201      	adds	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e791      	b.n	800422c <_dtoa_r+0x5f4>
 8004308:	461d      	mov	r5, r3
 800430a:	e7ed      	b.n	80042e8 <_dtoa_r+0x6b0>
 800430c:	2200      	movs	r2, #0
 800430e:	4b99      	ldr	r3, [pc, #612]	; (8004574 <_dtoa_r+0x93c>)
 8004310:	f7fc f8e2 	bl	80004d8 <__aeabi_dmul>
 8004314:	2200      	movs	r2, #0
 8004316:	2300      	movs	r3, #0
 8004318:	4606      	mov	r6, r0
 800431a:	460f      	mov	r7, r1
 800431c:	f7fc fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8004320:	2800      	cmp	r0, #0
 8004322:	d09e      	beq.n	8004262 <_dtoa_r+0x62a>
 8004324:	e7cf      	b.n	80042c6 <_dtoa_r+0x68e>
 8004326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004328:	2a00      	cmp	r2, #0
 800432a:	f000 8088 	beq.w	800443e <_dtoa_r+0x806>
 800432e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004330:	2a01      	cmp	r2, #1
 8004332:	dc6d      	bgt.n	8004410 <_dtoa_r+0x7d8>
 8004334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004336:	2a00      	cmp	r2, #0
 8004338:	d066      	beq.n	8004408 <_dtoa_r+0x7d0>
 800433a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800433e:	464d      	mov	r5, r9
 8004340:	9e08      	ldr	r6, [sp, #32]
 8004342:	9a07      	ldr	r2, [sp, #28]
 8004344:	2101      	movs	r1, #1
 8004346:	441a      	add	r2, r3
 8004348:	4620      	mov	r0, r4
 800434a:	4499      	add	r9, r3
 800434c:	9207      	str	r2, [sp, #28]
 800434e:	f000 fb1c 	bl	800498a <__i2b>
 8004352:	4607      	mov	r7, r0
 8004354:	2d00      	cmp	r5, #0
 8004356:	dd0b      	ble.n	8004370 <_dtoa_r+0x738>
 8004358:	9b07      	ldr	r3, [sp, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	dd08      	ble.n	8004370 <_dtoa_r+0x738>
 800435e:	42ab      	cmp	r3, r5
 8004360:	bfa8      	it	ge
 8004362:	462b      	movge	r3, r5
 8004364:	9a07      	ldr	r2, [sp, #28]
 8004366:	eba9 0903 	sub.w	r9, r9, r3
 800436a:	1aed      	subs	r5, r5, r3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	9307      	str	r3, [sp, #28]
 8004370:	9b08      	ldr	r3, [sp, #32]
 8004372:	b1eb      	cbz	r3, 80043b0 <_dtoa_r+0x778>
 8004374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d065      	beq.n	8004446 <_dtoa_r+0x80e>
 800437a:	b18e      	cbz	r6, 80043a0 <_dtoa_r+0x768>
 800437c:	4639      	mov	r1, r7
 800437e:	4632      	mov	r2, r6
 8004380:	4620      	mov	r0, r4
 8004382:	f000 fba1 	bl	8004ac8 <__pow5mult>
 8004386:	465a      	mov	r2, fp
 8004388:	4601      	mov	r1, r0
 800438a:	4607      	mov	r7, r0
 800438c:	4620      	mov	r0, r4
 800438e:	f000 fb05 	bl	800499c <__multiply>
 8004392:	4659      	mov	r1, fp
 8004394:	900a      	str	r0, [sp, #40]	; 0x28
 8004396:	4620      	mov	r0, r4
 8004398:	f000 fa57 	bl	800484a <_Bfree>
 800439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800439e:	469b      	mov	fp, r3
 80043a0:	9b08      	ldr	r3, [sp, #32]
 80043a2:	1b9a      	subs	r2, r3, r6
 80043a4:	d004      	beq.n	80043b0 <_dtoa_r+0x778>
 80043a6:	4659      	mov	r1, fp
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 fb8d 	bl	8004ac8 <__pow5mult>
 80043ae:	4683      	mov	fp, r0
 80043b0:	2101      	movs	r1, #1
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 fae9 	bl	800498a <__i2b>
 80043b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043ba:	4606      	mov	r6, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 81c6 	beq.w	800474e <_dtoa_r+0xb16>
 80043c2:	461a      	mov	r2, r3
 80043c4:	4601      	mov	r1, r0
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 fb7e 	bl	8004ac8 <__pow5mult>
 80043cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043ce:	4606      	mov	r6, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	dc3e      	bgt.n	8004452 <_dtoa_r+0x81a>
 80043d4:	9b02      	ldr	r3, [sp, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d137      	bne.n	800444a <_dtoa_r+0x812>
 80043da:	9b03      	ldr	r3, [sp, #12]
 80043dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d134      	bne.n	800444e <_dtoa_r+0x816>
 80043e4:	9b03      	ldr	r3, [sp, #12]
 80043e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043ea:	0d1b      	lsrs	r3, r3, #20
 80043ec:	051b      	lsls	r3, r3, #20
 80043ee:	b12b      	cbz	r3, 80043fc <_dtoa_r+0x7c4>
 80043f0:	9b07      	ldr	r3, [sp, #28]
 80043f2:	f109 0901 	add.w	r9, r9, #1
 80043f6:	3301      	adds	r3, #1
 80043f8:	9307      	str	r3, [sp, #28]
 80043fa:	2301      	movs	r3, #1
 80043fc:	9308      	str	r3, [sp, #32]
 80043fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004400:	2b00      	cmp	r3, #0
 8004402:	d128      	bne.n	8004456 <_dtoa_r+0x81e>
 8004404:	2001      	movs	r0, #1
 8004406:	e02e      	b.n	8004466 <_dtoa_r+0x82e>
 8004408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800440a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800440e:	e796      	b.n	800433e <_dtoa_r+0x706>
 8004410:	9b08      	ldr	r3, [sp, #32]
 8004412:	f108 36ff 	add.w	r6, r8, #4294967295
 8004416:	42b3      	cmp	r3, r6
 8004418:	bfb7      	itett	lt
 800441a:	9b08      	ldrlt	r3, [sp, #32]
 800441c:	1b9e      	subge	r6, r3, r6
 800441e:	1af2      	sublt	r2, r6, r3
 8004420:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004422:	bfbf      	itttt	lt
 8004424:	9608      	strlt	r6, [sp, #32]
 8004426:	189b      	addlt	r3, r3, r2
 8004428:	930c      	strlt	r3, [sp, #48]	; 0x30
 800442a:	2600      	movlt	r6, #0
 800442c:	f1b8 0f00 	cmp.w	r8, #0
 8004430:	bfb9      	ittee	lt
 8004432:	eba9 0508 	sublt.w	r5, r9, r8
 8004436:	2300      	movlt	r3, #0
 8004438:	464d      	movge	r5, r9
 800443a:	4643      	movge	r3, r8
 800443c:	e781      	b.n	8004342 <_dtoa_r+0x70a>
 800443e:	9e08      	ldr	r6, [sp, #32]
 8004440:	464d      	mov	r5, r9
 8004442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004444:	e786      	b.n	8004354 <_dtoa_r+0x71c>
 8004446:	9a08      	ldr	r2, [sp, #32]
 8004448:	e7ad      	b.n	80043a6 <_dtoa_r+0x76e>
 800444a:	2300      	movs	r3, #0
 800444c:	e7d6      	b.n	80043fc <_dtoa_r+0x7c4>
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	e7d4      	b.n	80043fc <_dtoa_r+0x7c4>
 8004452:	2300      	movs	r3, #0
 8004454:	9308      	str	r3, [sp, #32]
 8004456:	6933      	ldr	r3, [r6, #16]
 8004458:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800445c:	6918      	ldr	r0, [r3, #16]
 800445e:	f000 fa46 	bl	80048ee <__hi0bits>
 8004462:	f1c0 0020 	rsb	r0, r0, #32
 8004466:	9b07      	ldr	r3, [sp, #28]
 8004468:	4418      	add	r0, r3
 800446a:	f010 001f 	ands.w	r0, r0, #31
 800446e:	d047      	beq.n	8004500 <_dtoa_r+0x8c8>
 8004470:	f1c0 0320 	rsb	r3, r0, #32
 8004474:	2b04      	cmp	r3, #4
 8004476:	dd3b      	ble.n	80044f0 <_dtoa_r+0x8b8>
 8004478:	9b07      	ldr	r3, [sp, #28]
 800447a:	f1c0 001c 	rsb	r0, r0, #28
 800447e:	4481      	add	r9, r0
 8004480:	4405      	add	r5, r0
 8004482:	4403      	add	r3, r0
 8004484:	9307      	str	r3, [sp, #28]
 8004486:	f1b9 0f00 	cmp.w	r9, #0
 800448a:	dd05      	ble.n	8004498 <_dtoa_r+0x860>
 800448c:	4659      	mov	r1, fp
 800448e:	464a      	mov	r2, r9
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fb67 	bl	8004b64 <__lshift>
 8004496:	4683      	mov	fp, r0
 8004498:	9b07      	ldr	r3, [sp, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	dd05      	ble.n	80044aa <_dtoa_r+0x872>
 800449e:	4631      	mov	r1, r6
 80044a0:	461a      	mov	r2, r3
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fb5e 	bl	8004b64 <__lshift>
 80044a8:	4606      	mov	r6, r0
 80044aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ac:	b353      	cbz	r3, 8004504 <_dtoa_r+0x8cc>
 80044ae:	4631      	mov	r1, r6
 80044b0:	4658      	mov	r0, fp
 80044b2:	f000 fbab 	bl	8004c0c <__mcmp>
 80044b6:	2800      	cmp	r0, #0
 80044b8:	da24      	bge.n	8004504 <_dtoa_r+0x8cc>
 80044ba:	2300      	movs	r3, #0
 80044bc:	4659      	mov	r1, fp
 80044be:	220a      	movs	r2, #10
 80044c0:	4620      	mov	r0, r4
 80044c2:	f000 f9d9 	bl	8004878 <__multadd>
 80044c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044cc:	4683      	mov	fp, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8144 	beq.w	800475c <_dtoa_r+0xb24>
 80044d4:	2300      	movs	r3, #0
 80044d6:	4639      	mov	r1, r7
 80044d8:	220a      	movs	r2, #10
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 f9cc 	bl	8004878 <__multadd>
 80044e0:	9b04      	ldr	r3, [sp, #16]
 80044e2:	4607      	mov	r7, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	dc4d      	bgt.n	8004584 <_dtoa_r+0x94c>
 80044e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	dd4a      	ble.n	8004584 <_dtoa_r+0x94c>
 80044ee:	e011      	b.n	8004514 <_dtoa_r+0x8dc>
 80044f0:	d0c9      	beq.n	8004486 <_dtoa_r+0x84e>
 80044f2:	9a07      	ldr	r2, [sp, #28]
 80044f4:	331c      	adds	r3, #28
 80044f6:	441a      	add	r2, r3
 80044f8:	4499      	add	r9, r3
 80044fa:	441d      	add	r5, r3
 80044fc:	4613      	mov	r3, r2
 80044fe:	e7c1      	b.n	8004484 <_dtoa_r+0x84c>
 8004500:	4603      	mov	r3, r0
 8004502:	e7f6      	b.n	80044f2 <_dtoa_r+0x8ba>
 8004504:	f1b8 0f00 	cmp.w	r8, #0
 8004508:	dc36      	bgt.n	8004578 <_dtoa_r+0x940>
 800450a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800450c:	2b02      	cmp	r3, #2
 800450e:	dd33      	ble.n	8004578 <_dtoa_r+0x940>
 8004510:	f8cd 8010 	str.w	r8, [sp, #16]
 8004514:	9b04      	ldr	r3, [sp, #16]
 8004516:	b963      	cbnz	r3, 8004532 <_dtoa_r+0x8fa>
 8004518:	4631      	mov	r1, r6
 800451a:	2205      	movs	r2, #5
 800451c:	4620      	mov	r0, r4
 800451e:	f000 f9ab 	bl	8004878 <__multadd>
 8004522:	4601      	mov	r1, r0
 8004524:	4606      	mov	r6, r0
 8004526:	4658      	mov	r0, fp
 8004528:	f000 fb70 	bl	8004c0c <__mcmp>
 800452c:	2800      	cmp	r0, #0
 800452e:	f73f add3 	bgt.w	80040d8 <_dtoa_r+0x4a0>
 8004532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004534:	9d06      	ldr	r5, [sp, #24]
 8004536:	ea6f 0a03 	mvn.w	sl, r3
 800453a:	f04f 0900 	mov.w	r9, #0
 800453e:	4631      	mov	r1, r6
 8004540:	4620      	mov	r0, r4
 8004542:	f000 f982 	bl	800484a <_Bfree>
 8004546:	2f00      	cmp	r7, #0
 8004548:	f43f aebd 	beq.w	80042c6 <_dtoa_r+0x68e>
 800454c:	f1b9 0f00 	cmp.w	r9, #0
 8004550:	d005      	beq.n	800455e <_dtoa_r+0x926>
 8004552:	45b9      	cmp	r9, r7
 8004554:	d003      	beq.n	800455e <_dtoa_r+0x926>
 8004556:	4649      	mov	r1, r9
 8004558:	4620      	mov	r0, r4
 800455a:	f000 f976 	bl	800484a <_Bfree>
 800455e:	4639      	mov	r1, r7
 8004560:	4620      	mov	r0, r4
 8004562:	f000 f972 	bl	800484a <_Bfree>
 8004566:	e6ae      	b.n	80042c6 <_dtoa_r+0x68e>
 8004568:	2600      	movs	r6, #0
 800456a:	4637      	mov	r7, r6
 800456c:	e7e1      	b.n	8004532 <_dtoa_r+0x8fa>
 800456e:	46ba      	mov	sl, r7
 8004570:	4637      	mov	r7, r6
 8004572:	e5b1      	b.n	80040d8 <_dtoa_r+0x4a0>
 8004574:	40240000 	.word	0x40240000
 8004578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457a:	f8cd 8010 	str.w	r8, [sp, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80f3 	beq.w	800476a <_dtoa_r+0xb32>
 8004584:	2d00      	cmp	r5, #0
 8004586:	dd05      	ble.n	8004594 <_dtoa_r+0x95c>
 8004588:	4639      	mov	r1, r7
 800458a:	462a      	mov	r2, r5
 800458c:	4620      	mov	r0, r4
 800458e:	f000 fae9 	bl	8004b64 <__lshift>
 8004592:	4607      	mov	r7, r0
 8004594:	9b08      	ldr	r3, [sp, #32]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04c      	beq.n	8004634 <_dtoa_r+0x9fc>
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4620      	mov	r0, r4
 800459e:	f000 f920 	bl	80047e2 <_Balloc>
 80045a2:	4605      	mov	r5, r0
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	f107 010c 	add.w	r1, r7, #12
 80045aa:	3202      	adds	r2, #2
 80045ac:	0092      	lsls	r2, r2, #2
 80045ae:	300c      	adds	r0, #12
 80045b0:	f000 f90c 	bl	80047cc <memcpy>
 80045b4:	2201      	movs	r2, #1
 80045b6:	4629      	mov	r1, r5
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 fad3 	bl	8004b64 <__lshift>
 80045be:	46b9      	mov	r9, r7
 80045c0:	4607      	mov	r7, r0
 80045c2:	9b06      	ldr	r3, [sp, #24]
 80045c4:	9307      	str	r3, [sp, #28]
 80045c6:	9b02      	ldr	r3, [sp, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	9308      	str	r3, [sp, #32]
 80045ce:	4631      	mov	r1, r6
 80045d0:	4658      	mov	r0, fp
 80045d2:	f7ff faa1 	bl	8003b18 <quorem>
 80045d6:	4649      	mov	r1, r9
 80045d8:	4605      	mov	r5, r0
 80045da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80045de:	4658      	mov	r0, fp
 80045e0:	f000 fb14 	bl	8004c0c <__mcmp>
 80045e4:	463a      	mov	r2, r7
 80045e6:	9002      	str	r0, [sp, #8]
 80045e8:	4631      	mov	r1, r6
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 fb28 	bl	8004c40 <__mdiff>
 80045f0:	68c3      	ldr	r3, [r0, #12]
 80045f2:	4602      	mov	r2, r0
 80045f4:	bb03      	cbnz	r3, 8004638 <_dtoa_r+0xa00>
 80045f6:	4601      	mov	r1, r0
 80045f8:	9009      	str	r0, [sp, #36]	; 0x24
 80045fa:	4658      	mov	r0, fp
 80045fc:	f000 fb06 	bl	8004c0c <__mcmp>
 8004600:	4603      	mov	r3, r0
 8004602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004604:	4611      	mov	r1, r2
 8004606:	4620      	mov	r0, r4
 8004608:	9309      	str	r3, [sp, #36]	; 0x24
 800460a:	f000 f91e 	bl	800484a <_Bfree>
 800460e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004610:	b9a3      	cbnz	r3, 800463c <_dtoa_r+0xa04>
 8004612:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004614:	b992      	cbnz	r2, 800463c <_dtoa_r+0xa04>
 8004616:	9a08      	ldr	r2, [sp, #32]
 8004618:	b982      	cbnz	r2, 800463c <_dtoa_r+0xa04>
 800461a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800461e:	d029      	beq.n	8004674 <_dtoa_r+0xa3c>
 8004620:	9b02      	ldr	r3, [sp, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	dd01      	ble.n	800462a <_dtoa_r+0x9f2>
 8004626:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800462a:	9b07      	ldr	r3, [sp, #28]
 800462c:	1c5d      	adds	r5, r3, #1
 800462e:	f883 8000 	strb.w	r8, [r3]
 8004632:	e784      	b.n	800453e <_dtoa_r+0x906>
 8004634:	4638      	mov	r0, r7
 8004636:	e7c2      	b.n	80045be <_dtoa_r+0x986>
 8004638:	2301      	movs	r3, #1
 800463a:	e7e3      	b.n	8004604 <_dtoa_r+0x9cc>
 800463c:	9a02      	ldr	r2, [sp, #8]
 800463e:	2a00      	cmp	r2, #0
 8004640:	db04      	blt.n	800464c <_dtoa_r+0xa14>
 8004642:	d123      	bne.n	800468c <_dtoa_r+0xa54>
 8004644:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004646:	bb0a      	cbnz	r2, 800468c <_dtoa_r+0xa54>
 8004648:	9a08      	ldr	r2, [sp, #32]
 800464a:	b9fa      	cbnz	r2, 800468c <_dtoa_r+0xa54>
 800464c:	2b00      	cmp	r3, #0
 800464e:	ddec      	ble.n	800462a <_dtoa_r+0x9f2>
 8004650:	4659      	mov	r1, fp
 8004652:	2201      	movs	r2, #1
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fa85 	bl	8004b64 <__lshift>
 800465a:	4631      	mov	r1, r6
 800465c:	4683      	mov	fp, r0
 800465e:	f000 fad5 	bl	8004c0c <__mcmp>
 8004662:	2800      	cmp	r0, #0
 8004664:	dc03      	bgt.n	800466e <_dtoa_r+0xa36>
 8004666:	d1e0      	bne.n	800462a <_dtoa_r+0x9f2>
 8004668:	f018 0f01 	tst.w	r8, #1
 800466c:	d0dd      	beq.n	800462a <_dtoa_r+0x9f2>
 800466e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004672:	d1d8      	bne.n	8004626 <_dtoa_r+0x9ee>
 8004674:	9b07      	ldr	r3, [sp, #28]
 8004676:	9a07      	ldr	r2, [sp, #28]
 8004678:	1c5d      	adds	r5, r3, #1
 800467a:	2339      	movs	r3, #57	; 0x39
 800467c:	7013      	strb	r3, [r2, #0]
 800467e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004682:	1e6a      	subs	r2, r5, #1
 8004684:	2b39      	cmp	r3, #57	; 0x39
 8004686:	d04d      	beq.n	8004724 <_dtoa_r+0xaec>
 8004688:	3301      	adds	r3, #1
 800468a:	e052      	b.n	8004732 <_dtoa_r+0xafa>
 800468c:	9a07      	ldr	r2, [sp, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f102 0501 	add.w	r5, r2, #1
 8004694:	dd06      	ble.n	80046a4 <_dtoa_r+0xa6c>
 8004696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800469a:	d0eb      	beq.n	8004674 <_dtoa_r+0xa3c>
 800469c:	f108 0801 	add.w	r8, r8, #1
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	e7c4      	b.n	800462e <_dtoa_r+0x9f6>
 80046a4:	9b06      	ldr	r3, [sp, #24]
 80046a6:	9a04      	ldr	r2, [sp, #16]
 80046a8:	1aeb      	subs	r3, r5, r3
 80046aa:	4293      	cmp	r3, r2
 80046ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 80046b0:	d021      	beq.n	80046f6 <_dtoa_r+0xabe>
 80046b2:	4659      	mov	r1, fp
 80046b4:	2300      	movs	r3, #0
 80046b6:	220a      	movs	r2, #10
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 f8dd 	bl	8004878 <__multadd>
 80046be:	45b9      	cmp	r9, r7
 80046c0:	4683      	mov	fp, r0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	f04f 020a 	mov.w	r2, #10
 80046ca:	4649      	mov	r1, r9
 80046cc:	4620      	mov	r0, r4
 80046ce:	d105      	bne.n	80046dc <_dtoa_r+0xaa4>
 80046d0:	f000 f8d2 	bl	8004878 <__multadd>
 80046d4:	4681      	mov	r9, r0
 80046d6:	4607      	mov	r7, r0
 80046d8:	9507      	str	r5, [sp, #28]
 80046da:	e778      	b.n	80045ce <_dtoa_r+0x996>
 80046dc:	f000 f8cc 	bl	8004878 <__multadd>
 80046e0:	4639      	mov	r1, r7
 80046e2:	4681      	mov	r9, r0
 80046e4:	2300      	movs	r3, #0
 80046e6:	220a      	movs	r2, #10
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 f8c5 	bl	8004878 <__multadd>
 80046ee:	4607      	mov	r7, r0
 80046f0:	e7f2      	b.n	80046d8 <_dtoa_r+0xaa0>
 80046f2:	f04f 0900 	mov.w	r9, #0
 80046f6:	4659      	mov	r1, fp
 80046f8:	2201      	movs	r2, #1
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 fa32 	bl	8004b64 <__lshift>
 8004700:	4631      	mov	r1, r6
 8004702:	4683      	mov	fp, r0
 8004704:	f000 fa82 	bl	8004c0c <__mcmp>
 8004708:	2800      	cmp	r0, #0
 800470a:	dcb8      	bgt.n	800467e <_dtoa_r+0xa46>
 800470c:	d102      	bne.n	8004714 <_dtoa_r+0xadc>
 800470e:	f018 0f01 	tst.w	r8, #1
 8004712:	d1b4      	bne.n	800467e <_dtoa_r+0xa46>
 8004714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004718:	1e6a      	subs	r2, r5, #1
 800471a:	2b30      	cmp	r3, #48	; 0x30
 800471c:	f47f af0f 	bne.w	800453e <_dtoa_r+0x906>
 8004720:	4615      	mov	r5, r2
 8004722:	e7f7      	b.n	8004714 <_dtoa_r+0xadc>
 8004724:	9b06      	ldr	r3, [sp, #24]
 8004726:	4293      	cmp	r3, r2
 8004728:	d105      	bne.n	8004736 <_dtoa_r+0xafe>
 800472a:	2331      	movs	r3, #49	; 0x31
 800472c:	9a06      	ldr	r2, [sp, #24]
 800472e:	f10a 0a01 	add.w	sl, sl, #1
 8004732:	7013      	strb	r3, [r2, #0]
 8004734:	e703      	b.n	800453e <_dtoa_r+0x906>
 8004736:	4615      	mov	r5, r2
 8004738:	e7a1      	b.n	800467e <_dtoa_r+0xa46>
 800473a:	4b17      	ldr	r3, [pc, #92]	; (8004798 <_dtoa_r+0xb60>)
 800473c:	f7ff bae1 	b.w	8003d02 <_dtoa_r+0xca>
 8004740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004742:	2b00      	cmp	r3, #0
 8004744:	f47f aabb 	bne.w	8003cbe <_dtoa_r+0x86>
 8004748:	4b14      	ldr	r3, [pc, #80]	; (800479c <_dtoa_r+0xb64>)
 800474a:	f7ff bada 	b.w	8003d02 <_dtoa_r+0xca>
 800474e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004750:	2b01      	cmp	r3, #1
 8004752:	f77f ae3f 	ble.w	80043d4 <_dtoa_r+0x79c>
 8004756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004758:	9308      	str	r3, [sp, #32]
 800475a:	e653      	b.n	8004404 <_dtoa_r+0x7cc>
 800475c:	9b04      	ldr	r3, [sp, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	dc03      	bgt.n	800476a <_dtoa_r+0xb32>
 8004762:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004764:	2b02      	cmp	r3, #2
 8004766:	f73f aed5 	bgt.w	8004514 <_dtoa_r+0x8dc>
 800476a:	9d06      	ldr	r5, [sp, #24]
 800476c:	4631      	mov	r1, r6
 800476e:	4658      	mov	r0, fp
 8004770:	f7ff f9d2 	bl	8003b18 <quorem>
 8004774:	9b06      	ldr	r3, [sp, #24]
 8004776:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800477a:	f805 8b01 	strb.w	r8, [r5], #1
 800477e:	9a04      	ldr	r2, [sp, #16]
 8004780:	1aeb      	subs	r3, r5, r3
 8004782:	429a      	cmp	r2, r3
 8004784:	ddb5      	ble.n	80046f2 <_dtoa_r+0xaba>
 8004786:	4659      	mov	r1, fp
 8004788:	2300      	movs	r3, #0
 800478a:	220a      	movs	r2, #10
 800478c:	4620      	mov	r0, r4
 800478e:	f000 f873 	bl	8004878 <__multadd>
 8004792:	4683      	mov	fp, r0
 8004794:	e7ea      	b.n	800476c <_dtoa_r+0xb34>
 8004796:	bf00      	nop
 8004798:	08004fdd 	.word	0x08004fdd
 800479c:	08004fdf 	.word	0x08004fdf

080047a0 <_localeconv_r>:
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <_localeconv_r+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6a18      	ldr	r0, [r3, #32]
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <_localeconv_r+0x18>)
 80047a8:	2800      	cmp	r0, #0
 80047aa:	bf08      	it	eq
 80047ac:	4618      	moveq	r0, r3
 80047ae:	30f0      	adds	r0, #240	; 0xf0
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000010 	.word	0x20000010
 80047b8:	20000074 	.word	0x20000074

080047bc <malloc>:
 80047bc:	4b02      	ldr	r3, [pc, #8]	; (80047c8 <malloc+0xc>)
 80047be:	4601      	mov	r1, r0
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	f000 baf9 	b.w	8004db8 <_malloc_r>
 80047c6:	bf00      	nop
 80047c8:	20000010 	.word	0x20000010

080047cc <memcpy>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	1e43      	subs	r3, r0, #1
 80047d0:	440a      	add	r2, r1
 80047d2:	4291      	cmp	r1, r2
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	bd10      	pop	{r4, pc}
 80047d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e0:	e7f7      	b.n	80047d2 <memcpy+0x6>

080047e2 <_Balloc>:
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047e6:	4604      	mov	r4, r0
 80047e8:	460e      	mov	r6, r1
 80047ea:	b93d      	cbnz	r5, 80047fc <_Balloc+0x1a>
 80047ec:	2010      	movs	r0, #16
 80047ee:	f7ff ffe5 	bl	80047bc <malloc>
 80047f2:	6260      	str	r0, [r4, #36]	; 0x24
 80047f4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047f8:	6005      	str	r5, [r0, #0]
 80047fa:	60c5      	str	r5, [r0, #12]
 80047fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80047fe:	68eb      	ldr	r3, [r5, #12]
 8004800:	b183      	cbz	r3, 8004824 <_Balloc+0x42>
 8004802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800480a:	b9b8      	cbnz	r0, 800483c <_Balloc+0x5a>
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f506 	lsl.w	r5, r1, r6
 8004812:	1d6a      	adds	r2, r5, #5
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	4620      	mov	r0, r4
 8004818:	f000 fabf 	bl	8004d9a <_calloc_r>
 800481c:	b160      	cbz	r0, 8004838 <_Balloc+0x56>
 800481e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004822:	e00e      	b.n	8004842 <_Balloc+0x60>
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	2104      	movs	r1, #4
 8004828:	4620      	mov	r0, r4
 800482a:	f000 fab6 	bl	8004d9a <_calloc_r>
 800482e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004830:	60e8      	str	r0, [r5, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e4      	bne.n	8004802 <_Balloc+0x20>
 8004838:	2000      	movs	r0, #0
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	6802      	ldr	r2, [r0, #0]
 800483e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004842:	2300      	movs	r3, #0
 8004844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004848:	e7f7      	b.n	800483a <_Balloc+0x58>

0800484a <_Bfree>:
 800484a:	b570      	push	{r4, r5, r6, lr}
 800484c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800484e:	4606      	mov	r6, r0
 8004850:	460d      	mov	r5, r1
 8004852:	b93c      	cbnz	r4, 8004864 <_Bfree+0x1a>
 8004854:	2010      	movs	r0, #16
 8004856:	f7ff ffb1 	bl	80047bc <malloc>
 800485a:	6270      	str	r0, [r6, #36]	; 0x24
 800485c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004860:	6004      	str	r4, [r0, #0]
 8004862:	60c4      	str	r4, [r0, #12]
 8004864:	b13d      	cbz	r5, 8004876 <_Bfree+0x2c>
 8004866:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004868:	686a      	ldr	r2, [r5, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004870:	6029      	str	r1, [r5, #0]
 8004872:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004876:	bd70      	pop	{r4, r5, r6, pc}

08004878 <__multadd>:
 8004878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487c:	461f      	mov	r7, r3
 800487e:	4606      	mov	r6, r0
 8004880:	460c      	mov	r4, r1
 8004882:	2300      	movs	r3, #0
 8004884:	690d      	ldr	r5, [r1, #16]
 8004886:	f101 0c14 	add.w	ip, r1, #20
 800488a:	f8dc 0000 	ldr.w	r0, [ip]
 800488e:	3301      	adds	r3, #1
 8004890:	b281      	uxth	r1, r0
 8004892:	fb02 7101 	mla	r1, r2, r1, r7
 8004896:	0c00      	lsrs	r0, r0, #16
 8004898:	0c0f      	lsrs	r7, r1, #16
 800489a:	fb02 7000 	mla	r0, r2, r0, r7
 800489e:	b289      	uxth	r1, r1
 80048a0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80048a4:	429d      	cmp	r5, r3
 80048a6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80048aa:	f84c 1b04 	str.w	r1, [ip], #4
 80048ae:	dcec      	bgt.n	800488a <__multadd+0x12>
 80048b0:	b1d7      	cbz	r7, 80048e8 <__multadd+0x70>
 80048b2:	68a3      	ldr	r3, [r4, #8]
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	dc12      	bgt.n	80048de <__multadd+0x66>
 80048b8:	6861      	ldr	r1, [r4, #4]
 80048ba:	4630      	mov	r0, r6
 80048bc:	3101      	adds	r1, #1
 80048be:	f7ff ff90 	bl	80047e2 <_Balloc>
 80048c2:	4680      	mov	r8, r0
 80048c4:	6922      	ldr	r2, [r4, #16]
 80048c6:	f104 010c 	add.w	r1, r4, #12
 80048ca:	3202      	adds	r2, #2
 80048cc:	0092      	lsls	r2, r2, #2
 80048ce:	300c      	adds	r0, #12
 80048d0:	f7ff ff7c 	bl	80047cc <memcpy>
 80048d4:	4621      	mov	r1, r4
 80048d6:	4630      	mov	r0, r6
 80048d8:	f7ff ffb7 	bl	800484a <_Bfree>
 80048dc:	4644      	mov	r4, r8
 80048de:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048e2:	3501      	adds	r5, #1
 80048e4:	615f      	str	r7, [r3, #20]
 80048e6:	6125      	str	r5, [r4, #16]
 80048e8:	4620      	mov	r0, r4
 80048ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048ee <__hi0bits>:
 80048ee:	0c02      	lsrs	r2, r0, #16
 80048f0:	0412      	lsls	r2, r2, #16
 80048f2:	4603      	mov	r3, r0
 80048f4:	b9b2      	cbnz	r2, 8004924 <__hi0bits+0x36>
 80048f6:	0403      	lsls	r3, r0, #16
 80048f8:	2010      	movs	r0, #16
 80048fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80048fe:	bf04      	itt	eq
 8004900:	021b      	lsleq	r3, r3, #8
 8004902:	3008      	addeq	r0, #8
 8004904:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004908:	bf04      	itt	eq
 800490a:	011b      	lsleq	r3, r3, #4
 800490c:	3004      	addeq	r0, #4
 800490e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004912:	bf04      	itt	eq
 8004914:	009b      	lsleq	r3, r3, #2
 8004916:	3002      	addeq	r0, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	db06      	blt.n	800492a <__hi0bits+0x3c>
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	d503      	bpl.n	8004928 <__hi0bits+0x3a>
 8004920:	3001      	adds	r0, #1
 8004922:	4770      	bx	lr
 8004924:	2000      	movs	r0, #0
 8004926:	e7e8      	b.n	80048fa <__hi0bits+0xc>
 8004928:	2020      	movs	r0, #32
 800492a:	4770      	bx	lr

0800492c <__lo0bits>:
 800492c:	6803      	ldr	r3, [r0, #0]
 800492e:	4601      	mov	r1, r0
 8004930:	f013 0207 	ands.w	r2, r3, #7
 8004934:	d00b      	beq.n	800494e <__lo0bits+0x22>
 8004936:	07da      	lsls	r2, r3, #31
 8004938:	d423      	bmi.n	8004982 <__lo0bits+0x56>
 800493a:	0798      	lsls	r0, r3, #30
 800493c:	bf49      	itett	mi
 800493e:	085b      	lsrmi	r3, r3, #1
 8004940:	089b      	lsrpl	r3, r3, #2
 8004942:	2001      	movmi	r0, #1
 8004944:	600b      	strmi	r3, [r1, #0]
 8004946:	bf5c      	itt	pl
 8004948:	600b      	strpl	r3, [r1, #0]
 800494a:	2002      	movpl	r0, #2
 800494c:	4770      	bx	lr
 800494e:	b298      	uxth	r0, r3
 8004950:	b9a8      	cbnz	r0, 800497e <__lo0bits+0x52>
 8004952:	2010      	movs	r0, #16
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f013 0fff 	tst.w	r3, #255	; 0xff
 800495a:	bf04      	itt	eq
 800495c:	0a1b      	lsreq	r3, r3, #8
 800495e:	3008      	addeq	r0, #8
 8004960:	071a      	lsls	r2, r3, #28
 8004962:	bf04      	itt	eq
 8004964:	091b      	lsreq	r3, r3, #4
 8004966:	3004      	addeq	r0, #4
 8004968:	079a      	lsls	r2, r3, #30
 800496a:	bf04      	itt	eq
 800496c:	089b      	lsreq	r3, r3, #2
 800496e:	3002      	addeq	r0, #2
 8004970:	07da      	lsls	r2, r3, #31
 8004972:	d402      	bmi.n	800497a <__lo0bits+0x4e>
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	d006      	beq.n	8004986 <__lo0bits+0x5a>
 8004978:	3001      	adds	r0, #1
 800497a:	600b      	str	r3, [r1, #0]
 800497c:	4770      	bx	lr
 800497e:	4610      	mov	r0, r2
 8004980:	e7e9      	b.n	8004956 <__lo0bits+0x2a>
 8004982:	2000      	movs	r0, #0
 8004984:	4770      	bx	lr
 8004986:	2020      	movs	r0, #32
 8004988:	4770      	bx	lr

0800498a <__i2b>:
 800498a:	b510      	push	{r4, lr}
 800498c:	460c      	mov	r4, r1
 800498e:	2101      	movs	r1, #1
 8004990:	f7ff ff27 	bl	80047e2 <_Balloc>
 8004994:	2201      	movs	r2, #1
 8004996:	6144      	str	r4, [r0, #20]
 8004998:	6102      	str	r2, [r0, #16]
 800499a:	bd10      	pop	{r4, pc}

0800499c <__multiply>:
 800499c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a0:	4614      	mov	r4, r2
 80049a2:	690a      	ldr	r2, [r1, #16]
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	4688      	mov	r8, r1
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bfbe      	ittt	lt
 80049ac:	460b      	movlt	r3, r1
 80049ae:	46a0      	movlt	r8, r4
 80049b0:	461c      	movlt	r4, r3
 80049b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80049b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80049ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80049be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80049c2:	eb07 0609 	add.w	r6, r7, r9
 80049c6:	42b3      	cmp	r3, r6
 80049c8:	bfb8      	it	lt
 80049ca:	3101      	addlt	r1, #1
 80049cc:	f7ff ff09 	bl	80047e2 <_Balloc>
 80049d0:	f100 0514 	add.w	r5, r0, #20
 80049d4:	462b      	mov	r3, r5
 80049d6:	2200      	movs	r2, #0
 80049d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80049dc:	4573      	cmp	r3, lr
 80049de:	d316      	bcc.n	8004a0e <__multiply+0x72>
 80049e0:	f104 0214 	add.w	r2, r4, #20
 80049e4:	f108 0114 	add.w	r1, r8, #20
 80049e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80049ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	9b00      	ldr	r3, [sp, #0]
 80049f4:	9201      	str	r2, [sp, #4]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d80c      	bhi.n	8004a14 <__multiply+0x78>
 80049fa:	2e00      	cmp	r6, #0
 80049fc:	dd03      	ble.n	8004a06 <__multiply+0x6a>
 80049fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d05d      	beq.n	8004ac2 <__multiply+0x126>
 8004a06:	6106      	str	r6, [r0, #16]
 8004a08:	b003      	add	sp, #12
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	f843 2b04 	str.w	r2, [r3], #4
 8004a12:	e7e3      	b.n	80049dc <__multiply+0x40>
 8004a14:	f8b2 b000 	ldrh.w	fp, [r2]
 8004a18:	f1bb 0f00 	cmp.w	fp, #0
 8004a1c:	d023      	beq.n	8004a66 <__multiply+0xca>
 8004a1e:	4689      	mov	r9, r1
 8004a20:	46ac      	mov	ip, r5
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	f859 4b04 	ldr.w	r4, [r9], #4
 8004a2a:	f8dc a000 	ldr.w	sl, [ip]
 8004a2e:	b2a3      	uxth	r3, r4
 8004a30:	fa1f fa8a 	uxth.w	sl, sl
 8004a34:	fb0b a303 	mla	r3, fp, r3, sl
 8004a38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004a3c:	f8dc 4000 	ldr.w	r4, [ip]
 8004a40:	4443      	add	r3, r8
 8004a42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004a46:	fb0b 840a 	mla	r4, fp, sl, r8
 8004a4a:	46e2      	mov	sl, ip
 8004a4c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a56:	454f      	cmp	r7, r9
 8004a58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004a5c:	f84a 3b04 	str.w	r3, [sl], #4
 8004a60:	d82b      	bhi.n	8004aba <__multiply+0x11e>
 8004a62:	f8cc 8004 	str.w	r8, [ip, #4]
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	3204      	adds	r2, #4
 8004a6a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004a6e:	f1ba 0f00 	cmp.w	sl, #0
 8004a72:	d020      	beq.n	8004ab6 <__multiply+0x11a>
 8004a74:	4689      	mov	r9, r1
 8004a76:	46a8      	mov	r8, r5
 8004a78:	f04f 0b00 	mov.w	fp, #0
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	f8b9 c000 	ldrh.w	ip, [r9]
 8004a82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	fb0a 440c 	mla	r4, sl, ip, r4
 8004a8c:	46c4      	mov	ip, r8
 8004a8e:	445c      	add	r4, fp
 8004a90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a94:	f84c 3b04 	str.w	r3, [ip], #4
 8004a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8004a9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	fb0a b303 	mla	r3, sl, r3, fp
 8004aa6:	454f      	cmp	r7, r9
 8004aa8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004aac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004ab0:	d805      	bhi.n	8004abe <__multiply+0x122>
 8004ab2:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ab6:	3504      	adds	r5, #4
 8004ab8:	e79b      	b.n	80049f2 <__multiply+0x56>
 8004aba:	46d4      	mov	ip, sl
 8004abc:	e7b3      	b.n	8004a26 <__multiply+0x8a>
 8004abe:	46e0      	mov	r8, ip
 8004ac0:	e7dd      	b.n	8004a7e <__multiply+0xe2>
 8004ac2:	3e01      	subs	r6, #1
 8004ac4:	e799      	b.n	80049fa <__multiply+0x5e>
	...

08004ac8 <__pow5mult>:
 8004ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004acc:	4615      	mov	r5, r2
 8004ace:	f012 0203 	ands.w	r2, r2, #3
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	460f      	mov	r7, r1
 8004ad6:	d007      	beq.n	8004ae8 <__pow5mult+0x20>
 8004ad8:	4c21      	ldr	r4, [pc, #132]	; (8004b60 <__pow5mult+0x98>)
 8004ada:	3a01      	subs	r2, #1
 8004adc:	2300      	movs	r3, #0
 8004ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ae2:	f7ff fec9 	bl	8004878 <__multadd>
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	10ad      	asrs	r5, r5, #2
 8004aea:	d035      	beq.n	8004b58 <__pow5mult+0x90>
 8004aec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004aee:	b93c      	cbnz	r4, 8004b00 <__pow5mult+0x38>
 8004af0:	2010      	movs	r0, #16
 8004af2:	f7ff fe63 	bl	80047bc <malloc>
 8004af6:	6270      	str	r0, [r6, #36]	; 0x24
 8004af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004afc:	6004      	str	r4, [r0, #0]
 8004afe:	60c4      	str	r4, [r0, #12]
 8004b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b08:	b94c      	cbnz	r4, 8004b1e <__pow5mult+0x56>
 8004b0a:	f240 2171 	movw	r1, #625	; 0x271
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f7ff ff3b 	bl	800498a <__i2b>
 8004b14:	2300      	movs	r3, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b1c:	6003      	str	r3, [r0, #0]
 8004b1e:	f04f 0800 	mov.w	r8, #0
 8004b22:	07eb      	lsls	r3, r5, #31
 8004b24:	d50a      	bpl.n	8004b3c <__pow5mult+0x74>
 8004b26:	4639      	mov	r1, r7
 8004b28:	4622      	mov	r2, r4
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7ff ff36 	bl	800499c <__multiply>
 8004b30:	4681      	mov	r9, r0
 8004b32:	4639      	mov	r1, r7
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff fe88 	bl	800484a <_Bfree>
 8004b3a:	464f      	mov	r7, r9
 8004b3c:	106d      	asrs	r5, r5, #1
 8004b3e:	d00b      	beq.n	8004b58 <__pow5mult+0x90>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	b938      	cbnz	r0, 8004b54 <__pow5mult+0x8c>
 8004b44:	4622      	mov	r2, r4
 8004b46:	4621      	mov	r1, r4
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff ff27 	bl	800499c <__multiply>
 8004b4e:	6020      	str	r0, [r4, #0]
 8004b50:	f8c0 8000 	str.w	r8, [r0]
 8004b54:	4604      	mov	r4, r0
 8004b56:	e7e4      	b.n	8004b22 <__pow5mult+0x5a>
 8004b58:	4638      	mov	r0, r7
 8004b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	bf00      	nop
 8004b60:	080050e0 	.word	0x080050e0

08004b64 <__lshift>:
 8004b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b68:	460c      	mov	r4, r1
 8004b6a:	4607      	mov	r7, r0
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b74:	eb0a 0903 	add.w	r9, sl, r3
 8004b78:	6849      	ldr	r1, [r1, #4]
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	f109 0501 	add.w	r5, r9, #1
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	db32      	blt.n	8004bea <__lshift+0x86>
 8004b84:	4638      	mov	r0, r7
 8004b86:	f7ff fe2c 	bl	80047e2 <_Balloc>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f100 0114 	add.w	r1, r0, #20
 8004b94:	4553      	cmp	r3, sl
 8004b96:	db2b      	blt.n	8004bf0 <__lshift+0x8c>
 8004b98:	6920      	ldr	r0, [r4, #16]
 8004b9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b9e:	f104 0314 	add.w	r3, r4, #20
 8004ba2:	f016 021f 	ands.w	r2, r6, #31
 8004ba6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004baa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004bae:	d025      	beq.n	8004bfc <__lshift+0x98>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f1c2 0e20 	rsb	lr, r2, #32
 8004bb6:	468a      	mov	sl, r1
 8004bb8:	681e      	ldr	r6, [r3, #0]
 8004bba:	4096      	lsls	r6, r2
 8004bbc:	4330      	orrs	r0, r6
 8004bbe:	f84a 0b04 	str.w	r0, [sl], #4
 8004bc2:	f853 0b04 	ldr.w	r0, [r3], #4
 8004bc6:	459c      	cmp	ip, r3
 8004bc8:	fa20 f00e 	lsr.w	r0, r0, lr
 8004bcc:	d814      	bhi.n	8004bf8 <__lshift+0x94>
 8004bce:	6048      	str	r0, [r1, #4]
 8004bd0:	b108      	cbz	r0, 8004bd6 <__lshift+0x72>
 8004bd2:	f109 0502 	add.w	r5, r9, #2
 8004bd6:	3d01      	subs	r5, #1
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f8c8 5010 	str.w	r5, [r8, #16]
 8004bde:	4621      	mov	r1, r4
 8004be0:	f7ff fe33 	bl	800484a <_Bfree>
 8004be4:	4640      	mov	r0, r8
 8004be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bea:	3101      	adds	r1, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	e7c7      	b.n	8004b80 <__lshift+0x1c>
 8004bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	e7cd      	b.n	8004b94 <__lshift+0x30>
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	e7dc      	b.n	8004bb6 <__lshift+0x52>
 8004bfc:	3904      	subs	r1, #4
 8004bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c02:	459c      	cmp	ip, r3
 8004c04:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c08:	d8f9      	bhi.n	8004bfe <__lshift+0x9a>
 8004c0a:	e7e4      	b.n	8004bd6 <__lshift+0x72>

08004c0c <__mcmp>:
 8004c0c:	6903      	ldr	r3, [r0, #16]
 8004c0e:	690a      	ldr	r2, [r1, #16]
 8004c10:	b530      	push	{r4, r5, lr}
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	d10c      	bne.n	8004c30 <__mcmp+0x24>
 8004c16:	0092      	lsls	r2, r2, #2
 8004c18:	3014      	adds	r0, #20
 8004c1a:	3114      	adds	r1, #20
 8004c1c:	1884      	adds	r4, r0, r2
 8004c1e:	4411      	add	r1, r2
 8004c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c28:	4295      	cmp	r5, r2
 8004c2a:	d003      	beq.n	8004c34 <__mcmp+0x28>
 8004c2c:	d305      	bcc.n	8004c3a <__mcmp+0x2e>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd30      	pop	{r4, r5, pc}
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d3f3      	bcc.n	8004c20 <__mcmp+0x14>
 8004c38:	e7fa      	b.n	8004c30 <__mcmp+0x24>
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e7f7      	b.n	8004c30 <__mcmp+0x24>

08004c40 <__mdiff>:
 8004c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c44:	460d      	mov	r5, r1
 8004c46:	4607      	mov	r7, r0
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	f7ff ffdd 	bl	8004c0c <__mcmp>
 8004c52:	1e06      	subs	r6, r0, #0
 8004c54:	d108      	bne.n	8004c68 <__mdiff+0x28>
 8004c56:	4631      	mov	r1, r6
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f7ff fdc2 	bl	80047e2 <_Balloc>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c68:	bfa4      	itt	ge
 8004c6a:	4623      	movge	r3, r4
 8004c6c:	462c      	movge	r4, r5
 8004c6e:	4638      	mov	r0, r7
 8004c70:	6861      	ldr	r1, [r4, #4]
 8004c72:	bfa6      	itte	ge
 8004c74:	461d      	movge	r5, r3
 8004c76:	2600      	movge	r6, #0
 8004c78:	2601      	movlt	r6, #1
 8004c7a:	f7ff fdb2 	bl	80047e2 <_Balloc>
 8004c7e:	f04f 0e00 	mov.w	lr, #0
 8004c82:	60c6      	str	r6, [r0, #12]
 8004c84:	692b      	ldr	r3, [r5, #16]
 8004c86:	6926      	ldr	r6, [r4, #16]
 8004c88:	f104 0214 	add.w	r2, r4, #20
 8004c8c:	f105 0914 	add.w	r9, r5, #20
 8004c90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004c94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004c98:	f100 0114 	add.w	r1, r0, #20
 8004c9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8004ca0:	f859 5b04 	ldr.w	r5, [r9], #4
 8004ca4:	fa1f f38a 	uxth.w	r3, sl
 8004ca8:	4473      	add	r3, lr
 8004caa:	b2ac      	uxth	r4, r5
 8004cac:	1b1b      	subs	r3, r3, r4
 8004cae:	0c2c      	lsrs	r4, r5, #16
 8004cb0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004cb4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004cbe:	45c8      	cmp	r8, r9
 8004cc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004cc4:	4694      	mov	ip, r2
 8004cc6:	f841 4b04 	str.w	r4, [r1], #4
 8004cca:	d8e7      	bhi.n	8004c9c <__mdiff+0x5c>
 8004ccc:	45bc      	cmp	ip, r7
 8004cce:	d304      	bcc.n	8004cda <__mdiff+0x9a>
 8004cd0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004cd4:	b183      	cbz	r3, 8004cf8 <__mdiff+0xb8>
 8004cd6:	6106      	str	r6, [r0, #16]
 8004cd8:	e7c4      	b.n	8004c64 <__mdiff+0x24>
 8004cda:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004cde:	b2a2      	uxth	r2, r4
 8004ce0:	4472      	add	r2, lr
 8004ce2:	1413      	asrs	r3, r2, #16
 8004ce4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004cee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004cf2:	f841 2b04 	str.w	r2, [r1], #4
 8004cf6:	e7e9      	b.n	8004ccc <__mdiff+0x8c>
 8004cf8:	3e01      	subs	r6, #1
 8004cfa:	e7e9      	b.n	8004cd0 <__mdiff+0x90>

08004cfc <__d2b>:
 8004cfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d00:	461c      	mov	r4, r3
 8004d02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004d06:	2101      	movs	r1, #1
 8004d08:	4690      	mov	r8, r2
 8004d0a:	f7ff fd6a 	bl	80047e2 <_Balloc>
 8004d0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004d12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004d16:	4607      	mov	r7, r0
 8004d18:	bb34      	cbnz	r4, 8004d68 <__d2b+0x6c>
 8004d1a:	9201      	str	r2, [sp, #4]
 8004d1c:	f1b8 0200 	subs.w	r2, r8, #0
 8004d20:	d027      	beq.n	8004d72 <__d2b+0x76>
 8004d22:	a802      	add	r0, sp, #8
 8004d24:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004d28:	f7ff fe00 	bl	800492c <__lo0bits>
 8004d2c:	9900      	ldr	r1, [sp, #0]
 8004d2e:	b1f0      	cbz	r0, 8004d6e <__d2b+0x72>
 8004d30:	9a01      	ldr	r2, [sp, #4]
 8004d32:	f1c0 0320 	rsb	r3, r0, #32
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	40c2      	lsrs	r2, r0
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	9201      	str	r2, [sp, #4]
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2102      	movne	r1, #2
 8004d4a:	2101      	moveq	r1, #1
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	6139      	str	r1, [r7, #16]
 8004d50:	b1c4      	cbz	r4, 8004d84 <__d2b+0x88>
 8004d52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004d56:	4404      	add	r4, r0
 8004d58:	6034      	str	r4, [r6, #0]
 8004d5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d5e:	6028      	str	r0, [r5, #0]
 8004d60:	4638      	mov	r0, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d6c:	e7d5      	b.n	8004d1a <__d2b+0x1e>
 8004d6e:	6179      	str	r1, [r7, #20]
 8004d70:	e7e7      	b.n	8004d42 <__d2b+0x46>
 8004d72:	a801      	add	r0, sp, #4
 8004d74:	f7ff fdda 	bl	800492c <__lo0bits>
 8004d78:	2101      	movs	r1, #1
 8004d7a:	9b01      	ldr	r3, [sp, #4]
 8004d7c:	6139      	str	r1, [r7, #16]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	3020      	adds	r0, #32
 8004d82:	e7e5      	b.n	8004d50 <__d2b+0x54>
 8004d84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	6918      	ldr	r0, [r3, #16]
 8004d90:	f7ff fdad 	bl	80048ee <__hi0bits>
 8004d94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004d98:	e7e1      	b.n	8004d5e <__d2b+0x62>

08004d9a <_calloc_r>:
 8004d9a:	b538      	push	{r3, r4, r5, lr}
 8004d9c:	fb02 f401 	mul.w	r4, r2, r1
 8004da0:	4621      	mov	r1, r4
 8004da2:	f000 f809 	bl	8004db8 <_malloc_r>
 8004da6:	4605      	mov	r5, r0
 8004da8:	b118      	cbz	r0, 8004db2 <_calloc_r+0x18>
 8004daa:	4622      	mov	r2, r4
 8004dac:	2100      	movs	r1, #0
 8004dae:	f7fe fb65 	bl	800347c <memset>
 8004db2:	4628      	mov	r0, r5
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
	...

08004db8 <_malloc_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	1ccd      	adds	r5, r1, #3
 8004dbc:	f025 0503 	bic.w	r5, r5, #3
 8004dc0:	3508      	adds	r5, #8
 8004dc2:	2d0c      	cmp	r5, #12
 8004dc4:	bf38      	it	cc
 8004dc6:	250c      	movcc	r5, #12
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	4606      	mov	r6, r0
 8004dcc:	db01      	blt.n	8004dd2 <_malloc_r+0x1a>
 8004dce:	42a9      	cmp	r1, r5
 8004dd0:	d903      	bls.n	8004dda <_malloc_r+0x22>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6033      	str	r3, [r6, #0]
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
 8004dda:	f000 f869 	bl	8004eb0 <__malloc_lock>
 8004dde:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <_malloc_r+0xac>)
 8004de0:	6814      	ldr	r4, [r2, #0]
 8004de2:	4621      	mov	r1, r4
 8004de4:	b991      	cbnz	r1, 8004e0c <_malloc_r+0x54>
 8004de6:	4c20      	ldr	r4, [pc, #128]	; (8004e68 <_malloc_r+0xb0>)
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	b91b      	cbnz	r3, 8004df4 <_malloc_r+0x3c>
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 f83d 	bl	8004e6c <_sbrk_r>
 8004df2:	6020      	str	r0, [r4, #0]
 8004df4:	4629      	mov	r1, r5
 8004df6:	4630      	mov	r0, r6
 8004df8:	f000 f838 	bl	8004e6c <_sbrk_r>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d124      	bne.n	8004e4a <_malloc_r+0x92>
 8004e00:	230c      	movs	r3, #12
 8004e02:	4630      	mov	r0, r6
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	f000 f854 	bl	8004eb2 <__malloc_unlock>
 8004e0a:	e7e4      	b.n	8004dd6 <_malloc_r+0x1e>
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	1b5b      	subs	r3, r3, r5
 8004e10:	d418      	bmi.n	8004e44 <_malloc_r+0x8c>
 8004e12:	2b0b      	cmp	r3, #11
 8004e14:	d90f      	bls.n	8004e36 <_malloc_r+0x7e>
 8004e16:	600b      	str	r3, [r1, #0]
 8004e18:	18cc      	adds	r4, r1, r3
 8004e1a:	50cd      	str	r5, [r1, r3]
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f000 f848 	bl	8004eb2 <__malloc_unlock>
 8004e22:	f104 000b 	add.w	r0, r4, #11
 8004e26:	1d23      	adds	r3, r4, #4
 8004e28:	f020 0007 	bic.w	r0, r0, #7
 8004e2c:	1ac3      	subs	r3, r0, r3
 8004e2e:	d0d3      	beq.n	8004dd8 <_malloc_r+0x20>
 8004e30:	425a      	negs	r2, r3
 8004e32:	50e2      	str	r2, [r4, r3]
 8004e34:	e7d0      	b.n	8004dd8 <_malloc_r+0x20>
 8004e36:	684b      	ldr	r3, [r1, #4]
 8004e38:	428c      	cmp	r4, r1
 8004e3a:	bf16      	itet	ne
 8004e3c:	6063      	strne	r3, [r4, #4]
 8004e3e:	6013      	streq	r3, [r2, #0]
 8004e40:	460c      	movne	r4, r1
 8004e42:	e7eb      	b.n	8004e1c <_malloc_r+0x64>
 8004e44:	460c      	mov	r4, r1
 8004e46:	6849      	ldr	r1, [r1, #4]
 8004e48:	e7cc      	b.n	8004de4 <_malloc_r+0x2c>
 8004e4a:	1cc4      	adds	r4, r0, #3
 8004e4c:	f024 0403 	bic.w	r4, r4, #3
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d005      	beq.n	8004e60 <_malloc_r+0xa8>
 8004e54:	1a21      	subs	r1, r4, r0
 8004e56:	4630      	mov	r0, r6
 8004e58:	f000 f808 	bl	8004e6c <_sbrk_r>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0cf      	beq.n	8004e00 <_malloc_r+0x48>
 8004e60:	6025      	str	r5, [r4, #0]
 8004e62:	e7db      	b.n	8004e1c <_malloc_r+0x64>
 8004e64:	20000200 	.word	0x20000200
 8004e68:	20000204 	.word	0x20000204

08004e6c <_sbrk_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	2300      	movs	r3, #0
 8004e70:	4c05      	ldr	r4, [pc, #20]	; (8004e88 <_sbrk_r+0x1c>)
 8004e72:	4605      	mov	r5, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	f7fd fefb 	bl	8002c72 <_sbrk>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_sbrk_r+0x1a>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_sbrk_r+0x1a>
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	200002c0 	.word	0x200002c0

08004e8c <__ascii_mbtowc>:
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	b901      	cbnz	r1, 8004e92 <__ascii_mbtowc+0x6>
 8004e90:	a901      	add	r1, sp, #4
 8004e92:	b142      	cbz	r2, 8004ea6 <__ascii_mbtowc+0x1a>
 8004e94:	b14b      	cbz	r3, 8004eaa <__ascii_mbtowc+0x1e>
 8004e96:	7813      	ldrb	r3, [r2, #0]
 8004e98:	600b      	str	r3, [r1, #0]
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	1c10      	adds	r0, r2, #0
 8004e9e:	bf18      	it	ne
 8004ea0:	2001      	movne	r0, #1
 8004ea2:	b002      	add	sp, #8
 8004ea4:	4770      	bx	lr
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	e7fb      	b.n	8004ea2 <__ascii_mbtowc+0x16>
 8004eaa:	f06f 0001 	mvn.w	r0, #1
 8004eae:	e7f8      	b.n	8004ea2 <__ascii_mbtowc+0x16>

08004eb0 <__malloc_lock>:
 8004eb0:	4770      	bx	lr

08004eb2 <__malloc_unlock>:
 8004eb2:	4770      	bx	lr

08004eb4 <__ascii_wctomb>:
 8004eb4:	b149      	cbz	r1, 8004eca <__ascii_wctomb+0x16>
 8004eb6:	2aff      	cmp	r2, #255	; 0xff
 8004eb8:	bf8b      	itete	hi
 8004eba:	238a      	movhi	r3, #138	; 0x8a
 8004ebc:	700a      	strbls	r2, [r1, #0]
 8004ebe:	6003      	strhi	r3, [r0, #0]
 8004ec0:	2001      	movls	r0, #1
 8004ec2:	bf88      	it	hi
 8004ec4:	f04f 30ff 	movhi.w	r0, #4294967295
 8004ec8:	4770      	bx	lr
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4770      	bx	lr
	...

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
