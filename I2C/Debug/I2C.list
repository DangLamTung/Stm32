
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08006c70  08006c70  00016c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f40  08006f40  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006f40  08006f40  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f40  08006f40  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  08007124  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08007124  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ee8  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002572  00000000  00000000  000340ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00037430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016485  00000000  00000000  00038108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b596  00000000  00000000  0004e58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000750dd  00000000  00000000  00059b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cec00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000cec7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c58 	.word	0x08006c58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006c58 	.word	0x08006c58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f9a:	f042 0210 	orr.w	r2, r2, #16
 8000f9e:	601a      	str	r2, [r3, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f932 	bl	800120a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f805 	bl	8000fb6 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f003 fefc 	bl	8004da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbe:	f240 0308 	movw	r3, #8
 8000fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f240 0304 	movw	r3, #4
 8000fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f947 	bl	8001274 <HAL_SYSTICK_Config>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e011      	b.n	8001014 <HAL_InitTick+0x5e>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d80d      	bhi.n	8001012 <HAL_InitTick+0x5c>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	f000 f90f 	bl	8001220 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001002:	f240 0300 	movw	r3, #0
 8001006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x5e>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	f240 0304 	movw	r3, #4
 8001024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	f240 2304 	movw	r3, #516	; 0x204
 8001030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	441a      	add	r2, r3
 8001038:	f240 2304 	movw	r3, #516	; 0x204
 800103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  return uwTick;
 800104e:	f240 2304 	movw	r3, #516	; 0x204
 8001052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001074:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001082:	4013      	ands	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001096:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001098:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800109c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	60da      	str	r2, [r3, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80010b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 011f 	and.w	r1, r3, #31
 80010da:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80010de:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80010e6:	0952      	lsrs	r2, r2, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f101 	lsl.w	r1, r0, r1
 80010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	da0f      	bge.n	8001130 <NVIC_SetPriority+0x34>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001118:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	f002 020f 	and.w	r2, r2, #15
 8001122:	3a04      	subs	r2, #4
 8001124:	0109      	lsls	r1, r1, #4
 8001126:	b2c9      	uxtb	r1, r1
 8001128:	4413      	add	r3, r2
 800112a:	460a      	mov	r2, r1
 800112c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112e:	e00d      	b.n	800114c <NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2d9      	uxtb	r1, r3
 8001134:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001138:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800113c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001140:	0109      	lsls	r1, r1, #4
 8001142:	b2c9      	uxtb	r1, r1
 8001144:	4413      	add	r3, r2
 8001146:	460a      	mov	r2, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b480      	push	{r7}
 8001158:	b089      	sub	sp, #36	; 0x24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f1c3 0307 	rsb	r3, r3, #7
 8001170:	2b04      	cmp	r3, #4
 8001172:	bf28      	it	cs
 8001174:	2304      	movcs	r3, #4
 8001176:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	3304      	adds	r3, #4
 800117c:	2b06      	cmp	r3, #6
 800117e:	d902      	bls.n	8001186 <NVIC_EncodePriority+0x30>
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	3b03      	subs	r3, #3
 8001184:	e000      	b.n	8001188 <NVIC_EncodePriority+0x32>
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118a:	f04f 32ff 	mov.w	r2, #4294967295
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43da      	mvns	r2, r3
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	401a      	ands	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119e:	f04f 31ff 	mov.w	r1, #4294967295
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43d9      	mvns	r1, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ae:	4313      	orrs	r3, r2
         );
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3724      	adds	r7, #36	; 0x24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ca:	d301      	bcc.n	80011d0 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011cc:	2301      	movs	r3, #1
 80011ce:	e018      	b.n	8001202 <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80011d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	3a01      	subs	r2, #1
 80011dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8a 	bl	80010fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80011ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80011f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff24 	bl	8001060 <NVIC_SetPriorityGrouping>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff3c 	bl	80010ae <NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ff8a 	bl	8001156 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff56 	bl	80010fc <NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff2f 	bl	80010ca <NVIC_EnableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff9c 	bl	80011ba <SysTick_Config>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d005      	beq.n	80012ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2204      	movs	r2, #4
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e05f      	b.n	800136e <HAL_DMA_Abort_IT+0xe2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 020e 	bic.w	r2, r2, #14
 80012bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	2308      	movs	r3, #8
 80012d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012d8:	429a      	cmp	r2, r3
 80012da:	d033      	beq.n	8001344 <HAL_DMA_Abort_IT+0xb8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	231c      	movs	r3, #28
 80012e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d02a      	beq.n	8001340 <HAL_DMA_Abort_IT+0xb4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2330      	movs	r3, #48	; 0x30
 80012f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d020      	beq.n	800133a <HAL_DMA_Abort_IT+0xae>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2344      	movs	r3, #68	; 0x44
 80012fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001302:	429a      	cmp	r2, r3
 8001304:	d016      	beq.n	8001334 <HAL_DMA_Abort_IT+0xa8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2358      	movs	r3, #88	; 0x58
 800130c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001310:	429a      	cmp	r2, r3
 8001312:	d00c      	beq.n	800132e <HAL_DMA_Abort_IT+0xa2>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	236c      	movs	r3, #108	; 0x6c
 800131a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131e:	429a      	cmp	r2, r3
 8001320:	d102      	bne.n	8001328 <HAL_DMA_Abort_IT+0x9c>
 8001322:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001326:	e00e      	b.n	8001346 <HAL_DMA_Abort_IT+0xba>
 8001328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132c:	e00b      	b.n	8001346 <HAL_DMA_Abort_IT+0xba>
 800132e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001332:	e008      	b.n	8001346 <HAL_DMA_Abort_IT+0xba>
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	e005      	b.n	8001346 <HAL_DMA_Abort_IT+0xba>
 800133a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133e:	e002      	b.n	8001346 <HAL_DMA_Abort_IT+0xba>
 8001340:	2310      	movs	r3, #16
 8001342:	e000      	b.n	8001346 <HAL_DMA_Abort_IT+0xba>
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800134c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_DMA_Abort_IT+0xe2>
    {
      hdma->XferAbortCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
    } 
  }
  return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b480      	push	{r7}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e17e      	b.n	800169a <HAL_GPIO_Init+0x322>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800139c:	2201      	movs	r2, #1
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 816d 	bne.w	8001694 <HAL_GPIO_Init+0x31c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d042      	beq.n	8001448 <HAL_GPIO_Init+0xd0>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d80d      	bhi.n	80013e2 <HAL_GPIO_Init+0x6a>
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d039      	beq.n	800143e <HAL_GPIO_Init+0xc6>
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d804      	bhi.n	80013d8 <HAL_GPIO_Init+0x60>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d03f      	beq.n	8001452 <HAL_GPIO_Init+0xda>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d02a      	beq.n	800142c <HAL_GPIO_Init+0xb4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013d6:	e056      	b.n	8001486 <HAL_GPIO_Init+0x10e>
      switch (GPIO_Init->Mode)
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d051      	beq.n	8001480 <HAL_GPIO_Init+0x108>
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d029      	beq.n	8001434 <HAL_GPIO_Init+0xbc>
          break;
 80013e0:	e051      	b.n	8001486 <HAL_GPIO_Init+0x10e>
      switch (GPIO_Init->Mode)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f2c1 0221 	movt	r2, #4129	; 0x1021
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d032      	beq.n	8001452 <HAL_GPIO_Init+0xda>
 80013ec:	2200      	movs	r2, #0
 80013ee:	f2c1 0221 	movt	r2, #4129	; 0x1021
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d80a      	bhi.n	800140c <HAL_GPIO_Init+0x94>
 80013f6:	2200      	movs	r2, #0
 80013f8:	f2c1 0211 	movt	r2, #4113	; 0x1011
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d028      	beq.n	8001452 <HAL_GPIO_Init+0xda>
 8001400:	2200      	movs	r2, #0
 8001402:	f2c1 0212 	movt	r2, #4114	; 0x1012
 8001406:	4293      	cmp	r3, r2
 8001408:	d023      	beq.n	8001452 <HAL_GPIO_Init+0xda>
          break;
 800140a:	e03c      	b.n	8001486 <HAL_GPIO_Init+0x10e>
      switch (GPIO_Init->Mode)
 800140c:	2200      	movs	r2, #0
 800140e:	f2c1 0231 	movt	r2, #4145	; 0x1031
 8001412:	4293      	cmp	r3, r2
 8001414:	d01d      	beq.n	8001452 <HAL_GPIO_Init+0xda>
 8001416:	2200      	movs	r2, #0
 8001418:	f2c1 0232 	movt	r2, #4146	; 0x1032
 800141c:	4293      	cmp	r3, r2
 800141e:	d018      	beq.n	8001452 <HAL_GPIO_Init+0xda>
 8001420:	2200      	movs	r2, #0
 8001422:	f2c1 0222 	movt	r2, #4130	; 0x1022
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0xda>
          break;
 800142a:	e02c      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e028      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	3304      	adds	r3, #4
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e023      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	3308      	adds	r3, #8
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e01e      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	330c      	adds	r3, #12
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e019      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <HAL_GPIO_Init+0xe8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145a:	2304      	movs	r3, #4
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e012      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_GPIO_Init+0xfc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001468:	2308      	movs	r3, #8
 800146a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	611a      	str	r2, [r3, #16]
          break;
 8001472:	e008      	b.n	8001486 <HAL_GPIO_Init+0x10e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	615a      	str	r2, [r3, #20]
          break;
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x10e>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d801      	bhi.n	8001490 <HAL_GPIO_Init+0x118>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	e001      	b.n	8001494 <HAL_GPIO_Init+0x11c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3304      	adds	r3, #4
 8001494:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2bff      	cmp	r3, #255	; 0xff
 800149a:	d802      	bhi.n	80014a2 <HAL_GPIO_Init+0x12a>
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x130>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3b08      	subs	r3, #8
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	210f      	movs	r1, #15
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	6a39      	ldr	r1, [r7, #32]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80df 	beq.w	8001694 <HAL_GPIO_Init+0x31c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	619a      	str	r2, [r3, #24]
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001500:	2300      	movs	r3, #0
 8001502:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	0892      	lsrs	r2, r2, #2
 800150a:	3202      	adds	r2, #2
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800152e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001532:	429a      	cmp	r2, r3
 8001534:	d01c      	beq.n	8001570 <HAL_GPIO_Init+0x1f8>
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001540:	429a      	cmp	r2, r3
 8001542:	d013      	beq.n	800156c <HAL_GPIO_Init+0x1f4>
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800154e:	429a      	cmp	r2, r3
 8001550:	d00a      	beq.n	8001568 <HAL_GPIO_Init+0x1f0>
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001558:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800155c:	429a      	cmp	r2, r3
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1ec>
 8001560:	2303      	movs	r3, #3
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x1fa>
 8001564:	2304      	movs	r3, #4
 8001566:	e004      	b.n	8001572 <HAL_GPIO_Init+0x1fa>
 8001568:	2302      	movs	r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x1fa>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_GPIO_Init+0x1fa>
 8001570:	2300      	movs	r3, #0
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001582:	2300      	movs	r3, #0
 8001584:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	0892      	lsrs	r2, r2, #2
 800158c:	3202      	adds	r2, #2
 800158e:	6979      	ldr	r1, [r7, #20]
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00c      	b.n	80015d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	43da      	mvns	r2, r3
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015d0:	400a      	ands	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <HAL_GPIO_Init+0x282>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015e8:	6859      	ldr	r1, [r3, #4]
 80015ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43da      	mvns	r2, r3
 8001608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001610:	400a      	ands	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <HAL_GPIO_Init+0x2c2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	e00c      	b.n	8001654 <HAL_GPIO_Init+0x2dc>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43da      	mvns	r2, r3
 8001648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001650:	400a      	ands	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <HAL_GPIO_Init+0x302>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001664:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001668:	68d9      	ldr	r1, [r3, #12]
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e00c      	b.n	8001694 <HAL_GPIO_Init+0x31c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001682:	68d9      	ldr	r1, [r3, #12]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43da      	mvns	r2, r3
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001690:	400a      	ands	r2, r1
 8001692:	60da      	str	r2, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	3301      	adds	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	2b0f      	cmp	r3, #15
 800169e:	f67f ae7d 	bls.w	800139c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	; 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0fc      	b.n	80018f0 <HAL_I2C_Init+0x214>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f003 fb90 	bl	8004e30 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2224      	movs	r2, #36	; 0x24
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001728:	f001 fd60 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 800172c:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8001736:	f2c0 0301 	movt	r3, #1
 800173a:	429a      	cmp	r2, r3
 800173c:	d80a      	bhi.n	8001754 <HAL_I2C_Init+0x78>
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f248 437f 	movw	r3, #33919	; 0x847f
 8001744:	f2c0 031e 	movt	r3, #30
 8001748:	429a      	cmp	r2, r3
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e009      	b.n	8001768 <HAL_I2C_Init+0x8c>
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	f640 03ff 	movw	r3, #2303	; 0x8ff
 800175a:	f2c0 033d 	movt	r3, #61	; 0x3d
 800175e:	429a      	cmp	r2, r3
 8001760:	bf94      	ite	ls
 8001762:	2301      	movls	r3, #1
 8001764:	2300      	movhi	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2C_Init+0x94>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0bf      	b.n	80018f0 <HAL_I2C_Init+0x214>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001776:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800177a:	fba3 2302 	umull	r2, r3, r3, r2
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8001792:	f2c0 0301 	movt	r3, #1
 8001796:	429a      	cmp	r2, r3
 8001798:	d802      	bhi.n	80017a0 <HAL_I2C_Init+0xc4>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3301      	adds	r3, #1
 800179e:	e00c      	b.n	80017ba <HAL_I2C_Init+0xde>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017a6:	fb02 f203 	mul.w	r2, r2, r3
 80017aa:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80017ae:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80017b2:	fba3 2302 	umull	r2, r3, r3, r2
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	3301      	adds	r3, #1
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	f248 63a0 	movw	r3, #34464	; 0x86a0
 80017c8:	f2c0 0301 	movt	r3, #1
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d80d      	bhi.n	80017ec <HAL_I2C_Init+0x110>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	bf38      	it	cc
 80017e8:	2304      	movcc	r3, #4
 80017ea:	e04f      	b.n	800188c <HAL_I2C_Init+0x1b0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_I2C_Init+0x13c>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1e59      	subs	r1, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	fbb1 f3f3 	udiv	r3, r1, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	e012      	b.n	800183e <HAL_I2C_Init+0x162>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1e59      	subs	r1, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009a      	lsls	r2, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	fbb1 f3f3 	udiv	r3, r1, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x16a>
 8001842:	2301      	movs	r3, #1
 8001844:	e022      	b.n	800188c <HAL_I2C_Init+0x1b0>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10e      	bne.n	800186c <HAL_I2C_Init+0x190>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1e59      	subs	r1, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001860:	3301      	adds	r3, #1
 8001862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186a:	e00f      	b.n	800188c <HAL_I2C_Init+0x1b0>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1e59      	subs	r1, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009a      	lsls	r2, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69d9      	ldr	r1, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6919      	ldr	r1, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6959      	ldr	r1, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	461a      	mov	r2, r3
 8001904:	460b      	mov	r3, r1
 8001906:	817b      	strh	r3, [r7, #10]
 8001908:	4613      	mov	r3, r2
 800190a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001910:	f7ff fb9b 	bl	800104a <HAL_GetTick>
 8001914:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b20      	cmp	r3, #32
 8001920:	f040 80f2 	bne.w	8001b08 <HAL_I2C_Master_Transmit+0x210>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2319      	movs	r3, #25
 800192a:	2201      	movs	r2, #1
 800192c:	2102      	movs	r1, #2
 800192e:	f2c0 0110 	movt	r1, #16
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fda8 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Master_Transmit+0x4a>
    {
      return HAL_BUSY;
 800193e:	2302      	movs	r3, #2
 8001940:	e0e3      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_I2C_Master_Transmit+0x58>
 800194c:	2302      	movs	r3, #2
 800194e:	e0dc      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d007      	beq.n	8001976 <HAL_I2C_Master_Transmit+0x7e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001984:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2221      	movs	r2, #33	; 0x21
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2210      	movs	r2, #16
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	893a      	ldrh	r2, [r7, #8]
 80019a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	2300      	movs	r3, #0
 80019ac:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80019b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fc14 	bl	80021f0 <I2C_MasterRequestWrite>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00f      	beq.n	80019ee <HAL_I2C_Master_Transmit+0xf6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d105      	bne.n	80019e2 <HAL_I2C_Master_Transmit+0xea>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e093      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e08d      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001a04:	e066      	b.n	8001ad4 <HAL_I2C_Master_Transmit+0x1dc>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fdfb 	bl	8002606 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0x13e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d109      	bne.n	8001a32 <HAL_I2C_Master_Transmit+0x13a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06b      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
        }
        else
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e069      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c59      	adds	r1, r3, #1
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	6251      	str	r1, [r2, #36]	; 0x24
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d119      	bne.n	8001aa4 <HAL_I2C_Master_Transmit+0x1ac>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <HAL_I2C_Master_Transmit+0x1ac>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	1c59      	adds	r1, r3, #1
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6251      	str	r1, [r2, #36]	; 0x24
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	6a39      	ldr	r1, [r7, #32]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 fde9 	bl	8002680 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00f      	beq.n	8001ad4 <HAL_I2C_Master_Transmit+0x1dc>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d109      	bne.n	8001ad0 <HAL_I2C_Master_Transmit+0x1d8>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aca:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e01c      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e01a      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
    while(hi2c->XferSize > 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d194      	bne.n	8001a06 <HAL_I2C_Master_Transmit+0x10e>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_I2C_Master_Transmit+0x212>
  }
  else
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08c      	sub	sp, #48	; 0x30
 8001b16:	af02      	add	r7, sp, #8
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	460b      	mov	r3, r1
 8001b20:	817b      	strh	r3, [r7, #10]
 8001b22:	4613      	mov	r3, r2
 8001b24:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b2a:	f7ff fa8e 	bl	800104a <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	f040 8220 	bne.w	8001f7e <HAL_I2C_Master_Receive+0x46c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2319      	movs	r3, #25
 8001b44:	2201      	movs	r2, #1
 8001b46:	2102      	movs	r1, #2
 8001b48:	f2c0 0110 	movt	r1, #16
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fc9b 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Master_Receive+0x4a>
    {
      return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e211      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_Master_Receive+0x58>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e20a      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d007      	beq.n	8001b90 <HAL_I2C_Master_Receive+0x7e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2222      	movs	r2, #34	; 0x22
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2210      	movs	r2, #16
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	893a      	ldrh	r2, [r7, #8]
 8001bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8001bca:	62d3      	str	r3, [r2, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bd6:	8979      	ldrh	r1, [r7, #10]
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fb89 	bl	80022f4 <I2C_MasterRequestRead>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00f      	beq.n	8001c08 <HAL_I2C_Master_Receive+0xf6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d105      	bne.n	8001bfc <HAL_I2C_Master_Receive+0xea>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e1c1      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1bb      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
      }
    }

    if(hi2c->XferSize == 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d113      	bne.n	8001c38 <HAL_I2C_Master_Receive+0x126>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	623b      	str	r3, [r7, #32]
 8001c24:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e18f      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>
    }
    else if(hi2c->XferSize == 1U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d11d      	bne.n	8001c7c <HAL_I2C_Master_Receive+0x16a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4e:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c78:	b662      	cpsie	i
 8001c7a:	e16d      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d11d      	bne.n	8001cc0 <HAL_I2C_Master_Receive+0x1ae>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cbc:	b662      	cpsie	i
 8001cbe:	e14b      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cce:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001ce6:	e137      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>
    {
      if(hi2c->XferSize <= 3U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	f200 80ee 	bhi.w	8001ece <HAL_I2C_Master_Receive+0x3bc>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d127      	bne.n	8001d4a <HAL_I2C_Master_Receive+0x238>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fcfb 	bl	80026fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_I2C_Master_Receive+0x208>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d101      	bne.n	8001d16 <HAL_I2C_Master_Receive+0x204>
            {
              return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e134      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
            }
            else
            {
              return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e132      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6918      	ldr	r0, [r3, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c59      	adds	r1, r3, #1
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	6251      	str	r1, [r2, #36]	; 0x24
 8001d2a:	b2c2      	uxtb	r2, r0
 8001d2c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d48:	e106      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d147      	bne.n	8001de2 <HAL_I2C_Master_Receive+0x2d0>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	f2c0 0101 	movt	r1, #1
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fb91 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Master_Receive+0x25e>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e107      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d80:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6918      	ldr	r0, [r3, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	1c59      	adds	r1, r3, #1
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	6251      	str	r1, [r2, #36]	; 0x24
 8001d92:	b2c2      	uxtb	r2, r0
 8001d94:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001db0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6918      	ldr	r0, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	1c59      	adds	r1, r3, #1
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	6251      	str	r1, [r2, #36]	; 0x24
 8001dc2:	b2c2      	uxtb	r2, r0
 8001dc4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001de0:	e0ba      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	2200      	movs	r2, #0
 8001dea:	2104      	movs	r1, #4
 8001dec:	f2c0 0101 	movt	r1, #1
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fb49 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Master_Receive+0x2ee>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0bf      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6918      	ldr	r0, [r3, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6251      	str	r1, [r2, #36]	; 0x24
 8001e22:	b2c2      	uxtb	r2, r0
 8001e24:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	2200      	movs	r2, #0
 8001e48:	2104      	movs	r1, #4
 8001e4a:	f2c0 0101 	movt	r1, #1
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fb1a 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Master_Receive+0x34c>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e090      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6918      	ldr	r0, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	6251      	str	r1, [r2, #36]	; 0x24
 8001e7e:	b2c2      	uxtb	r2, r0
 8001e80:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e9c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6918      	ldr	r0, [r3, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	1c59      	adds	r1, r3, #1
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6251      	str	r1, [r2, #36]	; 0x24
 8001eae:	b2c2      	uxtb	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ecc:	e044      	b.n	8001f58 <HAL_I2C_Master_Receive+0x446>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fc11 	bl	80026fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_I2C_Master_Receive+0x3dc>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d101      	bne.n	8001eea <HAL_I2C_Master_Receive+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e04a      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
          }
          else
          {
            return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e048      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6918      	ldr	r0, [r3, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	6251      	str	r1, [r2, #36]	; 0x24
 8001efe:	b2c2      	uxtb	r2, r0
 8001f00:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d116      	bne.n	8001f58 <HAL_I2C_Master_Receive+0x446>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6918      	ldr	r0, [r3, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c59      	adds	r1, r3, #1
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6251      	str	r1, [r2, #36]	; 0x24
 8001f3a:	b2c2      	uxtb	r2, r0
 8001f3c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f aec3 	bne.w	8001ce8 <HAL_I2C_Master_Receive+0x1d6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_I2C_Master_Receive+0x46e>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	460b      	mov	r3, r1
 8001f96:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fac:	f7ff f84d 	bl	800104a <HAL_GetTick>
 8001fb0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 8113 	bne.w	80021e6 <HAL_I2C_IsDeviceReady+0x25e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2319      	movs	r3, #25
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2102      	movs	r1, #2
 8001fca:	f2c0 0110 	movt	r1, #16
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fa5a 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_IsDeviceReady+0x56>
    {
      return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e104      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2C_IsDeviceReady+0x64>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0fd      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d007      	beq.n	8002012 <HAL_I2C_IsDeviceReady+0x8a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2224      	movs	r2, #36	; 0x24
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002048:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fa16 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_IsDeviceReady+0xde>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0c0      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002074:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe ffe8 	bl	800104a <HAL_GetTick>
 800207a:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80020b4:	e02a      	b.n	800210c <HAL_I2C_IsDeviceReady+0x184>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_I2C_IsDeviceReady+0x144>
 80020bc:	f7fe ffc5 	bl	800104a <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d203      	bcs.n	80020d4 <HAL_I2C_IsDeviceReady+0x14c>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	22a0      	movs	r2, #160	; 0xa0
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_I2C_IsDeviceReady+0x196>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <HAL_I2C_IsDeviceReady+0x196>
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2ba0      	cmp	r3, #160	; 0xa0
 800211c:	d1cb      	bne.n	80020b6 <HAL_I2C_IsDeviceReady+0x12e>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d12b      	bne.n	800218c <HAL_I2C_IsDeviceReady+0x204>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2319      	movs	r3, #25
 8002160:	2201      	movs	r2, #1
 8002162:	2102      	movs	r1, #2
 8002164:	f2c0 0110 	movt	r1, #16
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f98d 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_IsDeviceReady+0x1f0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e037      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e02d      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2319      	movs	r3, #25
 80021ac:	2201      	movs	r2, #1
 80021ae:	2102      	movs	r1, #2
 80021b0:	f2c0 0110 	movt	r1, #16
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f967 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_IsDeviceReady+0x23c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e011      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
        }
      }
    }while(I2C_Trials++ < Trials);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	617a      	str	r2, [r7, #20]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f63f af34 	bhi.w	800203a <HAL_I2C_IsDeviceReady+0xb2>

    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_I2C_IsDeviceReady+0x260>
  }
  else
  {
    return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d006      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d003      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002218:	d108      	bne.n	800222c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e00b      	b.n	8002244 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	2b12      	cmp	r3, #18
 8002232:	d107      	bne.n	8002244 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f919 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e045      	b.n	80022ec <I2C_MasterRequestWrite+0xfc>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002268:	d108      	bne.n	800227c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800226a:	897b      	ldrh	r3, [r7, #10]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	e023      	b.n	80022c4 <I2C_MasterRequestWrite+0xd4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	11db      	asrs	r3, r3, #7
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0306 	and.w	r3, r3, #6
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f063 030f 	orn	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	2108      	movs	r1, #8
 800229a:	f2c0 0101 	movt	r1, #1
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f943 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <I2C_MasterRequestWrite+0xca>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d101      	bne.n	80022b6 <I2C_MasterRequestWrite+0xc6>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01a      	b.n	80022ec <I2C_MasterRequestWrite+0xfc>
      }
      else
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e018      	b.n	80022ec <I2C_MasterRequestWrite+0xfc>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	2102      	movs	r1, #2
 80022ca:	f2c0 0101 	movt	r1, #1
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f92b 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <I2C_MasterRequestWrite+0xfa>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d101      	bne.n	80022e6 <I2C_MasterRequestWrite+0xf6>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e002      	b.n	80022ec <I2C_MasterRequestWrite+0xfc>
    }
    else
    {
      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e000      	b.n	80022ec <I2C_MasterRequestWrite+0xfc>
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002318:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d006      	beq.n	800232e <I2C_MasterRequestRead+0x3a>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <I2C_MasterRequestRead+0x3a>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800232c:	d108      	bne.n	8002340 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e00b      	b.n	8002358 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	2b11      	cmp	r3, #17
 8002346:	d107      	bne.n	8002358 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f88f 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e085      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e063      	b.n	8002458 <I2C_MasterRequestRead+0x164>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	11db      	asrs	r3, r3, #7
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0306 	and.w	r3, r3, #6
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f063 030f 	orn	r3, r3, #15
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	2108      	movs	r1, #8
 80023ae:	f2c0 0101 	movt	r1, #1
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f8b9 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <I2C_MasterRequestRead+0xda>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d101      	bne.n	80023ca <I2C_MasterRequestRead+0xd6>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e05a      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
      }
      else
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e058      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ce:	897b      	ldrh	r3, [r7, #10]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	2102      	movs	r1, #2
 80023de:	f2c0 0101 	movt	r1, #1
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8a1 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <I2C_MasterRequestRead+0x10a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d101      	bne.n	80023fa <I2C_MasterRequestRead+0x106>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e042      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
      }
      else
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e040      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002422:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f829 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <I2C_MasterRequestRead+0x14c>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e01f      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	11db      	asrs	r3, r3, #7
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 0306 	and.w	r3, r3, #6
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f063 030e 	orn	r3, r3, #14
 8002450:	b2da      	uxtb	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	2102      	movs	r1, #2
 800245e:	f2c0 0101 	movt	r1, #1
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f861 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <I2C_MasterRequestRead+0x18a>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2b04      	cmp	r3, #4
 8002474:	d101      	bne.n	800247a <I2C_MasterRequestRead+0x186>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e002      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
    }
    else
    {
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e000      	b.n	8002480 <I2C_MasterRequestRead+0x18c>
    }
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002498:	e01f      	b.n	80024da <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d01b      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024a8:	f7fe fdcf 	bl	800104a <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d210      	bcs.n	80024da <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e023      	b.n	8002522 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10d      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x78>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	e00c      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4013      	ands	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	429a      	cmp	r2, r3
 800251e:	d0bc      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002538:	e040      	b.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d11c      	bne.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002562:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2204      	movs	r2, #4
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e03c      	b.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d017      	beq.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002592:	f7fe fd5a 	bl	800104a <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e020      	b.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10c      	bne.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e00b      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d19e      	bne.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002612:	e029      	b.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8ba 	bl	800278e <I2C_IsAcknowledgeFailed>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e029      	b.n	8002678 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d01d      	beq.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002632:	f7fe fd0a 	bl	800104a <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d212      	bcs.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e007      	b.n	8002678 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b80      	cmp	r3, #128	; 0x80
 8002674:	d1ce      	bne.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800268c:	e029      	b.n	80026e2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f87d 	bl	800278e <I2C_IsAcknowledgeFailed>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e029      	b.n	80026f2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d01d      	beq.n	80026e2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ac:	f7fe fccd 	bl	800104a <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d212      	bcs.n	80026e2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e007      	b.n	80026f2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d1ce      	bne.n	800268e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002706:	e036      	b.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d114      	bne.n	8002740 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0210 	mvn.w	r2, #16
 800271e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e022      	b.n	8002786 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002746:	f7fe fc80 	bl	800104a <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20f      	bcs.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0220 	orr.w	r2, r3, #32
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e007      	b.n	8002786 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d1c1      	bne.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a4:	d114      	bne.n	80027d0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ae:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2204      	movs	r2, #4
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80c5 	beq.w	8002980 <HAL_RCC_OscConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b04      	cmp	r3, #4
 8002806:	d012      	beq.n	800282e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11a      	bne.n	8002850 <HAL_RCC_OscConfig+0x74>
 800281a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282c:	d110      	bne.n	8002850 <HAL_RCC_OscConfig+0x74>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 809e 	beq.w	800297e <HAL_RCC_OscConfig+0x1a2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 8099 	bne.w	800297e <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e2f3      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x98>
 800285a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800286c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e052      	b.n	800291a <HAL_RCC_OscConfig+0x13e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d118      	bne.n	80028ae <HAL_RCC_OscConfig+0xd2>
 800287c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002880:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800288e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e035      	b.n	800291a <HAL_RCC_OscConfig+0x13e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b6:	d118      	bne.n	80028ea <HAL_RCC_OscConfig+0x10e>
 80028b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e017      	b.n	800291a <HAL_RCC_OscConfig+0x13e>
 80028ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002906:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002918:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x174>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe fb92 	bl	800104a <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292a:	f7fe fb8e 	bl	800104a <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x160>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e27d      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ed      	beq.n	800292a <HAL_RCC_OscConfig+0x14e>
 800294e:	e017      	b.n	8002980 <HAL_RCC_OscConfig+0x1a4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fb7b 	bl	800104a <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x18e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fb77 	bl	800104a <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e266      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ed      	bne.n	8002958 <HAL_RCC_OscConfig+0x17c>
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8086 	beq.w	8002a9a <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800298e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002992:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	d011      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1e8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d128      	bne.n	8002a04 <HAL_RCC_OscConfig+0x228>
 80029b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11f      	bne.n	8002a04 <HAL_RCC_OscConfig+0x228>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x206>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e22a      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	e04a      	b.n	8002a9a <HAL_RCC_OscConfig+0x2be>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x288>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fb18 	bl	800104a <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fb14 	bl	800104a <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e203      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ed      	beq.n	8002a1e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	00da      	lsls	r2, r3, #3
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e01a      	b.n	8002a9a <HAL_RCC_OscConfig+0x2be>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe faec 	bl	800104a <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a76:	f7fe fae8 	bl	800104a <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1d7      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ed      	bne.n	8002a76 <HAL_RCC_OscConfig+0x29a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03f      	beq.n	8002b26 <HAL_RCC_OscConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01f      	beq.n	8002aee <HAL_RCC_OscConfig+0x312>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8002ab2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fac6 	bl	800104a <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fac2 	bl	800104a <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1b1      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ed      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f000 fbac 	bl	8003244 <RCC_Delay>
 8002aec:	e01b      	b.n	8002b26 <HAL_RCC_OscConfig+0x34a>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aee:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8002af2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe faa6 	bl	800104a <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe faa2 	bl	800104a <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x338>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e191      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ed      	bne.n	8002b02 <HAL_RCC_OscConfig+0x326>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80f4 	beq.w	8002d1c <HAL_RCC_OscConfig+0x540>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x39c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b60:	61da      	str	r2, [r3, #28]
 8002b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d121      	bne.n	8002bce <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fa52 	bl	800104a <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x3e0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe fa4e 	bl	800104a <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3e0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e13d      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002bc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ed      	beq.n	8002baa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x414>
 8002bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	621a      	str	r2, [r3, #32]
 8002bee:	e051      	b.n	8002c94 <HAL_RCC_OscConfig+0x4b8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCC_OscConfig+0x44e>
 8002bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	621a      	str	r2, [r3, #32]
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	e034      	b.n	8002c94 <HAL_RCC_OscConfig+0x4b8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x488>
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c44:	f042 0204 	orr.w	r2, r2, #4
 8002c48:	621a      	str	r2, [r3, #32]
 8002c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	621a      	str	r2, [r3, #32]
 8002c62:	e017      	b.n	8002c94 <HAL_RCC_OscConfig+0x4b8>
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c6c:	6a1a      	ldr	r2, [r3, #32]
 8002c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	621a      	str	r2, [r3, #32]
 8002c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c8e:	f022 0204 	bic.w	r2, r2, #4
 8002c92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d018      	beq.n	8002cce <HAL_RCC_OscConfig+0x4f2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f9d5 	bl	800104a <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x4de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f9d1 	bl	800104a <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x4de>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0be      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0eb      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4c8>
 8002ccc:	e017      	b.n	8002cfe <HAL_RCC_OscConfig+0x522>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fe f9bc 	bl	800104a <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x510>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe f9b8 	bl	800104a <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x510>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0a5      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1eb      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x540>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002d1a:	61da      	str	r2, [r3, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8088 	beq.w	8002e36 <HAL_RCC_OscConfig+0x65a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d07c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x656>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d15c      	bne.n	8002dfa <HAL_RCC_OscConfig+0x61e>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	2360      	movs	r3, #96	; 0x60
 8002d42:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f97e 	bl	800104a <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe f97a 	bl	800104a <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x588>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e069      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ed      	bne.n	8002d52 <HAL_RCC_OscConfig+0x576>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7e:	d10e      	bne.n	8002d9e <HAL_RCC_OscConfig+0x5c2>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	431a      	orrs	r2, r3
 8002db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc2:	2360      	movs	r3, #96	; 0x60
 8002dc4:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f93d 	bl	800104a <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe f939 	bl	800104a <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e028      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x5f8>
 8002df8:	e01d      	b.n	8002e36 <HAL_RCC_OscConfig+0x65a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	2360      	movs	r3, #96	; 0x60
 8002dfc:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe f921 	bl	800104a <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe f91d 	bl	800104a <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e00c      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ed      	bne.n	8002e0c <HAL_RCC_OscConfig+0x630>
 8002e30:	e001      	b.n	8002e36 <HAL_RCC_OscConfig+0x65a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_RCC_OscConfig+0x65c>
    }
  }
  
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d919      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x56>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 0107 	bic.w	r1, r3, #7
 8002e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e12c      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d032      	beq.n	8002f08 <HAL_RCC_ClockConfig+0xc8>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ec0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002ec4:	605a      	str	r2, [r3, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_ClockConfig+0xaa>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ee4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002ee8:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8083 	beq.w	800301c <HAL_RCC_ClockConfig+0x1dc>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10a      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf4>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11b      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x128>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0dd      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x112>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x128>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e0ce      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x128>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0c3      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 0103 	bic.w	r1, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f86:	f7fe f860 	bl	800104a <HAL_GetTick>
 8002f8a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d115      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x180>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_ClockConfig+0x16c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f96:	f7fe f858 	bl	800104a <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0a1      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d1eb      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x156>
 8002fbe:	e02d      	b.n	800301c <HAL_RCC_ClockConfig+0x1dc>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d120      	bne.n	800300a <HAL_RCC_ClockConfig+0x1ca>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fca:	f7fe f83e 	bl	800104a <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e087      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d1eb      	bne.n	8002fca <HAL_RCC_ClockConfig+0x18a>
 8002ff2:	e013      	b.n	800301c <HAL_RCC_ClockConfig+0x1dc>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fe f829 	bl	800104a <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x1ca>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e072      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1eb      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1b4>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800301c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003020:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d219      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x224>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0107 	bic.w	r1, r3, #7
 800303e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800304c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e045      	b.n	80030f0 <HAL_RCC_ClockConfig+0x2b0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003074:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00f      	beq.n	80030ba <HAL_RCC_ClockConfig+0x27a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800309a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 5160 	bic.w	r1, r3, #14336	; 0x3800
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00da      	lsls	r2, r3, #3
 80030ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f81d 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030be:	4601      	mov	r1, r0
 80030c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	f646 5300 	movw	r3, #27904	; 0x6d00
 80030d4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	fa21 f203 	lsr.w	r2, r1, r3
 80030de:	f240 0308 	movw	r3, #8
 80030e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd ff64 	bl	8000fb6 <HAL_InitTick>
  
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b490      	push	{r4, r7}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030fe:	f646 4370 	movw	r3, #27760	; 0x6c70
 8003102:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003106:	1d3c      	adds	r4, r7, #4
 8003108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800310e:	f646 4380 	movw	r3, #27776	; 0x6c80
 8003112:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003132:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b04      	cmp	r3, #4
 8003142:	d002      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x52>
 8003144:	2b08      	cmp	r3, #8
 8003146:	d006      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x5e>
 8003148:	e039      	b.n	80031be <HAL_RCC_GetSysClockFreq+0xc6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800314e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003152:	623b      	str	r3, [r7, #32]
      break;
 8003154:	e039      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0xd2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	0c9b      	lsrs	r3, r3, #18
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003162:	4413      	add	r3, r2
 8003164:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003168:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d019      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xb0>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003178:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0c5b      	lsrs	r3, r3, #17
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003188:	4413      	add	r3, r2
 800318a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800318e:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003196:	f2c0 037a 	movt	r3, #122	; 0x7a
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	e007      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xc0>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80031ae:	f2c0 033d 	movt	r3, #61	; 0x3d
 80031b2:	fb03 f302 	mul.w	r3, r3, r2
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	623b      	str	r3, [r7, #32]
      break;
 80031bc:	e005      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0xd2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031be:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80031c2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80031c6:	623b      	str	r3, [r7, #32]
      break;
 80031c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc90      	pop	{r4, r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031da:	f240 0308 	movw	r3, #8
 80031de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff1 	bl	80031d6 <HAL_RCC_GetHCLKFreq>
 80031f4:	4601      	mov	r1, r0
 80031f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	f646 5310 	movw	r3, #27920	; 0x6d10
 800320a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800320e:	5c9b      	ldrb	r3, [r3, r2]
 8003210:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800321c:	f7ff ffdb 	bl	80031d6 <HAL_RCC_GetHCLKFreq>
 8003220:	4601      	mov	r1, r0
 8003222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003226:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0adb      	lsrs	r3, r3, #11
 800322e:	f003 0207 	and.w	r2, r3, #7
 8003232:	f646 5310 	movw	r3, #27920	; 0x6d10
 8003236:	f6c0 0300 	movt	r3, #2048	; 0x800
 800323a:	5c9b      	ldrb	r3, [r3, r2]
 800323c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}

08003244 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800324c:	f240 0308 	movw	r3, #8
 8003250:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800325a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800325e:	fba3 2302 	umull	r2, r3, r3, r2
 8003262:	0a5b      	lsrs	r3, r3, #9
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800326c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e5a      	subs	r2, r3, #1
 8003272:	60fa      	str	r2, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f9      	bne.n	800326c <RCC_Delay+0x28>
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e01d      	b.n	80032d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f001 fe11 	bl	8004ed0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f000 f8fe 	bl	80034c2 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_TIM_ConfigClockSource+0x1c>
 8003324:	2302      	movs	r3, #2
 8003326:	e0c8      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800334e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d077      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0x144>
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d80e      	bhi.n	8003382 <HAL_TIM_ConfigClockSource+0x76>
 8003364:	2b10      	cmp	r3, #16
 8003366:	f000 808a 	beq.w	800347e <HAL_TIM_ConfigClockSource+0x172>
 800336a:	2b10      	cmp	r3, #16
 800336c:	d802      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x68>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d07e      	beq.n	8003470 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8003372:	e099      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003374:	2b20      	cmp	r3, #32
 8003376:	f000 8089 	beq.w	800348c <HAL_TIM_ConfigClockSource+0x180>
 800337a:	2b30      	cmp	r3, #48	; 0x30
 800337c:	f000 808d 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003380:	e092      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003382:	2b70      	cmp	r3, #112	; 0x70
 8003384:	d016      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0xa8>
 8003386:	2b70      	cmp	r3, #112	; 0x70
 8003388:	d804      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x88>
 800338a:	2b50      	cmp	r3, #80	; 0x50
 800338c:	d040      	beq.n	8003410 <HAL_TIM_ConfigClockSource+0x104>
 800338e:	2b60      	cmp	r3, #96	; 0x60
 8003390:	d04e      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8003392:	e089      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x96>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339e:	d024      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0xde>
    break;
 80033a0:	e082      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0207 	bic.w	r2, r2, #7
 80033b0:	609a      	str	r2, [r3, #8]
    break;
 80033b2:	e079      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f000 f976 	bl	80036b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	609a      	str	r2, [r3, #8]
    break;
 80033e8:	e05e      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f000 f95b 	bl	80036b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800340c:	609a      	str	r2, [r3, #8]
    break;
 800340e:	e04b      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	461a      	mov	r2, r3
 800341e:	f000 f8c5 	bl	80035ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2150      	movs	r1, #80	; 0x50
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f924 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 800342e:	e03b      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	461a      	mov	r2, r3
 800343e:	f000 f8e7 	bl	8003610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2160      	movs	r1, #96	; 0x60
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f914 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 800344e:	e02b      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	461a      	mov	r2, r3
 800345e:	f000 f8a5 	bl	80035ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2140      	movs	r1, #64	; 0x40
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f904 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 800346e:	e01b      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f8fd 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 800347c:	e014      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2110      	movs	r1, #16
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f8f6 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 800348a:	e00d      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2120      	movs	r1, #32
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f8ef 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 8003498:	e006      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2130      	movs	r1, #48	; 0x30
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f8e8 	bl	8003676 <TIM_ITRx_SetConfig>
    break;
 80034a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80034dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d011      	beq.n	8003508 <TIM_Base_SetConfig+0x46>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d00d      	beq.n	8003508 <TIM_Base_SetConfig+0x46>
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d006      	beq.n	8003508 <TIM_Base_SetConfig+0x46>
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003500:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003504:	429a      	cmp	r2, r3
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003520:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003524:	429a      	cmp	r2, r3
 8003526:	d011      	beq.n	800354c <TIM_Base_SetConfig+0x8a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d00d      	beq.n	800354c <TIM_Base_SetConfig+0x8a>
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800353a:	429a      	cmp	r2, r3
 800353c:	d006      	beq.n	800354c <TIM_Base_SetConfig+0x8a>
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003544:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003548:	429a      	cmp	r2, r3
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003564:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800358c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003590:	429a      	cmp	r2, r3
 8003592:	d103      	bne.n	800359c <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	615a      	str	r2, [r3, #20]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0210 	bic.w	r2, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003642:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	031b      	lsls	r3, r3, #12
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	f043 0307 	orr.w	r3, r3, #7
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	021a      	lsls	r2, r3, #8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	431a      	orrs	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800370a:	2302      	movs	r3, #2
 800370c:	e032      	b.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800372c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e03f      	b.n	8003810 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f001 fbb9 	bl	8004f1c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2224      	movs	r2, #36	; 0x24
 80037ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c0:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fbe7 	bl	8003f96 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	f040 8083 	bne.w	8003940 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_UART_Transmit+0x2e>
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07b      	b.n	8003942 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_UART_Transmit+0x40>
 8003854:	2302      	movs	r3, #2
 8003856:	e074      	b.n	8003942 <HAL_UART_Transmit+0x12a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2221      	movs	r2, #33	; 0x21
 800386a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800386e:	f7fd fbec 	bl	800104a <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003880:	e042      	b.n	8003908 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003898:	d122      	bne.n	80038e0 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fa0d 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e046      	b.n	8003942 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d103      	bne.n	80038d8 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3302      	adds	r3, #2
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	e017      	b.n	8003908 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	3301      	adds	r3, #1
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	e013      	b.n	8003908 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f9ea 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e023      	b.n	8003942 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	60ba      	str	r2, [r7, #8]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1b7      	bne.n	8003882 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f9d1 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e00a      	b.n	8003942 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af02      	add	r7, sp, #8
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	f040 8090 	bne.w	8003a8c <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Receive+0x2e>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e088      	b.n	8003a8e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_UART_Receive+0x40>
 8003986:	2302      	movs	r3, #2
 8003988:	e081      	b.n	8003a8e <HAL_UART_Receive+0x144>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2222      	movs	r2, #34	; 0x22
 800399c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039a0:	f7fd fb53 	bl	800104a <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80039b2:	e05c      	b.n	8003a6e <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d12b      	bne.n	8003a24 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2120      	movs	r1, #32
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f974 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e053      	b.n	8003a8e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3302      	adds	r3, #2
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	e030      	b.n	8003a6e <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	e024      	b.n	8003a6e <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f948 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e027      	b.n	8003a8e <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	60ba      	str	r2, [r7, #8]
 8003a52:	b2ca      	uxtb	r2, r1
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e00a      	b.n	8003a6e <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d19d      	bne.n	80039b4 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b088      	sub	sp, #32
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10d      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x52>
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9d7 	bl	8003e94 <UART_Receive_IT>
      return;
 8003ae6:	e0cf      	b.n	8003c88 <HAL_UART_IRQHandler+0x1f2>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80ae 	beq.w	8003c4c <HAL_UART_IRQHandler+0x1b6>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <HAL_UART_IRQHandler+0x70>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a3 	beq.w	8003c4c <HAL_UART_IRQHandler+0x1b6>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_UART_IRQHandler+0x90>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_UART_IRQHandler+0xb0>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_UART_IRQHandler+0xd0>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_UART_IRQHandler+0xf0>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	f043 0208 	orr.w	r2, r3, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d07b      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1f0>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x112>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f976 	bl	8003e94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x13a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d034      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8c1 	bl	8003d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d026      	beq.n	8003c32 <HAL_UART_IRQHandler+0x19c>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d016      	beq.n	8003c2a <HAL_UART_IRQHandler+0x194>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c00:	f643 5393 	movw	r3, #15763	; 0x3d93
 8003c04:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003c08:	6353      	str	r3, [r2, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fb3c 	bl	800128c <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_UART_IRQHandler+0x1b2>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00e      	b.n	8003c48 <HAL_UART_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f841 	bl	8003cb2 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00a      	b.n	8003c48 <HAL_UART_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f83d 	bl	8003cb2 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e006      	b.n	8003c48 <HAL_UART_IRQHandler+0x1b2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f839 	bl	8003cb2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c46:	e01e      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f0>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	bf00      	nop
    return;
 8003c4a:	e01c      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f0>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_UART_IRQHandler+0x1d2>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_UART_IRQHandler+0x1d2>
  {
    UART_Transmit_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8aa 	bl	8003dba <UART_Transmit_IT>
    return;
 8003c66:	e00f      	b.n	8003c88 <HAL_UART_IRQHandler+0x1f2>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_UART_IRQHandler+0x1f2>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_UART_IRQHandler+0x1f2>
  {
    UART_EndTransmit_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8f1 	bl	8003e64 <UART_EndTransmit_IT>
    return;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <HAL_UART_IRQHandler+0x1f2>
    return;
 8003c86:	bf00      	nop
  }
}
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003cd4:	e02c      	b.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d028      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce4:	f7fd f9b1 	bl	800104a <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d21d      	bcs.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e00f      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d0c3      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff ff80 	bl	8003cb2 <HAL_UART_ErrorCallback>
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b21      	cmp	r3, #33	; 0x21
 8003dcc:	d144      	bne.n	8003e58 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d11a      	bne.n	8003e0e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dec:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d105      	bne.n	8003e02 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	1c9a      	adds	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]
 8003e00:	e00e      	b.n	8003e20 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	621a      	str	r2, [r3, #32]
 8003e0c:	e008      	b.n	8003e20 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	1c59      	adds	r1, r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6211      	str	r1, [r2, #32]
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10f      	bne.n	8003e54 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff02 	bl	8003c8e <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b22      	cmp	r3, #34	; 0x22
 8003ea6:	d171      	bne.n	8003f8c <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d123      	bne.n	8003efa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
 8003edc:	e029      	b.n	8003f32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef8:	e01b      	b.n	8003f32 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6858      	ldr	r0, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	1c59      	adds	r1, r3, #1
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6291      	str	r1, [r2, #40]	; 0x28
 8003f12:	b2c2      	uxtb	r2, r0
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e00c      	b.n	8003f32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	1c58      	adds	r0, r3, #1
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	6288      	str	r0, [r1, #40]	; 0x28
 8003f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d120      	bne.n	8003f88 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0220 	bic.w	r2, r2, #32
 8003f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f64:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe8e 	bl	8003ca0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e002      	b.n	8003f8e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f96:	b5b0      	push	{r4, r5, r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fd8:	f023 030c 	bic.w	r3, r3, #12
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004004:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004008:	429a      	cmp	r2, r3
 800400a:	d17c      	bne.n	8004106 <UART_SetConfig+0x170>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800400c:	f7ff f904 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 8004010:	4602      	mov	r2, r0
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009a      	lsls	r2, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	fbb2 f2f3 	udiv	r2, r2, r3
 8004026:	f248 531f 	movw	r3, #34079	; 0x851f
 800402a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800402e:	fba3 2302 	umull	r2, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	011c      	lsls	r4, r3, #4
 8004036:	f7ff f8ef 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 800403a:	4602      	mov	r2, r0
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009a      	lsls	r2, r3, #2
 8004044:	441a      	add	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004050:	f7ff f8e2 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 8004054:	4602      	mov	r2, r0
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009a      	lsls	r2, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	fbb2 f2f3 	udiv	r2, r2, r3
 800406a:	f248 531f 	movw	r3, #34079	; 0x851f
 800406e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004072:	fba3 2302 	umull	r2, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2264      	movs	r2, #100	; 0x64
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	1aeb      	subs	r3, r5, r3
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004086:	f248 531f 	movw	r3, #34079	; 0x851f
 800408a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800408e:	fba3 2302 	umull	r2, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004098:	441c      	add	r4, r3
 800409a:	f7ff f8bd 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80040b4:	f7ff f8b0 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	009a      	lsls	r2, r3, #2
 80040c2:	441a      	add	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ce:	f248 531f 	movw	r3, #34079	; 0x851f
 80040d2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80040d6:	fba3 2302 	umull	r2, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2264      	movs	r2, #100	; 0x64
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	1aeb      	subs	r3, r5, r3
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ea:	f248 531f 	movw	r3, #34079	; 0x851f
 80040ee:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80040f2:	fba3 2302 	umull	r2, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4422      	add	r2, r4
 8004102:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004104:	e07b      	b.n	80041fe <UART_SetConfig+0x268>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004106:	f7ff f871 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 800410a:	4602      	mov	r2, r0
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004120:	f248 531f 	movw	r3, #34079	; 0x851f
 8004124:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004128:	fba3 2302 	umull	r2, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	011c      	lsls	r4, r3, #4
 8004130:	f7ff f85c 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8004134:	4602      	mov	r2, r0
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009a      	lsls	r2, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	fbb2 f5f3 	udiv	r5, r2, r3
 800414a:	f7ff f84f 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 800414e:	4602      	mov	r2, r0
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009a      	lsls	r2, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fbb2 f2f3 	udiv	r2, r2, r3
 8004164:	f248 531f 	movw	r3, #34079	; 0x851f
 8004168:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800416c:	fba3 2302 	umull	r2, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	2264      	movs	r2, #100	; 0x64
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	1aeb      	subs	r3, r5, r3
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004180:	f248 531f 	movw	r3, #34079	; 0x851f
 8004184:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004188:	fba3 2302 	umull	r2, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004192:	441c      	add	r4, r3
 8004194:	f7ff f82a 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8004198:	4602      	mov	r2, r0
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009a      	lsls	r2, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80041ae:	f7ff f81d 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	f248 531f 	movw	r3, #34079	; 0x851f
 80041cc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80041d0:	fba3 2302 	umull	r2, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2264      	movs	r2, #100	; 0x64
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	1aeb      	subs	r3, r5, r3
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041e4:	f248 531f 	movw	r3, #34079	; 0x851f
 80041e8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80041ec:	fba3 2302 	umull	r2, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	f003 020f 	and.w	r2, r3, #15
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4422      	add	r2, r4
 80041fc:	609a      	str	r2, [r3, #8]
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bdb0      	pop	{r4, r5, r7, pc}

08004206 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800420c:	f7fc feba 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004210:	f000 f820 	bl	8004254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004214:	f000 f95f 	bl	80044d6 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004218:	f000 f91a 	bl	8004450 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800421c:	f000 f85f 	bl	80042de <MX_I2C1_Init>
  MX_TIM1_Init();
 8004220:	f000 f8a9 	bl	8004376 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 8004224:	f000 fb38 	bl	8004898 <init_MPU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char ch;
  while(HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 100)!=HAL_OK);
 8004228:	bf00      	nop
 800422a:	1df9      	adds	r1, r7, #7
 800422c:	2364      	movs	r3, #100	; 0x64
 800422e:	2201      	movs	r2, #1
 8004230:	f240 205c 	movw	r0, #604	; 0x25c
 8004234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004238:	f7ff fb87 	bl	800394a <HAL_UART_Receive>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f3      	bne.n	800422a <main+0x24>
  HAL_TIM_Base_Start(&htim1);
 8004242:	f240 209c 	movw	r0, #668	; 0x29c
 8004246:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800424a:	f7ff f845 	bl	80032d8 <HAL_TIM_Base_Start>
  calib_MPU();
 800424e:	f000 fbe1 	bl	8004a14 <calib_MPU>
  while (1)
 8004252:	e7fe      	b.n	8004252 <main+0x4c>

08004254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b090      	sub	sp, #64	; 0x40
 8004258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800425a:	f107 0318 	add.w	r3, r7, #24
 800425e:	2228      	movs	r2, #40	; 0x28
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f000 ffd8 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	60da      	str	r2, [r3, #12]
 8004274:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800427a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800427e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004280:	2300      	movs	r3, #0
 8004282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004284:	2301      	movs	r3, #1
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004288:	2302      	movs	r3, #2
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800428c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8004292:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004298:	f107 0318 	add.w	r3, r7, #24
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fa9d 	bl	80027dc <HAL_RCC_OscConfig>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80042a8:	f000 f992 	bl	80045d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042ac:	230f      	movs	r3, #15
 80042ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042b0:	2302      	movs	r3, #2
 80042b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fdba 	bl	8002e40 <HAL_RCC_ClockConfig>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80042d2:	f000 f97d 	bl	80045d0 <Error_Handler>
  }
}
 80042d6:	bf00      	nop
 80042d8:	3740      	adds	r7, #64	; 0x40
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042e2:	f240 2208 	movw	r2, #520	; 0x208
 80042e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80042ea:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80042ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042f2:	6013      	str	r3, [r2, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80042f4:	f240 2208 	movw	r2, #520	; 0x208
 80042f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80042fc:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8004300:	f2c0 0301 	movt	r3, #1
 8004304:	6053      	str	r3, [r2, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004306:	f240 2308 	movw	r3, #520	; 0x208
 800430a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004312:	f240 2308 	movw	r3, #520	; 0x208
 8004316:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800431e:	f240 2308 	movw	r3, #520	; 0x208
 8004322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800432a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800432c:	f240 2308 	movw	r3, #520	; 0x208
 8004330:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004338:	f240 2308 	movw	r3, #520	; 0x208
 800433c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004340:	2200      	movs	r2, #0
 8004342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004344:	f240 2308 	movw	r3, #520	; 0x208
 8004348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800434c:	2200      	movs	r2, #0
 800434e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004350:	f240 2308 	movw	r3, #520	; 0x208
 8004354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004358:	2200      	movs	r2, #0
 800435a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800435c:	f240 2008 	movw	r0, #520	; 0x208
 8004360:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004364:	f7fd f9ba 	bl	80016dc <HAL_I2C_Init>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_I2C1_Init+0x94>
  {
    Error_Handler();
 800436e:	f000 f92f 	bl	80045d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}

08004376 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800438a:	463b      	mov	r3, r7
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004392:	f240 229c 	movw	r2, #668	; 0x29c
 8004396:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800439a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800439e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80043a2:	6013      	str	r3, [r2, #0]
  htim1.Init.Prescaler = 63999;
 80043a4:	f240 239c 	movw	r3, #668	; 0x29c
 80043a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043ac:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80043b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b2:	f240 239c 	movw	r3, #668	; 0x29c
 80043b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80043be:	f240 239c 	movw	r3, #668	; 0x29c
 80043c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043c6:	2200      	movs	r2, #0
 80043c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ca:	f240 239c 	movw	r3, #668	; 0x29c
 80043ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043d6:	f240 239c 	movw	r3, #668	; 0x29c
 80043da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e2:	f240 239c 	movw	r3, #668	; 0x29c
 80043e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043ea:	2200      	movs	r2, #0
 80043ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043ee:	f240 209c 	movw	r0, #668	; 0x29c
 80043f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043f6:	f7fe ff44 	bl	8003282 <HAL_TIM_Base_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8004400:	f000 f8e6 	bl	80045d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800440a:	f107 0308 	add.w	r3, r7, #8
 800440e:	4619      	mov	r1, r3
 8004410:	f240 209c 	movw	r0, #668	; 0x29c
 8004414:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004418:	f7fe ff78 	bl	800330c <HAL_TIM_ConfigClockSource>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8004422:	f000 f8d5 	bl	80045d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800442e:	463b      	mov	r3, r7
 8004430:	4619      	mov	r1, r3
 8004432:	f240 209c 	movw	r0, #668	; 0x29c
 8004436:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800443a:	f7ff f95c 	bl	80036f6 <HAL_TIMEx_MasterConfigSynchronization>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004444:	f000 f8c4 	bl	80045d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004448:	bf00      	nop
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004454:	f240 225c 	movw	r2, #604	; 0x25c
 8004458:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800445c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004460:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004464:	6013      	str	r3, [r2, #0]
  huart1.Init.BaudRate = 115200;
 8004466:	f240 235c 	movw	r3, #604	; 0x25c
 800446a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800446e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004472:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004474:	f240 235c 	movw	r3, #604	; 0x25c
 8004478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004480:	f240 235c 	movw	r3, #604	; 0x25c
 8004484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004488:	2200      	movs	r2, #0
 800448a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800448c:	f240 235c 	movw	r3, #604	; 0x25c
 8004490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004498:	f240 235c 	movw	r3, #604	; 0x25c
 800449c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044a0:	220c      	movs	r2, #12
 80044a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044a4:	f240 235c 	movw	r3, #604	; 0x25c
 80044a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044b0:	f240 235c 	movw	r3, #604	; 0x25c
 80044b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044b8:	2200      	movs	r2, #0
 80044ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044bc:	f240 205c 	movw	r0, #604	; 0x25c
 80044c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044c4:	f7ff f95b 	bl	800377e <HAL_UART_Init>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80044ce:	f000 f87f 	bl	80045d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b088      	sub	sp, #32
 80044da:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044dc:	f107 0310 	add.w	r3, r7, #16
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80044f2:	699a      	ldr	r2, [r3, #24]
 80044f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80044fc:	f042 0210 	orr.w	r2, r2, #16
 8004500:	619a      	str	r2, [r3, #24]
 8004502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004506:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004518:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004522:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004526:	f042 0220 	orr.w	r2, r2, #32
 800452a:	619a      	str	r2, [r3, #24]
 800452c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004530:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800453e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004542:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004550:	f042 0204 	orr.w	r2, r2, #4
 8004554:	619a      	str	r2, [r3, #24]
 8004556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800455a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800456c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004576:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800457a:	f042 0208 	orr.w	r2, r2, #8
 800457e:	619a      	str	r2, [r3, #24]
 8004580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004592:	2200      	movs	r2, #0
 8004594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004598:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800459c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045a0:	f7fd f884 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80045a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045aa:	2301      	movs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2302      	movs	r3, #2
 80045b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b6:	f107 0310 	add.w	r3, r7, #16
 80045ba:	4619      	mov	r1, r3
 80045bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045c0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045c4:	f7fc fed8 	bl	8001378 <HAL_GPIO_Init>

}
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b094      	sub	sp, #80	; 0x50
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
	char * ptr = buf;
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	char * p = ptr;
 80045f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f2:	64bb      	str	r3, [r7, #72]	; 0x48
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	2b0a      	cmp	r3, #10
 80045f8:	dd01      	ble.n	80045fe <ftoa+0x22>
		precision = MAX_PRECISION;
 80045fa:	230a      	movs	r3, #10
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28

	// sign stuff
	if (f < 0)
 80045fe:	2300      	movs	r3, #0
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800460e:	f7fc f9d5 	bl	80009bc <__aeabi_dcmplt>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <ftoa+0x52>
	{
		f = -f;
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
		*ptr++ = '-';
 8004624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004626:	1c53      	adds	r3, r2, #1
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800462a:	232d      	movs	r3, #45	; 0x2d
 800462c:	7013      	strb	r3, [r2, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	da74      	bge.n	800471e <ftoa+0x142>
	{
		if (f < 1.0) precision = 6;
 8004634:	2400      	movs	r4, #0
 8004636:	2500      	movs	r5, #0
 8004638:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004644:	f7fc f9ba 	bl	80009bc <__aeabi_dcmplt>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <ftoa+0x78>
 800464e:	2306      	movs	r3, #6
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
 8004652:	e064      	b.n	800471e <ftoa+0x142>
		else if (f < 10.0) precision = 5;
 8004654:	f04f 0800 	mov.w	r8, #0
 8004658:	f04f 0900 	mov.w	r9, #0
 800465c:	f2c4 0924 	movt	r9, #16420	; 0x4024
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004668:	f7fc f9a8 	bl	80009bc <__aeabi_dcmplt>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <ftoa+0x9c>
 8004672:	2305      	movs	r3, #5
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
 8004676:	e052      	b.n	800471e <ftoa+0x142>
		else if (f < 100.0) precision = 4;
 8004678:	f04f 0a00 	mov.w	sl, #0
 800467c:	f04f 0b00 	mov.w	fp, #0
 8004680:	f2c4 0b59 	movt	fp, #16473	; 0x4059
 8004684:	4652      	mov	r2, sl
 8004686:	465b      	mov	r3, fp
 8004688:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800468c:	f7fc f996 	bl	80009bc <__aeabi_dcmplt>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <ftoa+0xc0>
 8004696:	2304      	movs	r3, #4
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	e040      	b.n	800471e <ftoa+0x142>
		else if (f < 1000.0) precision = 3;
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f2c4 038f 	movt	r3, #16527	; 0x408f
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046b6:	f7fc f981 	bl	80009bc <__aeabi_dcmplt>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <ftoa+0xea>
 80046c0:	2303      	movs	r3, #3
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c4:	e02b      	b.n	800471e <ftoa+0x142>
		else if (f < 10000.0) precision = 2;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f2c4 03c3 	movt	r3, #16579	; 0x40c3
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046e0:	f7fc f96c 	bl	80009bc <__aeabi_dcmplt>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <ftoa+0x114>
 80046ea:	2302      	movs	r3, #2
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ee:	e016      	b.n	800471e <ftoa+0x142>
		else if (f < 100000.0) precision = 1;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f2c4 03f8 	movt	r3, #16632	; 0x40f8
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004706:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800470a:	f7fc f957 	bl	80009bc <__aeabi_dcmplt>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <ftoa+0x13e>
 8004714:	2301      	movs	r3, #1
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
 8004718:	e001      	b.n	800471e <ftoa+0x142>
		else precision = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// round value according the precision
	if (precision)
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d011      	beq.n	8004748 <ftoa+0x16c>
		f += rounders[precision];
 8004724:	f646 43a8 	movw	r3, #27816	; 0x6ca8
 8004728:	f6c0 0300 	movt	r3, #2048	; 0x800
 800472c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472e:	00d2      	lsls	r2, r2, #3
 8004730:	4413      	add	r3, r2
 8004732:	cb18      	ldmia	r3, {r3, r4}
 8004734:	461a      	mov	r2, r3
 8004736:	4623      	mov	r3, r4
 8004738:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800473c:	f7fb fd16 	bl	800016c <__adddf3>
 8004740:	4603      	mov	r3, r0
 8004742:	460c      	mov	r4, r1
 8004744:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// integer part...
	intPart = f;
 8004748:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800474c:	f7fc f974 	bl	8000a38 <__aeabi_d2iz>
 8004750:	4603      	mov	r3, r0
 8004752:	647b      	str	r3, [r7, #68]	; 0x44
	f -= intPart;
 8004754:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004756:	f7fb fe55 	bl	8000404 <__aeabi_i2d>
 800475a:	4603      	mov	r3, r0
 800475c:	460c      	mov	r4, r1
 800475e:	461a      	mov	r2, r3
 8004760:	4623      	mov	r3, r4
 8004762:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004766:	f7fb fcff 	bl	8000168 <__aeabi_dsub>
 800476a:	4603      	mov	r3, r0
 800476c:	460c      	mov	r4, r1
 800476e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	if (!intPart)
 8004772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <ftoa+0x1a8>
		*ptr++ = '0';
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800477e:	2230      	movs	r2, #48	; 0x30
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e040      	b.n	8004806 <ftoa+0x22a>
	else
	{
		// save start pointer
		p = ptr;
 8004784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48

		// convert (reverse order)
		while (intPart)
 8004788:	e020      	b.n	80047cc <ftoa+0x1f0>
		{
			*p++ = '0' + intPart % 10;
 800478a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800478c:	f246 6367 	movw	r3, #26215	; 0x6667
 8004790:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8004794:	fb83 1302 	smull	r1, r3, r3, r2
 8004798:	1099      	asrs	r1, r3, #2
 800479a:	17d3      	asrs	r3, r2, #31
 800479c:	1ac9      	subs	r1, r1, r3
 800479e:	460b      	mov	r3, r1
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	1ad1      	subs	r1, r2, r3
 80047a8:	b2ca      	uxtb	r2, r1
 80047aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ac:	1c59      	adds	r1, r3, #1
 80047ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80047b0:	3230      	adds	r2, #48	; 0x30
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80047b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b8:	f246 6367 	movw	r3, #26215	; 0x6667
 80047bc:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80047c0:	fb83 1302 	smull	r1, r3, r3, r2
 80047c4:	1099      	asrs	r1, r3, #2
 80047c6:	17d3      	asrs	r3, r2, #31
 80047c8:	1acb      	subs	r3, r1, r3
 80047ca:	647b      	str	r3, [r7, #68]	; 0x44
		while (intPart)
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1db      	bne.n	800478a <ftoa+0x1ae>
		}

		// save end pos
		p1 = p;
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40

		// reverse result
		while (p > ptr)
 80047d6:	e010      	b.n	80047fa <ftoa+0x21e>
		{
			c = *--p;
 80047d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047da:	3b01      	subs	r3, #1
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			*p = *ptr;
 80047e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ec:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80047f4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80047f8:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80047fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d8ea      	bhi.n	80047d8 <ftoa+0x1fc>
		}

		// restore end pos
		ptr = p1;
 8004802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004804:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	// decimal part
	if (precision)
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d03c      	beq.n	8004886 <ftoa+0x2aa>
	{
		// place decimal point
		*ptr++ = '.';
 800480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004812:	222e      	movs	r2, #46	; 0x2e
 8004814:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8004816:	e031      	b.n	800487c <ftoa+0x2a0>
		{
			f *= 10.0;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004830:	f7fb fe52 	bl	80004d8 <__aeabi_dmul>
 8004834:	4603      	mov	r3, r0
 8004836:	460c      	mov	r4, r1
 8004838:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			c = f;
 800483c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004840:	f7fc f922 	bl	8000a88 <__aeabi_d2uiz>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			*ptr++ = '0' + c;
 800484a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004850:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004854:	3230      	adds	r2, #48	; 0x30
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
			f -= c;
 800485a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fdd0 	bl	8000404 <__aeabi_i2d>
 8004864:	4603      	mov	r3, r0
 8004866:	460c      	mov	r4, r1
 8004868:	461a      	mov	r2, r3
 800486a:	4623      	mov	r3, r4
 800486c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004870:	f7fb fc7a 	bl	8000168 <__aeabi_dsub>
 8004874:	4603      	mov	r3, r0
 8004876:	460c      	mov	r4, r1
 8004878:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		while (precision--)
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	1e5a      	subs	r2, r3, #1
 8004880:	62ba      	str	r2, [r7, #40]	; 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1c8      	bne.n	8004818 <ftoa+0x23c>
		}
	}

	// terminating zero
	*ptr = 0;
 8004886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]

	return buf;
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800488e:	4618      	mov	r0, r3
 8004890:	3750      	adds	r7, #80	; 0x50
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004898 <init_MPU>:

char init_MPU(){
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b08c      	sub	sp, #48	; 0x30
 800489c:	af02      	add	r7, sp, #8
    char status = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80048a4:	23d0      	movs	r3, #208	; 0xd0
 80048a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t register_address = WHO_AM_I_REG;
 80048aa:	2375      	movs	r3, #117	; 0x75
 80048ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 80048b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048b4:	b299      	uxth	r1, r3
 80048b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ba:	2203      	movs	r2, #3
 80048bc:	f240 2008 	movw	r0, #520	; 0x208
 80048c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80048c4:	f7fd fb60 	bl	8001f88 <HAL_I2C_IsDeviceReady>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <init_MPU+0x4a>
    	strcpy( rx_data, "No Device \r \n");
 80048ce:	1d3a      	adds	r2, r7, #4
 80048d0:	f646 4384 	movw	r3, #27780	; 0x6c84
 80048d4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80048d8:	4614      	mov	r4, r2
 80048da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048dc:	c407      	stmia	r4!, {r0, r1, r2}
 80048de:	8023      	strh	r3, [r4, #0]
 80048e0:	e00a      	b.n	80048f8 <init_MPU+0x60>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 80048e2:	1d3a      	adds	r2, r7, #4
 80048e4:	f646 4394 	movw	r3, #27796	; 0x6c94
 80048e8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80048ec:	4614      	mov	r4, r2
 80048ee:	461d      	mov	r5, r3
 80048f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	7023      	strb	r3, [r4, #0]
      }
    HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
 80048f8:	1d39      	adds	r1, r7, #4
 80048fa:	2364      	movs	r3, #100	; 0x64
 80048fc:	2219      	movs	r2, #25
 80048fe:	f240 205c 	movw	r0, #604	; 0x25c
 8004902:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004906:	f7fe ff87 	bl	8003818 <HAL_UART_Transmit>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 800490a:	236b      	movs	r3, #107	; 0x6b
 800490c:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8004916:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800491a:	b299      	uxth	r1, r3
 800491c:	f107 0220 	add.w	r2, r7, #32
 8004920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2302      	movs	r3, #2
 8004928:	f240 2008 	movw	r0, #520	; 0x208
 800492c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004930:	f7fc ffe2 	bl	80018f8 <HAL_I2C_Master_Transmit>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <init_MPU+0xa8>
	{
		status = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8004940:	2319      	movs	r3, #25
 8004942:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 8004946:	2307      	movs	r3, #7
 8004948:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800494c:	bf00      	nop
 800494e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004952:	b299      	uxth	r1, r3
 8004954:	f107 0220 	add.w	r2, r7, #32
 8004958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2302      	movs	r3, #2
 8004960:	f240 2008 	movw	r0, #520	; 0x208
 8004964:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004968:	f7fc ffc6 	bl	80018f8 <HAL_I2C_Master_Transmit>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ed      	bne.n	800494e <init_MPU+0xb6>

	d[0] = GYRO_CONFIG;
 8004972:	231b      	movs	r3, #27
 8004974:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 8004978:	2318      	movs	r3, #24
 800497a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800497e:	bf00      	nop
 8004980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004984:	b299      	uxth	r1, r3
 8004986:	f107 0220 	add.w	r2, r7, #32
 800498a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2302      	movs	r3, #2
 8004992:	f240 2008 	movw	r0, #520	; 0x208
 8004996:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800499a:	f7fc ffad 	bl	80018f8 <HAL_I2C_Master_Transmit>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ed      	bne.n	8004980 <init_MPU+0xe8>

	d[0] = ACCEL_CONFIG;
 80049a4:	231c      	movs	r3, #28
 80049a6:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80049b0:	bf00      	nop
 80049b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049b6:	b299      	uxth	r1, r3
 80049b8:	f107 0220 	add.w	r2, r7, #32
 80049bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2302      	movs	r3, #2
 80049c4:	f240 2008 	movw	r0, #520	; 0x208
 80049c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80049cc:	f7fc ff94 	bl	80018f8 <HAL_I2C_Master_Transmit>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ed      	bne.n	80049b2 <init_MPU+0x11a>

	d[0] = INIT_ENB;
 80049d6:	2338      	movs	r3, #56	; 0x38
 80049d8:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80049e2:	bf00      	nop
 80049e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049e8:	b299      	uxth	r1, r3
 80049ea:	f107 0220 	add.w	r2, r7, #32
 80049ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2302      	movs	r3, #2
 80049f6:	f240 2008 	movw	r0, #520	; 0x208
 80049fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80049fe:	f7fc ff7b 	bl	80018f8 <HAL_I2C_Master_Transmit>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ed      	bne.n	80049e4 <init_MPU+0x14c>

  return status;
 8004a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	; 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bdb0      	pop	{r4, r5, r7, pc}

08004a14 <calib_MPU>:
//    ftoa(Gyro_z, buffer, 2);
//    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
}

void calib_MPU(){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b098      	sub	sp, #96	; 0x60
 8004a18:	af02      	add	r7, sp, #8
	mpu_data_processed data1;
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch;

		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8004a1a:	233b      	movs	r3, #59	; 0x3b
 8004a1c:	72fb      	strb	r3, [r7, #11]
		uint8_t device_address = MPU_ADDRESS;
 8004a1e:	23d0      	movs	r3, #208	; 0xd0
 8004a20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	    uint8_t register_address = WHO_AM_I_REG;
 8004a24:	2375      	movs	r3, #117	; 0x75
 8004a26:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
     for(int i = 0; i<100;i++){
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2e:	e08e      	b.n	8004b4e <calib_MPU+0x13a>
		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8004a30:	bf00      	nop
 8004a32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004a36:	b299      	uxth	r1, r3
 8004a38:	f107 020b 	add.w	r2, r7, #11
 8004a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	2301      	movs	r3, #1
 8004a44:	f240 2008 	movw	r0, #520	; 0x208
 8004a48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004a4c:	f7fc ff54 	bl	80018f8 <HAL_I2C_Master_Transmit>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ed      	bne.n	8004a32 <calib_MPU+0x1e>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8004a56:	bf00      	nop
 8004a58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004a5c:	b299      	uxth	r1, r3
 8004a5e:	f107 020c 	add.w	r2, r7, #12
 8004a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	230e      	movs	r3, #14
 8004a6a:	f240 2008 	movw	r0, #520	; 0x208
 8004a6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004a72:	f7fd f84e 	bl	8001b12 <HAL_I2C_Master_Receive>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ed      	bne.n	8004a58 <calib_MPU+0x44>

		Acc_x += (int16_t)(data[0] << 8 | data[1]);
 8004a7c:	7b3b      	ldrb	r3, [r7, #12]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b21a      	sxth	r2, r3
 8004a82:	7b7b      	ldrb	r3, [r7, #13]
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b21b      	sxth	r3, r3
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc f8d6 	bl	8000c3c <__aeabi_i2f>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4619      	mov	r1, r3
 8004a94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004a96:	f7fc f81d 	bl	8000ad4 <__addsf3>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	657b      	str	r3, [r7, #84]	; 0x54
		Acc_y += (int16_t)(data[2] << 8 | data[3]);
 8004a9e:	7bbb      	ldrb	r3, [r7, #14]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	b21a      	sxth	r2, r3
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b21b      	sxth	r3, r3
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc f8c5 	bl	8000c3c <__aeabi_i2f>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004ab8:	f7fc f80c 	bl	8000ad4 <__addsf3>
 8004abc:	4603      	mov	r3, r0
 8004abe:	653b      	str	r3, [r7, #80]	; 0x50
		Acc_z += (int16_t)(data[4] << 8 | data[5]);
 8004ac0:	7c3b      	ldrb	r3, [r7, #16]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	7c7b      	ldrb	r3, [r7, #17]
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	b21b      	sxth	r3, r3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc f8b4 	bl	8000c3c <__aeabi_i2f>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004ada:	f7fb fffb 	bl	8000ad4 <__addsf3>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	64fb      	str	r3, [r7, #76]	; 0x4c

       //	    temp = (int16_t)(data[6] << 8 | data[7]);

	    Gyro_x += (int16_t)(data[8] << 8 | data[9]);
 8004ae2:	7d3b      	ldrb	r3, [r7, #20]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	b21a      	sxth	r2, r3
 8004ae8:	7d7b      	ldrb	r3, [r7, #21]
 8004aea:	b21b      	sxth	r3, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	b21b      	sxth	r3, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fc f8a3 	bl	8000c3c <__aeabi_i2f>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4619      	mov	r1, r3
 8004afa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004afc:	f7fb ffea 	bl	8000ad4 <__addsf3>
 8004b00:	4603      	mov	r3, r0
 8004b02:	64bb      	str	r3, [r7, #72]	; 0x48
	    Gyro_y += (int16_t)(data[10] << 8 | data[11]);
 8004b04:	7dbb      	ldrb	r3, [r7, #22]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	b21a      	sxth	r2, r3
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	b21b      	sxth	r3, r3
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	b21b      	sxth	r3, r3
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc f892 	bl	8000c3c <__aeabi_i2f>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b1e:	f7fb ffd9 	bl	8000ad4 <__addsf3>
 8004b22:	4603      	mov	r3, r0
 8004b24:	647b      	str	r3, [r7, #68]	; 0x44
	    Gyro_z += (int16_t)(data[12] << 8 | data[13]);
 8004b26:	7e3b      	ldrb	r3, [r7, #24]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	7e7b      	ldrb	r3, [r7, #25]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b21b      	sxth	r3, r3
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fc f881 	bl	8000c3c <__aeabi_i2f>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004b40:	f7fb ffc8 	bl	8000ad4 <__addsf3>
 8004b44:	4603      	mov	r3, r0
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
     for(int i = 0; i<100;i++){
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	2b63      	cmp	r3, #99	; 0x63
 8004b52:	f77f af6d 	ble.w	8004a30 <calib_MPU+0x1c>
     }
     	Acc_x = Acc_x/100;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004b60:	f7fc f974 	bl	8000e4c <__aeabi_fdiv>
 8004b64:	4603      	mov	r3, r0
 8004b66:	657b      	str	r3, [r7, #84]	; 0x54
     	Acc_y = Acc_y/100;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004b72:	f7fc f96b 	bl	8000e4c <__aeabi_fdiv>
 8004b76:	4603      	mov	r3, r0
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
     	Acc_z = Acc_z/100;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8004b80:	4619      	mov	r1, r3
 8004b82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b84:	f7fc f962 	bl	8000e4c <__aeabi_fdiv>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c

     	Gyro_x = Gyro_x/100;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8004b92:	4619      	mov	r1, r3
 8004b94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b96:	f7fc f959 	bl	8000e4c <__aeabi_fdiv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	64bb      	str	r3, [r7, #72]	; 0x48
     	Gyro_y = Gyro_y/100;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004ba8:	f7fc f950 	bl	8000e4c <__aeabi_fdiv>
 8004bac:	4603      	mov	r3, r0
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
     	Gyro_z = Gyro_z/100;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004bba:	f7fc f947 	bl	8000e4c <__aeabi_fdiv>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40

    bAx = Acc_x;
 8004bc2:	f240 3300 	movw	r3, #768	; 0x300
 8004bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bcc:	601a      	str	r2, [r3, #0]
    bAy = Acc_y;
 8004bce:	f240 23f4 	movw	r3, #756	; 0x2f4
 8004bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bd8:	601a      	str	r2, [r3, #0]
    bAz = Acc_z - 16384;
 8004bda:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8004bde:	4619      	mov	r1, r3
 8004be0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004be2:	f7fb ff75 	bl	8000ad0 <__aeabi_fsub>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	f240 330c 	movw	r3, #780	; 0x30c
 8004bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bf2:	601a      	str	r2, [r3, #0]

    bGx = Gyro_x;
 8004bf4:	f240 23fc 	movw	r3, #764	; 0x2fc
 8004bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfe:	601a      	str	r2, [r3, #0]
    bGy = Gyro_y;
 8004c00:	f240 23dc 	movw	r3, #732	; 0x2dc
 8004c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c0a:	601a      	str	r2, [r3, #0]
    bGz = Gyro_z;
 8004c0c:	f240 3310 	movw	r3, #784	; 0x310
 8004c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c16:	601a      	str	r2, [r3, #0]

	char buffer[5];
	char n = ' ';
 8004c18:	2320      	movs	r3, #32
 8004c1a:	70fb      	strb	r3, [r7, #3]
	char r = '\n';
 8004c1c:	230a      	movs	r3, #10
 8004c1e:	70bb      	strb	r3, [r7, #2]
//
//    ftoa(bGz, buffer, 2);
//    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
//    HAL_UART_Transmit(&huart1, &r, 1, 1000);
//
    ftoa(bAx, buffer, 2);
 8004c20:	f240 3300 	movw	r3, #768	; 0x300
 8004c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fb fbfc 	bl	8000428 <__aeabi_f2d>
 8004c30:	1d3a      	adds	r2, r7, #4
 8004c32:	2302      	movs	r3, #2
 8004c34:	f7ff fcd2 	bl	80045dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004c38:	1d39      	adds	r1, r7, #4
 8004c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c3e:	2205      	movs	r2, #5
 8004c40:	f240 205c 	movw	r0, #604	; 0x25c
 8004c44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004c48:	f7fe fde6 	bl	8003818 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004c4c:	1cf9      	adds	r1, r7, #3
 8004c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c52:	2201      	movs	r2, #1
 8004c54:	f240 205c 	movw	r0, #604	; 0x25c
 8004c58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004c5c:	f7fe fddc 	bl	8003818 <HAL_UART_Transmit>

    ftoa(bAy, buffer, 2);
 8004c60:	f240 23f4 	movw	r3, #756	; 0x2f4
 8004c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fb fbdc 	bl	8000428 <__aeabi_f2d>
 8004c70:	1d3a      	adds	r2, r7, #4
 8004c72:	2302      	movs	r3, #2
 8004c74:	f7ff fcb2 	bl	80045dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004c78:	1d39      	adds	r1, r7, #4
 8004c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c7e:	2205      	movs	r2, #5
 8004c80:	f240 205c 	movw	r0, #604	; 0x25c
 8004c84:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004c88:	f7fe fdc6 	bl	8003818 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004c8c:	1cf9      	adds	r1, r7, #3
 8004c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c92:	2201      	movs	r2, #1
 8004c94:	f240 205c 	movw	r0, #604	; 0x25c
 8004c98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004c9c:	f7fe fdbc 	bl	8003818 <HAL_UART_Transmit>

    ftoa(bAz, buffer, 2);
 8004ca0:	f240 330c 	movw	r3, #780	; 0x30c
 8004ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fb fbbc 	bl	8000428 <__aeabi_f2d>
 8004cb0:	1d3a      	adds	r2, r7, #4
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f7ff fc92 	bl	80045dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004cb8:	1d39      	adds	r1, r7, #4
 8004cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	f240 205c 	movw	r0, #604	; 0x25c
 8004cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cc8:	f7fe fda6 	bl	8003818 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004ccc:	1cf9      	adds	r1, r7, #3
 8004cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f240 205c 	movw	r0, #604	; 0x25c
 8004cd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cdc:	f7fe fd9c 	bl	8003818 <HAL_UART_Transmit>

    ftoa(bGx, buffer, 2);
 8004ce0:	f240 23fc 	movw	r3, #764	; 0x2fc
 8004ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fb fb9c 	bl	8000428 <__aeabi_f2d>
 8004cf0:	1d3a      	adds	r2, r7, #4
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f7ff fc72 	bl	80045dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004cf8:	1d39      	adds	r1, r7, #4
 8004cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cfe:	2205      	movs	r2, #5
 8004d00:	f240 205c 	movw	r0, #604	; 0x25c
 8004d04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d08:	f7fe fd86 	bl	8003818 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004d0c:	1cf9      	adds	r1, r7, #3
 8004d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d12:	2201      	movs	r2, #1
 8004d14:	f240 205c 	movw	r0, #604	; 0x25c
 8004d18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d1c:	f7fe fd7c 	bl	8003818 <HAL_UART_Transmit>

    ftoa(bGy, buffer, 2);
 8004d20:	f240 23dc 	movw	r3, #732	; 0x2dc
 8004d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fb fb7c 	bl	8000428 <__aeabi_f2d>
 8004d30:	1d3a      	adds	r2, r7, #4
 8004d32:	2302      	movs	r3, #2
 8004d34:	f7ff fc52 	bl	80045dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004d38:	1d39      	adds	r1, r7, #4
 8004d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d3e:	2205      	movs	r2, #5
 8004d40:	f240 205c 	movw	r0, #604	; 0x25c
 8004d44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d48:	f7fe fd66 	bl	8003818 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004d4c:	1cf9      	adds	r1, r7, #3
 8004d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d52:	2201      	movs	r2, #1
 8004d54:	f240 205c 	movw	r0, #604	; 0x25c
 8004d58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d5c:	f7fe fd5c 	bl	8003818 <HAL_UART_Transmit>

    ftoa(bGz, buffer, 2);
 8004d60:	f240 3310 	movw	r3, #784	; 0x310
 8004d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb fb5c 	bl	8000428 <__aeabi_f2d>
 8004d70:	1d3a      	adds	r2, r7, #4
 8004d72:	2302      	movs	r3, #2
 8004d74:	f7ff fc32 	bl	80045dc <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8004d78:	1d39      	adds	r1, r7, #4
 8004d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f240 205c 	movw	r0, #604	; 0x25c
 8004d84:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d88:	f7fe fd46 	bl	8003818 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
 8004d8c:	1cb9      	adds	r1, r7, #2
 8004d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d92:	2201      	movs	r2, #1
 8004d94:	f240 205c 	movw	r0, #604	; 0x25c
 8004d98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d9c:	f7fe fd3c 	bl	8003818 <HAL_UART_Transmit>
}
 8004da0:	bf00      	nop
 8004da2:	3758      	adds	r7, #88	; 0x58
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	619a      	str	r2, [r3, #24]
 8004dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e02:	2300      	movs	r3, #0
 8004e04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8004e4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d138      	bne.n	8004ec8 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e68:	f042 0208 	orr.w	r2, r2, #8
 8004e6c:	619a      	str	r2, [r3, #24]
 8004e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e80:	23c0      	movs	r3, #192	; 0xc0
 8004e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e84:	2312      	movs	r3, #18
 8004e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	4619      	mov	r1, r3
 8004e92:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004e96:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004e9a:	f7fc fa6d 	bl	8001378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ea2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004eb0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004eb4:	61da      	str	r2, [r3, #28]
 8004eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ec8:	bf00      	nop
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004ee0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d114      	bne.n	8004f12 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004efe:	619a      	str	r2, [r3, #24]
 8004f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d151      	bne.n	8004fe6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f58:	619a      	str	r2, [r3, #24]
 8004f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f7e:	f042 0204 	orr.w	r2, r2, #4
 8004f82:	619a      	str	r2, [r3, #24]
 8004f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa4:	f107 0310 	add.w	r3, r7, #16
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fae:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004fb2:	f7fc f9e1 	bl	8001378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc4:	f107 0310 	add.w	r3, r7, #16
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fce:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004fd2:	f7fc f9d1 	bl	8001378 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2100      	movs	r1, #0
 8004fda:	2025      	movs	r0, #37	; 0x25
 8004fdc:	f7fc f920 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004fe0:	2025      	movs	r0, #37	; 0x25
 8004fe2:	f7fc f939 	bl	8001258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004fe6:	bf00      	nop
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ffe:	e7fe      	b.n	8004ffe <HardFault_Handler+0x4>

08005000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005004:	e7fe      	b.n	8005004 <MemManage_Handler+0x4>

08005006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800500a:	e7fe      	b.n	800500a <BusFault_Handler+0x4>

0800500c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005010:	e7fe      	b.n	8005010 <UsageFault_Handler+0x4>

08005012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800503a:	f7fb ffef 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}

08005042 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005046:	f240 205c 	movw	r0, #604	; 0x25c
 800504a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800504e:	f7fe fd22 	bl	8003a96 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}

08005056 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800505e:	f240 13f8 	movw	r3, #504	; 0x1f8
 8005062:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <_sbrk+0x28>
		heap_end = &end;
 800506c:	f240 13f8 	movw	r3, #504	; 0x1f8
 8005070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005074:	f240 3218 	movw	r2, #792	; 0x318
 8005078:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800507c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800507e:	f240 13f8 	movw	r3, #504	; 0x1f8
 8005082:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800508a:	f240 13f8 	movw	r3, #504	; 0x1f8
 800508e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	466a      	mov	r2, sp
 800509a:	4293      	cmp	r3, r2
 800509c:	d907      	bls.n	80050ae <_sbrk+0x58>
	{
		errno = ENOMEM;
 800509e:	f000 f891 	bl	80051c4 <__errno>
 80050a2:	4602      	mov	r2, r0
 80050a4:	230c      	movs	r3, #12
 80050a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	e00c      	b.n	80050c8 <_sbrk+0x72>
	}

	heap_end += incr;
 80050ae:	f240 13f8 	movw	r3, #504	; 0x1f8
 80050b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	441a      	add	r2, r3
 80050bc:	f240 13f8 	movw	r3, #504	; 0x1f8
 80050c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050c4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80050d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80050ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80050fe:	2300      	movs	r3, #0
 8005100:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8005104:	400b      	ands	r3, r1
 8005106:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800510c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005116:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800511a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005128:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005132:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800513a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800513c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005140:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800514a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800514e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005152:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005158:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800515c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005160:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005162:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005166:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800516a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800516e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005178:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800517a:	e003      	b.n	8005184 <LoopCopyDataInit>

0800517c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800517e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005180:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005182:	3104      	adds	r1, #4

08005184 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005184:	480a      	ldr	r0, [pc, #40]	; (80051b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005188:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800518a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800518c:	d3f6      	bcc.n	800517c <CopyDataInit>
  ldr r2, =_sbss
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005190:	e002      	b.n	8005198 <LoopFillZerobss>

08005192 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005192:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005194:	f842 3b04 	str.w	r3, [r2], #4

08005198 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800519a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800519c:	d3f9      	bcc.n	8005192 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800519e:	f7ff ff97 	bl	80050d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051a2:	f000 f815 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051a6:	f7ff f82e 	bl	8004206 <main>
  bx lr
 80051aa:	4770      	bx	lr
  ldr r3, =_sidata
 80051ac:	08006f48 	.word	0x08006f48
  ldr r0, =_sdata
 80051b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80051b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80051b8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80051bc:	20000318 	.word	0x20000318

080051c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051c0:	e7fe      	b.n	80051c0 <ADC1_2_IRQHandler>
	...

080051c4 <__errno>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <__errno+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	2500      	movs	r5, #0
 80051d4:	4e0c      	ldr	r6, [pc, #48]	; (8005208 <__libc_init_array+0x38>)
 80051d6:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d8:	1ba4      	subs	r4, r4, r6
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	42a5      	cmp	r5, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	f001 fd3a 	bl	8006c58 <_init>
 80051e4:	2500      	movs	r5, #0
 80051e6:	4e0a      	ldr	r6, [pc, #40]	; (8005210 <__libc_init_array+0x40>)
 80051e8:	4c0a      	ldr	r4, [pc, #40]	; (8005214 <__libc_init_array+0x44>)
 80051ea:	1ba4      	subs	r4, r4, r6
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	42a5      	cmp	r5, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051f8:	4798      	blx	r3
 80051fa:	3501      	adds	r5, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005202:	4798      	blx	r3
 8005204:	3501      	adds	r5, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08006f40 	.word	0x08006f40
 800520c:	08006f40 	.word	0x08006f40
 8005210:	08006f40 	.word	0x08006f40
 8005214:	08006f44 	.word	0x08006f44

08005218 <memset>:
 8005218:	4603      	mov	r3, r0
 800521a:	4402      	add	r2, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <__cvt>:
 8005228:	2b00      	cmp	r3, #0
 800522a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522e:	461e      	mov	r6, r3
 8005230:	bfbb      	ittet	lt
 8005232:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005236:	461e      	movlt	r6, r3
 8005238:	2300      	movge	r3, #0
 800523a:	232d      	movlt	r3, #45	; 0x2d
 800523c:	b088      	sub	sp, #32
 800523e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005240:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005244:	f027 0720 	bic.w	r7, r7, #32
 8005248:	2f46      	cmp	r7, #70	; 0x46
 800524a:	4614      	mov	r4, r2
 800524c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800524e:	700b      	strb	r3, [r1, #0]
 8005250:	d004      	beq.n	800525c <__cvt+0x34>
 8005252:	2f45      	cmp	r7, #69	; 0x45
 8005254:	d100      	bne.n	8005258 <__cvt+0x30>
 8005256:	3501      	adds	r5, #1
 8005258:	2302      	movs	r3, #2
 800525a:	e000      	b.n	800525e <__cvt+0x36>
 800525c:	2303      	movs	r3, #3
 800525e:	aa07      	add	r2, sp, #28
 8005260:	9204      	str	r2, [sp, #16]
 8005262:	aa06      	add	r2, sp, #24
 8005264:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005268:	e9cd 3500 	strd	r3, r5, [sp]
 800526c:	4622      	mov	r2, r4
 800526e:	4633      	mov	r3, r6
 8005270:	f000 fba6 	bl	80059c0 <_dtoa_r>
 8005274:	2f47      	cmp	r7, #71	; 0x47
 8005276:	4680      	mov	r8, r0
 8005278:	d102      	bne.n	8005280 <__cvt+0x58>
 800527a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800527c:	07db      	lsls	r3, r3, #31
 800527e:	d526      	bpl.n	80052ce <__cvt+0xa6>
 8005280:	2f46      	cmp	r7, #70	; 0x46
 8005282:	eb08 0905 	add.w	r9, r8, r5
 8005286:	d111      	bne.n	80052ac <__cvt+0x84>
 8005288:	f898 3000 	ldrb.w	r3, [r8]
 800528c:	2b30      	cmp	r3, #48	; 0x30
 800528e:	d10a      	bne.n	80052a6 <__cvt+0x7e>
 8005290:	2200      	movs	r2, #0
 8005292:	2300      	movs	r3, #0
 8005294:	4620      	mov	r0, r4
 8005296:	4631      	mov	r1, r6
 8005298:	f7fb fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800529c:	b918      	cbnz	r0, 80052a6 <__cvt+0x7e>
 800529e:	f1c5 0501 	rsb	r5, r5, #1
 80052a2:	f8ca 5000 	str.w	r5, [sl]
 80052a6:	f8da 3000 	ldr.w	r3, [sl]
 80052aa:	4499      	add	r9, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	2300      	movs	r3, #0
 80052b0:	4620      	mov	r0, r4
 80052b2:	4631      	mov	r1, r6
 80052b4:	f7fb fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80052b8:	b938      	cbnz	r0, 80052ca <__cvt+0xa2>
 80052ba:	2230      	movs	r2, #48	; 0x30
 80052bc:	9b07      	ldr	r3, [sp, #28]
 80052be:	454b      	cmp	r3, r9
 80052c0:	d205      	bcs.n	80052ce <__cvt+0xa6>
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	9107      	str	r1, [sp, #28]
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e7f8      	b.n	80052bc <__cvt+0x94>
 80052ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80052ce:	4640      	mov	r0, r8
 80052d0:	9b07      	ldr	r3, [sp, #28]
 80052d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80052d4:	eba3 0308 	sub.w	r3, r3, r8
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	b008      	add	sp, #32
 80052dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052e0 <__exponent>:
 80052e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e2:	2900      	cmp	r1, #0
 80052e4:	bfb4      	ite	lt
 80052e6:	232d      	movlt	r3, #45	; 0x2d
 80052e8:	232b      	movge	r3, #43	; 0x2b
 80052ea:	4604      	mov	r4, r0
 80052ec:	bfb8      	it	lt
 80052ee:	4249      	neglt	r1, r1
 80052f0:	2909      	cmp	r1, #9
 80052f2:	f804 2b02 	strb.w	r2, [r4], #2
 80052f6:	7043      	strb	r3, [r0, #1]
 80052f8:	dd21      	ble.n	800533e <__exponent+0x5e>
 80052fa:	f10d 0307 	add.w	r3, sp, #7
 80052fe:	461f      	mov	r7, r3
 8005300:	260a      	movs	r6, #10
 8005302:	fb91 f5f6 	sdiv	r5, r1, r6
 8005306:	fb06 1115 	mls	r1, r6, r5, r1
 800530a:	2d09      	cmp	r5, #9
 800530c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005310:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005314:	f103 32ff 	add.w	r2, r3, #4294967295
 8005318:	4629      	mov	r1, r5
 800531a:	dc09      	bgt.n	8005330 <__exponent+0x50>
 800531c:	3130      	adds	r1, #48	; 0x30
 800531e:	3b02      	subs	r3, #2
 8005320:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005324:	42bb      	cmp	r3, r7
 8005326:	4622      	mov	r2, r4
 8005328:	d304      	bcc.n	8005334 <__exponent+0x54>
 800532a:	1a10      	subs	r0, r2, r0
 800532c:	b003      	add	sp, #12
 800532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005330:	4613      	mov	r3, r2
 8005332:	e7e6      	b.n	8005302 <__exponent+0x22>
 8005334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005338:	f804 2b01 	strb.w	r2, [r4], #1
 800533c:	e7f2      	b.n	8005324 <__exponent+0x44>
 800533e:	2330      	movs	r3, #48	; 0x30
 8005340:	4419      	add	r1, r3
 8005342:	7083      	strb	r3, [r0, #2]
 8005344:	1d02      	adds	r2, r0, #4
 8005346:	70c1      	strb	r1, [r0, #3]
 8005348:	e7ef      	b.n	800532a <__exponent+0x4a>
	...

0800534c <_printf_float>:
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	b091      	sub	sp, #68	; 0x44
 8005352:	460c      	mov	r4, r1
 8005354:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005356:	4693      	mov	fp, r2
 8005358:	461e      	mov	r6, r3
 800535a:	4605      	mov	r5, r0
 800535c:	f001 f8e4 	bl	8006528 <_localeconv_r>
 8005360:	6803      	ldr	r3, [r0, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	9309      	str	r3, [sp, #36]	; 0x24
 8005366:	f7fa fef3 	bl	8000150 <strlen>
 800536a:	2300      	movs	r3, #0
 800536c:	930e      	str	r3, [sp, #56]	; 0x38
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	900a      	str	r0, [sp, #40]	; 0x28
 8005372:	3307      	adds	r3, #7
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	f103 0208 	add.w	r2, r3, #8
 800537c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005380:	f8d4 a000 	ldr.w	sl, [r4]
 8005384:	603a      	str	r2, [r7, #0]
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800538e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005392:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005396:	930b      	str	r3, [sp, #44]	; 0x2c
 8005398:	f04f 32ff 	mov.w	r2, #4294967295
 800539c:	4ba6      	ldr	r3, [pc, #664]	; (8005638 <_printf_float+0x2ec>)
 800539e:	4638      	mov	r0, r7
 80053a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053a2:	f7fb fb33 	bl	8000a0c <__aeabi_dcmpun>
 80053a6:	bb68      	cbnz	r0, 8005404 <_printf_float+0xb8>
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ac:	4ba2      	ldr	r3, [pc, #648]	; (8005638 <_printf_float+0x2ec>)
 80053ae:	4638      	mov	r0, r7
 80053b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053b2:	f7fb fb0d 	bl	80009d0 <__aeabi_dcmple>
 80053b6:	bb28      	cbnz	r0, 8005404 <_printf_float+0xb8>
 80053b8:	2200      	movs	r2, #0
 80053ba:	2300      	movs	r3, #0
 80053bc:	4638      	mov	r0, r7
 80053be:	4649      	mov	r1, r9
 80053c0:	f7fb fafc 	bl	80009bc <__aeabi_dcmplt>
 80053c4:	b110      	cbz	r0, 80053cc <_printf_float+0x80>
 80053c6:	232d      	movs	r3, #45	; 0x2d
 80053c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053cc:	4f9b      	ldr	r7, [pc, #620]	; (800563c <_printf_float+0x2f0>)
 80053ce:	4b9c      	ldr	r3, [pc, #624]	; (8005640 <_printf_float+0x2f4>)
 80053d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053d4:	bf98      	it	ls
 80053d6:	461f      	movls	r7, r3
 80053d8:	2303      	movs	r3, #3
 80053da:	f04f 0900 	mov.w	r9, #0
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	f02a 0304 	bic.w	r3, sl, #4
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	9600      	str	r6, [sp, #0]
 80053e8:	465b      	mov	r3, fp
 80053ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80053ec:	4621      	mov	r1, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 f9e2 	bl	80057b8 <_printf_common>
 80053f4:	3001      	adds	r0, #1
 80053f6:	f040 8090 	bne.w	800551a <_printf_float+0x1ce>
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295
 80053fe:	b011      	add	sp, #68	; 0x44
 8005400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005404:	463a      	mov	r2, r7
 8005406:	464b      	mov	r3, r9
 8005408:	4638      	mov	r0, r7
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb fafe 	bl	8000a0c <__aeabi_dcmpun>
 8005410:	b110      	cbz	r0, 8005418 <_printf_float+0xcc>
 8005412:	4f8c      	ldr	r7, [pc, #560]	; (8005644 <_printf_float+0x2f8>)
 8005414:	4b8c      	ldr	r3, [pc, #560]	; (8005648 <_printf_float+0x2fc>)
 8005416:	e7db      	b.n	80053d0 <_printf_float+0x84>
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	a80d      	add	r0, sp, #52	; 0x34
 8005422:	a90e      	add	r1, sp, #56	; 0x38
 8005424:	d140      	bne.n	80054a8 <_printf_float+0x15c>
 8005426:	2306      	movs	r3, #6
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	f04f 0c00 	mov.w	ip, #0
 800542e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005432:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005436:	6863      	ldr	r3, [r4, #4]
 8005438:	6022      	str	r2, [r4, #0]
 800543a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	463a      	mov	r2, r7
 8005442:	464b      	mov	r3, r9
 8005444:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005448:	4628      	mov	r0, r5
 800544a:	f7ff feed 	bl	8005228 <__cvt>
 800544e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005452:	2b47      	cmp	r3, #71	; 0x47
 8005454:	4607      	mov	r7, r0
 8005456:	d109      	bne.n	800546c <_printf_float+0x120>
 8005458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800545a:	1cd8      	adds	r0, r3, #3
 800545c:	db02      	blt.n	8005464 <_printf_float+0x118>
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	4293      	cmp	r3, r2
 8005462:	dd47      	ble.n	80054f4 <_printf_float+0x1a8>
 8005464:	f1a8 0802 	sub.w	r8, r8, #2
 8005468:	fa5f f888 	uxtb.w	r8, r8
 800546c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005470:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005472:	d824      	bhi.n	80054be <_printf_float+0x172>
 8005474:	3901      	subs	r1, #1
 8005476:	4642      	mov	r2, r8
 8005478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800547c:	910d      	str	r1, [sp, #52]	; 0x34
 800547e:	f7ff ff2f 	bl	80052e0 <__exponent>
 8005482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005484:	4681      	mov	r9, r0
 8005486:	1813      	adds	r3, r2, r0
 8005488:	2a01      	cmp	r2, #1
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	dc02      	bgt.n	8005494 <_printf_float+0x148>
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	07d1      	lsls	r1, r2, #31
 8005492:	d501      	bpl.n	8005498 <_printf_float+0x14c>
 8005494:	3301      	adds	r3, #1
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0a2      	beq.n	80053e6 <_printf_float+0x9a>
 80054a0:	232d      	movs	r3, #45	; 0x2d
 80054a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a6:	e79e      	b.n	80053e6 <_printf_float+0x9a>
 80054a8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80054ac:	f000 816e 	beq.w	800578c <_printf_float+0x440>
 80054b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054b4:	d1b9      	bne.n	800542a <_printf_float+0xde>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1b7      	bne.n	800542a <_printf_float+0xde>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7b4      	b.n	8005428 <_printf_float+0xdc>
 80054be:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80054c2:	d119      	bne.n	80054f8 <_printf_float+0x1ac>
 80054c4:	2900      	cmp	r1, #0
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	dd0c      	ble.n	80054e4 <_printf_float+0x198>
 80054ca:	6121      	str	r1, [r4, #16]
 80054cc:	b913      	cbnz	r3, 80054d4 <_printf_float+0x188>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	07d2      	lsls	r2, r2, #31
 80054d2:	d502      	bpl.n	80054da <_printf_float+0x18e>
 80054d4:	3301      	adds	r3, #1
 80054d6:	440b      	add	r3, r1
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054dc:	f04f 0900 	mov.w	r9, #0
 80054e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80054e2:	e7d9      	b.n	8005498 <_printf_float+0x14c>
 80054e4:	b913      	cbnz	r3, 80054ec <_printf_float+0x1a0>
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	07d0      	lsls	r0, r2, #31
 80054ea:	d501      	bpl.n	80054f0 <_printf_float+0x1a4>
 80054ec:	3302      	adds	r3, #2
 80054ee:	e7f3      	b.n	80054d8 <_printf_float+0x18c>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e7f1      	b.n	80054d8 <_printf_float+0x18c>
 80054f4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80054f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054fc:	4293      	cmp	r3, r2
 80054fe:	db05      	blt.n	800550c <_printf_float+0x1c0>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	07d1      	lsls	r1, r2, #31
 8005506:	d5e8      	bpl.n	80054da <_printf_float+0x18e>
 8005508:	3301      	adds	r3, #1
 800550a:	e7e5      	b.n	80054d8 <_printf_float+0x18c>
 800550c:	2b00      	cmp	r3, #0
 800550e:	bfcc      	ite	gt
 8005510:	2301      	movgt	r3, #1
 8005512:	f1c3 0302 	rsble	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	e7de      	b.n	80054d8 <_printf_float+0x18c>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	055a      	lsls	r2, r3, #21
 800551e:	d407      	bmi.n	8005530 <_printf_float+0x1e4>
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	463a      	mov	r2, r7
 8005524:	4659      	mov	r1, fp
 8005526:	4628      	mov	r0, r5
 8005528:	47b0      	blx	r6
 800552a:	3001      	adds	r0, #1
 800552c:	d129      	bne.n	8005582 <_printf_float+0x236>
 800552e:	e764      	b.n	80053fa <_printf_float+0xae>
 8005530:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005534:	f240 80d7 	bls.w	80056e6 <_printf_float+0x39a>
 8005538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800553c:	2200      	movs	r2, #0
 800553e:	2300      	movs	r3, #0
 8005540:	f7fb fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8005544:	b388      	cbz	r0, 80055aa <_printf_float+0x25e>
 8005546:	2301      	movs	r3, #1
 8005548:	4a40      	ldr	r2, [pc, #256]	; (800564c <_printf_float+0x300>)
 800554a:	4659      	mov	r1, fp
 800554c:	4628      	mov	r0, r5
 800554e:	47b0      	blx	r6
 8005550:	3001      	adds	r0, #1
 8005552:	f43f af52 	beq.w	80053fa <_printf_float+0xae>
 8005556:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800555a:	429a      	cmp	r2, r3
 800555c:	db02      	blt.n	8005564 <_printf_float+0x218>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	07d8      	lsls	r0, r3, #31
 8005562:	d50e      	bpl.n	8005582 <_printf_float+0x236>
 8005564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005568:	4659      	mov	r1, fp
 800556a:	4628      	mov	r0, r5
 800556c:	47b0      	blx	r6
 800556e:	3001      	adds	r0, #1
 8005570:	f43f af43 	beq.w	80053fa <_printf_float+0xae>
 8005574:	2700      	movs	r7, #0
 8005576:	f104 081a 	add.w	r8, r4, #26
 800557a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800557c:	3b01      	subs	r3, #1
 800557e:	42bb      	cmp	r3, r7
 8005580:	dc09      	bgt.n	8005596 <_printf_float+0x24a>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	079f      	lsls	r7, r3, #30
 8005586:	f100 80fd 	bmi.w	8005784 <_printf_float+0x438>
 800558a:	68e0      	ldr	r0, [r4, #12]
 800558c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800558e:	4298      	cmp	r0, r3
 8005590:	bfb8      	it	lt
 8005592:	4618      	movlt	r0, r3
 8005594:	e733      	b.n	80053fe <_printf_float+0xb2>
 8005596:	2301      	movs	r3, #1
 8005598:	4642      	mov	r2, r8
 800559a:	4659      	mov	r1, fp
 800559c:	4628      	mov	r0, r5
 800559e:	47b0      	blx	r6
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f af2a 	beq.w	80053fa <_printf_float+0xae>
 80055a6:	3701      	adds	r7, #1
 80055a8:	e7e7      	b.n	800557a <_printf_float+0x22e>
 80055aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dc2b      	bgt.n	8005608 <_printf_float+0x2bc>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <_printf_float+0x300>)
 80055b4:	4659      	mov	r1, fp
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b0      	blx	r6
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f af1d 	beq.w	80053fa <_printf_float+0xae>
 80055c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055c2:	b923      	cbnz	r3, 80055ce <_printf_float+0x282>
 80055c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c6:	b913      	cbnz	r3, 80055ce <_printf_float+0x282>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	07d9      	lsls	r1, r3, #31
 80055cc:	d5d9      	bpl.n	8005582 <_printf_float+0x236>
 80055ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d2:	4659      	mov	r1, fp
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b0      	blx	r6
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f af0e 	beq.w	80053fa <_printf_float+0xae>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	f104 091a 	add.w	r9, r4, #26
 80055e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055e8:	425b      	negs	r3, r3
 80055ea:	4543      	cmp	r3, r8
 80055ec:	dc01      	bgt.n	80055f2 <_printf_float+0x2a6>
 80055ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f0:	e797      	b.n	8005522 <_printf_float+0x1d6>
 80055f2:	2301      	movs	r3, #1
 80055f4:	464a      	mov	r2, r9
 80055f6:	4659      	mov	r1, fp
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b0      	blx	r6
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f aefc 	beq.w	80053fa <_printf_float+0xae>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	e7ee      	b.n	80055e6 <_printf_float+0x29a>
 8005608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800560a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800560c:	429a      	cmp	r2, r3
 800560e:	bfa8      	it	ge
 8005610:	461a      	movge	r2, r3
 8005612:	2a00      	cmp	r2, #0
 8005614:	4690      	mov	r8, r2
 8005616:	dd07      	ble.n	8005628 <_printf_float+0x2dc>
 8005618:	4613      	mov	r3, r2
 800561a:	4659      	mov	r1, fp
 800561c:	463a      	mov	r2, r7
 800561e:	4628      	mov	r0, r5
 8005620:	47b0      	blx	r6
 8005622:	3001      	adds	r0, #1
 8005624:	f43f aee9 	beq.w	80053fa <_printf_float+0xae>
 8005628:	f104 031a 	add.w	r3, r4, #26
 800562c:	f04f 0a00 	mov.w	sl, #0
 8005630:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005634:	930b      	str	r3, [sp, #44]	; 0x2c
 8005636:	e015      	b.n	8005664 <_printf_float+0x318>
 8005638:	7fefffff 	.word	0x7fefffff
 800563c:	08006d1c 	.word	0x08006d1c
 8005640:	08006d18 	.word	0x08006d18
 8005644:	08006d24 	.word	0x08006d24
 8005648:	08006d20 	.word	0x08006d20
 800564c:	08006d28 	.word	0x08006d28
 8005650:	2301      	movs	r3, #1
 8005652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005654:	4659      	mov	r1, fp
 8005656:	4628      	mov	r0, r5
 8005658:	47b0      	blx	r6
 800565a:	3001      	adds	r0, #1
 800565c:	f43f aecd 	beq.w	80053fa <_printf_float+0xae>
 8005660:	f10a 0a01 	add.w	sl, sl, #1
 8005664:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005668:	eba9 0308 	sub.w	r3, r9, r8
 800566c:	4553      	cmp	r3, sl
 800566e:	dcef      	bgt.n	8005650 <_printf_float+0x304>
 8005670:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005674:	429a      	cmp	r2, r3
 8005676:	444f      	add	r7, r9
 8005678:	db14      	blt.n	80056a4 <_printf_float+0x358>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	07da      	lsls	r2, r3, #31
 800567e:	d411      	bmi.n	80056a4 <_printf_float+0x358>
 8005680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005682:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005684:	eba3 0209 	sub.w	r2, r3, r9
 8005688:	eba3 0901 	sub.w	r9, r3, r1
 800568c:	4591      	cmp	r9, r2
 800568e:	bfa8      	it	ge
 8005690:	4691      	movge	r9, r2
 8005692:	f1b9 0f00 	cmp.w	r9, #0
 8005696:	dc0d      	bgt.n	80056b4 <_printf_float+0x368>
 8005698:	2700      	movs	r7, #0
 800569a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800569e:	f104 081a 	add.w	r8, r4, #26
 80056a2:	e018      	b.n	80056d6 <_printf_float+0x38a>
 80056a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a8:	4659      	mov	r1, fp
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b0      	blx	r6
 80056ae:	3001      	adds	r0, #1
 80056b0:	d1e6      	bne.n	8005680 <_printf_float+0x334>
 80056b2:	e6a2      	b.n	80053fa <_printf_float+0xae>
 80056b4:	464b      	mov	r3, r9
 80056b6:	463a      	mov	r2, r7
 80056b8:	4659      	mov	r1, fp
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b0      	blx	r6
 80056be:	3001      	adds	r0, #1
 80056c0:	d1ea      	bne.n	8005698 <_printf_float+0x34c>
 80056c2:	e69a      	b.n	80053fa <_printf_float+0xae>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4642      	mov	r2, r8
 80056c8:	4659      	mov	r1, fp
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b0      	blx	r6
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f ae93 	beq.w	80053fa <_printf_float+0xae>
 80056d4:	3701      	adds	r7, #1
 80056d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	eba3 0309 	sub.w	r3, r3, r9
 80056e0:	42bb      	cmp	r3, r7
 80056e2:	dcef      	bgt.n	80056c4 <_printf_float+0x378>
 80056e4:	e74d      	b.n	8005582 <_printf_float+0x236>
 80056e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e8:	2a01      	cmp	r2, #1
 80056ea:	dc01      	bgt.n	80056f0 <_printf_float+0x3a4>
 80056ec:	07db      	lsls	r3, r3, #31
 80056ee:	d538      	bpl.n	8005762 <_printf_float+0x416>
 80056f0:	2301      	movs	r3, #1
 80056f2:	463a      	mov	r2, r7
 80056f4:	4659      	mov	r1, fp
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b0      	blx	r6
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f ae7d 	beq.w	80053fa <_printf_float+0xae>
 8005700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005704:	4659      	mov	r1, fp
 8005706:	4628      	mov	r0, r5
 8005708:	47b0      	blx	r6
 800570a:	3001      	adds	r0, #1
 800570c:	f107 0701 	add.w	r7, r7, #1
 8005710:	f43f ae73 	beq.w	80053fa <_printf_float+0xae>
 8005714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800571a:	2200      	movs	r2, #0
 800571c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005720:	2300      	movs	r3, #0
 8005722:	f7fb f941 	bl	80009a8 <__aeabi_dcmpeq>
 8005726:	b9c0      	cbnz	r0, 800575a <_printf_float+0x40e>
 8005728:	4643      	mov	r3, r8
 800572a:	463a      	mov	r2, r7
 800572c:	4659      	mov	r1, fp
 800572e:	4628      	mov	r0, r5
 8005730:	47b0      	blx	r6
 8005732:	3001      	adds	r0, #1
 8005734:	d10d      	bne.n	8005752 <_printf_float+0x406>
 8005736:	e660      	b.n	80053fa <_printf_float+0xae>
 8005738:	2301      	movs	r3, #1
 800573a:	4642      	mov	r2, r8
 800573c:	4659      	mov	r1, fp
 800573e:	4628      	mov	r0, r5
 8005740:	47b0      	blx	r6
 8005742:	3001      	adds	r0, #1
 8005744:	f43f ae59 	beq.w	80053fa <_printf_float+0xae>
 8005748:	3701      	adds	r7, #1
 800574a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800574c:	3b01      	subs	r3, #1
 800574e:	42bb      	cmp	r3, r7
 8005750:	dcf2      	bgt.n	8005738 <_printf_float+0x3ec>
 8005752:	464b      	mov	r3, r9
 8005754:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005758:	e6e4      	b.n	8005524 <_printf_float+0x1d8>
 800575a:	2700      	movs	r7, #0
 800575c:	f104 081a 	add.w	r8, r4, #26
 8005760:	e7f3      	b.n	800574a <_printf_float+0x3fe>
 8005762:	2301      	movs	r3, #1
 8005764:	e7e1      	b.n	800572a <_printf_float+0x3de>
 8005766:	2301      	movs	r3, #1
 8005768:	4642      	mov	r2, r8
 800576a:	4659      	mov	r1, fp
 800576c:	4628      	mov	r0, r5
 800576e:	47b0      	blx	r6
 8005770:	3001      	adds	r0, #1
 8005772:	f43f ae42 	beq.w	80053fa <_printf_float+0xae>
 8005776:	3701      	adds	r7, #1
 8005778:	68e3      	ldr	r3, [r4, #12]
 800577a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	42bb      	cmp	r3, r7
 8005780:	dcf1      	bgt.n	8005766 <_printf_float+0x41a>
 8005782:	e702      	b.n	800558a <_printf_float+0x23e>
 8005784:	2700      	movs	r7, #0
 8005786:	f104 0819 	add.w	r8, r4, #25
 800578a:	e7f5      	b.n	8005778 <_printf_float+0x42c>
 800578c:	2b00      	cmp	r3, #0
 800578e:	f43f ae94 	beq.w	80054ba <_printf_float+0x16e>
 8005792:	f04f 0c00 	mov.w	ip, #0
 8005796:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800579a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800579e:	6022      	str	r2, [r4, #0]
 80057a0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80057a4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	463a      	mov	r2, r7
 80057ac:	464b      	mov	r3, r9
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7ff fd3a 	bl	8005228 <__cvt>
 80057b4:	4607      	mov	r7, r0
 80057b6:	e64f      	b.n	8005458 <_printf_float+0x10c>

080057b8 <_printf_common>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	4691      	mov	r9, r2
 80057be:	461f      	mov	r7, r3
 80057c0:	688a      	ldr	r2, [r1, #8]
 80057c2:	690b      	ldr	r3, [r1, #16]
 80057c4:	4606      	mov	r6, r0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfb8      	it	lt
 80057ca:	4613      	movlt	r3, r2
 80057cc:	f8c9 3000 	str.w	r3, [r9]
 80057d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d4:	460c      	mov	r4, r1
 80057d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057da:	b112      	cbz	r2, 80057e2 <_printf_common+0x2a>
 80057dc:	3301      	adds	r3, #1
 80057de:	f8c9 3000 	str.w	r3, [r9]
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	0699      	lsls	r1, r3, #26
 80057e6:	bf42      	ittt	mi
 80057e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057ec:	3302      	addmi	r3, #2
 80057ee:	f8c9 3000 	strmi.w	r3, [r9]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	f015 0506 	ands.w	r5, r5, #6
 80057f8:	d107      	bne.n	800580a <_printf_common+0x52>
 80057fa:	f104 0a19 	add.w	sl, r4, #25
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	f8d9 2000 	ldr.w	r2, [r9]
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	42ab      	cmp	r3, r5
 8005808:	dc29      	bgt.n	800585e <_printf_common+0xa6>
 800580a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	3300      	adds	r3, #0
 8005812:	bf18      	it	ne
 8005814:	2301      	movne	r3, #1
 8005816:	0692      	lsls	r2, r2, #26
 8005818:	d42e      	bmi.n	8005878 <_printf_common+0xc0>
 800581a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800581e:	4639      	mov	r1, r7
 8005820:	4630      	mov	r0, r6
 8005822:	47c0      	blx	r8
 8005824:	3001      	adds	r0, #1
 8005826:	d021      	beq.n	800586c <_printf_common+0xb4>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	68e5      	ldr	r5, [r4, #12]
 800582c:	f003 0306 	and.w	r3, r3, #6
 8005830:	2b04      	cmp	r3, #4
 8005832:	bf18      	it	ne
 8005834:	2500      	movne	r5, #0
 8005836:	f8d9 2000 	ldr.w	r2, [r9]
 800583a:	f04f 0900 	mov.w	r9, #0
 800583e:	bf08      	it	eq
 8005840:	1aad      	subeq	r5, r5, r2
 8005842:	68a3      	ldr	r3, [r4, #8]
 8005844:	6922      	ldr	r2, [r4, #16]
 8005846:	bf08      	it	eq
 8005848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800584c:	4293      	cmp	r3, r2
 800584e:	bfc4      	itt	gt
 8005850:	1a9b      	subgt	r3, r3, r2
 8005852:	18ed      	addgt	r5, r5, r3
 8005854:	341a      	adds	r4, #26
 8005856:	454d      	cmp	r5, r9
 8005858:	d11a      	bne.n	8005890 <_printf_common+0xd8>
 800585a:	2000      	movs	r0, #0
 800585c:	e008      	b.n	8005870 <_printf_common+0xb8>
 800585e:	2301      	movs	r3, #1
 8005860:	4652      	mov	r2, sl
 8005862:	4639      	mov	r1, r7
 8005864:	4630      	mov	r0, r6
 8005866:	47c0      	blx	r8
 8005868:	3001      	adds	r0, #1
 800586a:	d103      	bne.n	8005874 <_printf_common+0xbc>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	3501      	adds	r5, #1
 8005876:	e7c2      	b.n	80057fe <_printf_common+0x46>
 8005878:	2030      	movs	r0, #48	; 0x30
 800587a:	18e1      	adds	r1, r4, r3
 800587c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005886:	4422      	add	r2, r4
 8005888:	3302      	adds	r3, #2
 800588a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800588e:	e7c4      	b.n	800581a <_printf_common+0x62>
 8005890:	2301      	movs	r3, #1
 8005892:	4622      	mov	r2, r4
 8005894:	4639      	mov	r1, r7
 8005896:	4630      	mov	r0, r6
 8005898:	47c0      	blx	r8
 800589a:	3001      	adds	r0, #1
 800589c:	d0e6      	beq.n	800586c <_printf_common+0xb4>
 800589e:	f109 0901 	add.w	r9, r9, #1
 80058a2:	e7d8      	b.n	8005856 <_printf_common+0x9e>

080058a4 <quorem>:
 80058a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	6903      	ldr	r3, [r0, #16]
 80058aa:	690c      	ldr	r4, [r1, #16]
 80058ac:	4680      	mov	r8, r0
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	f2c0 8084 	blt.w	80059bc <quorem+0x118>
 80058b4:	3c01      	subs	r4, #1
 80058b6:	f101 0714 	add.w	r7, r1, #20
 80058ba:	f100 0614 	add.w	r6, r0, #20
 80058be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80058c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80058c6:	3501      	adds	r5, #1
 80058c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80058cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80058d0:	eb06 030c 	add.w	r3, r6, ip
 80058d4:	eb07 090c 	add.w	r9, r7, ip
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	b39d      	cbz	r5, 8005944 <quorem+0xa0>
 80058dc:	f04f 0a00 	mov.w	sl, #0
 80058e0:	4638      	mov	r0, r7
 80058e2:	46b6      	mov	lr, r6
 80058e4:	46d3      	mov	fp, sl
 80058e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80058ea:	b293      	uxth	r3, r2
 80058ec:	fb05 a303 	mla	r3, r5, r3, sl
 80058f0:	0c12      	lsrs	r2, r2, #16
 80058f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058f6:	fb05 a202 	mla	r2, r5, r2, sl
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ebab 0303 	sub.w	r3, fp, r3
 8005900:	f8de b000 	ldr.w	fp, [lr]
 8005904:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005908:	fa1f fb8b 	uxth.w	fp, fp
 800590c:	445b      	add	r3, fp
 800590e:	fa1f fb82 	uxth.w	fp, r2
 8005912:	f8de 2000 	ldr.w	r2, [lr]
 8005916:	4581      	cmp	r9, r0
 8005918:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800591c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005920:	b29b      	uxth	r3, r3
 8005922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005926:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800592a:	f84e 3b04 	str.w	r3, [lr], #4
 800592e:	d2da      	bcs.n	80058e6 <quorem+0x42>
 8005930:	f856 300c 	ldr.w	r3, [r6, ip]
 8005934:	b933      	cbnz	r3, 8005944 <quorem+0xa0>
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	3b04      	subs	r3, #4
 800593a:	429e      	cmp	r6, r3
 800593c:	461a      	mov	r2, r3
 800593e:	d331      	bcc.n	80059a4 <quorem+0x100>
 8005940:	f8c8 4010 	str.w	r4, [r8, #16]
 8005944:	4640      	mov	r0, r8
 8005946:	f001 f825 	bl	8006994 <__mcmp>
 800594a:	2800      	cmp	r0, #0
 800594c:	db26      	blt.n	800599c <quorem+0xf8>
 800594e:	4630      	mov	r0, r6
 8005950:	f04f 0c00 	mov.w	ip, #0
 8005954:	3501      	adds	r5, #1
 8005956:	f857 1b04 	ldr.w	r1, [r7], #4
 800595a:	f8d0 e000 	ldr.w	lr, [r0]
 800595e:	b28b      	uxth	r3, r1
 8005960:	ebac 0303 	sub.w	r3, ip, r3
 8005964:	fa1f f28e 	uxth.w	r2, lr
 8005968:	4413      	add	r3, r2
 800596a:	0c0a      	lsrs	r2, r1, #16
 800596c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005974:	b29b      	uxth	r3, r3
 8005976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800597a:	45b9      	cmp	r9, r7
 800597c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005980:	f840 3b04 	str.w	r3, [r0], #4
 8005984:	d2e7      	bcs.n	8005956 <quorem+0xb2>
 8005986:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800598a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800598e:	b92a      	cbnz	r2, 800599c <quorem+0xf8>
 8005990:	3b04      	subs	r3, #4
 8005992:	429e      	cmp	r6, r3
 8005994:	461a      	mov	r2, r3
 8005996:	d30b      	bcc.n	80059b0 <quorem+0x10c>
 8005998:	f8c8 4010 	str.w	r4, [r8, #16]
 800599c:	4628      	mov	r0, r5
 800599e:	b003      	add	sp, #12
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	3b04      	subs	r3, #4
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d1c9      	bne.n	8005940 <quorem+0x9c>
 80059ac:	3c01      	subs	r4, #1
 80059ae:	e7c4      	b.n	800593a <quorem+0x96>
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	3b04      	subs	r3, #4
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	d1ef      	bne.n	8005998 <quorem+0xf4>
 80059b8:	3c01      	subs	r4, #1
 80059ba:	e7ea      	b.n	8005992 <quorem+0xee>
 80059bc:	2000      	movs	r0, #0
 80059be:	e7ee      	b.n	800599e <quorem+0xfa>

080059c0 <_dtoa_r>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	4616      	mov	r6, r2
 80059c6:	461f      	mov	r7, r3
 80059c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059ca:	b095      	sub	sp, #84	; 0x54
 80059cc:	4604      	mov	r4, r0
 80059ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80059d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80059d6:	b93d      	cbnz	r5, 80059e8 <_dtoa_r+0x28>
 80059d8:	2010      	movs	r0, #16
 80059da:	f000 fdb3 	bl	8006544 <malloc>
 80059de:	6260      	str	r0, [r4, #36]	; 0x24
 80059e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059e4:	6005      	str	r5, [r0, #0]
 80059e6:	60c5      	str	r5, [r0, #12]
 80059e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	b151      	cbz	r1, 8005a04 <_dtoa_r+0x44>
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	2301      	movs	r3, #1
 80059f2:	4093      	lsls	r3, r2
 80059f4:	604a      	str	r2, [r1, #4]
 80059f6:	608b      	str	r3, [r1, #8]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 fdea 	bl	80065d2 <_Bfree>
 80059fe:	2200      	movs	r2, #0
 8005a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	1e3b      	subs	r3, r7, #0
 8005a06:	bfaf      	iteee	ge
 8005a08:	2300      	movge	r3, #0
 8005a0a:	2201      	movlt	r2, #1
 8005a0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	9303      	strlt	r3, [sp, #12]
 8005a12:	bfac      	ite	ge
 8005a14:	f8c8 3000 	strge.w	r3, [r8]
 8005a18:	f8c8 2000 	strlt.w	r2, [r8]
 8005a1c:	4bae      	ldr	r3, [pc, #696]	; (8005cd8 <_dtoa_r+0x318>)
 8005a1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a22:	ea33 0308 	bics.w	r3, r3, r8
 8005a26:	d11b      	bne.n	8005a60 <_dtoa_r+0xa0>
 8005a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	9b02      	ldr	r3, [sp, #8]
 8005a32:	b923      	cbnz	r3, 8005a3e <_dtoa_r+0x7e>
 8005a34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f000 8545 	beq.w	80064c8 <_dtoa_r+0xb08>
 8005a3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a40:	b953      	cbnz	r3, 8005a58 <_dtoa_r+0x98>
 8005a42:	4ba6      	ldr	r3, [pc, #664]	; (8005cdc <_dtoa_r+0x31c>)
 8005a44:	e021      	b.n	8005a8a <_dtoa_r+0xca>
 8005a46:	4ba6      	ldr	r3, [pc, #664]	; (8005ce0 <_dtoa_r+0x320>)
 8005a48:	9306      	str	r3, [sp, #24]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	9806      	ldr	r0, [sp, #24]
 8005a52:	b015      	add	sp, #84	; 0x54
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a58:	4ba0      	ldr	r3, [pc, #640]	; (8005cdc <_dtoa_r+0x31c>)
 8005a5a:	9306      	str	r3, [sp, #24]
 8005a5c:	3303      	adds	r3, #3
 8005a5e:	e7f5      	b.n	8005a4c <_dtoa_r+0x8c>
 8005a60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	4630      	mov	r0, r6
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	f7fa ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005a70:	4682      	mov	sl, r0
 8005a72:	b160      	cbz	r0, 8005a8e <_dtoa_r+0xce>
 8005a74:	2301      	movs	r3, #1
 8005a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8520 	beq.w	80064c2 <_dtoa_r+0xb02>
 8005a82:	4b98      	ldr	r3, [pc, #608]	; (8005ce4 <_dtoa_r+0x324>)
 8005a84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	9306      	str	r3, [sp, #24]
 8005a8c:	e7e0      	b.n	8005a50 <_dtoa_r+0x90>
 8005a8e:	ab12      	add	r3, sp, #72	; 0x48
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	ab13      	add	r3, sp, #76	; 0x4c
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4632      	mov	r2, r6
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fff2 	bl	8006a84 <__d2b>
 8005aa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005aa4:	4683      	mov	fp, r0
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	d07d      	beq.n	8005ba6 <_dtoa_r+0x1e6>
 8005aaa:	46b0      	mov	r8, r6
 8005aac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ab0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005ab4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005ab8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005abc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4b89      	ldr	r3, [pc, #548]	; (8005ce8 <_dtoa_r+0x328>)
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fa fb4e 	bl	8000168 <__aeabi_dsub>
 8005acc:	a37c      	add	r3, pc, #496	; (adr r3, 8005cc0 <_dtoa_r+0x300>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	a37c      	add	r3, pc, #496	; (adr r3, 8005cc8 <_dtoa_r+0x308>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fb46 	bl	800016c <__adddf3>
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	f7fa fc8d 	bl	8000404 <__aeabi_i2d>
 8005aea:	a379      	add	r3, pc, #484	; (adr r3, 8005cd0 <_dtoa_r+0x310>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fcf2 	bl	80004d8 <__aeabi_dmul>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4630      	mov	r0, r6
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa fb36 	bl	800016c <__adddf3>
 8005b00:	4606      	mov	r6, r0
 8005b02:	460f      	mov	r7, r1
 8005b04:	f7fa ff98 	bl	8000a38 <__aeabi_d2iz>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa ff53 	bl	80009bc <__aeabi_dcmplt>
 8005b16:	b148      	cbz	r0, 8005b2c <_dtoa_r+0x16c>
 8005b18:	4650      	mov	r0, sl
 8005b1a:	f7fa fc73 	bl	8000404 <__aeabi_i2d>
 8005b1e:	4632      	mov	r2, r6
 8005b20:	463b      	mov	r3, r7
 8005b22:	f7fa ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8005b26:	b908      	cbnz	r0, 8005b2c <_dtoa_r+0x16c>
 8005b28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b2c:	f1ba 0f16 	cmp.w	sl, #22
 8005b30:	d85a      	bhi.n	8005be8 <_dtoa_r+0x228>
 8005b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b36:	496d      	ldr	r1, [pc, #436]	; (8005cec <_dtoa_r+0x32c>)
 8005b38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b40:	f7fa ff5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d051      	beq.n	8005bec <_dtoa_r+0x22c>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b52:	1b5d      	subs	r5, r3, r5
 8005b54:	1e6b      	subs	r3, r5, #1
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	bf43      	ittte	mi
 8005b5a:	2300      	movmi	r3, #0
 8005b5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005b60:	9307      	strmi	r3, [sp, #28]
 8005b62:	f04f 0900 	movpl.w	r9, #0
 8005b66:	f1ba 0f00 	cmp.w	sl, #0
 8005b6a:	db41      	blt.n	8005bf0 <_dtoa_r+0x230>
 8005b6c:	9b07      	ldr	r3, [sp, #28]
 8005b6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005b72:	4453      	add	r3, sl
 8005b74:	9307      	str	r3, [sp, #28]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9308      	str	r3, [sp, #32]
 8005b7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	f200 808f 	bhi.w	8005ca0 <_dtoa_r+0x2e0>
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	bfc4      	itt	gt
 8005b86:	3b04      	subgt	r3, #4
 8005b88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005b8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b8c:	bfc8      	it	gt
 8005b8e:	2500      	movgt	r5, #0
 8005b90:	f1a3 0302 	sub.w	r3, r3, #2
 8005b94:	bfd8      	it	le
 8005b96:	2501      	movle	r5, #1
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	f200 808d 	bhi.w	8005cb8 <_dtoa_r+0x2f8>
 8005b9e:	e8df f003 	tbb	[pc, r3]
 8005ba2:	7d7b      	.short	0x7d7b
 8005ba4:	6f2f      	.short	0x6f2f
 8005ba6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005baa:	441d      	add	r5, r3
 8005bac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005bb0:	2820      	cmp	r0, #32
 8005bb2:	dd13      	ble.n	8005bdc <_dtoa_r+0x21c>
 8005bb4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005bb8:	9b02      	ldr	r3, [sp, #8]
 8005bba:	fa08 f800 	lsl.w	r8, r8, r0
 8005bbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005bc2:	fa23 f000 	lsr.w	r0, r3, r0
 8005bc6:	ea48 0000 	orr.w	r0, r8, r0
 8005bca:	f7fa fc0b 	bl	80003e4 <__aeabi_ui2d>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005bd6:	3d01      	subs	r5, #1
 8005bd8:	9310      	str	r3, [sp, #64]	; 0x40
 8005bda:	e771      	b.n	8005ac0 <_dtoa_r+0x100>
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	f1c0 0020 	rsb	r0, r0, #32
 8005be2:	fa03 f000 	lsl.w	r0, r3, r0
 8005be6:	e7f0      	b.n	8005bca <_dtoa_r+0x20a>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e7b0      	b.n	8005b4e <_dtoa_r+0x18e>
 8005bec:	900d      	str	r0, [sp, #52]	; 0x34
 8005bee:	e7af      	b.n	8005b50 <_dtoa_r+0x190>
 8005bf0:	f1ca 0300 	rsb	r3, sl, #0
 8005bf4:	9308      	str	r3, [sp, #32]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	eba9 090a 	sub.w	r9, r9, sl
 8005bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8005bfe:	e7bc      	b.n	8005b7a <_dtoa_r+0x1ba>
 8005c00:	2301      	movs	r3, #1
 8005c02:	9309      	str	r3, [sp, #36]	; 0x24
 8005c04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dd74      	ble.n	8005cf4 <_dtoa_r+0x334>
 8005c0a:	4698      	mov	r8, r3
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c12:	6072      	str	r2, [r6, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	f102 0014 	add.w	r0, r2, #20
 8005c1a:	4298      	cmp	r0, r3
 8005c1c:	6871      	ldr	r1, [r6, #4]
 8005c1e:	d96e      	bls.n	8005cfe <_dtoa_r+0x33e>
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fca2 	bl	800656a <_Balloc>
 8005c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c28:	6030      	str	r0, [r6, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b8 0f0e 	cmp.w	r8, #14
 8005c30:	9306      	str	r3, [sp, #24]
 8005c32:	f200 80ed 	bhi.w	8005e10 <_dtoa_r+0x450>
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	f000 80ea 	beq.w	8005e10 <_dtoa_r+0x450>
 8005c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005c48:	dd77      	ble.n	8005d3a <_dtoa_r+0x37a>
 8005c4a:	4a28      	ldr	r2, [pc, #160]	; (8005cec <_dtoa_r+0x32c>)
 8005c4c:	f00a 030f 	and.w	r3, sl, #15
 8005c50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c58:	06f0      	lsls	r0, r6, #27
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c62:	d568      	bpl.n	8005d36 <_dtoa_r+0x376>
 8005c64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c68:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <_dtoa_r+0x330>)
 8005c6a:	2503      	movs	r5, #3
 8005c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c70:	f7fa fd5c 	bl	800072c <__aeabi_ddiv>
 8005c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c78:	f006 060f 	and.w	r6, r6, #15
 8005c7c:	4f1c      	ldr	r7, [pc, #112]	; (8005cf0 <_dtoa_r+0x330>)
 8005c7e:	e04f      	b.n	8005d20 <_dtoa_r+0x360>
 8005c80:	2301      	movs	r3, #1
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c86:	4453      	add	r3, sl
 8005c88:	f103 0801 	add.w	r8, r3, #1
 8005c8c:	9304      	str	r3, [sp, #16]
 8005c8e:	4643      	mov	r3, r8
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	bfb8      	it	lt
 8005c94:	2301      	movlt	r3, #1
 8005c96:	e7ba      	b.n	8005c0e <_dtoa_r+0x24e>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e7b2      	b.n	8005c02 <_dtoa_r+0x242>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e7f0      	b.n	8005c82 <_dtoa_r+0x2c2>
 8005ca0:	2501      	movs	r5, #1
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ca6:	931e      	str	r3, [sp, #120]	; 0x78
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	2200      	movs	r2, #0
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	4698      	mov	r8, r3
 8005cb2:	2312      	movs	r3, #18
 8005cb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005cb6:	e7aa      	b.n	8005c0e <_dtoa_r+0x24e>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	e7f4      	b.n	8005ca8 <_dtoa_r+0x2e8>
 8005cbe:	bf00      	nop
 8005cc0:	636f4361 	.word	0x636f4361
 8005cc4:	3fd287a7 	.word	0x3fd287a7
 8005cc8:	8b60c8b3 	.word	0x8b60c8b3
 8005ccc:	3fc68a28 	.word	0x3fc68a28
 8005cd0:	509f79fb 	.word	0x509f79fb
 8005cd4:	3fd34413 	.word	0x3fd34413
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	08006d33 	.word	0x08006d33
 8005ce0:	08006d2a 	.word	0x08006d2a
 8005ce4:	08006d29 	.word	0x08006d29
 8005ce8:	3ff80000 	.word	0x3ff80000
 8005cec:	08006d60 	.word	0x08006d60
 8005cf0:	08006d38 	.word	0x08006d38
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	e7da      	b.n	8005cb4 <_dtoa_r+0x2f4>
 8005cfe:	3101      	adds	r1, #1
 8005d00:	6071      	str	r1, [r6, #4]
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	e787      	b.n	8005c16 <_dtoa_r+0x256>
 8005d06:	07f1      	lsls	r1, r6, #31
 8005d08:	d508      	bpl.n	8005d1c <_dtoa_r+0x35c>
 8005d0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d12:	f7fa fbe1 	bl	80004d8 <__aeabi_dmul>
 8005d16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	1076      	asrs	r6, r6, #1
 8005d1e:	3708      	adds	r7, #8
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	d1f0      	bne.n	8005d06 <_dtoa_r+0x346>
 8005d24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	f7fa fcfe 	bl	800072c <__aeabi_ddiv>
 8005d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d34:	e01b      	b.n	8005d6e <_dtoa_r+0x3ae>
 8005d36:	2502      	movs	r5, #2
 8005d38:	e7a0      	b.n	8005c7c <_dtoa_r+0x2bc>
 8005d3a:	f000 80a4 	beq.w	8005e86 <_dtoa_r+0x4c6>
 8005d3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d42:	f1ca 0600 	rsb	r6, sl, #0
 8005d46:	4ba0      	ldr	r3, [pc, #640]	; (8005fc8 <_dtoa_r+0x608>)
 8005d48:	f006 020f 	and.w	r2, r6, #15
 8005d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fbc0 	bl	80004d8 <__aeabi_dmul>
 8005d58:	2502      	movs	r5, #2
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d60:	4f9a      	ldr	r7, [pc, #616]	; (8005fcc <_dtoa_r+0x60c>)
 8005d62:	1136      	asrs	r6, r6, #4
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	f040 8083 	bne.w	8005e70 <_dtoa_r+0x4b0>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e0      	bne.n	8005d30 <_dtoa_r+0x370>
 8005d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 808a 	beq.w	8005e8a <_dtoa_r+0x4ca>
 8005d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b92      	ldr	r3, [pc, #584]	; (8005fd0 <_dtoa_r+0x610>)
 8005d86:	f7fa fe19 	bl	80009bc <__aeabi_dcmplt>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d07d      	beq.n	8005e8a <_dtoa_r+0x4ca>
 8005d8e:	f1b8 0f00 	cmp.w	r8, #0
 8005d92:	d07a      	beq.n	8005e8a <_dtoa_r+0x4ca>
 8005d94:	9b04      	ldr	r3, [sp, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dd36      	ble.n	8005e08 <_dtoa_r+0x448>
 8005d9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4b8c      	ldr	r3, [pc, #560]	; (8005fd4 <_dtoa_r+0x614>)
 8005da2:	f7fa fb99 	bl	80004d8 <__aeabi_dmul>
 8005da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005daa:	9e04      	ldr	r6, [sp, #16]
 8005dac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005db0:	3501      	adds	r5, #1
 8005db2:	4628      	mov	r0, r5
 8005db4:	f7fa fb26 	bl	8000404 <__aeabi_i2d>
 8005db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dbc:	f7fa fb8c 	bl	80004d8 <__aeabi_dmul>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <_dtoa_r+0x618>)
 8005dc4:	f7fa f9d2 	bl	800016c <__adddf3>
 8005dc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005dcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d15c      	bne.n	8005e90 <_dtoa_r+0x4d0>
 8005dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4b7f      	ldr	r3, [pc, #508]	; (8005fdc <_dtoa_r+0x61c>)
 8005dde:	f7fa f9c3 	bl	8000168 <__aeabi_dsub>
 8005de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005de4:	462b      	mov	r3, r5
 8005de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dea:	f7fa fe05 	bl	80009f8 <__aeabi_dcmpgt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 8281 	bne.w	80062f6 <_dtoa_r+0x936>
 8005df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dfa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005dfe:	f7fa fddd 	bl	80009bc <__aeabi_dcmplt>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f040 8275 	bne.w	80062f2 <_dtoa_r+0x932>
 8005e08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f2c0 814b 	blt.w	80060ae <_dtoa_r+0x6ee>
 8005e18:	f1ba 0f0e 	cmp.w	sl, #14
 8005e1c:	f300 8147 	bgt.w	80060ae <_dtoa_r+0x6ee>
 8005e20:	4b69      	ldr	r3, [pc, #420]	; (8005fc8 <_dtoa_r+0x608>)
 8005e22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f280 80d7 	bge.w	8005fe4 <_dtoa_r+0x624>
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	f300 80d3 	bgt.w	8005fe4 <_dtoa_r+0x624>
 8005e3e:	f040 8257 	bne.w	80062f0 <_dtoa_r+0x930>
 8005e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b64      	ldr	r3, [pc, #400]	; (8005fdc <_dtoa_r+0x61c>)
 8005e4a:	f7fa fb45 	bl	80004d8 <__aeabi_dmul>
 8005e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e52:	f7fa fdc7 	bl	80009e4 <__aeabi_dcmpge>
 8005e56:	4646      	mov	r6, r8
 8005e58:	4647      	mov	r7, r8
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f040 822d 	bne.w	80062ba <_dtoa_r+0x8fa>
 8005e60:	9b06      	ldr	r3, [sp, #24]
 8005e62:	9a06      	ldr	r2, [sp, #24]
 8005e64:	1c5d      	adds	r5, r3, #1
 8005e66:	2331      	movs	r3, #49	; 0x31
 8005e68:	f10a 0a01 	add.w	sl, sl, #1
 8005e6c:	7013      	strb	r3, [r2, #0]
 8005e6e:	e228      	b.n	80062c2 <_dtoa_r+0x902>
 8005e70:	07f2      	lsls	r2, r6, #31
 8005e72:	d505      	bpl.n	8005e80 <_dtoa_r+0x4c0>
 8005e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e78:	f7fa fb2e 	bl	80004d8 <__aeabi_dmul>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	3501      	adds	r5, #1
 8005e80:	1076      	asrs	r6, r6, #1
 8005e82:	3708      	adds	r7, #8
 8005e84:	e76e      	b.n	8005d64 <_dtoa_r+0x3a4>
 8005e86:	2502      	movs	r5, #2
 8005e88:	e771      	b.n	8005d6e <_dtoa_r+0x3ae>
 8005e8a:	4657      	mov	r7, sl
 8005e8c:	4646      	mov	r6, r8
 8005e8e:	e790      	b.n	8005db2 <_dtoa_r+0x3f2>
 8005e90:	4b4d      	ldr	r3, [pc, #308]	; (8005fc8 <_dtoa_r+0x608>)
 8005e92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d048      	beq.n	8005f32 <_dtoa_r+0x572>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	494e      	ldr	r1, [pc, #312]	; (8005fe0 <_dtoa_r+0x620>)
 8005ea8:	f7fa fc40 	bl	800072c <__aeabi_ddiv>
 8005eac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005eb0:	f7fa f95a 	bl	8000168 <__aeabi_dsub>
 8005eb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005eb8:	9d06      	ldr	r5, [sp, #24]
 8005eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ebe:	f7fa fdbb 	bl	8000a38 <__aeabi_d2iz>
 8005ec2:	9011      	str	r0, [sp, #68]	; 0x44
 8005ec4:	f7fa fa9e 	bl	8000404 <__aeabi_i2d>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ed0:	f7fa f94a 	bl	8000168 <__aeabi_dsub>
 8005ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eda:	3330      	adds	r3, #48	; 0x30
 8005edc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ee0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ee4:	f7fa fd6a 	bl	80009bc <__aeabi_dcmplt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d163      	bne.n	8005fb4 <_dtoa_r+0x5f4>
 8005eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	4937      	ldr	r1, [pc, #220]	; (8005fd0 <_dtoa_r+0x610>)
 8005ef4:	f7fa f938 	bl	8000168 <__aeabi_dsub>
 8005ef8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005efc:	f7fa fd5e 	bl	80009bc <__aeabi_dcmplt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 80b5 	bne.w	8006070 <_dtoa_r+0x6b0>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	1aeb      	subs	r3, r5, r3
 8005f0a:	429e      	cmp	r6, r3
 8005f0c:	f77f af7c 	ble.w	8005e08 <_dtoa_r+0x448>
 8005f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f14:	2200      	movs	r2, #0
 8005f16:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <_dtoa_r+0x614>)
 8005f18:	f7fa fade 	bl	80004d8 <__aeabi_dmul>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <_dtoa_r+0x614>)
 8005f28:	f7fa fad6 	bl	80004d8 <__aeabi_dmul>
 8005f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f30:	e7c3      	b.n	8005eba <_dtoa_r+0x4fa>
 8005f32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f36:	f7fa facf 	bl	80004d8 <__aeabi_dmul>
 8005f3a:	9b06      	ldr	r3, [sp, #24]
 8005f3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f40:	199d      	adds	r5, r3, r6
 8005f42:	461e      	mov	r6, r3
 8005f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f48:	f7fa fd76 	bl	8000a38 <__aeabi_d2iz>
 8005f4c:	9011      	str	r0, [sp, #68]	; 0x44
 8005f4e:	f7fa fa59 	bl	8000404 <__aeabi_i2d>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5a:	f7fa f905 	bl	8000168 <__aeabi_dsub>
 8005f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f64:	3330      	adds	r3, #48	; 0x30
 8005f66:	f806 3b01 	strb.w	r3, [r6], #1
 8005f6a:	42ae      	cmp	r6, r5
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	d124      	bne.n	8005fbc <_dtoa_r+0x5fc>
 8005f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <_dtoa_r+0x620>)
 8005f78:	f7fa f8f8 	bl	800016c <__adddf3>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f84:	f7fa fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d171      	bne.n	8006070 <_dtoa_r+0x6b0>
 8005f8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f90:	2000      	movs	r0, #0
 8005f92:	4913      	ldr	r1, [pc, #76]	; (8005fe0 <_dtoa_r+0x620>)
 8005f94:	f7fa f8e8 	bl	8000168 <__aeabi_dsub>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa0:	f7fa fd0c 	bl	80009bc <__aeabi_dcmplt>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f43f af2f 	beq.w	8005e08 <_dtoa_r+0x448>
 8005faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fae:	1e6a      	subs	r2, r5, #1
 8005fb0:	2b30      	cmp	r3, #48	; 0x30
 8005fb2:	d001      	beq.n	8005fb8 <_dtoa_r+0x5f8>
 8005fb4:	46ba      	mov	sl, r7
 8005fb6:	e04a      	b.n	800604e <_dtoa_r+0x68e>
 8005fb8:	4615      	mov	r5, r2
 8005fba:	e7f6      	b.n	8005faa <_dtoa_r+0x5ea>
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <_dtoa_r+0x614>)
 8005fbe:	f7fa fa8b 	bl	80004d8 <__aeabi_dmul>
 8005fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc6:	e7bd      	b.n	8005f44 <_dtoa_r+0x584>
 8005fc8:	08006d60 	.word	0x08006d60
 8005fcc:	08006d38 	.word	0x08006d38
 8005fd0:	3ff00000 	.word	0x3ff00000
 8005fd4:	40240000 	.word	0x40240000
 8005fd8:	401c0000 	.word	0x401c0000
 8005fdc:	40140000 	.word	0x40140000
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	9d06      	ldr	r5, [sp, #24]
 8005fe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	f7fa fb9b 	bl	800072c <__aeabi_ddiv>
 8005ff6:	f7fa fd1f 	bl	8000a38 <__aeabi_d2iz>
 8005ffa:	4681      	mov	r9, r0
 8005ffc:	f7fa fa02 	bl	8000404 <__aeabi_i2d>
 8006000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006004:	f7fa fa68 	bl	80004d8 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa f8aa 	bl	8000168 <__aeabi_dsub>
 8006014:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006018:	f805 6b01 	strb.w	r6, [r5], #1
 800601c:	9e06      	ldr	r6, [sp, #24]
 800601e:	4602      	mov	r2, r0
 8006020:	1bae      	subs	r6, r5, r6
 8006022:	45b0      	cmp	r8, r6
 8006024:	460b      	mov	r3, r1
 8006026:	d135      	bne.n	8006094 <_dtoa_r+0x6d4>
 8006028:	f7fa f8a0 	bl	800016c <__adddf3>
 800602c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006030:	4606      	mov	r6, r0
 8006032:	460f      	mov	r7, r1
 8006034:	f7fa fce0 	bl	80009f8 <__aeabi_dcmpgt>
 8006038:	b9c8      	cbnz	r0, 800606e <_dtoa_r+0x6ae>
 800603a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603e:	4630      	mov	r0, r6
 8006040:	4639      	mov	r1, r7
 8006042:	f7fa fcb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006046:	b110      	cbz	r0, 800604e <_dtoa_r+0x68e>
 8006048:	f019 0f01 	tst.w	r9, #1
 800604c:	d10f      	bne.n	800606e <_dtoa_r+0x6ae>
 800604e:	4659      	mov	r1, fp
 8006050:	4620      	mov	r0, r4
 8006052:	f000 fabe 	bl	80065d2 <_Bfree>
 8006056:	2300      	movs	r3, #0
 8006058:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800605a:	702b      	strb	r3, [r5, #0]
 800605c:	f10a 0301 	add.w	r3, sl, #1
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006064:	2b00      	cmp	r3, #0
 8006066:	f43f acf3 	beq.w	8005a50 <_dtoa_r+0x90>
 800606a:	601d      	str	r5, [r3, #0]
 800606c:	e4f0      	b.n	8005a50 <_dtoa_r+0x90>
 800606e:	4657      	mov	r7, sl
 8006070:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006074:	1e6b      	subs	r3, r5, #1
 8006076:	2a39      	cmp	r2, #57	; 0x39
 8006078:	d106      	bne.n	8006088 <_dtoa_r+0x6c8>
 800607a:	9a06      	ldr	r2, [sp, #24]
 800607c:	429a      	cmp	r2, r3
 800607e:	d107      	bne.n	8006090 <_dtoa_r+0x6d0>
 8006080:	2330      	movs	r3, #48	; 0x30
 8006082:	7013      	strb	r3, [r2, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	3701      	adds	r7, #1
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	3201      	adds	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e791      	b.n	8005fb4 <_dtoa_r+0x5f4>
 8006090:	461d      	mov	r5, r3
 8006092:	e7ed      	b.n	8006070 <_dtoa_r+0x6b0>
 8006094:	2200      	movs	r2, #0
 8006096:	4b99      	ldr	r3, [pc, #612]	; (80062fc <_dtoa_r+0x93c>)
 8006098:	f7fa fa1e 	bl	80004d8 <__aeabi_dmul>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	f7fa fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d09e      	beq.n	8005fea <_dtoa_r+0x62a>
 80060ac:	e7cf      	b.n	800604e <_dtoa_r+0x68e>
 80060ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	f000 8088 	beq.w	80061c6 <_dtoa_r+0x806>
 80060b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060b8:	2a01      	cmp	r2, #1
 80060ba:	dc6d      	bgt.n	8006198 <_dtoa_r+0x7d8>
 80060bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060be:	2a00      	cmp	r2, #0
 80060c0:	d066      	beq.n	8006190 <_dtoa_r+0x7d0>
 80060c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060c6:	464d      	mov	r5, r9
 80060c8:	9e08      	ldr	r6, [sp, #32]
 80060ca:	9a07      	ldr	r2, [sp, #28]
 80060cc:	2101      	movs	r1, #1
 80060ce:	441a      	add	r2, r3
 80060d0:	4620      	mov	r0, r4
 80060d2:	4499      	add	r9, r3
 80060d4:	9207      	str	r2, [sp, #28]
 80060d6:	f000 fb1c 	bl	8006712 <__i2b>
 80060da:	4607      	mov	r7, r0
 80060dc:	2d00      	cmp	r5, #0
 80060de:	dd0b      	ble.n	80060f8 <_dtoa_r+0x738>
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	dd08      	ble.n	80060f8 <_dtoa_r+0x738>
 80060e6:	42ab      	cmp	r3, r5
 80060e8:	bfa8      	it	ge
 80060ea:	462b      	movge	r3, r5
 80060ec:	9a07      	ldr	r2, [sp, #28]
 80060ee:	eba9 0903 	sub.w	r9, r9, r3
 80060f2:	1aed      	subs	r5, r5, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	9b08      	ldr	r3, [sp, #32]
 80060fa:	b1eb      	cbz	r3, 8006138 <_dtoa_r+0x778>
 80060fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d065      	beq.n	80061ce <_dtoa_r+0x80e>
 8006102:	b18e      	cbz	r6, 8006128 <_dtoa_r+0x768>
 8006104:	4639      	mov	r1, r7
 8006106:	4632      	mov	r2, r6
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fba1 	bl	8006850 <__pow5mult>
 800610e:	465a      	mov	r2, fp
 8006110:	4601      	mov	r1, r0
 8006112:	4607      	mov	r7, r0
 8006114:	4620      	mov	r0, r4
 8006116:	f000 fb05 	bl	8006724 <__multiply>
 800611a:	4659      	mov	r1, fp
 800611c:	900a      	str	r0, [sp, #40]	; 0x28
 800611e:	4620      	mov	r0, r4
 8006120:	f000 fa57 	bl	80065d2 <_Bfree>
 8006124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006126:	469b      	mov	fp, r3
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	1b9a      	subs	r2, r3, r6
 800612c:	d004      	beq.n	8006138 <_dtoa_r+0x778>
 800612e:	4659      	mov	r1, fp
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fb8d 	bl	8006850 <__pow5mult>
 8006136:	4683      	mov	fp, r0
 8006138:	2101      	movs	r1, #1
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fae9 	bl	8006712 <__i2b>
 8006140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006142:	4606      	mov	r6, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 81c6 	beq.w	80064d6 <_dtoa_r+0xb16>
 800614a:	461a      	mov	r2, r3
 800614c:	4601      	mov	r1, r0
 800614e:	4620      	mov	r0, r4
 8006150:	f000 fb7e 	bl	8006850 <__pow5mult>
 8006154:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006156:	4606      	mov	r6, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	dc3e      	bgt.n	80061da <_dtoa_r+0x81a>
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d137      	bne.n	80061d2 <_dtoa_r+0x812>
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006168:	2b00      	cmp	r3, #0
 800616a:	d134      	bne.n	80061d6 <_dtoa_r+0x816>
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006172:	0d1b      	lsrs	r3, r3, #20
 8006174:	051b      	lsls	r3, r3, #20
 8006176:	b12b      	cbz	r3, 8006184 <_dtoa_r+0x7c4>
 8006178:	9b07      	ldr	r3, [sp, #28]
 800617a:	f109 0901 	add.w	r9, r9, #1
 800617e:	3301      	adds	r3, #1
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	2301      	movs	r3, #1
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d128      	bne.n	80061de <_dtoa_r+0x81e>
 800618c:	2001      	movs	r0, #1
 800618e:	e02e      	b.n	80061ee <_dtoa_r+0x82e>
 8006190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006192:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006196:	e796      	b.n	80060c6 <_dtoa_r+0x706>
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	f108 36ff 	add.w	r6, r8, #4294967295
 800619e:	42b3      	cmp	r3, r6
 80061a0:	bfb7      	itett	lt
 80061a2:	9b08      	ldrlt	r3, [sp, #32]
 80061a4:	1b9e      	subge	r6, r3, r6
 80061a6:	1af2      	sublt	r2, r6, r3
 80061a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80061aa:	bfbf      	itttt	lt
 80061ac:	9608      	strlt	r6, [sp, #32]
 80061ae:	189b      	addlt	r3, r3, r2
 80061b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80061b2:	2600      	movlt	r6, #0
 80061b4:	f1b8 0f00 	cmp.w	r8, #0
 80061b8:	bfb9      	ittee	lt
 80061ba:	eba9 0508 	sublt.w	r5, r9, r8
 80061be:	2300      	movlt	r3, #0
 80061c0:	464d      	movge	r5, r9
 80061c2:	4643      	movge	r3, r8
 80061c4:	e781      	b.n	80060ca <_dtoa_r+0x70a>
 80061c6:	9e08      	ldr	r6, [sp, #32]
 80061c8:	464d      	mov	r5, r9
 80061ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061cc:	e786      	b.n	80060dc <_dtoa_r+0x71c>
 80061ce:	9a08      	ldr	r2, [sp, #32]
 80061d0:	e7ad      	b.n	800612e <_dtoa_r+0x76e>
 80061d2:	2300      	movs	r3, #0
 80061d4:	e7d6      	b.n	8006184 <_dtoa_r+0x7c4>
 80061d6:	9b02      	ldr	r3, [sp, #8]
 80061d8:	e7d4      	b.n	8006184 <_dtoa_r+0x7c4>
 80061da:	2300      	movs	r3, #0
 80061dc:	9308      	str	r3, [sp, #32]
 80061de:	6933      	ldr	r3, [r6, #16]
 80061e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061e4:	6918      	ldr	r0, [r3, #16]
 80061e6:	f000 fa46 	bl	8006676 <__hi0bits>
 80061ea:	f1c0 0020 	rsb	r0, r0, #32
 80061ee:	9b07      	ldr	r3, [sp, #28]
 80061f0:	4418      	add	r0, r3
 80061f2:	f010 001f 	ands.w	r0, r0, #31
 80061f6:	d047      	beq.n	8006288 <_dtoa_r+0x8c8>
 80061f8:	f1c0 0320 	rsb	r3, r0, #32
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	dd3b      	ble.n	8006278 <_dtoa_r+0x8b8>
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	f1c0 001c 	rsb	r0, r0, #28
 8006206:	4481      	add	r9, r0
 8006208:	4405      	add	r5, r0
 800620a:	4403      	add	r3, r0
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	f1b9 0f00 	cmp.w	r9, #0
 8006212:	dd05      	ble.n	8006220 <_dtoa_r+0x860>
 8006214:	4659      	mov	r1, fp
 8006216:	464a      	mov	r2, r9
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fb67 	bl	80068ec <__lshift>
 800621e:	4683      	mov	fp, r0
 8006220:	9b07      	ldr	r3, [sp, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	dd05      	ble.n	8006232 <_dtoa_r+0x872>
 8006226:	4631      	mov	r1, r6
 8006228:	461a      	mov	r2, r3
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fb5e 	bl	80068ec <__lshift>
 8006230:	4606      	mov	r6, r0
 8006232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006234:	b353      	cbz	r3, 800628c <_dtoa_r+0x8cc>
 8006236:	4631      	mov	r1, r6
 8006238:	4658      	mov	r0, fp
 800623a:	f000 fbab 	bl	8006994 <__mcmp>
 800623e:	2800      	cmp	r0, #0
 8006240:	da24      	bge.n	800628c <_dtoa_r+0x8cc>
 8006242:	2300      	movs	r3, #0
 8006244:	4659      	mov	r1, fp
 8006246:	220a      	movs	r2, #10
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f9d9 	bl	8006600 <__multadd>
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006254:	4683      	mov	fp, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8144 	beq.w	80064e4 <_dtoa_r+0xb24>
 800625c:	2300      	movs	r3, #0
 800625e:	4639      	mov	r1, r7
 8006260:	220a      	movs	r2, #10
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f9cc 	bl	8006600 <__multadd>
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	4607      	mov	r7, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc4d      	bgt.n	800630c <_dtoa_r+0x94c>
 8006270:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006272:	2b02      	cmp	r3, #2
 8006274:	dd4a      	ble.n	800630c <_dtoa_r+0x94c>
 8006276:	e011      	b.n	800629c <_dtoa_r+0x8dc>
 8006278:	d0c9      	beq.n	800620e <_dtoa_r+0x84e>
 800627a:	9a07      	ldr	r2, [sp, #28]
 800627c:	331c      	adds	r3, #28
 800627e:	441a      	add	r2, r3
 8006280:	4499      	add	r9, r3
 8006282:	441d      	add	r5, r3
 8006284:	4613      	mov	r3, r2
 8006286:	e7c1      	b.n	800620c <_dtoa_r+0x84c>
 8006288:	4603      	mov	r3, r0
 800628a:	e7f6      	b.n	800627a <_dtoa_r+0x8ba>
 800628c:	f1b8 0f00 	cmp.w	r8, #0
 8006290:	dc36      	bgt.n	8006300 <_dtoa_r+0x940>
 8006292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006294:	2b02      	cmp	r3, #2
 8006296:	dd33      	ble.n	8006300 <_dtoa_r+0x940>
 8006298:	f8cd 8010 	str.w	r8, [sp, #16]
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	b963      	cbnz	r3, 80062ba <_dtoa_r+0x8fa>
 80062a0:	4631      	mov	r1, r6
 80062a2:	2205      	movs	r2, #5
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 f9ab 	bl	8006600 <__multadd>
 80062aa:	4601      	mov	r1, r0
 80062ac:	4606      	mov	r6, r0
 80062ae:	4658      	mov	r0, fp
 80062b0:	f000 fb70 	bl	8006994 <__mcmp>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f73f add3 	bgt.w	8005e60 <_dtoa_r+0x4a0>
 80062ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062bc:	9d06      	ldr	r5, [sp, #24]
 80062be:	ea6f 0a03 	mvn.w	sl, r3
 80062c2:	f04f 0900 	mov.w	r9, #0
 80062c6:	4631      	mov	r1, r6
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 f982 	bl	80065d2 <_Bfree>
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	f43f aebd 	beq.w	800604e <_dtoa_r+0x68e>
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	d005      	beq.n	80062e6 <_dtoa_r+0x926>
 80062da:	45b9      	cmp	r9, r7
 80062dc:	d003      	beq.n	80062e6 <_dtoa_r+0x926>
 80062de:	4649      	mov	r1, r9
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f976 	bl	80065d2 <_Bfree>
 80062e6:	4639      	mov	r1, r7
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 f972 	bl	80065d2 <_Bfree>
 80062ee:	e6ae      	b.n	800604e <_dtoa_r+0x68e>
 80062f0:	2600      	movs	r6, #0
 80062f2:	4637      	mov	r7, r6
 80062f4:	e7e1      	b.n	80062ba <_dtoa_r+0x8fa>
 80062f6:	46ba      	mov	sl, r7
 80062f8:	4637      	mov	r7, r6
 80062fa:	e5b1      	b.n	8005e60 <_dtoa_r+0x4a0>
 80062fc:	40240000 	.word	0x40240000
 8006300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006302:	f8cd 8010 	str.w	r8, [sp, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80f3 	beq.w	80064f2 <_dtoa_r+0xb32>
 800630c:	2d00      	cmp	r5, #0
 800630e:	dd05      	ble.n	800631c <_dtoa_r+0x95c>
 8006310:	4639      	mov	r1, r7
 8006312:	462a      	mov	r2, r5
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fae9 	bl	80068ec <__lshift>
 800631a:	4607      	mov	r7, r0
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d04c      	beq.n	80063bc <_dtoa_r+0x9fc>
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4620      	mov	r0, r4
 8006326:	f000 f920 	bl	800656a <_Balloc>
 800632a:	4605      	mov	r5, r0
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	f107 010c 	add.w	r1, r7, #12
 8006332:	3202      	adds	r2, #2
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	300c      	adds	r0, #12
 8006338:	f000 f90c 	bl	8006554 <memcpy>
 800633c:	2201      	movs	r2, #1
 800633e:	4629      	mov	r1, r5
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fad3 	bl	80068ec <__lshift>
 8006346:	46b9      	mov	r9, r7
 8006348:	4607      	mov	r7, r0
 800634a:	9b06      	ldr	r3, [sp, #24]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	9b02      	ldr	r3, [sp, #8]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	9308      	str	r3, [sp, #32]
 8006356:	4631      	mov	r1, r6
 8006358:	4658      	mov	r0, fp
 800635a:	f7ff faa3 	bl	80058a4 <quorem>
 800635e:	4649      	mov	r1, r9
 8006360:	4605      	mov	r5, r0
 8006362:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006366:	4658      	mov	r0, fp
 8006368:	f000 fb14 	bl	8006994 <__mcmp>
 800636c:	463a      	mov	r2, r7
 800636e:	9002      	str	r0, [sp, #8]
 8006370:	4631      	mov	r1, r6
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fb28 	bl	80069c8 <__mdiff>
 8006378:	68c3      	ldr	r3, [r0, #12]
 800637a:	4602      	mov	r2, r0
 800637c:	bb03      	cbnz	r3, 80063c0 <_dtoa_r+0xa00>
 800637e:	4601      	mov	r1, r0
 8006380:	9009      	str	r0, [sp, #36]	; 0x24
 8006382:	4658      	mov	r0, fp
 8006384:	f000 fb06 	bl	8006994 <__mcmp>
 8006388:	4603      	mov	r3, r0
 800638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638c:	4611      	mov	r1, r2
 800638e:	4620      	mov	r0, r4
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	f000 f91e 	bl	80065d2 <_Bfree>
 8006396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006398:	b9a3      	cbnz	r3, 80063c4 <_dtoa_r+0xa04>
 800639a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800639c:	b992      	cbnz	r2, 80063c4 <_dtoa_r+0xa04>
 800639e:	9a08      	ldr	r2, [sp, #32]
 80063a0:	b982      	cbnz	r2, 80063c4 <_dtoa_r+0xa04>
 80063a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063a6:	d029      	beq.n	80063fc <_dtoa_r+0xa3c>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd01      	ble.n	80063b2 <_dtoa_r+0x9f2>
 80063ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	1c5d      	adds	r5, r3, #1
 80063b6:	f883 8000 	strb.w	r8, [r3]
 80063ba:	e784      	b.n	80062c6 <_dtoa_r+0x906>
 80063bc:	4638      	mov	r0, r7
 80063be:	e7c2      	b.n	8006346 <_dtoa_r+0x986>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e7e3      	b.n	800638c <_dtoa_r+0x9cc>
 80063c4:	9a02      	ldr	r2, [sp, #8]
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	db04      	blt.n	80063d4 <_dtoa_r+0xa14>
 80063ca:	d123      	bne.n	8006414 <_dtoa_r+0xa54>
 80063cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80063ce:	bb0a      	cbnz	r2, 8006414 <_dtoa_r+0xa54>
 80063d0:	9a08      	ldr	r2, [sp, #32]
 80063d2:	b9fa      	cbnz	r2, 8006414 <_dtoa_r+0xa54>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	ddec      	ble.n	80063b2 <_dtoa_r+0x9f2>
 80063d8:	4659      	mov	r1, fp
 80063da:	2201      	movs	r2, #1
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 fa85 	bl	80068ec <__lshift>
 80063e2:	4631      	mov	r1, r6
 80063e4:	4683      	mov	fp, r0
 80063e6:	f000 fad5 	bl	8006994 <__mcmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	dc03      	bgt.n	80063f6 <_dtoa_r+0xa36>
 80063ee:	d1e0      	bne.n	80063b2 <_dtoa_r+0x9f2>
 80063f0:	f018 0f01 	tst.w	r8, #1
 80063f4:	d0dd      	beq.n	80063b2 <_dtoa_r+0x9f2>
 80063f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063fa:	d1d8      	bne.n	80063ae <_dtoa_r+0x9ee>
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	1c5d      	adds	r5, r3, #1
 8006402:	2339      	movs	r3, #57	; 0x39
 8006404:	7013      	strb	r3, [r2, #0]
 8006406:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800640a:	1e6a      	subs	r2, r5, #1
 800640c:	2b39      	cmp	r3, #57	; 0x39
 800640e:	d04d      	beq.n	80064ac <_dtoa_r+0xaec>
 8006410:	3301      	adds	r3, #1
 8006412:	e052      	b.n	80064ba <_dtoa_r+0xafa>
 8006414:	9a07      	ldr	r2, [sp, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f102 0501 	add.w	r5, r2, #1
 800641c:	dd06      	ble.n	800642c <_dtoa_r+0xa6c>
 800641e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006422:	d0eb      	beq.n	80063fc <_dtoa_r+0xa3c>
 8006424:	f108 0801 	add.w	r8, r8, #1
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	e7c4      	b.n	80063b6 <_dtoa_r+0x9f6>
 800642c:	9b06      	ldr	r3, [sp, #24]
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	1aeb      	subs	r3, r5, r3
 8006432:	4293      	cmp	r3, r2
 8006434:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006438:	d021      	beq.n	800647e <_dtoa_r+0xabe>
 800643a:	4659      	mov	r1, fp
 800643c:	2300      	movs	r3, #0
 800643e:	220a      	movs	r2, #10
 8006440:	4620      	mov	r0, r4
 8006442:	f000 f8dd 	bl	8006600 <__multadd>
 8006446:	45b9      	cmp	r9, r7
 8006448:	4683      	mov	fp, r0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	f04f 020a 	mov.w	r2, #10
 8006452:	4649      	mov	r1, r9
 8006454:	4620      	mov	r0, r4
 8006456:	d105      	bne.n	8006464 <_dtoa_r+0xaa4>
 8006458:	f000 f8d2 	bl	8006600 <__multadd>
 800645c:	4681      	mov	r9, r0
 800645e:	4607      	mov	r7, r0
 8006460:	9507      	str	r5, [sp, #28]
 8006462:	e778      	b.n	8006356 <_dtoa_r+0x996>
 8006464:	f000 f8cc 	bl	8006600 <__multadd>
 8006468:	4639      	mov	r1, r7
 800646a:	4681      	mov	r9, r0
 800646c:	2300      	movs	r3, #0
 800646e:	220a      	movs	r2, #10
 8006470:	4620      	mov	r0, r4
 8006472:	f000 f8c5 	bl	8006600 <__multadd>
 8006476:	4607      	mov	r7, r0
 8006478:	e7f2      	b.n	8006460 <_dtoa_r+0xaa0>
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	4659      	mov	r1, fp
 8006480:	2201      	movs	r2, #1
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fa32 	bl	80068ec <__lshift>
 8006488:	4631      	mov	r1, r6
 800648a:	4683      	mov	fp, r0
 800648c:	f000 fa82 	bl	8006994 <__mcmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	dcb8      	bgt.n	8006406 <_dtoa_r+0xa46>
 8006494:	d102      	bne.n	800649c <_dtoa_r+0xadc>
 8006496:	f018 0f01 	tst.w	r8, #1
 800649a:	d1b4      	bne.n	8006406 <_dtoa_r+0xa46>
 800649c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064a0:	1e6a      	subs	r2, r5, #1
 80064a2:	2b30      	cmp	r3, #48	; 0x30
 80064a4:	f47f af0f 	bne.w	80062c6 <_dtoa_r+0x906>
 80064a8:	4615      	mov	r5, r2
 80064aa:	e7f7      	b.n	800649c <_dtoa_r+0xadc>
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d105      	bne.n	80064be <_dtoa_r+0xafe>
 80064b2:	2331      	movs	r3, #49	; 0x31
 80064b4:	9a06      	ldr	r2, [sp, #24]
 80064b6:	f10a 0a01 	add.w	sl, sl, #1
 80064ba:	7013      	strb	r3, [r2, #0]
 80064bc:	e703      	b.n	80062c6 <_dtoa_r+0x906>
 80064be:	4615      	mov	r5, r2
 80064c0:	e7a1      	b.n	8006406 <_dtoa_r+0xa46>
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <_dtoa_r+0xb60>)
 80064c4:	f7ff bae1 	b.w	8005a8a <_dtoa_r+0xca>
 80064c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f47f aabb 	bne.w	8005a46 <_dtoa_r+0x86>
 80064d0:	4b14      	ldr	r3, [pc, #80]	; (8006524 <_dtoa_r+0xb64>)
 80064d2:	f7ff bada 	b.w	8005a8a <_dtoa_r+0xca>
 80064d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064d8:	2b01      	cmp	r3, #1
 80064da:	f77f ae3f 	ble.w	800615c <_dtoa_r+0x79c>
 80064de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064e0:	9308      	str	r3, [sp, #32]
 80064e2:	e653      	b.n	800618c <_dtoa_r+0x7cc>
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc03      	bgt.n	80064f2 <_dtoa_r+0xb32>
 80064ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	f73f aed5 	bgt.w	800629c <_dtoa_r+0x8dc>
 80064f2:	9d06      	ldr	r5, [sp, #24]
 80064f4:	4631      	mov	r1, r6
 80064f6:	4658      	mov	r0, fp
 80064f8:	f7ff f9d4 	bl	80058a4 <quorem>
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006502:	f805 8b01 	strb.w	r8, [r5], #1
 8006506:	9a04      	ldr	r2, [sp, #16]
 8006508:	1aeb      	subs	r3, r5, r3
 800650a:	429a      	cmp	r2, r3
 800650c:	ddb5      	ble.n	800647a <_dtoa_r+0xaba>
 800650e:	4659      	mov	r1, fp
 8006510:	2300      	movs	r3, #0
 8006512:	220a      	movs	r2, #10
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f873 	bl	8006600 <__multadd>
 800651a:	4683      	mov	fp, r0
 800651c:	e7ea      	b.n	80064f4 <_dtoa_r+0xb34>
 800651e:	bf00      	nop
 8006520:	08006d28 	.word	0x08006d28
 8006524:	08006d2a 	.word	0x08006d2a

08006528 <_localeconv_r>:
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <_localeconv_r+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a18      	ldr	r0, [r3, #32]
 800652e:	4b04      	ldr	r3, [pc, #16]	; (8006540 <_localeconv_r+0x18>)
 8006530:	2800      	cmp	r0, #0
 8006532:	bf08      	it	eq
 8006534:	4618      	moveq	r0, r3
 8006536:	30f0      	adds	r0, #240	; 0xf0
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	2000000c 	.word	0x2000000c
 8006540:	20000070 	.word	0x20000070

08006544 <malloc>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <malloc+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 baf9 	b.w	8006b40 <_malloc_r>
 800654e:	bf00      	nop
 8006550:	2000000c 	.word	0x2000000c

08006554 <memcpy>:
 8006554:	b510      	push	{r4, lr}
 8006556:	1e43      	subs	r3, r0, #1
 8006558:	440a      	add	r2, r1
 800655a:	4291      	cmp	r1, r2
 800655c:	d100      	bne.n	8006560 <memcpy+0xc>
 800655e:	bd10      	pop	{r4, pc}
 8006560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006568:	e7f7      	b.n	800655a <memcpy+0x6>

0800656a <_Balloc>:
 800656a:	b570      	push	{r4, r5, r6, lr}
 800656c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800656e:	4604      	mov	r4, r0
 8006570:	460e      	mov	r6, r1
 8006572:	b93d      	cbnz	r5, 8006584 <_Balloc+0x1a>
 8006574:	2010      	movs	r0, #16
 8006576:	f7ff ffe5 	bl	8006544 <malloc>
 800657a:	6260      	str	r0, [r4, #36]	; 0x24
 800657c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006580:	6005      	str	r5, [r0, #0]
 8006582:	60c5      	str	r5, [r0, #12]
 8006584:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006586:	68eb      	ldr	r3, [r5, #12]
 8006588:	b183      	cbz	r3, 80065ac <_Balloc+0x42>
 800658a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006592:	b9b8      	cbnz	r0, 80065c4 <_Balloc+0x5a>
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f506 	lsl.w	r5, r1, r6
 800659a:	1d6a      	adds	r2, r5, #5
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fabf 	bl	8006b22 <_calloc_r>
 80065a4:	b160      	cbz	r0, 80065c0 <_Balloc+0x56>
 80065a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80065aa:	e00e      	b.n	80065ca <_Balloc+0x60>
 80065ac:	2221      	movs	r2, #33	; 0x21
 80065ae:	2104      	movs	r1, #4
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fab6 	bl	8006b22 <_calloc_r>
 80065b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b8:	60e8      	str	r0, [r5, #12]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e4      	bne.n	800658a <_Balloc+0x20>
 80065c0:	2000      	movs	r0, #0
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	6802      	ldr	r2, [r0, #0]
 80065c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065ca:	2300      	movs	r3, #0
 80065cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d0:	e7f7      	b.n	80065c2 <_Balloc+0x58>

080065d2 <_Bfree>:
 80065d2:	b570      	push	{r4, r5, r6, lr}
 80065d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065d6:	4606      	mov	r6, r0
 80065d8:	460d      	mov	r5, r1
 80065da:	b93c      	cbnz	r4, 80065ec <_Bfree+0x1a>
 80065dc:	2010      	movs	r0, #16
 80065de:	f7ff ffb1 	bl	8006544 <malloc>
 80065e2:	6270      	str	r0, [r6, #36]	; 0x24
 80065e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e8:	6004      	str	r4, [r0, #0]
 80065ea:	60c4      	str	r4, [r0, #12]
 80065ec:	b13d      	cbz	r5, 80065fe <_Bfree+0x2c>
 80065ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065f0:	686a      	ldr	r2, [r5, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f8:	6029      	str	r1, [r5, #0]
 80065fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065fe:	bd70      	pop	{r4, r5, r6, pc}

08006600 <__multadd>:
 8006600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006604:	461f      	mov	r7, r3
 8006606:	4606      	mov	r6, r0
 8006608:	460c      	mov	r4, r1
 800660a:	2300      	movs	r3, #0
 800660c:	690d      	ldr	r5, [r1, #16]
 800660e:	f101 0c14 	add.w	ip, r1, #20
 8006612:	f8dc 0000 	ldr.w	r0, [ip]
 8006616:	3301      	adds	r3, #1
 8006618:	b281      	uxth	r1, r0
 800661a:	fb02 7101 	mla	r1, r2, r1, r7
 800661e:	0c00      	lsrs	r0, r0, #16
 8006620:	0c0f      	lsrs	r7, r1, #16
 8006622:	fb02 7000 	mla	r0, r2, r0, r7
 8006626:	b289      	uxth	r1, r1
 8006628:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800662c:	429d      	cmp	r5, r3
 800662e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006632:	f84c 1b04 	str.w	r1, [ip], #4
 8006636:	dcec      	bgt.n	8006612 <__multadd+0x12>
 8006638:	b1d7      	cbz	r7, 8006670 <__multadd+0x70>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	42ab      	cmp	r3, r5
 800663e:	dc12      	bgt.n	8006666 <__multadd+0x66>
 8006640:	6861      	ldr	r1, [r4, #4]
 8006642:	4630      	mov	r0, r6
 8006644:	3101      	adds	r1, #1
 8006646:	f7ff ff90 	bl	800656a <_Balloc>
 800664a:	4680      	mov	r8, r0
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	f104 010c 	add.w	r1, r4, #12
 8006652:	3202      	adds	r2, #2
 8006654:	0092      	lsls	r2, r2, #2
 8006656:	300c      	adds	r0, #12
 8006658:	f7ff ff7c 	bl	8006554 <memcpy>
 800665c:	4621      	mov	r1, r4
 800665e:	4630      	mov	r0, r6
 8006660:	f7ff ffb7 	bl	80065d2 <_Bfree>
 8006664:	4644      	mov	r4, r8
 8006666:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800666a:	3501      	adds	r5, #1
 800666c:	615f      	str	r7, [r3, #20]
 800666e:	6125      	str	r5, [r4, #16]
 8006670:	4620      	mov	r0, r4
 8006672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006676 <__hi0bits>:
 8006676:	0c02      	lsrs	r2, r0, #16
 8006678:	0412      	lsls	r2, r2, #16
 800667a:	4603      	mov	r3, r0
 800667c:	b9b2      	cbnz	r2, 80066ac <__hi0bits+0x36>
 800667e:	0403      	lsls	r3, r0, #16
 8006680:	2010      	movs	r0, #16
 8006682:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006686:	bf04      	itt	eq
 8006688:	021b      	lsleq	r3, r3, #8
 800668a:	3008      	addeq	r0, #8
 800668c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006690:	bf04      	itt	eq
 8006692:	011b      	lsleq	r3, r3, #4
 8006694:	3004      	addeq	r0, #4
 8006696:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800669a:	bf04      	itt	eq
 800669c:	009b      	lsleq	r3, r3, #2
 800669e:	3002      	addeq	r0, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db06      	blt.n	80066b2 <__hi0bits+0x3c>
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	d503      	bpl.n	80066b0 <__hi0bits+0x3a>
 80066a8:	3001      	adds	r0, #1
 80066aa:	4770      	bx	lr
 80066ac:	2000      	movs	r0, #0
 80066ae:	e7e8      	b.n	8006682 <__hi0bits+0xc>
 80066b0:	2020      	movs	r0, #32
 80066b2:	4770      	bx	lr

080066b4 <__lo0bits>:
 80066b4:	6803      	ldr	r3, [r0, #0]
 80066b6:	4601      	mov	r1, r0
 80066b8:	f013 0207 	ands.w	r2, r3, #7
 80066bc:	d00b      	beq.n	80066d6 <__lo0bits+0x22>
 80066be:	07da      	lsls	r2, r3, #31
 80066c0:	d423      	bmi.n	800670a <__lo0bits+0x56>
 80066c2:	0798      	lsls	r0, r3, #30
 80066c4:	bf49      	itett	mi
 80066c6:	085b      	lsrmi	r3, r3, #1
 80066c8:	089b      	lsrpl	r3, r3, #2
 80066ca:	2001      	movmi	r0, #1
 80066cc:	600b      	strmi	r3, [r1, #0]
 80066ce:	bf5c      	itt	pl
 80066d0:	600b      	strpl	r3, [r1, #0]
 80066d2:	2002      	movpl	r0, #2
 80066d4:	4770      	bx	lr
 80066d6:	b298      	uxth	r0, r3
 80066d8:	b9a8      	cbnz	r0, 8006706 <__lo0bits+0x52>
 80066da:	2010      	movs	r0, #16
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066e2:	bf04      	itt	eq
 80066e4:	0a1b      	lsreq	r3, r3, #8
 80066e6:	3008      	addeq	r0, #8
 80066e8:	071a      	lsls	r2, r3, #28
 80066ea:	bf04      	itt	eq
 80066ec:	091b      	lsreq	r3, r3, #4
 80066ee:	3004      	addeq	r0, #4
 80066f0:	079a      	lsls	r2, r3, #30
 80066f2:	bf04      	itt	eq
 80066f4:	089b      	lsreq	r3, r3, #2
 80066f6:	3002      	addeq	r0, #2
 80066f8:	07da      	lsls	r2, r3, #31
 80066fa:	d402      	bmi.n	8006702 <__lo0bits+0x4e>
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	d006      	beq.n	800670e <__lo0bits+0x5a>
 8006700:	3001      	adds	r0, #1
 8006702:	600b      	str	r3, [r1, #0]
 8006704:	4770      	bx	lr
 8006706:	4610      	mov	r0, r2
 8006708:	e7e9      	b.n	80066de <__lo0bits+0x2a>
 800670a:	2000      	movs	r0, #0
 800670c:	4770      	bx	lr
 800670e:	2020      	movs	r0, #32
 8006710:	4770      	bx	lr

08006712 <__i2b>:
 8006712:	b510      	push	{r4, lr}
 8006714:	460c      	mov	r4, r1
 8006716:	2101      	movs	r1, #1
 8006718:	f7ff ff27 	bl	800656a <_Balloc>
 800671c:	2201      	movs	r2, #1
 800671e:	6144      	str	r4, [r0, #20]
 8006720:	6102      	str	r2, [r0, #16]
 8006722:	bd10      	pop	{r4, pc}

08006724 <__multiply>:
 8006724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	4614      	mov	r4, r2
 800672a:	690a      	ldr	r2, [r1, #16]
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	4688      	mov	r8, r1
 8006730:	429a      	cmp	r2, r3
 8006732:	bfbe      	ittt	lt
 8006734:	460b      	movlt	r3, r1
 8006736:	46a0      	movlt	r8, r4
 8006738:	461c      	movlt	r4, r3
 800673a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800673e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006746:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800674a:	eb07 0609 	add.w	r6, r7, r9
 800674e:	42b3      	cmp	r3, r6
 8006750:	bfb8      	it	lt
 8006752:	3101      	addlt	r1, #1
 8006754:	f7ff ff09 	bl	800656a <_Balloc>
 8006758:	f100 0514 	add.w	r5, r0, #20
 800675c:	462b      	mov	r3, r5
 800675e:	2200      	movs	r2, #0
 8006760:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006764:	4573      	cmp	r3, lr
 8006766:	d316      	bcc.n	8006796 <__multiply+0x72>
 8006768:	f104 0214 	add.w	r2, r4, #20
 800676c:	f108 0114 	add.w	r1, r8, #20
 8006770:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006774:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	9b00      	ldr	r3, [sp, #0]
 800677c:	9201      	str	r2, [sp, #4]
 800677e:	4293      	cmp	r3, r2
 8006780:	d80c      	bhi.n	800679c <__multiply+0x78>
 8006782:	2e00      	cmp	r6, #0
 8006784:	dd03      	ble.n	800678e <__multiply+0x6a>
 8006786:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800678a:	2b00      	cmp	r3, #0
 800678c:	d05d      	beq.n	800684a <__multiply+0x126>
 800678e:	6106      	str	r6, [r0, #16]
 8006790:	b003      	add	sp, #12
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	f843 2b04 	str.w	r2, [r3], #4
 800679a:	e7e3      	b.n	8006764 <__multiply+0x40>
 800679c:	f8b2 b000 	ldrh.w	fp, [r2]
 80067a0:	f1bb 0f00 	cmp.w	fp, #0
 80067a4:	d023      	beq.n	80067ee <__multiply+0xca>
 80067a6:	4689      	mov	r9, r1
 80067a8:	46ac      	mov	ip, r5
 80067aa:	f04f 0800 	mov.w	r8, #0
 80067ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80067b2:	f8dc a000 	ldr.w	sl, [ip]
 80067b6:	b2a3      	uxth	r3, r4
 80067b8:	fa1f fa8a 	uxth.w	sl, sl
 80067bc:	fb0b a303 	mla	r3, fp, r3, sl
 80067c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067c4:	f8dc 4000 	ldr.w	r4, [ip]
 80067c8:	4443      	add	r3, r8
 80067ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80067d2:	46e2      	mov	sl, ip
 80067d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80067d8:	b29b      	uxth	r3, r3
 80067da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067de:	454f      	cmp	r7, r9
 80067e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067e4:	f84a 3b04 	str.w	r3, [sl], #4
 80067e8:	d82b      	bhi.n	8006842 <__multiply+0x11e>
 80067ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	3204      	adds	r2, #4
 80067f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067f6:	f1ba 0f00 	cmp.w	sl, #0
 80067fa:	d020      	beq.n	800683e <__multiply+0x11a>
 80067fc:	4689      	mov	r9, r1
 80067fe:	46a8      	mov	r8, r5
 8006800:	f04f 0b00 	mov.w	fp, #0
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	f8b9 c000 	ldrh.w	ip, [r9]
 800680a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800680e:	b29b      	uxth	r3, r3
 8006810:	fb0a 440c 	mla	r4, sl, ip, r4
 8006814:	46c4      	mov	ip, r8
 8006816:	445c      	add	r4, fp
 8006818:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800681c:	f84c 3b04 	str.w	r3, [ip], #4
 8006820:	f859 3b04 	ldr.w	r3, [r9], #4
 8006824:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	fb0a b303 	mla	r3, sl, r3, fp
 800682e:	454f      	cmp	r7, r9
 8006830:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006834:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006838:	d805      	bhi.n	8006846 <__multiply+0x122>
 800683a:	f8c8 3004 	str.w	r3, [r8, #4]
 800683e:	3504      	adds	r5, #4
 8006840:	e79b      	b.n	800677a <__multiply+0x56>
 8006842:	46d4      	mov	ip, sl
 8006844:	e7b3      	b.n	80067ae <__multiply+0x8a>
 8006846:	46e0      	mov	r8, ip
 8006848:	e7dd      	b.n	8006806 <__multiply+0xe2>
 800684a:	3e01      	subs	r6, #1
 800684c:	e799      	b.n	8006782 <__multiply+0x5e>
	...

08006850 <__pow5mult>:
 8006850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006854:	4615      	mov	r5, r2
 8006856:	f012 0203 	ands.w	r2, r2, #3
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	d007      	beq.n	8006870 <__pow5mult+0x20>
 8006860:	4c21      	ldr	r4, [pc, #132]	; (80068e8 <__pow5mult+0x98>)
 8006862:	3a01      	subs	r2, #1
 8006864:	2300      	movs	r3, #0
 8006866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800686a:	f7ff fec9 	bl	8006600 <__multadd>
 800686e:	4607      	mov	r7, r0
 8006870:	10ad      	asrs	r5, r5, #2
 8006872:	d035      	beq.n	80068e0 <__pow5mult+0x90>
 8006874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006876:	b93c      	cbnz	r4, 8006888 <__pow5mult+0x38>
 8006878:	2010      	movs	r0, #16
 800687a:	f7ff fe63 	bl	8006544 <malloc>
 800687e:	6270      	str	r0, [r6, #36]	; 0x24
 8006880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006884:	6004      	str	r4, [r0, #0]
 8006886:	60c4      	str	r4, [r0, #12]
 8006888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800688c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006890:	b94c      	cbnz	r4, 80068a6 <__pow5mult+0x56>
 8006892:	f240 2171 	movw	r1, #625	; 0x271
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff3b 	bl	8006712 <__i2b>
 800689c:	2300      	movs	r3, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	07eb      	lsls	r3, r5, #31
 80068ac:	d50a      	bpl.n	80068c4 <__pow5mult+0x74>
 80068ae:	4639      	mov	r1, r7
 80068b0:	4622      	mov	r2, r4
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff36 	bl	8006724 <__multiply>
 80068b8:	4681      	mov	r9, r0
 80068ba:	4639      	mov	r1, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff fe88 	bl	80065d2 <_Bfree>
 80068c2:	464f      	mov	r7, r9
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	d00b      	beq.n	80068e0 <__pow5mult+0x90>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	b938      	cbnz	r0, 80068dc <__pow5mult+0x8c>
 80068cc:	4622      	mov	r2, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff27 	bl	8006724 <__multiply>
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f8c0 8000 	str.w	r8, [r0]
 80068dc:	4604      	mov	r4, r0
 80068de:	e7e4      	b.n	80068aa <__pow5mult+0x5a>
 80068e0:	4638      	mov	r0, r7
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	bf00      	nop
 80068e8:	08006e28 	.word	0x08006e28

080068ec <__lshift>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	4607      	mov	r7, r0
 80068f4:	4616      	mov	r6, r2
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068fc:	eb0a 0903 	add.w	r9, sl, r3
 8006900:	6849      	ldr	r1, [r1, #4]
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	f109 0501 	add.w	r5, r9, #1
 8006908:	42ab      	cmp	r3, r5
 800690a:	db32      	blt.n	8006972 <__lshift+0x86>
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff fe2c 	bl	800656a <_Balloc>
 8006912:	2300      	movs	r3, #0
 8006914:	4680      	mov	r8, r0
 8006916:	461a      	mov	r2, r3
 8006918:	f100 0114 	add.w	r1, r0, #20
 800691c:	4553      	cmp	r3, sl
 800691e:	db2b      	blt.n	8006978 <__lshift+0x8c>
 8006920:	6920      	ldr	r0, [r4, #16]
 8006922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006926:	f104 0314 	add.w	r3, r4, #20
 800692a:	f016 021f 	ands.w	r2, r6, #31
 800692e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006932:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006936:	d025      	beq.n	8006984 <__lshift+0x98>
 8006938:	2000      	movs	r0, #0
 800693a:	f1c2 0e20 	rsb	lr, r2, #32
 800693e:	468a      	mov	sl, r1
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	4096      	lsls	r6, r2
 8006944:	4330      	orrs	r0, r6
 8006946:	f84a 0b04 	str.w	r0, [sl], #4
 800694a:	f853 0b04 	ldr.w	r0, [r3], #4
 800694e:	459c      	cmp	ip, r3
 8006950:	fa20 f00e 	lsr.w	r0, r0, lr
 8006954:	d814      	bhi.n	8006980 <__lshift+0x94>
 8006956:	6048      	str	r0, [r1, #4]
 8006958:	b108      	cbz	r0, 800695e <__lshift+0x72>
 800695a:	f109 0502 	add.w	r5, r9, #2
 800695e:	3d01      	subs	r5, #1
 8006960:	4638      	mov	r0, r7
 8006962:	f8c8 5010 	str.w	r5, [r8, #16]
 8006966:	4621      	mov	r1, r4
 8006968:	f7ff fe33 	bl	80065d2 <_Bfree>
 800696c:	4640      	mov	r0, r8
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	3101      	adds	r1, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	e7c7      	b.n	8006908 <__lshift+0x1c>
 8006978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800697c:	3301      	adds	r3, #1
 800697e:	e7cd      	b.n	800691c <__lshift+0x30>
 8006980:	4651      	mov	r1, sl
 8006982:	e7dc      	b.n	800693e <__lshift+0x52>
 8006984:	3904      	subs	r1, #4
 8006986:	f853 2b04 	ldr.w	r2, [r3], #4
 800698a:	459c      	cmp	ip, r3
 800698c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006990:	d8f9      	bhi.n	8006986 <__lshift+0x9a>
 8006992:	e7e4      	b.n	800695e <__lshift+0x72>

08006994 <__mcmp>:
 8006994:	6903      	ldr	r3, [r0, #16]
 8006996:	690a      	ldr	r2, [r1, #16]
 8006998:	b530      	push	{r4, r5, lr}
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	d10c      	bne.n	80069b8 <__mcmp+0x24>
 800699e:	0092      	lsls	r2, r2, #2
 80069a0:	3014      	adds	r0, #20
 80069a2:	3114      	adds	r1, #20
 80069a4:	1884      	adds	r4, r0, r2
 80069a6:	4411      	add	r1, r2
 80069a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069b0:	4295      	cmp	r5, r2
 80069b2:	d003      	beq.n	80069bc <__mcmp+0x28>
 80069b4:	d305      	bcc.n	80069c2 <__mcmp+0x2e>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	bd30      	pop	{r4, r5, pc}
 80069bc:	42a0      	cmp	r0, r4
 80069be:	d3f3      	bcc.n	80069a8 <__mcmp+0x14>
 80069c0:	e7fa      	b.n	80069b8 <__mcmp+0x24>
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	e7f7      	b.n	80069b8 <__mcmp+0x24>

080069c8 <__mdiff>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	460d      	mov	r5, r1
 80069ce:	4607      	mov	r7, r0
 80069d0:	4611      	mov	r1, r2
 80069d2:	4628      	mov	r0, r5
 80069d4:	4614      	mov	r4, r2
 80069d6:	f7ff ffdd 	bl	8006994 <__mcmp>
 80069da:	1e06      	subs	r6, r0, #0
 80069dc:	d108      	bne.n	80069f0 <__mdiff+0x28>
 80069de:	4631      	mov	r1, r6
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff fdc2 	bl	800656a <_Balloc>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f0:	bfa4      	itt	ge
 80069f2:	4623      	movge	r3, r4
 80069f4:	462c      	movge	r4, r5
 80069f6:	4638      	mov	r0, r7
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	bfa6      	itte	ge
 80069fc:	461d      	movge	r5, r3
 80069fe:	2600      	movge	r6, #0
 8006a00:	2601      	movlt	r6, #1
 8006a02:	f7ff fdb2 	bl	800656a <_Balloc>
 8006a06:	f04f 0e00 	mov.w	lr, #0
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	692b      	ldr	r3, [r5, #16]
 8006a0e:	6926      	ldr	r6, [r4, #16]
 8006a10:	f104 0214 	add.w	r2, r4, #20
 8006a14:	f105 0914 	add.w	r9, r5, #20
 8006a18:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a1c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a20:	f100 0114 	add.w	r1, r0, #20
 8006a24:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a28:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a2c:	fa1f f38a 	uxth.w	r3, sl
 8006a30:	4473      	add	r3, lr
 8006a32:	b2ac      	uxth	r4, r5
 8006a34:	1b1b      	subs	r3, r3, r4
 8006a36:	0c2c      	lsrs	r4, r5, #16
 8006a38:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a3c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006a46:	45c8      	cmp	r8, r9
 8006a48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006a4c:	4694      	mov	ip, r2
 8006a4e:	f841 4b04 	str.w	r4, [r1], #4
 8006a52:	d8e7      	bhi.n	8006a24 <__mdiff+0x5c>
 8006a54:	45bc      	cmp	ip, r7
 8006a56:	d304      	bcc.n	8006a62 <__mdiff+0x9a>
 8006a58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a5c:	b183      	cbz	r3, 8006a80 <__mdiff+0xb8>
 8006a5e:	6106      	str	r6, [r0, #16]
 8006a60:	e7c4      	b.n	80069ec <__mdiff+0x24>
 8006a62:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006a66:	b2a2      	uxth	r2, r4
 8006a68:	4472      	add	r2, lr
 8006a6a:	1413      	asrs	r3, r2, #16
 8006a6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a70:	b292      	uxth	r2, r2
 8006a72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a76:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a7a:	f841 2b04 	str.w	r2, [r1], #4
 8006a7e:	e7e9      	b.n	8006a54 <__mdiff+0x8c>
 8006a80:	3e01      	subs	r6, #1
 8006a82:	e7e9      	b.n	8006a58 <__mdiff+0x90>

08006a84 <__d2b>:
 8006a84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a88:	461c      	mov	r4, r3
 8006a8a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4690      	mov	r8, r2
 8006a92:	f7ff fd6a 	bl	800656a <_Balloc>
 8006a96:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a9a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	bb34      	cbnz	r4, 8006af0 <__d2b+0x6c>
 8006aa2:	9201      	str	r2, [sp, #4]
 8006aa4:	f1b8 0200 	subs.w	r2, r8, #0
 8006aa8:	d027      	beq.n	8006afa <__d2b+0x76>
 8006aaa:	a802      	add	r0, sp, #8
 8006aac:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006ab0:	f7ff fe00 	bl	80066b4 <__lo0bits>
 8006ab4:	9900      	ldr	r1, [sp, #0]
 8006ab6:	b1f0      	cbz	r0, 8006af6 <__d2b+0x72>
 8006ab8:	9a01      	ldr	r2, [sp, #4]
 8006aba:	f1c0 0320 	rsb	r3, r0, #32
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	40c2      	lsrs	r2, r0
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	9201      	str	r2, [sp, #4]
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2102      	movne	r1, #2
 8006ad2:	2101      	moveq	r1, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	6139      	str	r1, [r7, #16]
 8006ad8:	b1c4      	cbz	r4, 8006b0c <__d2b+0x88>
 8006ada:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ade:	4404      	add	r4, r0
 8006ae0:	6034      	str	r4, [r6, #0]
 8006ae2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ae6:	6028      	str	r0, [r5, #0]
 8006ae8:	4638      	mov	r0, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006af4:	e7d5      	b.n	8006aa2 <__d2b+0x1e>
 8006af6:	6179      	str	r1, [r7, #20]
 8006af8:	e7e7      	b.n	8006aca <__d2b+0x46>
 8006afa:	a801      	add	r0, sp, #4
 8006afc:	f7ff fdda 	bl	80066b4 <__lo0bits>
 8006b00:	2101      	movs	r1, #1
 8006b02:	9b01      	ldr	r3, [sp, #4]
 8006b04:	6139      	str	r1, [r7, #16]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	3020      	adds	r0, #32
 8006b0a:	e7e5      	b.n	8006ad8 <__d2b+0x54>
 8006b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	6918      	ldr	r0, [r3, #16]
 8006b18:	f7ff fdad 	bl	8006676 <__hi0bits>
 8006b1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b20:	e7e1      	b.n	8006ae6 <__d2b+0x62>

08006b22 <_calloc_r>:
 8006b22:	b538      	push	{r3, r4, r5, lr}
 8006b24:	fb02 f401 	mul.w	r4, r2, r1
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f000 f809 	bl	8006b40 <_malloc_r>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b118      	cbz	r0, 8006b3a <_calloc_r+0x18>
 8006b32:	4622      	mov	r2, r4
 8006b34:	2100      	movs	r1, #0
 8006b36:	f7fe fb6f 	bl	8005218 <memset>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b40 <_malloc_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	1ccd      	adds	r5, r1, #3
 8006b44:	f025 0503 	bic.w	r5, r5, #3
 8006b48:	3508      	adds	r5, #8
 8006b4a:	2d0c      	cmp	r5, #12
 8006b4c:	bf38      	it	cc
 8006b4e:	250c      	movcc	r5, #12
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	4606      	mov	r6, r0
 8006b54:	db01      	blt.n	8006b5a <_malloc_r+0x1a>
 8006b56:	42a9      	cmp	r1, r5
 8006b58:	d903      	bls.n	8006b62 <_malloc_r+0x22>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	2000      	movs	r0, #0
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	f000 f869 	bl	8006c38 <__malloc_lock>
 8006b66:	4a21      	ldr	r2, [pc, #132]	; (8006bec <_malloc_r+0xac>)
 8006b68:	6814      	ldr	r4, [r2, #0]
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	b991      	cbnz	r1, 8006b94 <_malloc_r+0x54>
 8006b6e:	4c20      	ldr	r4, [pc, #128]	; (8006bf0 <_malloc_r+0xb0>)
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	b91b      	cbnz	r3, 8006b7c <_malloc_r+0x3c>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f000 f83d 	bl	8006bf4 <_sbrk_r>
 8006b7a:	6020      	str	r0, [r4, #0]
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f838 	bl	8006bf4 <_sbrk_r>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d124      	bne.n	8006bd2 <_malloc_r+0x92>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	f000 f854 	bl	8006c3a <__malloc_unlock>
 8006b92:	e7e4      	b.n	8006b5e <_malloc_r+0x1e>
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	1b5b      	subs	r3, r3, r5
 8006b98:	d418      	bmi.n	8006bcc <_malloc_r+0x8c>
 8006b9a:	2b0b      	cmp	r3, #11
 8006b9c:	d90f      	bls.n	8006bbe <_malloc_r+0x7e>
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	18cc      	adds	r4, r1, r3
 8006ba2:	50cd      	str	r5, [r1, r3]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f848 	bl	8006c3a <__malloc_unlock>
 8006baa:	f104 000b 	add.w	r0, r4, #11
 8006bae:	1d23      	adds	r3, r4, #4
 8006bb0:	f020 0007 	bic.w	r0, r0, #7
 8006bb4:	1ac3      	subs	r3, r0, r3
 8006bb6:	d0d3      	beq.n	8006b60 <_malloc_r+0x20>
 8006bb8:	425a      	negs	r2, r3
 8006bba:	50e2      	str	r2, [r4, r3]
 8006bbc:	e7d0      	b.n	8006b60 <_malloc_r+0x20>
 8006bbe:	684b      	ldr	r3, [r1, #4]
 8006bc0:	428c      	cmp	r4, r1
 8006bc2:	bf16      	itet	ne
 8006bc4:	6063      	strne	r3, [r4, #4]
 8006bc6:	6013      	streq	r3, [r2, #0]
 8006bc8:	460c      	movne	r4, r1
 8006bca:	e7eb      	b.n	8006ba4 <_malloc_r+0x64>
 8006bcc:	460c      	mov	r4, r1
 8006bce:	6849      	ldr	r1, [r1, #4]
 8006bd0:	e7cc      	b.n	8006b6c <_malloc_r+0x2c>
 8006bd2:	1cc4      	adds	r4, r0, #3
 8006bd4:	f024 0403 	bic.w	r4, r4, #3
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d005      	beq.n	8006be8 <_malloc_r+0xa8>
 8006bdc:	1a21      	subs	r1, r4, r0
 8006bde:	4630      	mov	r0, r6
 8006be0:	f000 f808 	bl	8006bf4 <_sbrk_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d0cf      	beq.n	8006b88 <_malloc_r+0x48>
 8006be8:	6025      	str	r5, [r4, #0]
 8006bea:	e7db      	b.n	8006ba4 <_malloc_r+0x64>
 8006bec:	200001fc 	.word	0x200001fc
 8006bf0:	20000200 	.word	0x20000200

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4c05      	ldr	r4, [pc, #20]	; (8006c10 <_sbrk_r+0x1c>)
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	f7fe fa29 	bl	8005056 <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20000314 	.word	0x20000314

08006c14 <__ascii_mbtowc>:
 8006c14:	b082      	sub	sp, #8
 8006c16:	b901      	cbnz	r1, 8006c1a <__ascii_mbtowc+0x6>
 8006c18:	a901      	add	r1, sp, #4
 8006c1a:	b142      	cbz	r2, 8006c2e <__ascii_mbtowc+0x1a>
 8006c1c:	b14b      	cbz	r3, 8006c32 <__ascii_mbtowc+0x1e>
 8006c1e:	7813      	ldrb	r3, [r2, #0]
 8006c20:	600b      	str	r3, [r1, #0]
 8006c22:	7812      	ldrb	r2, [r2, #0]
 8006c24:	1c10      	adds	r0, r2, #0
 8006c26:	bf18      	it	ne
 8006c28:	2001      	movne	r0, #1
 8006c2a:	b002      	add	sp, #8
 8006c2c:	4770      	bx	lr
 8006c2e:	4610      	mov	r0, r2
 8006c30:	e7fb      	b.n	8006c2a <__ascii_mbtowc+0x16>
 8006c32:	f06f 0001 	mvn.w	r0, #1
 8006c36:	e7f8      	b.n	8006c2a <__ascii_mbtowc+0x16>

08006c38 <__malloc_lock>:
 8006c38:	4770      	bx	lr

08006c3a <__malloc_unlock>:
 8006c3a:	4770      	bx	lr

08006c3c <__ascii_wctomb>:
 8006c3c:	b149      	cbz	r1, 8006c52 <__ascii_wctomb+0x16>
 8006c3e:	2aff      	cmp	r2, #255	; 0xff
 8006c40:	bf8b      	itete	hi
 8006c42:	238a      	movhi	r3, #138	; 0x8a
 8006c44:	700a      	strbls	r2, [r1, #0]
 8006c46:	6003      	strhi	r3, [r0, #0]
 8006c48:	2001      	movls	r0, #1
 8006c4a:	bf88      	it	hi
 8006c4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c50:	4770      	bx	lr
 8006c52:	4608      	mov	r0, r1
 8006c54:	4770      	bx	lr
	...

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
