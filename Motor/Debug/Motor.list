
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a4  080036a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036a4  080036a4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a4  080036a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  0800371c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800371c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012471  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022c6  00000000  00000000  0003250a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000166fe  00000000  00000000  00036288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a71c  00000000  00000000  0004c986  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075152  00000000  00000000  000570a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000cc270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035ac 	.word	0x080035ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035ac 	.word	0x080035ac

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f907 	bl	8000370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f880 	bl	800226c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f911 	bl	80003be <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8e7 	bl	8000386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da0b      	bge.n	80002a0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <NVIC_SetPriority+0x4c>)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	3b04      	subs	r3, #4
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029e:	e009      	b.n	80002b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <NVIC_SetPriority+0x50>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	43da      	mvns	r2, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	401a      	ands	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43d9      	mvns	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	4313      	orrs	r3, r2
         );
}
 8000322:	4618      	mov	r0, r3
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800033c:	d301      	bcc.n	8000342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033e:	2301      	movs	r3, #1
 8000340:	e00f      	b.n	8000362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <SysTick_Config+0x40>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800034a:	210f      	movs	r1, #15
 800034c:	f04f 30ff 	mov.w	r0, #4294967295
 8000350:	f7ff ff90 	bl	8000274 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Config+0x40>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SysTick_Config+0x40>)
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff49 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	4603      	mov	r3, r0
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000398:	f7ff ff5e 	bl	8000258 <NVIC_GetPriorityGrouping>
 800039c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	68b9      	ldr	r1, [r7, #8]
 80003a2:	6978      	ldr	r0, [r7, #20]
 80003a4:	f7ff ff90 	bl	80002c8 <NVIC_EncodePriority>
 80003a8:	4602      	mov	r2, r0
 80003aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff5f 	bl	8000274 <NVIC_SetPriority>
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ffb0 	bl	800032c <SysTick_Config>
 80003cc:	4603      	mov	r3, r0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d8:	b480      	push	{r7}
 80003da:	b08b      	sub	sp, #44	; 0x2c
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80003ee:	2300      	movs	r3, #0
 80003f0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	627b      	str	r3, [r7, #36]	; 0x24
 80003fa:	e127      	b.n	800064c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80003fc:	2201      	movs	r2, #1
 80003fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	69fa      	ldr	r2, [r7, #28]
 800040c:	4013      	ands	r3, r2
 800040e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000410:	69ba      	ldr	r2, [r7, #24]
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	429a      	cmp	r2, r3
 8000416:	f040 8116 	bne.w	8000646 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	2b12      	cmp	r3, #18
 8000420:	d034      	beq.n	800048c <HAL_GPIO_Init+0xb4>
 8000422:	2b12      	cmp	r3, #18
 8000424:	d80d      	bhi.n	8000442 <HAL_GPIO_Init+0x6a>
 8000426:	2b02      	cmp	r3, #2
 8000428:	d02b      	beq.n	8000482 <HAL_GPIO_Init+0xaa>
 800042a:	2b02      	cmp	r3, #2
 800042c:	d804      	bhi.n	8000438 <HAL_GPIO_Init+0x60>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d031      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d01c      	beq.n	8000470 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000436:	e048      	b.n	80004ca <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000438:	2b03      	cmp	r3, #3
 800043a:	d043      	beq.n	80004c4 <HAL_GPIO_Init+0xec>
 800043c:	2b11      	cmp	r3, #17
 800043e:	d01b      	beq.n	8000478 <HAL_GPIO_Init+0xa0>
          break;
 8000440:	e043      	b.n	80004ca <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000442:	4a87      	ldr	r2, [pc, #540]	; (8000660 <HAL_GPIO_Init+0x288>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d026      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
 8000448:	4a85      	ldr	r2, [pc, #532]	; (8000660 <HAL_GPIO_Init+0x288>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d806      	bhi.n	800045c <HAL_GPIO_Init+0x84>
 800044e:	4a85      	ldr	r2, [pc, #532]	; (8000664 <HAL_GPIO_Init+0x28c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d020      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
 8000454:	4a84      	ldr	r2, [pc, #528]	; (8000668 <HAL_GPIO_Init+0x290>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d01d      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
          break;
 800045a:	e036      	b.n	80004ca <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800045c:	4a83      	ldr	r2, [pc, #524]	; (800066c <HAL_GPIO_Init+0x294>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d019      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
 8000462:	4a83      	ldr	r2, [pc, #524]	; (8000670 <HAL_GPIO_Init+0x298>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d016      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
 8000468:	4a82      	ldr	r2, [pc, #520]	; (8000674 <HAL_GPIO_Init+0x29c>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d013      	beq.n	8000496 <HAL_GPIO_Init+0xbe>
          break;
 800046e:	e02c      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	623b      	str	r3, [r7, #32]
          break;
 8000476:	e028      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	3304      	adds	r3, #4
 800047e:	623b      	str	r3, [r7, #32]
          break;
 8000480:	e023      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	3308      	adds	r3, #8
 8000488:	623b      	str	r3, [r7, #32]
          break;
 800048a:	e01e      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	330c      	adds	r3, #12
 8000492:	623b      	str	r3, [r7, #32]
          break;
 8000494:	e019      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d102      	bne.n	80004a4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800049e:	2304      	movs	r3, #4
 80004a0:	623b      	str	r3, [r7, #32]
          break;
 80004a2:	e012      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d105      	bne.n	80004b8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ac:	2308      	movs	r3, #8
 80004ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	69fa      	ldr	r2, [r7, #28]
 80004b4:	611a      	str	r2, [r3, #16]
          break;
 80004b6:	e008      	b.n	80004ca <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004b8:	2308      	movs	r3, #8
 80004ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	69fa      	ldr	r2, [r7, #28]
 80004c0:	615a      	str	r2, [r3, #20]
          break;
 80004c2:	e002      	b.n	80004ca <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d801      	bhi.n	80004d4 <HAL_GPIO_Init+0xfc>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	e001      	b.n	80004d8 <HAL_GPIO_Init+0x100>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3304      	adds	r3, #4
 80004d8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	2bff      	cmp	r3, #255	; 0xff
 80004de:	d802      	bhi.n	80004e6 <HAL_GPIO_Init+0x10e>
 80004e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	e002      	b.n	80004ec <HAL_GPIO_Init+0x114>
 80004e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e8:	3b08      	subs	r3, #8
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	210f      	movs	r1, #15
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	401a      	ands	r2, r3
 80004fe:	6a39      	ldr	r1, [r7, #32]
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	fa01 f303 	lsl.w	r3, r1, r3
 8000506:	431a      	orrs	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000514:	2b00      	cmp	r3, #0
 8000516:	f000 8096 	beq.w	8000646 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b57      	ldr	r3, [pc, #348]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a56      	ldr	r2, [pc, #344]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b54      	ldr	r3, [pc, #336]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000532:	4a52      	ldr	r2, [pc, #328]	; (800067c <HAL_GPIO_Init+0x2a4>)
 8000534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	3302      	adds	r3, #2
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	f003 0303 	and.w	r3, r3, #3
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	220f      	movs	r2, #15
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	4013      	ands	r3, r2
 8000554:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a49      	ldr	r2, [pc, #292]	; (8000680 <HAL_GPIO_Init+0x2a8>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d013      	beq.n	8000586 <HAL_GPIO_Init+0x1ae>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a48      	ldr	r2, [pc, #288]	; (8000684 <HAL_GPIO_Init+0x2ac>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d00d      	beq.n	8000582 <HAL_GPIO_Init+0x1aa>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a47      	ldr	r2, [pc, #284]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d007      	beq.n	800057e <HAL_GPIO_Init+0x1a6>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a46      	ldr	r2, [pc, #280]	; (800068c <HAL_GPIO_Init+0x2b4>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d101      	bne.n	800057a <HAL_GPIO_Init+0x1a2>
 8000576:	2303      	movs	r3, #3
 8000578:	e006      	b.n	8000588 <HAL_GPIO_Init+0x1b0>
 800057a:	2304      	movs	r3, #4
 800057c:	e004      	b.n	8000588 <HAL_GPIO_Init+0x1b0>
 800057e:	2302      	movs	r3, #2
 8000580:	e002      	b.n	8000588 <HAL_GPIO_Init+0x1b0>
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <HAL_GPIO_Init+0x1b0>
 8000586:	2300      	movs	r3, #0
 8000588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800058a:	f002 0203 	and.w	r2, r2, #3
 800058e:	0092      	lsls	r2, r2, #2
 8000590:	4093      	lsls	r3, r2
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	4313      	orrs	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000598:	4938      	ldr	r1, [pc, #224]	; (800067c <HAL_GPIO_Init+0x2a4>)
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	089b      	lsrs	r3, r3, #2
 800059e:	3302      	adds	r3, #2
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d006      	beq.n	80005c0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005b2:	4b37      	ldr	r3, [pc, #220]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4936      	ldr	r1, [pc, #216]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	600b      	str	r3, [r1, #0]
 80005be:	e006      	b.n	80005ce <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	43db      	mvns	r3, r3
 80005c8:	4931      	ldr	r1, [pc, #196]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005ca:	4013      	ands	r3, r2
 80005cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005da:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005dc:	685a      	ldr	r2, [r3, #4]
 80005de:	492c      	ldr	r1, [pc, #176]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	604b      	str	r3, [r1, #4]
 80005e6:	e006      	b.n	80005f6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4927      	ldr	r1, [pc, #156]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 80005f2:	4013      	ands	r3, r2
 80005f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d006      	beq.n	8000610 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	4922      	ldr	r1, [pc, #136]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	4313      	orrs	r3, r2
 800060c:	608b      	str	r3, [r1, #8]
 800060e:	e006      	b.n	800061e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	43db      	mvns	r3, r3
 8000618:	491d      	ldr	r1, [pc, #116]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 800061a:	4013      	ands	r3, r2
 800061c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 800062c:	68da      	ldr	r2, [r3, #12]
 800062e:	4918      	ldr	r1, [pc, #96]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	4313      	orrs	r3, r2
 8000634:	60cb      	str	r3, [r1, #12]
 8000636:	e006      	b.n	8000646 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 800063a:	68da      	ldr	r2, [r3, #12]
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	43db      	mvns	r3, r3
 8000640:	4913      	ldr	r1, [pc, #76]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 8000642:	4013      	ands	r3, r2
 8000644:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	2b0f      	cmp	r3, #15
 8000650:	f67f aed4 	bls.w	80003fc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000654:	bf00      	nop
 8000656:	372c      	adds	r7, #44	; 0x2c
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	10210000 	.word	0x10210000
 8000664:	10110000 	.word	0x10110000
 8000668:	10120000 	.word	0x10120000
 800066c:	10310000 	.word	0x10310000
 8000670:	10320000 	.word	0x10320000
 8000674:	10220000 	.word	0x10220000
 8000678:	40021000 	.word	0x40021000
 800067c:	40010000 	.word	0x40010000
 8000680:	40010800 	.word	0x40010800
 8000684:	40010c00 	.word	0x40010c00
 8000688:	40011000 	.word	0x40011000
 800068c:	40011400 	.word	0x40011400
 8000690:	40010400 	.word	0x40010400

08000694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
 80006a0:	4613      	mov	r3, r2
 80006a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006a4:	787b      	ldrb	r3, [r7, #1]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006aa:	887a      	ldrh	r2, [r7, #2]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006b0:	e003      	b.n	80006ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	041a      	lsls	r2, r3, #16
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	611a      	str	r2, [r3, #16]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e0e7      	b.n	80008ae <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d106      	bne.n	80006f8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f001 fdec 	bl	80022d0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2224      	movs	r2, #36	; 0x24
 80006fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0201 	bic.w	r2, r2, #1
 800070e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000710:	f000 fcb8 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8000714:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	4a67      	ldr	r2, [pc, #412]	; (80008b8 <HAL_I2C_Init+0x1f4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d807      	bhi.n	8000730 <HAL_I2C_Init+0x6c>
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4a66      	ldr	r2, [pc, #408]	; (80008bc <HAL_I2C_Init+0x1f8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	bf94      	ite	ls
 8000728:	2301      	movls	r3, #1
 800072a:	2300      	movhi	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	e006      	b.n	800073e <HAL_I2C_Init+0x7a>
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4a63      	ldr	r2, [pc, #396]	; (80008c0 <HAL_I2C_Init+0x1fc>)
 8000734:	4293      	cmp	r3, r2
 8000736:	bf94      	ite	ls
 8000738:	2301      	movls	r3, #1
 800073a:	2300      	movhi	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0b3      	b.n	80008ae <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	4a5e      	ldr	r2, [pc, #376]	; (80008c4 <HAL_I2C_Init+0x200>)
 800074a:	fba2 2303 	umull	r2, r3, r2, r3
 800074e:	0c9b      	lsrs	r3, r3, #18
 8000750:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4a56      	ldr	r2, [pc, #344]	; (80008b8 <HAL_I2C_Init+0x1f4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d802      	bhi.n	800076a <HAL_I2C_Init+0xa6>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	e009      	b.n	800077e <HAL_I2C_Init+0xba>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000770:	fb02 f303 	mul.w	r3, r2, r3
 8000774:	4a54      	ldr	r2, [pc, #336]	; (80008c8 <HAL_I2C_Init+0x204>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	099b      	lsrs	r3, r3, #6
 800077c:	3301      	adds	r3, #1
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	6812      	ldr	r2, [r2, #0]
 8000782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <HAL_I2C_Init+0x1f4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d80d      	bhi.n	80007aa <HAL_I2C_Init+0xe6>
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	3301      	adds	r3, #1
 800079e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf38      	it	cc
 80007a6:	2304      	movcc	r3, #4
 80007a8:	e04f      	b.n	800084a <HAL_I2C_Init+0x186>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d111      	bne.n	80007d6 <HAL_I2C_Init+0x112>
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1e59      	subs	r1, r3, #1
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80007c4:	3301      	adds	r3, #1
 80007c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf0c      	ite	eq
 80007ce:	2301      	moveq	r3, #1
 80007d0:	2300      	movne	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	e012      	b.n	80007fc <HAL_I2C_Init+0x138>
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1e59      	subs	r1, r3, #1
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	009a      	lsls	r2, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80007ec:	3301      	adds	r3, #1
 80007ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_I2C_Init+0x140>
 8000800:	2301      	movs	r3, #1
 8000802:	e022      	b.n	800084a <HAL_I2C_Init+0x186>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10e      	bne.n	800082a <HAL_I2C_Init+0x166>
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1e59      	subs	r1, r3, #1
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	fbb1 f3f3 	udiv	r3, r1, r3
 800081e:	3301      	adds	r3, #1
 8000820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000828:	e00f      	b.n	800084a <HAL_I2C_Init+0x186>
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1e59      	subs	r1, r3, #1
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	009a      	lsls	r2, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000840:	3301      	adds	r3, #1
 8000842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	69d9      	ldr	r1, [r3, #28]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a1a      	ldr	r2, [r3, #32]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	430a      	orrs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6919      	ldr	r1, [r3, #16]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	430a      	orrs	r2, r1
 800086e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6959      	ldr	r1, [r3, #20]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	699a      	ldr	r2, [r3, #24]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	430a      	orrs	r2, r1
 800087e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2220      	movs	r2, #32
 800089a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	000186a0 	.word	0x000186a0
 80008bc:	001e847f 	.word	0x001e847f
 80008c0:	003d08ff 	.word	0x003d08ff
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	10624dd3 	.word	0x10624dd3

080008cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f000 8087 	beq.w	80009f4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008e6:	4b92      	ldr	r3, [pc, #584]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 030c 	and.w	r3, r3, #12
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d00c      	beq.n	800090c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008f2:	4b8f      	ldr	r3, [pc, #572]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 030c 	and.w	r3, r3, #12
 80008fa:	2b08      	cmp	r3, #8
 80008fc:	d112      	bne.n	8000924 <HAL_RCC_OscConfig+0x58>
 80008fe:	4b8c      	ldr	r3, [pc, #560]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800090a:	d10b      	bne.n	8000924 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800090c:	4b88      	ldr	r3, [pc, #544]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d06c      	beq.n	80009f2 <HAL_RCC_OscConfig+0x126>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d168      	bne.n	80009f2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	e22d      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800092c:	d106      	bne.n	800093c <HAL_RCC_OscConfig+0x70>
 800092e:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a7f      	ldr	r2, [pc, #508]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	e02e      	b.n	800099a <HAL_RCC_OscConfig+0xce>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10c      	bne.n	800095e <HAL_RCC_OscConfig+0x92>
 8000944:	4b7a      	ldr	r3, [pc, #488]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a79      	ldr	r2, [pc, #484]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 800094a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b77      	ldr	r3, [pc, #476]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a76      	ldr	r2, [pc, #472]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	e01d      	b.n	800099a <HAL_RCC_OscConfig+0xce>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000966:	d10c      	bne.n	8000982 <HAL_RCC_OscConfig+0xb6>
 8000968:	4b71      	ldr	r3, [pc, #452]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a70      	ldr	r2, [pc, #448]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 800096e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a6d      	ldr	r2, [pc, #436]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 800097a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e00b      	b.n	800099a <HAL_RCC_OscConfig+0xce>
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a6a      	ldr	r2, [pc, #424]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	4b68      	ldr	r3, [pc, #416]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a67      	ldr	r2, [pc, #412]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000998:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d013      	beq.n	80009ca <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a2:	f7ff fc2b 	bl	80001fc <HAL_GetTick>
 80009a6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a8:	e008      	b.n	80009bc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009aa:	f7ff fc27 	bl	80001fc <HAL_GetTick>
 80009ae:	4602      	mov	r2, r0
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	2b64      	cmp	r3, #100	; 0x64
 80009b6:	d901      	bls.n	80009bc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80009b8:	2303      	movs	r3, #3
 80009ba:	e1e1      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009bc:	4b5c      	ldr	r3, [pc, #368]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f0      	beq.n	80009aa <HAL_RCC_OscConfig+0xde>
 80009c8:	e014      	b.n	80009f4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ca:	f7ff fc17 	bl	80001fc <HAL_GetTick>
 80009ce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d0:	e008      	b.n	80009e4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d2:	f7ff fc13 	bl	80001fc <HAL_GetTick>
 80009d6:	4602      	mov	r2, r0
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	2b64      	cmp	r3, #100	; 0x64
 80009de:	d901      	bls.n	80009e4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80009e0:	2303      	movs	r3, #3
 80009e2:	e1cd      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e4:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f0      	bne.n	80009d2 <HAL_RCC_OscConfig+0x106>
 80009f0:	e000      	b.n	80009f4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d063      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 030c 	and.w	r3, r3, #12
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00b      	beq.n	8000a24 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a0c:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 030c 	and.w	r3, r3, #12
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	d11c      	bne.n	8000a52 <HAL_RCC_OscConfig+0x186>
 8000a18:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d116      	bne.n	8000a52 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <HAL_RCC_OscConfig+0x170>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d001      	beq.n	8000a3c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e1a1      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	4939      	ldr	r1, [pc, #228]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a50:	e03a      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d020      	beq.n	8000a9c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <HAL_RCC_OscConfig+0x268>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a60:	f7ff fbcc 	bl	80001fc <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a68:	f7ff fbc8 	bl	80001fc <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e182      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f0      	beq.n	8000a68 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4926      	ldr	r1, [pc, #152]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000a96:	4313      	orrs	r3, r2
 8000a98:	600b      	str	r3, [r1, #0]
 8000a9a:	e015      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_RCC_OscConfig+0x268>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aa8:	e008      	b.n	8000abc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e161      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1f0      	bne.n	8000aaa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d039      	beq.n	8000b48 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d019      	beq.n	8000b10 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fb8b 	bl	80001fc <HAL_GetTick>
 8000ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae8:	e008      	b.n	8000afc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aea:	f7ff fb87 	bl	80001fc <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d901      	bls.n	8000afc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e141      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_RCC_OscConfig+0x264>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f0      	beq.n	8000aea <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 fae3 	bl	80010d4 <RCC_Delay>
 8000b0e:	e01b      	b.n	8000b48 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fb71 	bl	80001fc <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b1c:	e00e      	b.n	8000b3c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b1e:	f7ff fb6d 	bl	80001fc <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d907      	bls.n	8000b3c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e127      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
 8000b30:	40021000 	.word	0x40021000
 8000b34:	42420000 	.word	0x42420000
 8000b38:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b3c:	4b92      	ldr	r3, [pc, #584]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1ea      	bne.n	8000b1e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 80a6 	beq.w	8000ca2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b5a:	4b8b      	ldr	r3, [pc, #556]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10d      	bne.n	8000b82 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b88      	ldr	r3, [pc, #544]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a87      	ldr	r2, [pc, #540]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b85      	ldr	r3, [pc, #532]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b82:	4b82      	ldr	r3, [pc, #520]	; (8000d8c <HAL_RCC_OscConfig+0x4c0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d118      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b8e:	4b7f      	ldr	r3, [pc, #508]	; (8000d8c <HAL_RCC_OscConfig+0x4c0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a7e      	ldr	r2, [pc, #504]	; (8000d8c <HAL_RCC_OscConfig+0x4c0>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fb2f 	bl	80001fc <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ba2:	f7ff fb2b 	bl	80001fc <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b64      	cmp	r3, #100	; 0x64
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e0e5      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bb4:	4b75      	ldr	r3, [pc, #468]	; (8000d8c <HAL_RCC_OscConfig+0x4c0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d106      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x30a>
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a6e      	ldr	r2, [pc, #440]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6213      	str	r3, [r2, #32]
 8000bd4:	e02d      	b.n	8000c32 <HAL_RCC_OscConfig+0x366>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x32c>
 8000bde:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000be0:	6a1b      	ldr	r3, [r3, #32]
 8000be2:	4a69      	ldr	r2, [pc, #420]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	6213      	str	r3, [r2, #32]
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000bec:	6a1b      	ldr	r3, [r3, #32]
 8000bee:	4a66      	ldr	r2, [pc, #408]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000bf0:	f023 0304 	bic.w	r3, r3, #4
 8000bf4:	6213      	str	r3, [r2, #32]
 8000bf6:	e01c      	b.n	8000c32 <HAL_RCC_OscConfig+0x366>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b05      	cmp	r3, #5
 8000bfe:	d10c      	bne.n	8000c1a <HAL_RCC_OscConfig+0x34e>
 8000c00:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4a60      	ldr	r2, [pc, #384]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6213      	str	r3, [r2, #32]
 8000c0c:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4a5d      	ldr	r2, [pc, #372]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6213      	str	r3, [r2, #32]
 8000c18:	e00b      	b.n	8000c32 <HAL_RCC_OscConfig+0x366>
 8000c1a:	4b5b      	ldr	r3, [pc, #364]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	4a5a      	ldr	r2, [pc, #360]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c20:	f023 0301 	bic.w	r3, r3, #1
 8000c24:	6213      	str	r3, [r2, #32]
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c2c:	f023 0304 	bic.w	r3, r3, #4
 8000c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d015      	beq.n	8000c66 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fadf 	bl	80001fc <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c40:	e00a      	b.n	8000c58 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c42:	f7ff fadb 	bl	80001fc <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d901      	bls.n	8000c58 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e093      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c58:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0ee      	beq.n	8000c42 <HAL_RCC_OscConfig+0x376>
 8000c64:	e014      	b.n	8000c90 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c66:	f7ff fac9 	bl	80001fc <HAL_GetTick>
 8000c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c6c:	e00a      	b.n	8000c84 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c6e:	f7ff fac5 	bl	80001fc <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d901      	bls.n	8000c84 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e07d      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c84:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1ee      	bne.n	8000c6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d105      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c96:	4b3c      	ldr	r3, [pc, #240]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a3b      	ldr	r2, [pc, #236]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d069      	beq.n	8000d7e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000caa:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d061      	beq.n	8000d7a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d146      	bne.n	8000d4c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_RCC_OscConfig+0x4c4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fa9a 	bl	80001fc <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ccc:	f7ff fa96 	bl	80001fc <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e050      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf2:	d108      	bne.n	8000d06 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	4921      	ldr	r1, [pc, #132]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a19      	ldr	r1, [r3, #32]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	430b      	orrs	r3, r1
 8000d18:	491b      	ldr	r1, [pc, #108]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fa6a 	bl	80001fc <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fa66 	bl	80001fc <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e020      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f0      	beq.n	8000d2c <HAL_RCC_OscConfig+0x460>
 8000d4a:	e018      	b.n	8000d7e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_RCC_OscConfig+0x4c4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fa53 	bl	80001fc <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d5a:	f7ff fa4f 	bl	80001fc <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e009      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_RCC_OscConfig+0x4bc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f0      	bne.n	8000d5a <HAL_RCC_OscConfig+0x48e>
 8000d78:	e001      	b.n	8000d7e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	42420060 	.word	0x42420060

08000d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000da2:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d910      	bls.n	8000dd2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db0:	4b7a      	ldr	r3, [pc, #488]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 0207 	bic.w	r2, r3, #7
 8000db8:	4978      	ldr	r1, [pc, #480]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dc0:	4b76      	ldr	r3, [pc, #472]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d001      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0e0      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d020      	beq.n	8000e20 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dea:	4b6d      	ldr	r3, [pc, #436]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a6c      	ldr	r2, [pc, #432]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000df0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000df4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e02:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a66      	ldr	r2, [pc, #408]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e08:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e0c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e0e:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4961      	ldr	r1, [pc, #388]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d06a      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d107      	bne.n	8000e44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d115      	bne.n	8000e6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0a7      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d107      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d109      	bne.n	8000e6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e09b      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e093      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e6c:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f023 0203 	bic.w	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4949      	ldr	r1, [pc, #292]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e7e:	f7ff f9bd 	bl	80001fc <HAL_GetTick>
 8000e82:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d112      	bne.n	8000eb2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8e:	f7ff f9b5 	bl	80001fc <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e077      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d1ee      	bne.n	8000e8e <HAL_RCC_ClockConfig+0xfa>
 8000eb0:	e027      	b.n	8000f02 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d11d      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eba:	e00a      	b.n	8000ed2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebc:	f7ff f99e 	bl	80001fc <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e060      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d1ee      	bne.n	8000ebc <HAL_RCC_ClockConfig+0x128>
 8000ede:	e010      	b.n	8000f02 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee0:	f7ff f98c 	bl	80001fc <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e04e      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1ee      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d210      	bcs.n	8000f32 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 0207 	bic.w	r2, r3, #7
 8000f18:	4920      	ldr	r1, [pc, #128]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_RCC_ClockConfig+0x208>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e030      	b.n	8000f94 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d008      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d009      	beq.n	8000f70 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f70:	f000 f81c 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 8000f74:	4601      	mov	r1, r0
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_RCC_ClockConfig+0x20c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_RCC_ClockConfig+0x210>)
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	fa21 f303 	lsr.w	r3, r1, r3
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_RCC_ClockConfig+0x214>)
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff f8f3 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	080035f4 	.word	0x080035f4
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fac:	b490      	push	{r4, r7}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000fb4:	1d3c      	adds	r4, r7, #4
 8000fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d002      	beq.n	8000fec <HAL_RCC_GetSysClockFreq+0x40>
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d003      	beq.n	8000ff2 <HAL_RCC_GetSysClockFreq+0x46>
 8000fea:	e02d      	b.n	8001048 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fee:	623b      	str	r3, [r7, #32]
      break;
 8000ff0:	e02d      	b.n	800104e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	0c9b      	lsrs	r3, r3, #18
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ffe:	4413      	add	r3, r2
 8001000:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001004:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	0c5b      	lsrs	r3, r3, #17
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800101e:	4413      	add	r3, r2
 8001020:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001024:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <HAL_RCC_GetSysClockFreq+0xbc>)
 800102a:	fb02 f203 	mul.w	r2, r2, r3
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	fbb2 f3f3 	udiv	r3, r2, r3
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
 8001036:	e004      	b.n	8001042 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_RCC_GetSysClockFreq+0xc0>)
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	623b      	str	r3, [r7, #32]
      break;
 8001046:	e002      	b.n	800104e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_RCC_GetSysClockFreq+0xbc>)
 800104a:	623b      	str	r3, [r7, #32]
      break;
 800104c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800104e:	6a3b      	ldr	r3, [r7, #32]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bc90      	pop	{r4, r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	080035c4 	.word	0x080035c4
 8001060:	080035d4 	.word	0x080035d4
 8001064:	40021000 	.word	0x40021000
 8001068:	007a1200 	.word	0x007a1200
 800106c:	003d0900 	.word	0x003d0900

08001070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_RCC_GetHCLKFreq+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001088:	f7ff fff2 	bl	8001070 <HAL_RCC_GetHCLKFreq>
 800108c:	4601      	mov	r1, r0
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	08003604 	.word	0x08003604

080010ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010b0:	f7ff ffde 	bl	8001070 <HAL_RCC_GetHCLKFreq>
 80010b4:	4601      	mov	r1, r0
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	0adb      	lsrs	r3, r3, #11
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	08003604 	.word	0x08003604

080010d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <RCC_Delay+0x34>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <RCC_Delay+0x38>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0a5b      	lsrs	r3, r3, #9
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80010f0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	60fa      	str	r2, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f9      	bne.n	80010f0 <RCC_Delay+0x1c>
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	10624dd3 	.word	0x10624dd3

08001110 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e01d      	b.n	800115e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f001 f908 	bl	800234c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f000 f9c6 	bl	80014e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2201      	movs	r2, #1
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fbb6 	bl	80018ec <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_TIM_PWM_Start+0x4c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d107      	bne.n	800119a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40012c00 	.word	0x40012c00

080011b8 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e081      	b.n	80012dc <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d106      	bne.n	80011f2 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f001 f8e9 	bl	80023c4 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0207 	bic.w	r2, r2, #7
 8001208:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3304      	adds	r3, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f000 f963 	bl	80014e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	4313      	orrs	r3, r2
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001260:	f023 030c 	bic.w	r3, r3, #12
 8001264:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800126c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	4313      	orrs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	011a      	lsls	r2, r3, #4
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	4313      	orrs	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800129e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80012a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4313      	orrs	r3, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HAL_TIM_Encoder_Start+0x16>
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d008      	beq.n	800130a <HAL_TIM_Encoder_Start+0x26>
 80012f8:	e00f      	b.n	800131a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f000 faf2 	bl	80018ec <TIM_CCxChannelCmd>
      break;
 8001308:	e016      	b.n	8001338 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	2104      	movs	r1, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f000 faea 	bl	80018ec <TIM_CCxChannelCmd>
      break;
 8001318:	e00e      	b.n	8001338 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2201      	movs	r2, #1
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fae2 	bl	80018ec <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	2104      	movs	r1, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fadb 	bl	80018ec <TIM_CCxChannelCmd>
     break;
 8001336:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800136a:	2302      	movs	r3, #2
 800136c:	e0b4      	b.n	80014d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2202      	movs	r2, #2
 800137a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	f200 809f 	bhi.w	80014c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013c1 	.word	0x080013c1
 8001390:	080014c5 	.word	0x080014c5
 8001394:	080014c5 	.word	0x080014c5
 8001398:	080014c5 	.word	0x080014c5
 800139c:	08001401 	.word	0x08001401
 80013a0:	080014c5 	.word	0x080014c5
 80013a4:	080014c5 	.word	0x080014c5
 80013a8:	080014c5 	.word	0x080014c5
 80013ac:	08001443 	.word	0x08001443
 80013b0:	080014c5 	.word	0x080014c5
 80013b4:	080014c5 	.word	0x080014c5
 80013b8:	080014c5 	.word	0x080014c5
 80013bc:	08001483 	.word	0x08001483
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f8f0 	bl	80015ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0208 	orr.w	r2, r2, #8
 80013da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0204 	bic.w	r2, r2, #4
 80013ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6999      	ldr	r1, [r3, #24]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	619a      	str	r2, [r3, #24]
    }
    break;
 80013fe:	e062      	b.n	80014c6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f93c 	bl	8001684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800141a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6999      	ldr	r1, [r3, #24]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001440:	e041      	b.n	80014c6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f98b 	bl	8001764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69da      	ldr	r2, [r3, #28]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0208 	orr.w	r2, r2, #8
 800145c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69da      	ldr	r2, [r3, #28]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0204 	bic.w	r2, r2, #4
 800146c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69d9      	ldr	r1, [r3, #28]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	61da      	str	r2, [r3, #28]
    }
    break;
 8001480:	e021      	b.n	80014c6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f9db 	bl	8001844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800149c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	69d9      	ldr	r1, [r3, #28]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	021a      	lsls	r2, r3, #8
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	61da      	str	r2, [r3, #28]
    }
    break;
 80014c2:	e000      	b.n	80014c6 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80014c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <TIM_Base_SetConfig+0xc0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00b      	beq.n	8001514 <TIM_Base_SetConfig+0x34>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001502:	d007      	beq.n	8001514 <TIM_Base_SetConfig+0x34>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <TIM_Base_SetConfig+0xc4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d003      	beq.n	8001514 <TIM_Base_SetConfig+0x34>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <TIM_Base_SetConfig+0xc8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d108      	bne.n	8001526 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <TIM_Base_SetConfig+0xc0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00b      	beq.n	8001546 <TIM_Base_SetConfig+0x66>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001534:	d007      	beq.n	8001546 <TIM_Base_SetConfig+0x66>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <TIM_Base_SetConfig+0xc4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d003      	beq.n	8001546 <TIM_Base_SetConfig+0x66>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <TIM_Base_SetConfig+0xc8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d108      	bne.n	8001558 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800154c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <TIM_Base_SetConfig+0xc0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d103      	bne.n	8001590 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	615a      	str	r2, [r3, #20]
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40000400 	.word	0x40000400
 80015a8:	40000800 	.word	0x40000800

080015ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	f023 0201 	bic.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f023 0302 	bic.w	r3, r3, #2
 8001600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <TIM_OC1_SetConfig+0xd4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d10c      	bne.n	800162e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f023 0308 	bic.w	r3, r3, #8
 800161a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <TIM_OC1_SetConfig+0xd4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d111      	bne.n	800165a <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	621a      	str	r2, [r3, #32]
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40012c00 	.word	0x40012c00

08001684 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	f023 0210 	bic.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f023 0320 	bic.w	r3, r3, #32
 80016da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <TIM_OC2_SetConfig+0xdc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d10d      	bne.n	800170c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4313      	orrs	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800170a:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <TIM_OC2_SetConfig+0xdc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d113      	bne.n	800173c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800171a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	621a      	str	r2, [r3, #32]
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	40012c00 	.word	0x40012c00

08001764 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800179e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <TIM_OC3_SetConfig+0xdc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10d      	bne.n	80017ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017e8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <TIM_OC3_SetConfig+0xdc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d113      	bne.n	800181a <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	621a      	str	r2, [r3, #32]
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40012c00 	.word	0x40012c00

08001844 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800187e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001886:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800189a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <TIM_OC4_SetConfig+0xa4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d109      	bne.n	80018c4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	621a      	str	r2, [r3, #32]
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40012c00 	.word	0x40012c00

080018ec <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80018fc:	2201      	movs	r2, #1
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	621a      	str	r2, [r3, #32]
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001944:	2302      	movs	r3, #2
 8001946:	e032      	b.n	80019ae <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001966:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001988:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e03f      	b.n	8001a4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fd5e 	bl	80024a0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019fa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f90b 	bl	8001c18 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a20:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a30:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b088      	sub	sp, #32
 8001a56:	af02      	add	r7, sp, #8
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	f040 8083 	bne.w	8001b7a <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_UART_Transmit+0x2e>
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e07b      	b.n	8001b7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_UART_Transmit+0x40>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e074      	b.n	8001b7c <HAL_UART_Transmit+0x12a>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2221      	movs	r2, #33	; 0x21
 8001aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001aa8:	f7fe fba8 	bl	80001fc <HAL_GetTick>
 8001aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001aba:	e042      	b.n	8001b42 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad2:	d122      	bne.n	8001b1a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f850 	bl	8001b84 <UART_WaitOnFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e046      	b.n	8001b7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b00:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	e017      	b.n	8001b42 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	e013      	b.n	8001b42 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f82d 	bl	8001b84 <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e023      	b.n	8001b7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1b7      	bne.n	8001abc <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2140      	movs	r1, #64	; 0x40
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f814 	bl	8001b84 <UART_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e00a      	b.n	8001b7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001b94:	e02c      	b.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d028      	beq.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ba4:	f7fe fb2a 	bl	80001fc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d21d      	bcs.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e00f      	b.n	8001c10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d0c3      	beq.n	8001b96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c5a:	f023 030c 	bic.w	r3, r3, #12
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6f      	ldr	r2, [pc, #444]	; (8001e40 <UART_SetConfig+0x228>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d16b      	bne.n	8001d60 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c88:	f7ff fa10 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	009a      	lsls	r2, r3, #2
 8001c96:	441a      	add	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4a68      	ldr	r2, [pc, #416]	; (8001e44 <UART_SetConfig+0x22c>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	011c      	lsls	r4, r3, #4
 8001cac:	f7ff f9fe 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009a      	lsls	r2, r3, #2
 8001cba:	441a      	add	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8001cc6:	f7ff f9f1 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009a      	lsls	r2, r3, #2
 8001cd4:	441a      	add	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <UART_SetConfig+0x22c>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2264      	movs	r2, #100	; 0x64
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	1aeb      	subs	r3, r5, r3
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	3332      	adds	r3, #50	; 0x32
 8001cf4:	4a53      	ldr	r2, [pc, #332]	; (8001e44 <UART_SetConfig+0x22c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d00:	441c      	add	r4, r3
 8001d02:	f7ff f9d3 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009a      	lsls	r2, r3, #2
 8001d10:	441a      	add	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d1c:	f7ff f9c6 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009a      	lsls	r2, r3, #2
 8001d2a:	441a      	add	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <UART_SetConfig+0x22c>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	2264      	movs	r2, #100	; 0x64
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	1aeb      	subs	r3, r5, r3
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	3332      	adds	r3, #50	; 0x32
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <UART_SetConfig+0x22c>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	f003 020f 	and.w	r2, r3, #15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4422      	add	r2, r4
 8001d5c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001d5e:	e06a      	b.n	8001e36 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d60:	f7ff f990 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	441a      	add	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <UART_SetConfig+0x22c>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	011c      	lsls	r4, r3, #4
 8001d84:	f7ff f97e 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009a      	lsls	r2, r3, #2
 8001d92:	441a      	add	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d9e:	f7ff f971 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <UART_SetConfig+0x22c>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2264      	movs	r2, #100	; 0x64
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	3332      	adds	r3, #50	; 0x32
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <UART_SetConfig+0x22c>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd8:	441c      	add	r4, r3
 8001dda:	f7ff f953 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009a      	lsls	r2, r3, #2
 8001de8:	441a      	add	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fbb2 f5f3 	udiv	r5, r2, r3
 8001df4:	f7ff f946 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <UART_SetConfig+0x22c>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	2264      	movs	r2, #100	; 0x64
 8001e18:	fb02 f303 	mul.w	r3, r2, r3
 8001e1c:	1aeb      	subs	r3, r5, r3
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	3332      	adds	r3, #50	; 0x32
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <UART_SetConfig+0x22c>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4422      	add	r2, r4
 8001e34:	609a      	str	r2, [r3, #8]
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40013800 	.word	0x40013800
 8001e44:	51eb851f 	.word	0x51eb851f

08001e48 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  #define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
	PUTCHAR_PROTOTYPE
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,100);
 8001e50:	1d39      	adds	r1, r7, #4
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	2201      	movs	r2, #1
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <__io_putchar+0x20>)
 8001e58:	f7ff fdfb 	bl	8001a52 <HAL_UART_Transmit>

  /* Loop until the end of transmission */


  return ch;
 8001e5c:	687b      	ldr	r3, [r7, #4]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000144 	.word	0x20000144

08001e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e72:	f7fe f96b 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e76:	f000 f82d 	bl	8001ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7a:	f000 f9a5 	bl	80021c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001e7e:	f000 f89d 	bl	8001fbc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001e82:	f000 f977 	bl	8002174 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001e86:	f000 f921 	bl	80020cc <MX_TIM3_Init>
  MX_I2C1_Init();
 8001e8a:	f000 f869 	bl	8001f60 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i,j = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8001e92:	2100      	movs	r1, #0
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <main+0x58>)
 8001e96:	f7ff fa25 	bl	80012e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <main+0x5c>)
 8001e9e:	f7ff fa21 	bl	80012e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <main+0x5c>)
 8001ea6:	f7ff f95f 	bl	8001168 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */
    i = TIM3 -> CNT;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <main+0x60>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	603b      	str	r3, [r7, #0]
    j = TIM2 -> CNT;
 8001eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	607b      	str	r3, [r7, #4]
    /* USER CODE BEGIN 3 */
	  printf("Gia tri encoder la %d %d \n",i,j);
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <main+0x64>)
 8001ebe:	f000 fc87 	bl	80027d0 <iprintf>
    i = TIM3 -> CNT;
 8001ec2:	e7f2      	b.n	8001eaa <main+0x3e>
 8001ec4:	20000104 	.word	0x20000104
 8001ec8:	20000188 	.word	0x20000188
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	080035d8 	.word	0x080035d8

08001ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b090      	sub	sp, #64	; 0x40
 8001ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	2228      	movs	r2, #40	; 0x28
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fc6c 	bl	80027c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001efe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fcd5 	bl	80008cc <HAL_RCC_OscConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f28:	f000 f99a 	bl	8002260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f30:	2302      	movs	r3, #2
 8001f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2102      	movs	r1, #2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ff24 	bl	8000d94 <HAL_RCC_ClockConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f52:	f000 f985 	bl	8002260 <Error_Handler>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3740      	adds	r7, #64	; 0x40
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <MX_I2C1_Init+0x54>)
 8001f68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <MX_I2C1_Init+0x58>)
 8001f6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f9e:	f7fe fb91 	bl	80006c4 <HAL_I2C_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fa8:	f000 f95a 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000009c 	.word	0x2000009c
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	000186a0 	.word	0x000186a0

08001fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b092      	sub	sp, #72	; 0x48
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbf8 	bl	80027c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8001fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8002002:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <MX_TIM2_Init+0x10c>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002014:	482c      	ldr	r0, [pc, #176]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8002016:	f7ff f87b 	bl	8001110 <HAL_TIM_PWM_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002020:	f000 f91e 	bl	8002260 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800202c:	2301      	movs	r3, #1
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002038:	2300      	movs	r3, #0
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800203c:	2301      	movs	r3, #1
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	481e      	ldr	r0, [pc, #120]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8002050:	f7ff f8b2 	bl	80011b8 <HAL_TIM_Encoder_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800205a:	f000 f901 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	4816      	ldr	r0, [pc, #88]	; (80020c8 <MX_TIM2_Init+0x10c>)
 800206e:	f7ff fc5f 	bl	8001930 <HAL_TIMEx_MasterConfigSynchronization>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8002078:	f000 f8f2 	bl	8002260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800207c:	2360      	movs	r3, #96	; 0x60
 800207e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	2208      	movs	r2, #8
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM2_Init+0x10c>)
 8002094:	f7ff f95e 	bl	8001354 <HAL_TIM_PWM_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800209e:	f000 f8df 	bl	8002260 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	220c      	movs	r2, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <MX_TIM2_Init+0x10c>)
 80020aa:	f7ff f953 	bl	8001354 <HAL_TIM_PWM_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80020b4:	f000 f8d4 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <MX_TIM2_Init+0x10c>)
 80020ba:	f000 f9c1 	bl	8002440 <HAL_TIM_MspPostInit>

}
 80020be:	bf00      	nop
 80020c0:	3748      	adds	r7, #72	; 0x48
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000188 	.word	0x20000188

080020cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	; 0x30
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fb70 	bl	80027c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <MX_TIM3_Init+0xa0>)
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <MX_TIM3_Init+0xa4>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <MX_TIM3_Init+0xa0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <MX_TIM3_Init+0xa0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <MX_TIM3_Init+0xa0>)
 80020fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002100:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_TIM3_Init+0xa0>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <MX_TIM3_Init+0xa0>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800210e:	2301      	movs	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002116:	2301      	movs	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002126:	2301      	movs	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4619      	mov	r1, r3
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <MX_TIM3_Init+0xa0>)
 800213a:	f7ff f83d 	bl	80011b8 <HAL_TIM_Encoder_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002144:	f000 f88c 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_TIM3_Init+0xa0>)
 8002156:	f7ff fbeb 	bl	8001930 <HAL_TIMEx_MasterConfigSynchronization>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002160:	f000 f87e 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	; 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000104 	.word	0x20000104
 8002170:	40000400 	.word	0x40000400

08002174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021ac:	f7ff fc04 	bl	80019b8 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f000 f853 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000144 	.word	0x20000144
 80021c4:	40013800 	.word	0x40013800

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <MX_GPIO_Init+0x90>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <MX_GPIO_Init+0x90>)
 80021e2:	f043 0320 	orr.w	r3, r3, #32
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <MX_GPIO_Init+0x90>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <MX_GPIO_Init+0x90>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <MX_GPIO_Init+0x90>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <MX_GPIO_Init+0x90>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_GPIO_Init+0x90>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <MX_GPIO_Init+0x90>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_GPIO_Init+0x90>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f640 4103 	movw	r1, #3075	; 0xc03
 800222a:	480c      	ldr	r0, [pc, #48]	; (800225c <MX_GPIO_Init+0x94>)
 800222c:	f7fe fa32 	bl	8000694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8002230:	f640 4303 	movw	r3, #3075	; 0xc03
 8002234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2302      	movs	r3, #2
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_GPIO_Init+0x94>)
 800224a:	f7fe f8c5 	bl	80003d8 <HAL_GPIO_Init>

}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40010c00 	.word	0x40010c00

08002260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_MspInit+0x5c>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_MspInit+0x5c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6193      	str	r3, [r2, #24]
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_MspInit+0x5c>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_MspInit+0x5c>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_MspInit+0x5c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_MspInit+0x5c>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_MspInit+0x60>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_MspInit+0x60>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000

080022d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_I2C_MspInit+0x70>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d123      	bne.n	8002338 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_I2C_MspInit+0x74>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a13      	ldr	r2, [pc, #76]	; (8002344 <HAL_I2C_MspInit+0x74>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_I2C_MspInit+0x74>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800230c:	2312      	movs	r3, #18
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4619      	mov	r1, r3
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <HAL_I2C_MspInit+0x78>)
 800231c:	f7fe f85c 	bl	80003d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_I2C_MspInit+0x74>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_I2C_MspInit+0x74>)
 8002326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800232a:	61d3      	str	r3, [r2, #28]
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_I2C_MspInit+0x74>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40005400 	.word	0x40005400
 8002344:	40021000 	.word	0x40021000
 8002348:	40010c00 	.word	0x40010c00

0800234c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d123      	bne.n	80023b4 <HAL_TIM_PWM_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_TIM_PWM_MspInit+0x70>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_TIM_PWM_MspInit+0x70>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	61d3      	str	r3, [r2, #28]
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_TIM_PWM_MspInit+0x70>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_TIM_PWM_MspInit+0x70>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_TIM_PWM_MspInit+0x70>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_TIM_PWM_MspInit+0x70>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800239c:	2303      	movs	r3, #3
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <HAL_TIM_PWM_MspInit+0x74>)
 80023b0:	f7fe f812 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40010800 	.word	0x40010800

080023c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_TIM_Encoder_MspInit+0x70>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d123      	bne.n	800242c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_TIM_Encoder_MspInit+0x74>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <HAL_TIM_Encoder_MspInit+0x74>)
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	61d3      	str	r3, [r2, #28]
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_TIM_Encoder_MspInit+0x74>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_TIM_Encoder_MspInit+0x74>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_TIM_Encoder_MspInit+0x74>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_TIM_Encoder_MspInit+0x74>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002414:	23c0      	movs	r3, #192	; 0xc0
 8002416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241c:	2301      	movs	r3, #1
 800241e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4619      	mov	r1, r3
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <HAL_TIM_Encoder_MspInit+0x78>)
 8002428:	f7fd ffd6 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40000400 	.word	0x40000400
 8002438:	40021000 	.word	0x40021000
 800243c:	40010800 	.word	0x40010800

08002440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d117      	bne.n	8002490 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_TIM_MspPostInit+0x58>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_TIM_MspPostInit+0x58>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_TIM_MspPostInit+0x58>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002478:	230c      	movs	r3, #12
 800247a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2302      	movs	r3, #2
 8002482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	4804      	ldr	r0, [pc, #16]	; (800249c <HAL_TIM_MspPostInit+0x5c>)
 800248c:	f7fd ffa4 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40010800 	.word	0x40010800

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_UART_MspInit+0x8c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d131      	bne.n	8002524 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_UART_MspInit+0x90>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4619      	mov	r1, r3
 8002504:	480b      	ldr	r0, [pc, #44]	; (8002534 <HAL_UART_MspInit+0x94>)
 8002506:	f7fd ff67 	bl	80003d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800250a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800250e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4619      	mov	r1, r3
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <HAL_UART_MspInit+0x94>)
 8002520:	f7fd ff5a 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002524:	bf00      	nop
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40013800 	.word	0x40013800
 8002530:	40021000 	.word	0x40021000
 8002534:	40010800 	.word	0x40010800

08002538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <HardFault_Handler+0x4>

0800254a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <MemManage_Handler+0x4>

08002550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <BusFault_Handler+0x4>

08002556 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <UsageFault_Handler+0x4>

0800255c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002584:	f7fd fe28 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	4601      	mov	r1, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf0      	blt.n	800259e <_read+0x12>
	}

return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e009      	b.n	80025ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fc31 	bl	8001e48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf1      	blt.n	80025d8 <_write+0x12>
	}
	return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_close>:

int _close(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002624:	605a      	str	r2, [r3, #4]
	return 0;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <_isatty>:

int _isatty(int file)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	return 1;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
	return 0;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <_sbrk+0x50>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x16>
		heap_end = &end;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <_sbrk+0x50>)
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <_sbrk+0x54>)
 8002674:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <_sbrk+0x50>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <_sbrk+0x50>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	466a      	mov	r2, sp
 8002686:	4293      	cmp	r3, r2
 8002688:	d907      	bls.n	800269a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800268a:	f000 f86f 	bl	800276c <__errno>
 800268e:	4602      	mov	r2, r0
 8002690:	230c      	movs	r3, #12
 8002692:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	e006      	b.n	80026a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <_sbrk+0x50>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <_sbrk+0x50>)
 80026a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000008c 	.word	0x2000008c
 80026b4:	200001d8 	.word	0x200001d8

080026b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <SystemInit+0x5c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <SystemInit+0x5c>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <SystemInit+0x5c>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4911      	ldr	r1, [pc, #68]	; (8002714 <SystemInit+0x5c>)
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <SystemInit+0x60>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <SystemInit+0x5c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <SystemInit+0x5c>)
 80026da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <SystemInit+0x5c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SystemInit+0x5c>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <SystemInit+0x5c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <SystemInit+0x5c>)
 80026f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80026fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SystemInit+0x5c>)
 80026fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002702:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <SystemInit+0x64>)
 8002706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800270a:	609a      	str	r2, [r3, #8]
#endif 
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	f8ff0000 	.word	0xf8ff0000
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002720:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002722:	e003      	b.n	800272c <LoopCopyDataInit>

08002724 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002726:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002728:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800272a:	3104      	adds	r1, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002730:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002732:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002734:	d3f6      	bcc.n	8002724 <CopyDataInit>
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002738:	e002      	b.n	8002740 <LoopFillZerobss>

0800273a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800273c:	f842 3b04 	str.w	r3, [r2], #4

08002740 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002742:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002744:	d3f9      	bcc.n	800273a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002746:	f7ff ffb7 	bl	80026b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274a:	f000 f815 	bl	8002778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7ff fb8d 	bl	8001e6c <main>
  bx lr
 8002752:	4770      	bx	lr
  ldr r3, =_sidata
 8002754:	080036ac 	.word	0x080036ac
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800275c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002760:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002764:	200001d4 	.word	0x200001d4

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>
	...

0800276c <__errno>:
 800276c:	4b01      	ldr	r3, [pc, #4]	; (8002774 <__errno+0x8>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c

08002778 <__libc_init_array>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	2500      	movs	r5, #0
 800277c:	4e0c      	ldr	r6, [pc, #48]	; (80027b0 <__libc_init_array+0x38>)
 800277e:	4c0d      	ldr	r4, [pc, #52]	; (80027b4 <__libc_init_array+0x3c>)
 8002780:	1ba4      	subs	r4, r4, r6
 8002782:	10a4      	asrs	r4, r4, #2
 8002784:	42a5      	cmp	r5, r4
 8002786:	d109      	bne.n	800279c <__libc_init_array+0x24>
 8002788:	f000 ff10 	bl	80035ac <_init>
 800278c:	2500      	movs	r5, #0
 800278e:	4e0a      	ldr	r6, [pc, #40]	; (80027b8 <__libc_init_array+0x40>)
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <__libc_init_array+0x44>)
 8002792:	1ba4      	subs	r4, r4, r6
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	42a5      	cmp	r5, r4
 8002798:	d105      	bne.n	80027a6 <__libc_init_array+0x2e>
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027a0:	4798      	blx	r3
 80027a2:	3501      	adds	r5, #1
 80027a4:	e7ee      	b.n	8002784 <__libc_init_array+0xc>
 80027a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027aa:	4798      	blx	r3
 80027ac:	3501      	adds	r5, #1
 80027ae:	e7f2      	b.n	8002796 <__libc_init_array+0x1e>
 80027b0:	080036a4 	.word	0x080036a4
 80027b4:	080036a4 	.word	0x080036a4
 80027b8:	080036a4 	.word	0x080036a4
 80027bc:	080036a8 	.word	0x080036a8

080027c0 <memset>:
 80027c0:	4603      	mov	r3, r0
 80027c2:	4402      	add	r2, r0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	f803 1b01 	strb.w	r1, [r3], #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <iprintf>:
 80027d0:	b40f      	push	{r0, r1, r2, r3}
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <iprintf+0x2c>)
 80027d4:	b513      	push	{r0, r1, r4, lr}
 80027d6:	681c      	ldr	r4, [r3, #0]
 80027d8:	b124      	cbz	r4, 80027e4 <iprintf+0x14>
 80027da:	69a3      	ldr	r3, [r4, #24]
 80027dc:	b913      	cbnz	r3, 80027e4 <iprintf+0x14>
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 f84e 	bl	8002880 <__sinit>
 80027e4:	ab05      	add	r3, sp, #20
 80027e6:	9a04      	ldr	r2, [sp, #16]
 80027e8:	68a1      	ldr	r1, [r4, #8]
 80027ea:	4620      	mov	r0, r4
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	f000 f953 	bl	8002a98 <_vfiprintf_r>
 80027f2:	b002      	add	sp, #8
 80027f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f8:	b004      	add	sp, #16
 80027fa:	4770      	bx	lr
 80027fc:	2000000c 	.word	0x2000000c

08002800 <std>:
 8002800:	2300      	movs	r3, #0
 8002802:	b510      	push	{r4, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	e9c0 3300 	strd	r3, r3, [r0]
 800280a:	6083      	str	r3, [r0, #8]
 800280c:	8181      	strh	r1, [r0, #12]
 800280e:	6643      	str	r3, [r0, #100]	; 0x64
 8002810:	81c2      	strh	r2, [r0, #14]
 8002812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002816:	6183      	str	r3, [r0, #24]
 8002818:	4619      	mov	r1, r3
 800281a:	2208      	movs	r2, #8
 800281c:	305c      	adds	r0, #92	; 0x5c
 800281e:	f7ff ffcf 	bl	80027c0 <memset>
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <std+0x38>)
 8002824:	6224      	str	r4, [r4, #32]
 8002826:	6263      	str	r3, [r4, #36]	; 0x24
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <std+0x3c>)
 800282a:	62a3      	str	r3, [r4, #40]	; 0x28
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <std+0x40>)
 800282e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <std+0x44>)
 8002832:	6323      	str	r3, [r4, #48]	; 0x30
 8002834:	bd10      	pop	{r4, pc}
 8002836:	bf00      	nop
 8002838:	08002ff5 	.word	0x08002ff5
 800283c:	08003017 	.word	0x08003017
 8002840:	0800304f 	.word	0x0800304f
 8002844:	08003073 	.word	0x08003073

08002848 <_cleanup_r>:
 8002848:	4901      	ldr	r1, [pc, #4]	; (8002850 <_cleanup_r+0x8>)
 800284a:	f000 b885 	b.w	8002958 <_fwalk_reent>
 800284e:	bf00      	nop
 8002850:	0800334d 	.word	0x0800334d

08002854 <__sfmoreglue>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	2568      	movs	r5, #104	; 0x68
 8002858:	1e4a      	subs	r2, r1, #1
 800285a:	4355      	muls	r5, r2
 800285c:	460e      	mov	r6, r1
 800285e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002862:	f000 f897 	bl	8002994 <_malloc_r>
 8002866:	4604      	mov	r4, r0
 8002868:	b140      	cbz	r0, 800287c <__sfmoreglue+0x28>
 800286a:	2100      	movs	r1, #0
 800286c:	e9c0 1600 	strd	r1, r6, [r0]
 8002870:	300c      	adds	r0, #12
 8002872:	60a0      	str	r0, [r4, #8]
 8002874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002878:	f7ff ffa2 	bl	80027c0 <memset>
 800287c:	4620      	mov	r0, r4
 800287e:	bd70      	pop	{r4, r5, r6, pc}

08002880 <__sinit>:
 8002880:	6983      	ldr	r3, [r0, #24]
 8002882:	b510      	push	{r4, lr}
 8002884:	4604      	mov	r4, r0
 8002886:	bb33      	cbnz	r3, 80028d6 <__sinit+0x56>
 8002888:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800288c:	6503      	str	r3, [r0, #80]	; 0x50
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <__sinit+0x58>)
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <__sinit+0x5c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6282      	str	r2, [r0, #40]	; 0x28
 8002896:	4298      	cmp	r0, r3
 8002898:	bf04      	itt	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	6183      	streq	r3, [r0, #24]
 800289e:	f000 f81f 	bl	80028e0 <__sfp>
 80028a2:	6060      	str	r0, [r4, #4]
 80028a4:	4620      	mov	r0, r4
 80028a6:	f000 f81b 	bl	80028e0 <__sfp>
 80028aa:	60a0      	str	r0, [r4, #8]
 80028ac:	4620      	mov	r0, r4
 80028ae:	f000 f817 	bl	80028e0 <__sfp>
 80028b2:	2200      	movs	r2, #0
 80028b4:	60e0      	str	r0, [r4, #12]
 80028b6:	2104      	movs	r1, #4
 80028b8:	6860      	ldr	r0, [r4, #4]
 80028ba:	f7ff ffa1 	bl	8002800 <std>
 80028be:	2201      	movs	r2, #1
 80028c0:	2109      	movs	r1, #9
 80028c2:	68a0      	ldr	r0, [r4, #8]
 80028c4:	f7ff ff9c 	bl	8002800 <std>
 80028c8:	2202      	movs	r2, #2
 80028ca:	2112      	movs	r1, #18
 80028cc:	68e0      	ldr	r0, [r4, #12]
 80028ce:	f7ff ff97 	bl	8002800 <std>
 80028d2:	2301      	movs	r3, #1
 80028d4:	61a3      	str	r3, [r4, #24]
 80028d6:	bd10      	pop	{r4, pc}
 80028d8:	0800360c 	.word	0x0800360c
 80028dc:	08002849 	.word	0x08002849

080028e0 <__sfp>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <__sfp+0x70>)
 80028e4:	4607      	mov	r7, r0
 80028e6:	681e      	ldr	r6, [r3, #0]
 80028e8:	69b3      	ldr	r3, [r6, #24]
 80028ea:	b913      	cbnz	r3, 80028f2 <__sfp+0x12>
 80028ec:	4630      	mov	r0, r6
 80028ee:	f7ff ffc7 	bl	8002880 <__sinit>
 80028f2:	3648      	adds	r6, #72	; 0x48
 80028f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	d503      	bpl.n	8002904 <__sfp+0x24>
 80028fc:	6833      	ldr	r3, [r6, #0]
 80028fe:	b133      	cbz	r3, 800290e <__sfp+0x2e>
 8002900:	6836      	ldr	r6, [r6, #0]
 8002902:	e7f7      	b.n	80028f4 <__sfp+0x14>
 8002904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002908:	b16d      	cbz	r5, 8002926 <__sfp+0x46>
 800290a:	3468      	adds	r4, #104	; 0x68
 800290c:	e7f4      	b.n	80028f8 <__sfp+0x18>
 800290e:	2104      	movs	r1, #4
 8002910:	4638      	mov	r0, r7
 8002912:	f7ff ff9f 	bl	8002854 <__sfmoreglue>
 8002916:	6030      	str	r0, [r6, #0]
 8002918:	2800      	cmp	r0, #0
 800291a:	d1f1      	bne.n	8002900 <__sfp+0x20>
 800291c:	230c      	movs	r3, #12
 800291e:	4604      	mov	r4, r0
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4620      	mov	r0, r4
 8002924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <__sfp+0x74>)
 8002928:	6665      	str	r5, [r4, #100]	; 0x64
 800292a:	e9c4 5500 	strd	r5, r5, [r4]
 800292e:	60a5      	str	r5, [r4, #8]
 8002930:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002934:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002938:	2208      	movs	r2, #8
 800293a:	4629      	mov	r1, r5
 800293c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002940:	f7ff ff3e 	bl	80027c0 <memset>
 8002944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800294c:	e7e9      	b.n	8002922 <__sfp+0x42>
 800294e:	bf00      	nop
 8002950:	0800360c 	.word	0x0800360c
 8002954:	ffff0001 	.word	0xffff0001

08002958 <_fwalk_reent>:
 8002958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800295c:	4680      	mov	r8, r0
 800295e:	4689      	mov	r9, r1
 8002960:	2600      	movs	r6, #0
 8002962:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002966:	b914      	cbnz	r4, 800296e <_fwalk_reent+0x16>
 8002968:	4630      	mov	r0, r6
 800296a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800296e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002972:	3f01      	subs	r7, #1
 8002974:	d501      	bpl.n	800297a <_fwalk_reent+0x22>
 8002976:	6824      	ldr	r4, [r4, #0]
 8002978:	e7f5      	b.n	8002966 <_fwalk_reent+0xe>
 800297a:	89ab      	ldrh	r3, [r5, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d907      	bls.n	8002990 <_fwalk_reent+0x38>
 8002980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002984:	3301      	adds	r3, #1
 8002986:	d003      	beq.n	8002990 <_fwalk_reent+0x38>
 8002988:	4629      	mov	r1, r5
 800298a:	4640      	mov	r0, r8
 800298c:	47c8      	blx	r9
 800298e:	4306      	orrs	r6, r0
 8002990:	3568      	adds	r5, #104	; 0x68
 8002992:	e7ee      	b.n	8002972 <_fwalk_reent+0x1a>

08002994 <_malloc_r>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	1ccd      	adds	r5, r1, #3
 8002998:	f025 0503 	bic.w	r5, r5, #3
 800299c:	3508      	adds	r5, #8
 800299e:	2d0c      	cmp	r5, #12
 80029a0:	bf38      	it	cc
 80029a2:	250c      	movcc	r5, #12
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	4606      	mov	r6, r0
 80029a8:	db01      	blt.n	80029ae <_malloc_r+0x1a>
 80029aa:	42a9      	cmp	r1, r5
 80029ac:	d903      	bls.n	80029b6 <_malloc_r+0x22>
 80029ae:	230c      	movs	r3, #12
 80029b0:	6033      	str	r3, [r6, #0]
 80029b2:	2000      	movs	r0, #0
 80029b4:	bd70      	pop	{r4, r5, r6, pc}
 80029b6:	f000 fd77 	bl	80034a8 <__malloc_lock>
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <_malloc_r+0xac>)
 80029bc:	6814      	ldr	r4, [r2, #0]
 80029be:	4621      	mov	r1, r4
 80029c0:	b991      	cbnz	r1, 80029e8 <_malloc_r+0x54>
 80029c2:	4c20      	ldr	r4, [pc, #128]	; (8002a44 <_malloc_r+0xb0>)
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	b91b      	cbnz	r3, 80029d0 <_malloc_r+0x3c>
 80029c8:	4630      	mov	r0, r6
 80029ca:	f000 fb03 	bl	8002fd4 <_sbrk_r>
 80029ce:	6020      	str	r0, [r4, #0]
 80029d0:	4629      	mov	r1, r5
 80029d2:	4630      	mov	r0, r6
 80029d4:	f000 fafe 	bl	8002fd4 <_sbrk_r>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d124      	bne.n	8002a26 <_malloc_r+0x92>
 80029dc:	230c      	movs	r3, #12
 80029de:	4630      	mov	r0, r6
 80029e0:	6033      	str	r3, [r6, #0]
 80029e2:	f000 fd62 	bl	80034aa <__malloc_unlock>
 80029e6:	e7e4      	b.n	80029b2 <_malloc_r+0x1e>
 80029e8:	680b      	ldr	r3, [r1, #0]
 80029ea:	1b5b      	subs	r3, r3, r5
 80029ec:	d418      	bmi.n	8002a20 <_malloc_r+0x8c>
 80029ee:	2b0b      	cmp	r3, #11
 80029f0:	d90f      	bls.n	8002a12 <_malloc_r+0x7e>
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	18cc      	adds	r4, r1, r3
 80029f6:	50cd      	str	r5, [r1, r3]
 80029f8:	4630      	mov	r0, r6
 80029fa:	f000 fd56 	bl	80034aa <__malloc_unlock>
 80029fe:	f104 000b 	add.w	r0, r4, #11
 8002a02:	1d23      	adds	r3, r4, #4
 8002a04:	f020 0007 	bic.w	r0, r0, #7
 8002a08:	1ac3      	subs	r3, r0, r3
 8002a0a:	d0d3      	beq.n	80029b4 <_malloc_r+0x20>
 8002a0c:	425a      	negs	r2, r3
 8002a0e:	50e2      	str	r2, [r4, r3]
 8002a10:	e7d0      	b.n	80029b4 <_malloc_r+0x20>
 8002a12:	684b      	ldr	r3, [r1, #4]
 8002a14:	428c      	cmp	r4, r1
 8002a16:	bf16      	itet	ne
 8002a18:	6063      	strne	r3, [r4, #4]
 8002a1a:	6013      	streq	r3, [r2, #0]
 8002a1c:	460c      	movne	r4, r1
 8002a1e:	e7eb      	b.n	80029f8 <_malloc_r+0x64>
 8002a20:	460c      	mov	r4, r1
 8002a22:	6849      	ldr	r1, [r1, #4]
 8002a24:	e7cc      	b.n	80029c0 <_malloc_r+0x2c>
 8002a26:	1cc4      	adds	r4, r0, #3
 8002a28:	f024 0403 	bic.w	r4, r4, #3
 8002a2c:	42a0      	cmp	r0, r4
 8002a2e:	d005      	beq.n	8002a3c <_malloc_r+0xa8>
 8002a30:	1a21      	subs	r1, r4, r0
 8002a32:	4630      	mov	r0, r6
 8002a34:	f000 face 	bl	8002fd4 <_sbrk_r>
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d0cf      	beq.n	80029dc <_malloc_r+0x48>
 8002a3c:	6025      	str	r5, [r4, #0]
 8002a3e:	e7db      	b.n	80029f8 <_malloc_r+0x64>
 8002a40:	20000090 	.word	0x20000090
 8002a44:	20000094 	.word	0x20000094

08002a48 <__sfputc_r>:
 8002a48:	6893      	ldr	r3, [r2, #8]
 8002a4a:	b410      	push	{r4}
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	6093      	str	r3, [r2, #8]
 8002a52:	da07      	bge.n	8002a64 <__sfputc_r+0x1c>
 8002a54:	6994      	ldr	r4, [r2, #24]
 8002a56:	42a3      	cmp	r3, r4
 8002a58:	db01      	blt.n	8002a5e <__sfputc_r+0x16>
 8002a5a:	290a      	cmp	r1, #10
 8002a5c:	d102      	bne.n	8002a64 <__sfputc_r+0x1c>
 8002a5e:	bc10      	pop	{r4}
 8002a60:	f000 bb0c 	b.w	800307c <__swbuf_r>
 8002a64:	6813      	ldr	r3, [r2, #0]
 8002a66:	1c58      	adds	r0, r3, #1
 8002a68:	6010      	str	r0, [r2, #0]
 8002a6a:	7019      	strb	r1, [r3, #0]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	bc10      	pop	{r4}
 8002a70:	4770      	bx	lr

08002a72 <__sfputs_r>:
 8002a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a74:	4606      	mov	r6, r0
 8002a76:	460f      	mov	r7, r1
 8002a78:	4614      	mov	r4, r2
 8002a7a:	18d5      	adds	r5, r2, r3
 8002a7c:	42ac      	cmp	r4, r5
 8002a7e:	d101      	bne.n	8002a84 <__sfputs_r+0x12>
 8002a80:	2000      	movs	r0, #0
 8002a82:	e007      	b.n	8002a94 <__sfputs_r+0x22>
 8002a84:	463a      	mov	r2, r7
 8002a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f7ff ffdc 	bl	8002a48 <__sfputc_r>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d1f3      	bne.n	8002a7c <__sfputs_r+0xa>
 8002a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a98 <_vfiprintf_r>:
 8002a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	b09d      	sub	sp, #116	; 0x74
 8002aa0:	4617      	mov	r7, r2
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	4606      	mov	r6, r0
 8002aa6:	b118      	cbz	r0, 8002ab0 <_vfiprintf_r+0x18>
 8002aa8:	6983      	ldr	r3, [r0, #24]
 8002aaa:	b90b      	cbnz	r3, 8002ab0 <_vfiprintf_r+0x18>
 8002aac:	f7ff fee8 	bl	8002880 <__sinit>
 8002ab0:	4b7c      	ldr	r3, [pc, #496]	; (8002ca4 <_vfiprintf_r+0x20c>)
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d158      	bne.n	8002b68 <_vfiprintf_r+0xd0>
 8002ab6:	6874      	ldr	r4, [r6, #4]
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	0718      	lsls	r0, r3, #28
 8002abc:	d55e      	bpl.n	8002b7c <_vfiprintf_r+0xe4>
 8002abe:	6923      	ldr	r3, [r4, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05b      	beq.n	8002b7c <_vfiprintf_r+0xe4>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac8:	2320      	movs	r3, #32
 8002aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ace:	2330      	movs	r3, #48	; 0x30
 8002ad0:	f04f 0b01 	mov.w	fp, #1
 8002ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ad8:	9503      	str	r5, [sp, #12]
 8002ada:	46b8      	mov	r8, r7
 8002adc:	4645      	mov	r5, r8
 8002ade:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ae2:	b10b      	cbz	r3, 8002ae8 <_vfiprintf_r+0x50>
 8002ae4:	2b25      	cmp	r3, #37	; 0x25
 8002ae6:	d154      	bne.n	8002b92 <_vfiprintf_r+0xfa>
 8002ae8:	ebb8 0a07 	subs.w	sl, r8, r7
 8002aec:	d00b      	beq.n	8002b06 <_vfiprintf_r+0x6e>
 8002aee:	4653      	mov	r3, sl
 8002af0:	463a      	mov	r2, r7
 8002af2:	4621      	mov	r1, r4
 8002af4:	4630      	mov	r0, r6
 8002af6:	f7ff ffbc 	bl	8002a72 <__sfputs_r>
 8002afa:	3001      	adds	r0, #1
 8002afc:	f000 80c2 	beq.w	8002c84 <_vfiprintf_r+0x1ec>
 8002b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b02:	4453      	add	r3, sl
 8002b04:	9309      	str	r3, [sp, #36]	; 0x24
 8002b06:	f898 3000 	ldrb.w	r3, [r8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80ba 	beq.w	8002c84 <_vfiprintf_r+0x1ec>
 8002b10:	2300      	movs	r3, #0
 8002b12:	f04f 32ff 	mov.w	r2, #4294967295
 8002b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b1a:	9304      	str	r3, [sp, #16]
 8002b1c:	9307      	str	r3, [sp, #28]
 8002b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b22:	931a      	str	r3, [sp, #104]	; 0x68
 8002b24:	46a8      	mov	r8, r5
 8002b26:	2205      	movs	r2, #5
 8002b28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002b2c:	485e      	ldr	r0, [pc, #376]	; (8002ca8 <_vfiprintf_r+0x210>)
 8002b2e:	f000 fcad 	bl	800348c <memchr>
 8002b32:	9b04      	ldr	r3, [sp, #16]
 8002b34:	bb78      	cbnz	r0, 8002b96 <_vfiprintf_r+0xfe>
 8002b36:	06d9      	lsls	r1, r3, #27
 8002b38:	bf44      	itt	mi
 8002b3a:	2220      	movmi	r2, #32
 8002b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b40:	071a      	lsls	r2, r3, #28
 8002b42:	bf44      	itt	mi
 8002b44:	222b      	movmi	r2, #43	; 0x2b
 8002b46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b4a:	782a      	ldrb	r2, [r5, #0]
 8002b4c:	2a2a      	cmp	r2, #42	; 0x2a
 8002b4e:	d02a      	beq.n	8002ba6 <_vfiprintf_r+0x10e>
 8002b50:	46a8      	mov	r8, r5
 8002b52:	2000      	movs	r0, #0
 8002b54:	250a      	movs	r5, #10
 8002b56:	9a07      	ldr	r2, [sp, #28]
 8002b58:	4641      	mov	r1, r8
 8002b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b5e:	3b30      	subs	r3, #48	; 0x30
 8002b60:	2b09      	cmp	r3, #9
 8002b62:	d969      	bls.n	8002c38 <_vfiprintf_r+0x1a0>
 8002b64:	b360      	cbz	r0, 8002bc0 <_vfiprintf_r+0x128>
 8002b66:	e024      	b.n	8002bb2 <_vfiprintf_r+0x11a>
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <_vfiprintf_r+0x214>)
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	d101      	bne.n	8002b72 <_vfiprintf_r+0xda>
 8002b6e:	68b4      	ldr	r4, [r6, #8]
 8002b70:	e7a2      	b.n	8002ab8 <_vfiprintf_r+0x20>
 8002b72:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <_vfiprintf_r+0x218>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	bf08      	it	eq
 8002b78:	68f4      	ldreq	r4, [r6, #12]
 8002b7a:	e79d      	b.n	8002ab8 <_vfiprintf_r+0x20>
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	4630      	mov	r0, r6
 8002b80:	f000 fae0 	bl	8003144 <__swsetup_r>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d09d      	beq.n	8002ac4 <_vfiprintf_r+0x2c>
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	b01d      	add	sp, #116	; 0x74
 8002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b92:	46a8      	mov	r8, r5
 8002b94:	e7a2      	b.n	8002adc <_vfiprintf_r+0x44>
 8002b96:	4a44      	ldr	r2, [pc, #272]	; (8002ca8 <_vfiprintf_r+0x210>)
 8002b98:	4645      	mov	r5, r8
 8002b9a:	1a80      	subs	r0, r0, r2
 8002b9c:	fa0b f000 	lsl.w	r0, fp, r0
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	9004      	str	r0, [sp, #16]
 8002ba4:	e7be      	b.n	8002b24 <_vfiprintf_r+0x8c>
 8002ba6:	9a03      	ldr	r2, [sp, #12]
 8002ba8:	1d11      	adds	r1, r2, #4
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	9103      	str	r1, [sp, #12]
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	db01      	blt.n	8002bb6 <_vfiprintf_r+0x11e>
 8002bb2:	9207      	str	r2, [sp, #28]
 8002bb4:	e004      	b.n	8002bc0 <_vfiprintf_r+0x128>
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	9207      	str	r2, [sp, #28]
 8002bbe:	9304      	str	r3, [sp, #16]
 8002bc0:	f898 3000 	ldrb.w	r3, [r8]
 8002bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc6:	d10e      	bne.n	8002be6 <_vfiprintf_r+0x14e>
 8002bc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bce:	d138      	bne.n	8002c42 <_vfiprintf_r+0x1aa>
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	f108 0802 	add.w	r8, r8, #2
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	9203      	str	r2, [sp, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bfb8      	it	lt
 8002be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002be4:	9305      	str	r3, [sp, #20]
 8002be6:	4d33      	ldr	r5, [pc, #204]	; (8002cb4 <_vfiprintf_r+0x21c>)
 8002be8:	2203      	movs	r2, #3
 8002bea:	f898 1000 	ldrb.w	r1, [r8]
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 fc4c 	bl	800348c <memchr>
 8002bf4:	b140      	cbz	r0, 8002c08 <_vfiprintf_r+0x170>
 8002bf6:	2340      	movs	r3, #64	; 0x40
 8002bf8:	1b40      	subs	r0, r0, r5
 8002bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8002bfe:	9b04      	ldr	r3, [sp, #16]
 8002c00:	f108 0801 	add.w	r8, r8, #1
 8002c04:	4303      	orrs	r3, r0
 8002c06:	9304      	str	r3, [sp, #16]
 8002c08:	f898 1000 	ldrb.w	r1, [r8]
 8002c0c:	2206      	movs	r2, #6
 8002c0e:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <_vfiprintf_r+0x220>)
 8002c10:	f108 0701 	add.w	r7, r8, #1
 8002c14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c18:	f000 fc38 	bl	800348c <memchr>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d037      	beq.n	8002c90 <_vfiprintf_r+0x1f8>
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <_vfiprintf_r+0x224>)
 8002c22:	bb1b      	cbnz	r3, 8002c6c <_vfiprintf_r+0x1d4>
 8002c24:	9b03      	ldr	r3, [sp, #12]
 8002c26:	3307      	adds	r3, #7
 8002c28:	f023 0307 	bic.w	r3, r3, #7
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	9303      	str	r3, [sp, #12]
 8002c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c32:	444b      	add	r3, r9
 8002c34:	9309      	str	r3, [sp, #36]	; 0x24
 8002c36:	e750      	b.n	8002ada <_vfiprintf_r+0x42>
 8002c38:	fb05 3202 	mla	r2, r5, r2, r3
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	4688      	mov	r8, r1
 8002c40:	e78a      	b.n	8002b58 <_vfiprintf_r+0xc0>
 8002c42:	2300      	movs	r3, #0
 8002c44:	250a      	movs	r5, #10
 8002c46:	4619      	mov	r1, r3
 8002c48:	f108 0801 	add.w	r8, r8, #1
 8002c4c:	9305      	str	r3, [sp, #20]
 8002c4e:	4640      	mov	r0, r8
 8002c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c54:	3a30      	subs	r2, #48	; 0x30
 8002c56:	2a09      	cmp	r2, #9
 8002c58:	d903      	bls.n	8002c62 <_vfiprintf_r+0x1ca>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0c3      	beq.n	8002be6 <_vfiprintf_r+0x14e>
 8002c5e:	9105      	str	r1, [sp, #20]
 8002c60:	e7c1      	b.n	8002be6 <_vfiprintf_r+0x14e>
 8002c62:	fb05 2101 	mla	r1, r5, r1, r2
 8002c66:	2301      	movs	r3, #1
 8002c68:	4680      	mov	r8, r0
 8002c6a:	e7f0      	b.n	8002c4e <_vfiprintf_r+0x1b6>
 8002c6c:	ab03      	add	r3, sp, #12
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	4622      	mov	r2, r4
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_vfiprintf_r+0x228>)
 8002c74:	a904      	add	r1, sp, #16
 8002c76:	4630      	mov	r0, r6
 8002c78:	f3af 8000 	nop.w
 8002c7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c80:	4681      	mov	r9, r0
 8002c82:	d1d5      	bne.n	8002c30 <_vfiprintf_r+0x198>
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	065b      	lsls	r3, r3, #25
 8002c88:	f53f af7e 	bmi.w	8002b88 <_vfiprintf_r+0xf0>
 8002c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c8e:	e77d      	b.n	8002b8c <_vfiprintf_r+0xf4>
 8002c90:	ab03      	add	r3, sp, #12
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4622      	mov	r2, r4
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <_vfiprintf_r+0x228>)
 8002c98:	a904      	add	r1, sp, #16
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	f000 f888 	bl	8002db0 <_printf_i>
 8002ca0:	e7ec      	b.n	8002c7c <_vfiprintf_r+0x1e4>
 8002ca2:	bf00      	nop
 8002ca4:	08003630 	.word	0x08003630
 8002ca8:	08003670 	.word	0x08003670
 8002cac:	08003650 	.word	0x08003650
 8002cb0:	08003610 	.word	0x08003610
 8002cb4:	08003676 	.word	0x08003676
 8002cb8:	0800367a 	.word	0x0800367a
 8002cbc:	00000000 	.word	0x00000000
 8002cc0:	08002a73 	.word	0x08002a73

08002cc4 <_printf_common>:
 8002cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	4691      	mov	r9, r2
 8002cca:	461f      	mov	r7, r3
 8002ccc:	688a      	ldr	r2, [r1, #8]
 8002cce:	690b      	ldr	r3, [r1, #16]
 8002cd0:	4606      	mov	r6, r0
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	bfb8      	it	lt
 8002cd6:	4613      	movlt	r3, r2
 8002cd8:	f8c9 3000 	str.w	r3, [r9]
 8002cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ce6:	b112      	cbz	r2, 8002cee <_printf_common+0x2a>
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f8c9 3000 	str.w	r3, [r9]
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	0699      	lsls	r1, r3, #26
 8002cf2:	bf42      	ittt	mi
 8002cf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cf8:	3302      	addmi	r3, #2
 8002cfa:	f8c9 3000 	strmi.w	r3, [r9]
 8002cfe:	6825      	ldr	r5, [r4, #0]
 8002d00:	f015 0506 	ands.w	r5, r5, #6
 8002d04:	d107      	bne.n	8002d16 <_printf_common+0x52>
 8002d06:	f104 0a19 	add.w	sl, r4, #25
 8002d0a:	68e3      	ldr	r3, [r4, #12]
 8002d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	42ab      	cmp	r3, r5
 8002d14:	dc29      	bgt.n	8002d6a <_printf_common+0xa6>
 8002d16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	3300      	adds	r3, #0
 8002d1e:	bf18      	it	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	0692      	lsls	r2, r2, #26
 8002d24:	d42e      	bmi.n	8002d84 <_printf_common+0xc0>
 8002d26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	47c0      	blx	r8
 8002d30:	3001      	adds	r0, #1
 8002d32:	d021      	beq.n	8002d78 <_printf_common+0xb4>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	68e5      	ldr	r5, [r4, #12]
 8002d38:	f003 0306 	and.w	r3, r3, #6
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	bf18      	it	ne
 8002d40:	2500      	movne	r5, #0
 8002d42:	f8d9 2000 	ldr.w	r2, [r9]
 8002d46:	f04f 0900 	mov.w	r9, #0
 8002d4a:	bf08      	it	eq
 8002d4c:	1aad      	subeq	r5, r5, r2
 8002d4e:	68a3      	ldr	r3, [r4, #8]
 8002d50:	6922      	ldr	r2, [r4, #16]
 8002d52:	bf08      	it	eq
 8002d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bfc4      	itt	gt
 8002d5c:	1a9b      	subgt	r3, r3, r2
 8002d5e:	18ed      	addgt	r5, r5, r3
 8002d60:	341a      	adds	r4, #26
 8002d62:	454d      	cmp	r5, r9
 8002d64:	d11a      	bne.n	8002d9c <_printf_common+0xd8>
 8002d66:	2000      	movs	r0, #0
 8002d68:	e008      	b.n	8002d7c <_printf_common+0xb8>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4652      	mov	r2, sl
 8002d6e:	4639      	mov	r1, r7
 8002d70:	4630      	mov	r0, r6
 8002d72:	47c0      	blx	r8
 8002d74:	3001      	adds	r0, #1
 8002d76:	d103      	bne.n	8002d80 <_printf_common+0xbc>
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d80:	3501      	adds	r5, #1
 8002d82:	e7c2      	b.n	8002d0a <_printf_common+0x46>
 8002d84:	2030      	movs	r0, #48	; 0x30
 8002d86:	18e1      	adds	r1, r4, r3
 8002d88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d92:	4422      	add	r2, r4
 8002d94:	3302      	adds	r3, #2
 8002d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d9a:	e7c4      	b.n	8002d26 <_printf_common+0x62>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4622      	mov	r2, r4
 8002da0:	4639      	mov	r1, r7
 8002da2:	4630      	mov	r0, r6
 8002da4:	47c0      	blx	r8
 8002da6:	3001      	adds	r0, #1
 8002da8:	d0e6      	beq.n	8002d78 <_printf_common+0xb4>
 8002daa:	f109 0901 	add.w	r9, r9, #1
 8002dae:	e7d8      	b.n	8002d62 <_printf_common+0x9e>

08002db0 <_printf_i>:
 8002db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002db4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002db8:	460c      	mov	r4, r1
 8002dba:	7e09      	ldrb	r1, [r1, #24]
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	296e      	cmp	r1, #110	; 0x6e
 8002dc0:	4617      	mov	r7, r2
 8002dc2:	4606      	mov	r6, r0
 8002dc4:	4698      	mov	r8, r3
 8002dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002dc8:	f000 80b3 	beq.w	8002f32 <_printf_i+0x182>
 8002dcc:	d822      	bhi.n	8002e14 <_printf_i+0x64>
 8002dce:	2963      	cmp	r1, #99	; 0x63
 8002dd0:	d036      	beq.n	8002e40 <_printf_i+0x90>
 8002dd2:	d80a      	bhi.n	8002dea <_printf_i+0x3a>
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	f000 80b9 	beq.w	8002f4c <_printf_i+0x19c>
 8002dda:	2958      	cmp	r1, #88	; 0x58
 8002ddc:	f000 8083 	beq.w	8002ee6 <_printf_i+0x136>
 8002de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002de4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002de8:	e032      	b.n	8002e50 <_printf_i+0xa0>
 8002dea:	2964      	cmp	r1, #100	; 0x64
 8002dec:	d001      	beq.n	8002df2 <_printf_i+0x42>
 8002dee:	2969      	cmp	r1, #105	; 0x69
 8002df0:	d1f6      	bne.n	8002de0 <_printf_i+0x30>
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	0605      	lsls	r5, r0, #24
 8002df8:	f103 0104 	add.w	r1, r3, #4
 8002dfc:	d52a      	bpl.n	8002e54 <_printf_i+0xa4>
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6011      	str	r1, [r2, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da03      	bge.n	8002e0e <_printf_i+0x5e>
 8002e06:	222d      	movs	r2, #45	; 0x2d
 8002e08:	425b      	negs	r3, r3
 8002e0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e0e:	486f      	ldr	r0, [pc, #444]	; (8002fcc <_printf_i+0x21c>)
 8002e10:	220a      	movs	r2, #10
 8002e12:	e039      	b.n	8002e88 <_printf_i+0xd8>
 8002e14:	2973      	cmp	r1, #115	; 0x73
 8002e16:	f000 809d 	beq.w	8002f54 <_printf_i+0x1a4>
 8002e1a:	d808      	bhi.n	8002e2e <_printf_i+0x7e>
 8002e1c:	296f      	cmp	r1, #111	; 0x6f
 8002e1e:	d020      	beq.n	8002e62 <_printf_i+0xb2>
 8002e20:	2970      	cmp	r1, #112	; 0x70
 8002e22:	d1dd      	bne.n	8002de0 <_printf_i+0x30>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	e003      	b.n	8002e36 <_printf_i+0x86>
 8002e2e:	2975      	cmp	r1, #117	; 0x75
 8002e30:	d017      	beq.n	8002e62 <_printf_i+0xb2>
 8002e32:	2978      	cmp	r1, #120	; 0x78
 8002e34:	d1d4      	bne.n	8002de0 <_printf_i+0x30>
 8002e36:	2378      	movs	r3, #120	; 0x78
 8002e38:	4865      	ldr	r0, [pc, #404]	; (8002fd0 <_printf_i+0x220>)
 8002e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e3e:	e055      	b.n	8002eec <_printf_i+0x13c>
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e46:	1d19      	adds	r1, r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6011      	str	r1, [r2, #0]
 8002e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e50:	2301      	movs	r3, #1
 8002e52:	e08c      	b.n	8002f6e <_printf_i+0x1be>
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e5a:	6011      	str	r1, [r2, #0]
 8002e5c:	bf18      	it	ne
 8002e5e:	b21b      	sxthne	r3, r3
 8002e60:	e7cf      	b.n	8002e02 <_printf_i+0x52>
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	6825      	ldr	r5, [r4, #0]
 8002e66:	1d18      	adds	r0, r3, #4
 8002e68:	6010      	str	r0, [r2, #0]
 8002e6a:	0628      	lsls	r0, r5, #24
 8002e6c:	d501      	bpl.n	8002e72 <_printf_i+0xc2>
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	e002      	b.n	8002e78 <_printf_i+0xc8>
 8002e72:	0668      	lsls	r0, r5, #25
 8002e74:	d5fb      	bpl.n	8002e6e <_printf_i+0xbe>
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	296f      	cmp	r1, #111	; 0x6f
 8002e7a:	bf14      	ite	ne
 8002e7c:	220a      	movne	r2, #10
 8002e7e:	2208      	moveq	r2, #8
 8002e80:	4852      	ldr	r0, [pc, #328]	; (8002fcc <_printf_i+0x21c>)
 8002e82:	2100      	movs	r1, #0
 8002e84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e88:	6865      	ldr	r5, [r4, #4]
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	60a5      	str	r5, [r4, #8]
 8002e8e:	f2c0 8095 	blt.w	8002fbc <_printf_i+0x20c>
 8002e92:	6821      	ldr	r1, [r4, #0]
 8002e94:	f021 0104 	bic.w	r1, r1, #4
 8002e98:	6021      	str	r1, [r4, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d13d      	bne.n	8002f1a <_printf_i+0x16a>
 8002e9e:	2d00      	cmp	r5, #0
 8002ea0:	f040 808e 	bne.w	8002fc0 <_printf_i+0x210>
 8002ea4:	4665      	mov	r5, ip
 8002ea6:	2a08      	cmp	r2, #8
 8002ea8:	d10b      	bne.n	8002ec2 <_printf_i+0x112>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	07db      	lsls	r3, r3, #31
 8002eae:	d508      	bpl.n	8002ec2 <_printf_i+0x112>
 8002eb0:	6923      	ldr	r3, [r4, #16]
 8002eb2:	6862      	ldr	r2, [r4, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	bfde      	ittt	le
 8002eb8:	2330      	movle	r3, #48	; 0x30
 8002eba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ebe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ec2:	ebac 0305 	sub.w	r3, ip, r5
 8002ec6:	6123      	str	r3, [r4, #16]
 8002ec8:	f8cd 8000 	str.w	r8, [sp]
 8002ecc:	463b      	mov	r3, r7
 8002ece:	aa03      	add	r2, sp, #12
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f7ff fef6 	bl	8002cc4 <_printf_common>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d14d      	bne.n	8002f78 <_printf_i+0x1c8>
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	b005      	add	sp, #20
 8002ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ee6:	4839      	ldr	r0, [pc, #228]	; (8002fcc <_printf_i+0x21c>)
 8002ee8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002eec:	6813      	ldr	r3, [r2, #0]
 8002eee:	6821      	ldr	r1, [r4, #0]
 8002ef0:	1d1d      	adds	r5, r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6015      	str	r5, [r2, #0]
 8002ef6:	060a      	lsls	r2, r1, #24
 8002ef8:	d50b      	bpl.n	8002f12 <_printf_i+0x162>
 8002efa:	07ca      	lsls	r2, r1, #31
 8002efc:	bf44      	itt	mi
 8002efe:	f041 0120 	orrmi.w	r1, r1, #32
 8002f02:	6021      	strmi	r1, [r4, #0]
 8002f04:	b91b      	cbnz	r3, 8002f0e <_printf_i+0x15e>
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	f022 0220 	bic.w	r2, r2, #32
 8002f0c:	6022      	str	r2, [r4, #0]
 8002f0e:	2210      	movs	r2, #16
 8002f10:	e7b7      	b.n	8002e82 <_printf_i+0xd2>
 8002f12:	064d      	lsls	r5, r1, #25
 8002f14:	bf48      	it	mi
 8002f16:	b29b      	uxthmi	r3, r3
 8002f18:	e7ef      	b.n	8002efa <_printf_i+0x14a>
 8002f1a:	4665      	mov	r5, ip
 8002f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f20:	fb02 3311 	mls	r3, r2, r1, r3
 8002f24:	5cc3      	ldrb	r3, [r0, r3]
 8002f26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	2900      	cmp	r1, #0
 8002f2e:	d1f5      	bne.n	8002f1c <_printf_i+0x16c>
 8002f30:	e7b9      	b.n	8002ea6 <_printf_i+0xf6>
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	6825      	ldr	r5, [r4, #0]
 8002f36:	1d18      	adds	r0, r3, #4
 8002f38:	6961      	ldr	r1, [r4, #20]
 8002f3a:	6010      	str	r0, [r2, #0]
 8002f3c:	0628      	lsls	r0, r5, #24
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	d501      	bpl.n	8002f46 <_printf_i+0x196>
 8002f42:	6019      	str	r1, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <_printf_i+0x19c>
 8002f46:	066a      	lsls	r2, r5, #25
 8002f48:	d5fb      	bpl.n	8002f42 <_printf_i+0x192>
 8002f4a:	8019      	strh	r1, [r3, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4665      	mov	r5, ip
 8002f50:	6123      	str	r3, [r4, #16]
 8002f52:	e7b9      	b.n	8002ec8 <_printf_i+0x118>
 8002f54:	6813      	ldr	r3, [r2, #0]
 8002f56:	1d19      	adds	r1, r3, #4
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	681d      	ldr	r5, [r3, #0]
 8002f5c:	6862      	ldr	r2, [r4, #4]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 fa93 	bl	800348c <memchr>
 8002f66:	b108      	cbz	r0, 8002f6c <_printf_i+0x1bc>
 8002f68:	1b40      	subs	r0, r0, r5
 8002f6a:	6060      	str	r0, [r4, #4]
 8002f6c:	6863      	ldr	r3, [r4, #4]
 8002f6e:	6123      	str	r3, [r4, #16]
 8002f70:	2300      	movs	r3, #0
 8002f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f76:	e7a7      	b.n	8002ec8 <_printf_i+0x118>
 8002f78:	6923      	ldr	r3, [r4, #16]
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	4630      	mov	r0, r6
 8002f80:	47c0      	blx	r8
 8002f82:	3001      	adds	r0, #1
 8002f84:	d0aa      	beq.n	8002edc <_printf_i+0x12c>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	079b      	lsls	r3, r3, #30
 8002f8a:	d413      	bmi.n	8002fb4 <_printf_i+0x204>
 8002f8c:	68e0      	ldr	r0, [r4, #12]
 8002f8e:	9b03      	ldr	r3, [sp, #12]
 8002f90:	4298      	cmp	r0, r3
 8002f92:	bfb8      	it	lt
 8002f94:	4618      	movlt	r0, r3
 8002f96:	e7a3      	b.n	8002ee0 <_printf_i+0x130>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	464a      	mov	r2, r9
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	47c0      	blx	r8
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d09a      	beq.n	8002edc <_printf_i+0x12c>
 8002fa6:	3501      	adds	r5, #1
 8002fa8:	68e3      	ldr	r3, [r4, #12]
 8002faa:	9a03      	ldr	r2, [sp, #12]
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	42ab      	cmp	r3, r5
 8002fb0:	dcf2      	bgt.n	8002f98 <_printf_i+0x1e8>
 8002fb2:	e7eb      	b.n	8002f8c <_printf_i+0x1dc>
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	f104 0919 	add.w	r9, r4, #25
 8002fba:	e7f5      	b.n	8002fa8 <_printf_i+0x1f8>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ac      	bne.n	8002f1a <_printf_i+0x16a>
 8002fc0:	7803      	ldrb	r3, [r0, #0]
 8002fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fca:	e76c      	b.n	8002ea6 <_printf_i+0xf6>
 8002fcc:	08003681 	.word	0x08003681
 8002fd0:	08003692 	.word	0x08003692

08002fd4 <_sbrk_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4c05      	ldr	r4, [pc, #20]	; (8002ff0 <_sbrk_r+0x1c>)
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	6023      	str	r3, [r4, #0]
 8002fe0:	f7ff fb3e 	bl	8002660 <_sbrk>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_sbrk_r+0x1a>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_sbrk_r+0x1a>
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	200001d0 	.word	0x200001d0

08002ff4 <__sread>:
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffc:	f000 faa2 	bl	8003544 <_read_r>
 8003000:	2800      	cmp	r0, #0
 8003002:	bfab      	itete	ge
 8003004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003006:	89a3      	ldrhlt	r3, [r4, #12]
 8003008:	181b      	addge	r3, r3, r0
 800300a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800300e:	bfac      	ite	ge
 8003010:	6563      	strge	r3, [r4, #84]	; 0x54
 8003012:	81a3      	strhlt	r3, [r4, #12]
 8003014:	bd10      	pop	{r4, pc}

08003016 <__swrite>:
 8003016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800301a:	461f      	mov	r7, r3
 800301c:	898b      	ldrh	r3, [r1, #12]
 800301e:	4605      	mov	r5, r0
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	460c      	mov	r4, r1
 8003024:	4616      	mov	r6, r2
 8003026:	d505      	bpl.n	8003034 <__swrite+0x1e>
 8003028:	2302      	movs	r3, #2
 800302a:	2200      	movs	r2, #0
 800302c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003030:	f000 f9b6 	bl	80033a0 <_lseek_r>
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	4632      	mov	r2, r6
 8003038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800303c:	81a3      	strh	r3, [r4, #12]
 800303e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003042:	463b      	mov	r3, r7
 8003044:	4628      	mov	r0, r5
 8003046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800304a:	f000 b869 	b.w	8003120 <_write_r>

0800304e <__sseek>:
 800304e:	b510      	push	{r4, lr}
 8003050:	460c      	mov	r4, r1
 8003052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003056:	f000 f9a3 	bl	80033a0 <_lseek_r>
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	bf15      	itete	ne
 8003060:	6560      	strne	r0, [r4, #84]	; 0x54
 8003062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800306a:	81a3      	strheq	r3, [r4, #12]
 800306c:	bf18      	it	ne
 800306e:	81a3      	strhne	r3, [r4, #12]
 8003070:	bd10      	pop	{r4, pc}

08003072 <__sclose>:
 8003072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003076:	f000 b8d3 	b.w	8003220 <_close_r>
	...

0800307c <__swbuf_r>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	460e      	mov	r6, r1
 8003080:	4614      	mov	r4, r2
 8003082:	4605      	mov	r5, r0
 8003084:	b118      	cbz	r0, 800308e <__swbuf_r+0x12>
 8003086:	6983      	ldr	r3, [r0, #24]
 8003088:	b90b      	cbnz	r3, 800308e <__swbuf_r+0x12>
 800308a:	f7ff fbf9 	bl	8002880 <__sinit>
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <__swbuf_r+0x98>)
 8003090:	429c      	cmp	r4, r3
 8003092:	d12a      	bne.n	80030ea <__swbuf_r+0x6e>
 8003094:	686c      	ldr	r4, [r5, #4]
 8003096:	69a3      	ldr	r3, [r4, #24]
 8003098:	60a3      	str	r3, [r4, #8]
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	071a      	lsls	r2, r3, #28
 800309e:	d52e      	bpl.n	80030fe <__swbuf_r+0x82>
 80030a0:	6923      	ldr	r3, [r4, #16]
 80030a2:	b363      	cbz	r3, 80030fe <__swbuf_r+0x82>
 80030a4:	6923      	ldr	r3, [r4, #16]
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	b2f6      	uxtb	r6, r6
 80030aa:	1ac0      	subs	r0, r0, r3
 80030ac:	6963      	ldr	r3, [r4, #20]
 80030ae:	4637      	mov	r7, r6
 80030b0:	4283      	cmp	r3, r0
 80030b2:	dc04      	bgt.n	80030be <__swbuf_r+0x42>
 80030b4:	4621      	mov	r1, r4
 80030b6:	4628      	mov	r0, r5
 80030b8:	f000 f948 	bl	800334c <_fflush_r>
 80030bc:	bb28      	cbnz	r0, 800310a <__swbuf_r+0x8e>
 80030be:	68a3      	ldr	r3, [r4, #8]
 80030c0:	3001      	adds	r0, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60a3      	str	r3, [r4, #8]
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	6022      	str	r2, [r4, #0]
 80030cc:	701e      	strb	r6, [r3, #0]
 80030ce:	6963      	ldr	r3, [r4, #20]
 80030d0:	4283      	cmp	r3, r0
 80030d2:	d004      	beq.n	80030de <__swbuf_r+0x62>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	07db      	lsls	r3, r3, #31
 80030d8:	d519      	bpl.n	800310e <__swbuf_r+0x92>
 80030da:	2e0a      	cmp	r6, #10
 80030dc:	d117      	bne.n	800310e <__swbuf_r+0x92>
 80030de:	4621      	mov	r1, r4
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 f933 	bl	800334c <_fflush_r>
 80030e6:	b190      	cbz	r0, 800310e <__swbuf_r+0x92>
 80030e8:	e00f      	b.n	800310a <__swbuf_r+0x8e>
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <__swbuf_r+0x9c>)
 80030ec:	429c      	cmp	r4, r3
 80030ee:	d101      	bne.n	80030f4 <__swbuf_r+0x78>
 80030f0:	68ac      	ldr	r4, [r5, #8]
 80030f2:	e7d0      	b.n	8003096 <__swbuf_r+0x1a>
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <__swbuf_r+0xa0>)
 80030f6:	429c      	cmp	r4, r3
 80030f8:	bf08      	it	eq
 80030fa:	68ec      	ldreq	r4, [r5, #12]
 80030fc:	e7cb      	b.n	8003096 <__swbuf_r+0x1a>
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	f000 f81f 	bl	8003144 <__swsetup_r>
 8003106:	2800      	cmp	r0, #0
 8003108:	d0cc      	beq.n	80030a4 <__swbuf_r+0x28>
 800310a:	f04f 37ff 	mov.w	r7, #4294967295
 800310e:	4638      	mov	r0, r7
 8003110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003112:	bf00      	nop
 8003114:	08003630 	.word	0x08003630
 8003118:	08003650 	.word	0x08003650
 800311c:	08003610 	.word	0x08003610

08003120 <_write_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4605      	mov	r5, r0
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	2200      	movs	r2, #0
 800312a:	4c05      	ldr	r4, [pc, #20]	; (8003140 <_write_r+0x20>)
 800312c:	6022      	str	r2, [r4, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	f7ff fa49 	bl	80025c6 <_write>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d102      	bne.n	800313e <_write_r+0x1e>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	b103      	cbz	r3, 800313e <_write_r+0x1e>
 800313c:	602b      	str	r3, [r5, #0]
 800313e:	bd38      	pop	{r3, r4, r5, pc}
 8003140:	200001d0 	.word	0x200001d0

08003144 <__swsetup_r>:
 8003144:	4b32      	ldr	r3, [pc, #200]	; (8003210 <__swsetup_r+0xcc>)
 8003146:	b570      	push	{r4, r5, r6, lr}
 8003148:	681d      	ldr	r5, [r3, #0]
 800314a:	4606      	mov	r6, r0
 800314c:	460c      	mov	r4, r1
 800314e:	b125      	cbz	r5, 800315a <__swsetup_r+0x16>
 8003150:	69ab      	ldr	r3, [r5, #24]
 8003152:	b913      	cbnz	r3, 800315a <__swsetup_r+0x16>
 8003154:	4628      	mov	r0, r5
 8003156:	f7ff fb93 	bl	8002880 <__sinit>
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <__swsetup_r+0xd0>)
 800315c:	429c      	cmp	r4, r3
 800315e:	d10f      	bne.n	8003180 <__swsetup_r+0x3c>
 8003160:	686c      	ldr	r4, [r5, #4]
 8003162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003166:	b29a      	uxth	r2, r3
 8003168:	0715      	lsls	r5, r2, #28
 800316a:	d42c      	bmi.n	80031c6 <__swsetup_r+0x82>
 800316c:	06d0      	lsls	r0, r2, #27
 800316e:	d411      	bmi.n	8003194 <__swsetup_r+0x50>
 8003170:	2209      	movs	r2, #9
 8003172:	6032      	str	r2, [r6, #0]
 8003174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003178:	81a3      	strh	r3, [r4, #12]
 800317a:	f04f 30ff 	mov.w	r0, #4294967295
 800317e:	e03e      	b.n	80031fe <__swsetup_r+0xba>
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <__swsetup_r+0xd4>)
 8003182:	429c      	cmp	r4, r3
 8003184:	d101      	bne.n	800318a <__swsetup_r+0x46>
 8003186:	68ac      	ldr	r4, [r5, #8]
 8003188:	e7eb      	b.n	8003162 <__swsetup_r+0x1e>
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <__swsetup_r+0xd8>)
 800318c:	429c      	cmp	r4, r3
 800318e:	bf08      	it	eq
 8003190:	68ec      	ldreq	r4, [r5, #12]
 8003192:	e7e6      	b.n	8003162 <__swsetup_r+0x1e>
 8003194:	0751      	lsls	r1, r2, #29
 8003196:	d512      	bpl.n	80031be <__swsetup_r+0x7a>
 8003198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800319a:	b141      	cbz	r1, 80031ae <__swsetup_r+0x6a>
 800319c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031a0:	4299      	cmp	r1, r3
 80031a2:	d002      	beq.n	80031aa <__swsetup_r+0x66>
 80031a4:	4630      	mov	r0, r6
 80031a6:	f000 f981 	bl	80034ac <_free_r>
 80031aa:	2300      	movs	r3, #0
 80031ac:	6363      	str	r3, [r4, #52]	; 0x34
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031b4:	81a3      	strh	r3, [r4, #12]
 80031b6:	2300      	movs	r3, #0
 80031b8:	6063      	str	r3, [r4, #4]
 80031ba:	6923      	ldr	r3, [r4, #16]
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	6923      	ldr	r3, [r4, #16]
 80031c8:	b94b      	cbnz	r3, 80031de <__swsetup_r+0x9a>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d4:	d003      	beq.n	80031de <__swsetup_r+0x9a>
 80031d6:	4621      	mov	r1, r4
 80031d8:	4630      	mov	r0, r6
 80031da:	f000 f917 	bl	800340c <__smakebuf_r>
 80031de:	89a2      	ldrh	r2, [r4, #12]
 80031e0:	f012 0301 	ands.w	r3, r2, #1
 80031e4:	d00c      	beq.n	8003200 <__swsetup_r+0xbc>
 80031e6:	2300      	movs	r3, #0
 80031e8:	60a3      	str	r3, [r4, #8]
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	425b      	negs	r3, r3
 80031ee:	61a3      	str	r3, [r4, #24]
 80031f0:	6923      	ldr	r3, [r4, #16]
 80031f2:	b953      	cbnz	r3, 800320a <__swsetup_r+0xc6>
 80031f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80031fc:	d1ba      	bne.n	8003174 <__swsetup_r+0x30>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	0792      	lsls	r2, r2, #30
 8003202:	bf58      	it	pl
 8003204:	6963      	ldrpl	r3, [r4, #20]
 8003206:	60a3      	str	r3, [r4, #8]
 8003208:	e7f2      	b.n	80031f0 <__swsetup_r+0xac>
 800320a:	2000      	movs	r0, #0
 800320c:	e7f7      	b.n	80031fe <__swsetup_r+0xba>
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c
 8003214:	08003630 	.word	0x08003630
 8003218:	08003650 	.word	0x08003650
 800321c:	08003610 	.word	0x08003610

08003220 <_close_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	2300      	movs	r3, #0
 8003224:	4c05      	ldr	r4, [pc, #20]	; (800323c <_close_r+0x1c>)
 8003226:	4605      	mov	r5, r0
 8003228:	4608      	mov	r0, r1
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	f7ff f9e7 	bl	80025fe <_close>
 8003230:	1c43      	adds	r3, r0, #1
 8003232:	d102      	bne.n	800323a <_close_r+0x1a>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	b103      	cbz	r3, 800323a <_close_r+0x1a>
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	200001d0 	.word	0x200001d0

08003240 <__sflush_r>:
 8003240:	898a      	ldrh	r2, [r1, #12]
 8003242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	0710      	lsls	r0, r2, #28
 800324a:	460c      	mov	r4, r1
 800324c:	d458      	bmi.n	8003300 <__sflush_r+0xc0>
 800324e:	684b      	ldr	r3, [r1, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	dc05      	bgt.n	8003260 <__sflush_r+0x20>
 8003254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	dc02      	bgt.n	8003260 <__sflush_r+0x20>
 800325a:	2000      	movs	r0, #0
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003262:	2e00      	cmp	r6, #0
 8003264:	d0f9      	beq.n	800325a <__sflush_r+0x1a>
 8003266:	2300      	movs	r3, #0
 8003268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800326c:	682f      	ldr	r7, [r5, #0]
 800326e:	6a21      	ldr	r1, [r4, #32]
 8003270:	602b      	str	r3, [r5, #0]
 8003272:	d032      	beq.n	80032da <__sflush_r+0x9a>
 8003274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	075a      	lsls	r2, r3, #29
 800327a:	d505      	bpl.n	8003288 <__sflush_r+0x48>
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	1ac0      	subs	r0, r0, r3
 8003280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003282:	b10b      	cbz	r3, 8003288 <__sflush_r+0x48>
 8003284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003286:	1ac0      	subs	r0, r0, r3
 8003288:	2300      	movs	r3, #0
 800328a:	4602      	mov	r2, r0
 800328c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800328e:	6a21      	ldr	r1, [r4, #32]
 8003290:	4628      	mov	r0, r5
 8003292:	47b0      	blx	r6
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	d106      	bne.n	80032a8 <__sflush_r+0x68>
 800329a:	6829      	ldr	r1, [r5, #0]
 800329c:	291d      	cmp	r1, #29
 800329e:	d848      	bhi.n	8003332 <__sflush_r+0xf2>
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <__sflush_r+0x108>)
 80032a2:	40ca      	lsrs	r2, r1
 80032a4:	07d6      	lsls	r6, r2, #31
 80032a6:	d544      	bpl.n	8003332 <__sflush_r+0xf2>
 80032a8:	2200      	movs	r2, #0
 80032aa:	6062      	str	r2, [r4, #4]
 80032ac:	6922      	ldr	r2, [r4, #16]
 80032ae:	04d9      	lsls	r1, r3, #19
 80032b0:	6022      	str	r2, [r4, #0]
 80032b2:	d504      	bpl.n	80032be <__sflush_r+0x7e>
 80032b4:	1c42      	adds	r2, r0, #1
 80032b6:	d101      	bne.n	80032bc <__sflush_r+0x7c>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b903      	cbnz	r3, 80032be <__sflush_r+0x7e>
 80032bc:	6560      	str	r0, [r4, #84]	; 0x54
 80032be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032c0:	602f      	str	r7, [r5, #0]
 80032c2:	2900      	cmp	r1, #0
 80032c4:	d0c9      	beq.n	800325a <__sflush_r+0x1a>
 80032c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ca:	4299      	cmp	r1, r3
 80032cc:	d002      	beq.n	80032d4 <__sflush_r+0x94>
 80032ce:	4628      	mov	r0, r5
 80032d0:	f000 f8ec 	bl	80034ac <_free_r>
 80032d4:	2000      	movs	r0, #0
 80032d6:	6360      	str	r0, [r4, #52]	; 0x34
 80032d8:	e7c0      	b.n	800325c <__sflush_r+0x1c>
 80032da:	2301      	movs	r3, #1
 80032dc:	4628      	mov	r0, r5
 80032de:	47b0      	blx	r6
 80032e0:	1c41      	adds	r1, r0, #1
 80032e2:	d1c8      	bne.n	8003276 <__sflush_r+0x36>
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0c5      	beq.n	8003276 <__sflush_r+0x36>
 80032ea:	2b1d      	cmp	r3, #29
 80032ec:	d001      	beq.n	80032f2 <__sflush_r+0xb2>
 80032ee:	2b16      	cmp	r3, #22
 80032f0:	d101      	bne.n	80032f6 <__sflush_r+0xb6>
 80032f2:	602f      	str	r7, [r5, #0]
 80032f4:	e7b1      	b.n	800325a <__sflush_r+0x1a>
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	e7ad      	b.n	800325c <__sflush_r+0x1c>
 8003300:	690f      	ldr	r7, [r1, #16]
 8003302:	2f00      	cmp	r7, #0
 8003304:	d0a9      	beq.n	800325a <__sflush_r+0x1a>
 8003306:	0793      	lsls	r3, r2, #30
 8003308:	bf18      	it	ne
 800330a:	2300      	movne	r3, #0
 800330c:	680e      	ldr	r6, [r1, #0]
 800330e:	bf08      	it	eq
 8003310:	694b      	ldreq	r3, [r1, #20]
 8003312:	eba6 0807 	sub.w	r8, r6, r7
 8003316:	600f      	str	r7, [r1, #0]
 8003318:	608b      	str	r3, [r1, #8]
 800331a:	f1b8 0f00 	cmp.w	r8, #0
 800331e:	dd9c      	ble.n	800325a <__sflush_r+0x1a>
 8003320:	4643      	mov	r3, r8
 8003322:	463a      	mov	r2, r7
 8003324:	6a21      	ldr	r1, [r4, #32]
 8003326:	4628      	mov	r0, r5
 8003328:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800332a:	47b0      	blx	r6
 800332c:	2800      	cmp	r0, #0
 800332e:	dc06      	bgt.n	800333e <__sflush_r+0xfe>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003336:	81a3      	strh	r3, [r4, #12]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	e78e      	b.n	800325c <__sflush_r+0x1c>
 800333e:	4407      	add	r7, r0
 8003340:	eba8 0800 	sub.w	r8, r8, r0
 8003344:	e7e9      	b.n	800331a <__sflush_r+0xda>
 8003346:	bf00      	nop
 8003348:	20400001 	.word	0x20400001

0800334c <_fflush_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	690b      	ldr	r3, [r1, #16]
 8003350:	4605      	mov	r5, r0
 8003352:	460c      	mov	r4, r1
 8003354:	b1db      	cbz	r3, 800338e <_fflush_r+0x42>
 8003356:	b118      	cbz	r0, 8003360 <_fflush_r+0x14>
 8003358:	6983      	ldr	r3, [r0, #24]
 800335a:	b90b      	cbnz	r3, 8003360 <_fflush_r+0x14>
 800335c:	f7ff fa90 	bl	8002880 <__sinit>
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <_fflush_r+0x48>)
 8003362:	429c      	cmp	r4, r3
 8003364:	d109      	bne.n	800337a <_fflush_r+0x2e>
 8003366:	686c      	ldr	r4, [r5, #4]
 8003368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336c:	b17b      	cbz	r3, 800338e <_fflush_r+0x42>
 800336e:	4621      	mov	r1, r4
 8003370:	4628      	mov	r0, r5
 8003372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003376:	f7ff bf63 	b.w	8003240 <__sflush_r>
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <_fflush_r+0x4c>)
 800337c:	429c      	cmp	r4, r3
 800337e:	d101      	bne.n	8003384 <_fflush_r+0x38>
 8003380:	68ac      	ldr	r4, [r5, #8]
 8003382:	e7f1      	b.n	8003368 <_fflush_r+0x1c>
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <_fflush_r+0x50>)
 8003386:	429c      	cmp	r4, r3
 8003388:	bf08      	it	eq
 800338a:	68ec      	ldreq	r4, [r5, #12]
 800338c:	e7ec      	b.n	8003368 <_fflush_r+0x1c>
 800338e:	2000      	movs	r0, #0
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	08003630 	.word	0x08003630
 8003398:	08003650 	.word	0x08003650
 800339c:	08003610 	.word	0x08003610

080033a0 <_lseek_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4605      	mov	r5, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	4c05      	ldr	r4, [pc, #20]	; (80033c0 <_lseek_r+0x20>)
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7ff f949 	bl	8002646 <_lseek>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_lseek_r+0x1e>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	b103      	cbz	r3, 80033be <_lseek_r+0x1e>
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	200001d0 	.word	0x200001d0

080033c4 <__swhatbuf_r>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	460e      	mov	r6, r1
 80033c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033cc:	b096      	sub	sp, #88	; 0x58
 80033ce:	2900      	cmp	r1, #0
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	da07      	bge.n	80033e6 <__swhatbuf_r+0x22>
 80033d6:	2300      	movs	r3, #0
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	89b3      	ldrh	r3, [r6, #12]
 80033dc:	061a      	lsls	r2, r3, #24
 80033de:	d410      	bmi.n	8003402 <__swhatbuf_r+0x3e>
 80033e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e4:	e00e      	b.n	8003404 <__swhatbuf_r+0x40>
 80033e6:	466a      	mov	r2, sp
 80033e8:	f000 f8be 	bl	8003568 <_fstat_r>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	dbf2      	blt.n	80033d6 <__swhatbuf_r+0x12>
 80033f0:	9a01      	ldr	r2, [sp, #4]
 80033f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033fa:	425a      	negs	r2, r3
 80033fc:	415a      	adcs	r2, r3
 80033fe:	602a      	str	r2, [r5, #0]
 8003400:	e7ee      	b.n	80033e0 <__swhatbuf_r+0x1c>
 8003402:	2340      	movs	r3, #64	; 0x40
 8003404:	2000      	movs	r0, #0
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	b016      	add	sp, #88	; 0x58
 800340a:	bd70      	pop	{r4, r5, r6, pc}

0800340c <__smakebuf_r>:
 800340c:	898b      	ldrh	r3, [r1, #12]
 800340e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003410:	079d      	lsls	r5, r3, #30
 8003412:	4606      	mov	r6, r0
 8003414:	460c      	mov	r4, r1
 8003416:	d507      	bpl.n	8003428 <__smakebuf_r+0x1c>
 8003418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	6123      	str	r3, [r4, #16]
 8003420:	2301      	movs	r3, #1
 8003422:	6163      	str	r3, [r4, #20]
 8003424:	b002      	add	sp, #8
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	ab01      	add	r3, sp, #4
 800342a:	466a      	mov	r2, sp
 800342c:	f7ff ffca 	bl	80033c4 <__swhatbuf_r>
 8003430:	9900      	ldr	r1, [sp, #0]
 8003432:	4605      	mov	r5, r0
 8003434:	4630      	mov	r0, r6
 8003436:	f7ff faad 	bl	8002994 <_malloc_r>
 800343a:	b948      	cbnz	r0, 8003450 <__smakebuf_r+0x44>
 800343c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003440:	059a      	lsls	r2, r3, #22
 8003442:	d4ef      	bmi.n	8003424 <__smakebuf_r+0x18>
 8003444:	f023 0303 	bic.w	r3, r3, #3
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	e7e3      	b.n	8003418 <__smakebuf_r+0xc>
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <__smakebuf_r+0x7c>)
 8003452:	62b3      	str	r3, [r6, #40]	; 0x28
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	6020      	str	r0, [r4, #0]
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	9b00      	ldr	r3, [sp, #0]
 8003460:	6120      	str	r0, [r4, #16]
 8003462:	6163      	str	r3, [r4, #20]
 8003464:	9b01      	ldr	r3, [sp, #4]
 8003466:	b15b      	cbz	r3, 8003480 <__smakebuf_r+0x74>
 8003468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800346c:	4630      	mov	r0, r6
 800346e:	f000 f88d 	bl	800358c <_isatty_r>
 8003472:	b128      	cbz	r0, 8003480 <__smakebuf_r+0x74>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	431d      	orrs	r5, r3
 8003484:	81a5      	strh	r5, [r4, #12]
 8003486:	e7cd      	b.n	8003424 <__smakebuf_r+0x18>
 8003488:	08002849 	.word	0x08002849

0800348c <memchr>:
 800348c:	b510      	push	{r4, lr}
 800348e:	b2c9      	uxtb	r1, r1
 8003490:	4402      	add	r2, r0
 8003492:	4290      	cmp	r0, r2
 8003494:	4603      	mov	r3, r0
 8003496:	d101      	bne.n	800349c <memchr+0x10>
 8003498:	2300      	movs	r3, #0
 800349a:	e003      	b.n	80034a4 <memchr+0x18>
 800349c:	781c      	ldrb	r4, [r3, #0]
 800349e:	3001      	adds	r0, #1
 80034a0:	428c      	cmp	r4, r1
 80034a2:	d1f6      	bne.n	8003492 <memchr+0x6>
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd10      	pop	{r4, pc}

080034a8 <__malloc_lock>:
 80034a8:	4770      	bx	lr

080034aa <__malloc_unlock>:
 80034aa:	4770      	bx	lr

080034ac <_free_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4605      	mov	r5, r0
 80034b0:	2900      	cmp	r1, #0
 80034b2:	d043      	beq.n	800353c <_free_r+0x90>
 80034b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b8:	1f0c      	subs	r4, r1, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bfb8      	it	lt
 80034be:	18e4      	addlt	r4, r4, r3
 80034c0:	f7ff fff2 	bl	80034a8 <__malloc_lock>
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <_free_r+0x94>)
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	4610      	mov	r0, r2
 80034ca:	b933      	cbnz	r3, 80034da <_free_r+0x2e>
 80034cc:	6063      	str	r3, [r4, #4]
 80034ce:	6014      	str	r4, [r2, #0]
 80034d0:	4628      	mov	r0, r5
 80034d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034d6:	f7ff bfe8 	b.w	80034aa <__malloc_unlock>
 80034da:	42a3      	cmp	r3, r4
 80034dc:	d90b      	bls.n	80034f6 <_free_r+0x4a>
 80034de:	6821      	ldr	r1, [r4, #0]
 80034e0:	1862      	adds	r2, r4, r1
 80034e2:	4293      	cmp	r3, r2
 80034e4:	bf01      	itttt	eq
 80034e6:	681a      	ldreq	r2, [r3, #0]
 80034e8:	685b      	ldreq	r3, [r3, #4]
 80034ea:	1852      	addeq	r2, r2, r1
 80034ec:	6022      	streq	r2, [r4, #0]
 80034ee:	6063      	str	r3, [r4, #4]
 80034f0:	6004      	str	r4, [r0, #0]
 80034f2:	e7ed      	b.n	80034d0 <_free_r+0x24>
 80034f4:	4613      	mov	r3, r2
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	b10a      	cbz	r2, 80034fe <_free_r+0x52>
 80034fa:	42a2      	cmp	r2, r4
 80034fc:	d9fa      	bls.n	80034f4 <_free_r+0x48>
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	1858      	adds	r0, r3, r1
 8003502:	42a0      	cmp	r0, r4
 8003504:	d10b      	bne.n	800351e <_free_r+0x72>
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	4401      	add	r1, r0
 800350a:	1858      	adds	r0, r3, r1
 800350c:	4282      	cmp	r2, r0
 800350e:	6019      	str	r1, [r3, #0]
 8003510:	d1de      	bne.n	80034d0 <_free_r+0x24>
 8003512:	6810      	ldr	r0, [r2, #0]
 8003514:	6852      	ldr	r2, [r2, #4]
 8003516:	4401      	add	r1, r0
 8003518:	6019      	str	r1, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e7d8      	b.n	80034d0 <_free_r+0x24>
 800351e:	d902      	bls.n	8003526 <_free_r+0x7a>
 8003520:	230c      	movs	r3, #12
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	e7d4      	b.n	80034d0 <_free_r+0x24>
 8003526:	6820      	ldr	r0, [r4, #0]
 8003528:	1821      	adds	r1, r4, r0
 800352a:	428a      	cmp	r2, r1
 800352c:	bf01      	itttt	eq
 800352e:	6811      	ldreq	r1, [r2, #0]
 8003530:	6852      	ldreq	r2, [r2, #4]
 8003532:	1809      	addeq	r1, r1, r0
 8003534:	6021      	streq	r1, [r4, #0]
 8003536:	6062      	str	r2, [r4, #4]
 8003538:	605c      	str	r4, [r3, #4]
 800353a:	e7c9      	b.n	80034d0 <_free_r+0x24>
 800353c:	bd38      	pop	{r3, r4, r5, pc}
 800353e:	bf00      	nop
 8003540:	20000090 	.word	0x20000090

08003544 <_read_r>:
 8003544:	b538      	push	{r3, r4, r5, lr}
 8003546:	4605      	mov	r5, r0
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	2200      	movs	r2, #0
 800354e:	4c05      	ldr	r4, [pc, #20]	; (8003564 <_read_r+0x20>)
 8003550:	6022      	str	r2, [r4, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	f7ff f81a 	bl	800258c <_read>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d102      	bne.n	8003562 <_read_r+0x1e>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	b103      	cbz	r3, 8003562 <_read_r+0x1e>
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	200001d0 	.word	0x200001d0

08003568 <_fstat_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	2300      	movs	r3, #0
 800356c:	4c06      	ldr	r4, [pc, #24]	; (8003588 <_fstat_r+0x20>)
 800356e:	4605      	mov	r5, r0
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	f7ff f84d 	bl	8002614 <_fstat>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d102      	bne.n	8003584 <_fstat_r+0x1c>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	b103      	cbz	r3, 8003584 <_fstat_r+0x1c>
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	bd38      	pop	{r3, r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	200001d0 	.word	0x200001d0

0800358c <_isatty_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	2300      	movs	r3, #0
 8003590:	4c05      	ldr	r4, [pc, #20]	; (80035a8 <_isatty_r+0x1c>)
 8003592:	4605      	mov	r5, r0
 8003594:	4608      	mov	r0, r1
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	f7ff f84b 	bl	8002632 <_isatty>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_isatty_r+0x1a>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_isatty_r+0x1a>
 80035a4:	602b      	str	r3, [r5, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	200001d0 	.word	0x200001d0

080035ac <_init>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	bf00      	nop
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr

080035b8 <_fini>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr
