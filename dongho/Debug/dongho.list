
dongho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002434  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002524  08002524  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002524  08002524  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002524  08002524  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800252c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000004  08002530  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002530  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9ba  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb6  00000000  00000000  0002c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  0002e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  0002ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d692  00000000  00000000  0002f348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008129  00000000  00000000  0003c9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046930  00000000  00000000  00044b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008b433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001864  00000000  00000000  0008b4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024dc 	.word	0x080024dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080024dc 	.word	0x080024dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fff5 	bl	8002224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 f8e6 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fafd 	bl	8000862 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fae1 	bl	8000838 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b4:	230f      	movs	r3, #15
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e124      	b.n	8000514 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d10a      	bne.n	80002e8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2200      	movs	r2, #0
 80002d6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2240      	movs	r2, #64	; 0x40
 80002dc:	2100      	movs	r1, #0
 80002de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 ffc2 	bl	800226c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ec:	2210      	movs	r2, #16
 80002ee:	4013      	ands	r3, r2
 80002f0:	d000      	beq.n	80002f4 <HAL_ADC_Init+0x48>
 80002f2:	e102      	b.n	80004fa <HAL_ADC_Init+0x24e>
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <HAL_ADC_Init+0x54>
 80002fe:	e0fc      	b.n	80004fa <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	2204      	movs	r2, #4
 8000308:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800030a:	d000      	beq.n	800030e <HAL_ADC_Init+0x62>
 800030c:	e0f5      	b.n	80004fa <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000312:	4a82      	ldr	r2, [pc, #520]	; (800051c <HAL_ADC_Init+0x270>)
 8000314:	4013      	ands	r3, r2
 8000316:	2202      	movs	r2, #2
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	2b01      	cmp	r3, #1
 800032a:	d112      	bne.n	8000352 <HAL_ADC_Init+0xa6>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2201      	movs	r2, #1
 8000334:	4013      	ands	r3, r2
 8000336:	2b01      	cmp	r3, #1
 8000338:	d009      	beq.n	800034e <HAL_ADC_Init+0xa2>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	401a      	ands	r2, r3
 8000346:	2380      	movs	r3, #128	; 0x80
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	429a      	cmp	r2, r3
 800034c:	d101      	bne.n	8000352 <HAL_ADC_Init+0xa6>
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <HAL_ADC_Init+0xa8>
 8000352:	2300      	movs	r3, #0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d116      	bne.n	8000386 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	2218      	movs	r2, #24
 8000360:	4393      	bics	r3, r2
 8000362:	0019      	movs	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	430a      	orrs	r2, r1
 800036e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	691b      	ldr	r3, [r3, #16]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	0899      	lsrs	r1, r3, #2
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	430a      	orrs	r2, r1
 8000384:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4963      	ldr	r1, [pc, #396]	; (8000520 <HAL_ADC_Init+0x274>)
 8000392:	400a      	ands	r2, r1
 8000394:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d002      	beq.n	80003ba <HAL_ADC_Init+0x10e>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	015b      	lsls	r3, r3, #5
 80003b8:	e000      	b.n	80003bc <HAL_ADC_Init+0x110>
 80003ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003c2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d101      	bne.n	80003d0 <HAL_ADC_Init+0x124>
 80003cc:	2304      	movs	r3, #4
 80003ce:	e000      	b.n	80003d2 <HAL_ADC_Init+0x126>
 80003d0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80003d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003da:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	4313      	orrs	r3, r2
 80003e0:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d115      	bne.n	8000416 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6a1b      	ldr	r3, [r3, #32]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d105      	bne.n	80003fe <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0252      	lsls	r2, r2, #9
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	e00b      	b.n	8000416 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000402:	2220      	movs	r2, #32
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040e:	2201      	movs	r2, #1
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800041a:	23c2      	movs	r3, #194	; 0xc2
 800041c:	33ff      	adds	r3, #255	; 0xff
 800041e:	429a      	cmp	r2, r3
 8000420:	d007      	beq.n	8000432 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800042a:	4313      	orrs	r3, r2
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	4313      	orrs	r3, r2
 8000430:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	68d9      	ldr	r1, [r3, #12]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	430a      	orrs	r2, r1
 8000440:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	055b      	lsls	r3, r3, #21
 800044a:	429a      	cmp	r2, r3
 800044c:	d01b      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000452:	2b01      	cmp	r3, #1
 8000454:	d017      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800045a:	2b02      	cmp	r3, #2
 800045c:	d013      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000462:	2b03      	cmp	r3, #3
 8000464:	d00f      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800046a:	2b04      	cmp	r3, #4
 800046c:	d00b      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000472:	2b05      	cmp	r3, #5
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800047a:	2b06      	cmp	r3, #6
 800047c:	d003      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000482:	2b07      	cmp	r3, #7
 8000484:	d112      	bne.n	80004ac <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2107      	movs	r1, #7
 8000492:	438a      	bics	r2, r1
 8000494:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	6959      	ldr	r1, [r3, #20]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a0:	2207      	movs	r2, #7
 80004a2:	401a      	ands	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <HAL_ADC_Init+0x278>)
 80004b4:	4013      	ands	r3, r2
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d10b      	bne.n	80004d4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c6:	2203      	movs	r2, #3
 80004c8:	4393      	bics	r3, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004d2:	e01c      	b.n	800050e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d8:	2212      	movs	r2, #18
 80004da:	4393      	bics	r3, r2
 80004dc:	2210      	movs	r2, #16
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e8:	2201      	movs	r2, #1
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80004f0:	230f      	movs	r3, #15
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004f8:	e009      	b.n	800050e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fe:	2210      	movs	r2, #16
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000506:	230f      	movs	r3, #15
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800050e:	230f      	movs	r3, #15
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
}
 8000514:	0018      	movs	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	b004      	add	sp, #16
 800051a:	bd80      	pop	{r7, pc}
 800051c:	fffffefd 	.word	0xfffffefd
 8000520:	fffe0219 	.word	0xfffe0219
 8000524:	833fffe7 	.word	0x833fffe7

08000528 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000532:	230f      	movs	r3, #15
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	055b      	lsls	r3, r3, #21
 8000546:	429a      	cmp	r2, r3
 8000548:	d011      	beq.n	800056e <HAL_ADC_ConfigChannel+0x46>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800054e:	2b01      	cmp	r3, #1
 8000550:	d00d      	beq.n	800056e <HAL_ADC_ConfigChannel+0x46>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000556:	2b02      	cmp	r3, #2
 8000558:	d009      	beq.n	800056e <HAL_ADC_ConfigChannel+0x46>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055e:	2b03      	cmp	r3, #3
 8000560:	d005      	beq.n	800056e <HAL_ADC_ConfigChannel+0x46>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000566:	2b04      	cmp	r3, #4
 8000568:	d001      	beq.n	800056e <HAL_ADC_ConfigChannel+0x46>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2240      	movs	r2, #64	; 0x40
 8000572:	5c9b      	ldrb	r3, [r3, r2]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d101      	bne.n	800057c <HAL_ADC_ConfigChannel+0x54>
 8000578:	2302      	movs	r3, #2
 800057a:	e0bb      	b.n	80006f4 <HAL_ADC_ConfigChannel+0x1cc>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2240      	movs	r2, #64	; 0x40
 8000580:	2101      	movs	r1, #1
 8000582:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	d000      	beq.n	8000592 <HAL_ADC_ConfigChannel+0x6a>
 8000590:	e09f      	b.n	80006d2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	4a59      	ldr	r2, [pc, #356]	; (80006fc <HAL_ADC_ConfigChannel+0x1d4>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d100      	bne.n	800059e <HAL_ADC_ConfigChannel+0x76>
 800059c:	e077      	b.n	800068e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2201      	movs	r2, #1
 80005aa:	409a      	lsls	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	055b      	lsls	r3, r3, #21
 80005bc:	429a      	cmp	r2, r3
 80005be:	d037      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d033      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d02f      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d02b      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005dc:	2b04      	cmp	r3, #4
 80005de:	d027      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d023      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d01f      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d01b      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	2107      	movs	r1, #7
 8000604:	400b      	ands	r3, r1
 8000606:	429a      	cmp	r2, r3
 8000608:	d012      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2107      	movs	r1, #7
 8000616:	438a      	bics	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6959      	ldr	r1, [r3, #20]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2207      	movs	r2, #7
 8000626:	401a      	ands	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b10      	cmp	r3, #16
 8000636:	d003      	beq.n	8000640 <HAL_ADC_ConfigChannel+0x118>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b11      	cmp	r3, #17
 800063e:	d152      	bne.n	80006e6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000640:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <HAL_ADC_ConfigChannel+0x1d8>)
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b10      	cmp	r3, #16
 800064a:	d102      	bne.n	8000652 <HAL_ADC_ConfigChannel+0x12a>
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	e001      	b.n	8000656 <HAL_ADC_ConfigChannel+0x12e>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	03db      	lsls	r3, r3, #15
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <HAL_ADC_ConfigChannel+0x1d8>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b10      	cmp	r3, #16
 8000662:	d140      	bne.n	80006e6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <HAL_ADC_ConfigChannel+0x1dc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4927      	ldr	r1, [pc, #156]	; (8000708 <HAL_ADC_ConfigChannel+0x1e0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fd4c 	bl	8000108 <__udivsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	189b      	adds	r3, r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800067e:	e002      	b.n	8000686 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	3b01      	subs	r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f9      	bne.n	8000680 <HAL_ADC_ConfigChannel+0x158>
 800068c:	e02b      	b.n	80006e6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4099      	lsls	r1, r3
 800069c:	000b      	movs	r3, r1
 800069e:	43d9      	mvns	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b10      	cmp	r3, #16
 80006ae:	d003      	beq.n	80006b8 <HAL_ADC_ConfigChannel+0x190>
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b11      	cmp	r3, #17
 80006b6:	d116      	bne.n	80006e6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_ADC_ConfigChannel+0x1d8>)
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b10      	cmp	r3, #16
 80006c2:	d101      	bne.n	80006c8 <HAL_ADC_ConfigChannel+0x1a0>
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <HAL_ADC_ConfigChannel+0x1e4>)
 80006c6:	e000      	b.n	80006ca <HAL_ADC_ConfigChannel+0x1a2>
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_ADC_ConfigChannel+0x1e8>)
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_ADC_ConfigChannel+0x1d8>)
 80006cc:	400a      	ands	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	e009      	b.n	80006e6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	2220      	movs	r2, #32
 80006d8:	431a      	orrs	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80006de:	230f      	movs	r3, #15
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	2100      	movs	r1, #0
 80006ec:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	781b      	ldrb	r3, [r3, #0]
}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b004      	add	sp, #16
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	00001001 	.word	0x00001001
 8000700:	40012708 	.word	0x40012708
 8000704:	20000000 	.word	0x20000000
 8000708:	000f4240 	.word	0x000f4240
 800070c:	ff7fffff 	.word	0xff7fffff
 8000710:	ffbfffff 	.word	0xffbfffff

08000714 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b7f      	cmp	r3, #127	; 0x7f
 8000728:	d932      	bls.n	8000790 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072a:	4a2f      	ldr	r2, [pc, #188]	; (80007e8 <NVIC_SetPriority+0xd4>)
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	0019      	movs	r1, r3
 8000732:	230f      	movs	r3, #15
 8000734:	400b      	ands	r3, r1
 8000736:	3b08      	subs	r3, #8
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	3306      	adds	r3, #6
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	18d3      	adds	r3, r2, r3
 8000740:	3304      	adds	r3, #4
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1dfa      	adds	r2, r7, #7
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	0011      	movs	r1, r2
 800074a:	2203      	movs	r2, #3
 800074c:	400a      	ands	r2, r1
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	21ff      	movs	r1, #255	; 0xff
 8000752:	4091      	lsls	r1, r2
 8000754:	000a      	movs	r2, r1
 8000756:	43d2      	mvns	r2, r2
 8000758:	401a      	ands	r2, r3
 800075a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	019b      	lsls	r3, r3, #6
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	401a      	ands	r2, r3
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	0018      	movs	r0, r3
 800076a:	2303      	movs	r3, #3
 800076c:	4003      	ands	r3, r0
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <NVIC_SetPriority+0xd4>)
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001c      	movs	r4, r3
 800077a:	230f      	movs	r3, #15
 800077c:	4023      	ands	r3, r4
 800077e:	3b08      	subs	r3, #8
 8000780:	089b      	lsrs	r3, r3, #2
 8000782:	430a      	orrs	r2, r1
 8000784:	3306      	adds	r3, #6
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	18c3      	adds	r3, r0, r3
 800078a:	3304      	adds	r3, #4
 800078c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078e:	e027      	b.n	80007e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <NVIC_SetPriority+0xd8>)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	089b      	lsrs	r3, r3, #2
 800079a:	33c0      	adds	r3, #192	; 0xc0
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	589b      	ldr	r3, [r3, r2]
 80007a0:	1dfa      	adds	r2, r7, #7
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	0011      	movs	r1, r2
 80007a6:	2203      	movs	r2, #3
 80007a8:	400a      	ands	r2, r1
 80007aa:	00d2      	lsls	r2, r2, #3
 80007ac:	21ff      	movs	r1, #255	; 0xff
 80007ae:	4091      	lsls	r1, r2
 80007b0:	000a      	movs	r2, r1
 80007b2:	43d2      	mvns	r2, r2
 80007b4:	401a      	ands	r2, r3
 80007b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	019b      	lsls	r3, r3, #6
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	401a      	ands	r2, r3
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	0018      	movs	r0, r3
 80007c6:	2303      	movs	r3, #3
 80007c8:	4003      	ands	r3, r0
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <NVIC_SetPriority+0xd8>)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	430a      	orrs	r2, r1
 80007da:	33c0      	adds	r3, #192	; 0xc0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	501a      	str	r2, [r3, r0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b003      	add	sp, #12
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <SysTick_Config+0x40>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d901      	bls.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e010      	b.n	8000828 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <SysTick_Config+0x44>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	3a01      	subs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	2301      	movs	r3, #1
 8000810:	425b      	negs	r3, r3
 8000812:	2103      	movs	r1, #3
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ff7d 	bl	8000714 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <SysTick_Config+0x44>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x44>)
 8000822:	2207      	movs	r2, #7
 8000824:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000826:	2300      	movs	r3, #0
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	00ffffff 	.word	0x00ffffff
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	210f      	movs	r1, #15
 8000844:	187b      	adds	r3, r7, r1
 8000846:	1c02      	adds	r2, r0, #0
 8000848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <NVIC_SetPriority>
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff ffbf 	bl	80007f0 <SysTick_Config>
 8000872:	0003      	movs	r3, r0
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000892:	e14f      	b.n	8000b34 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d100      	bne.n	80008ac <HAL_GPIO_Init+0x30>
 80008aa:	e140      	b.n	8000b2e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d003      	beq.n	80008bc <HAL_GPIO_Init+0x40>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b12      	cmp	r3, #18
 80008ba:	d123      	bne.n	8000904 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	08da      	lsrs	r2, r3, #3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3208      	adds	r2, #8
 80008c4:	0092      	lsls	r2, r2, #2
 80008c6:	58d3      	ldr	r3, [r2, r3]
 80008c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2207      	movs	r2, #7
 80008ce:	4013      	ands	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	220f      	movs	r2, #15
 80008d4:	409a      	lsls	r2, r3
 80008d6:	0013      	movs	r3, r2
 80008d8:	43da      	mvns	r2, r3
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	691a      	ldr	r2, [r3, #16]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	2107      	movs	r1, #7
 80008e8:	400b      	ands	r3, r1
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	409a      	lsls	r2, r3
 80008ee:	0013      	movs	r3, r2
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	08da      	lsrs	r2, r3, #3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3208      	adds	r2, #8
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	6939      	ldr	r1, [r7, #16]
 8000902:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	409a      	lsls	r2, r3
 8000912:	0013      	movs	r3, r2
 8000914:	43da      	mvns	r2, r3
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2203      	movs	r2, #3
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	409a      	lsls	r2, r3
 800092a:	0013      	movs	r3, r2
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d00b      	beq.n	8000958 <HAL_GPIO_Init+0xdc>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094c:	2b11      	cmp	r3, #17
 800094e:	d003      	beq.n	8000958 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b12      	cmp	r3, #18
 8000956:	d130      	bne.n	80009ba <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	409a      	lsls	r2, r3
 8000966:	0013      	movs	r3, r2
 8000968:	43da      	mvns	r2, r3
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	409a      	lsls	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800098e:	2201      	movs	r2, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	43da      	mvns	r2, r3
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	2201      	movs	r2, #1
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	409a      	lsls	r2, r3
 80009c8:	0013      	movs	r3, r2
 80009ca:	43da      	mvns	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	055b      	lsls	r3, r3, #21
 80009f2:	4013      	ands	r3, r2
 80009f4:	d100      	bne.n	80009f8 <HAL_GPIO_Init+0x17c>
 80009f6:	e09a      	b.n	8000b2e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	4b53      	ldr	r3, [pc, #332]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	619a      	str	r2, [r3, #24]
 8000a04:	4b51      	ldr	r3, [pc, #324]	; (8000b4c <HAL_GPIO_Init+0x2d0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000a10:	4a4f      	ldr	r2, [pc, #316]	; (8000b50 <HAL_GPIO_Init+0x2d4>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	589b      	ldr	r3, [r3, r2]
 8000a1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2203      	movs	r2, #3
 8000a22:	4013      	ands	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	220f      	movs	r2, #15
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	43da      	mvns	r2, r3
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	2390      	movs	r3, #144	; 0x90
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d013      	beq.n	8000a66 <HAL_GPIO_Init+0x1ea>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a44      	ldr	r2, [pc, #272]	; (8000b54 <HAL_GPIO_Init+0x2d8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d00d      	beq.n	8000a62 <HAL_GPIO_Init+0x1e6>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <HAL_GPIO_Init+0x2dc>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d007      	beq.n	8000a5e <HAL_GPIO_Init+0x1e2>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a42      	ldr	r2, [pc, #264]	; (8000b5c <HAL_GPIO_Init+0x2e0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_GPIO_Init+0x1de>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e006      	b.n	8000a68 <HAL_GPIO_Init+0x1ec>
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	e004      	b.n	8000a68 <HAL_GPIO_Init+0x1ec>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e002      	b.n	8000a68 <HAL_GPIO_Init+0x1ec>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <HAL_GPIO_Init+0x1ec>
 8000a66:	2300      	movs	r3, #0
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	4093      	lsls	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a78:	4935      	ldr	r1, [pc, #212]	; (8000b50 <HAL_GPIO_Init+0x2d4>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43da      	mvns	r2, r3
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	029b      	lsls	r3, r3, #10
 8000ac8:	4013      	ands	r3, r2
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	035b      	lsls	r3, r3, #13
 8000af2:	4013      	ands	r3, r2
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	039b      	lsls	r3, r3, #14
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	40da      	lsrs	r2, r3
 8000b3c:	1e13      	subs	r3, r2, #0
 8000b3e:	d000      	beq.n	8000b42 <HAL_GPIO_Init+0x2c6>
 8000b40:	e6a8      	b.n	8000894 <HAL_GPIO_Init+0x18>
  } 
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b006      	add	sp, #24
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000
 8000b54:	48000400 	.word	0x48000400
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	48000c00 	.word	0x48000c00
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	0008      	movs	r0, r1
 8000b6e:	0011      	movs	r1, r2
 8000b70:	1cbb      	adds	r3, r7, #2
 8000b72:	1c02      	adds	r2, r0, #0
 8000b74:	801a      	strh	r2, [r3, #0]
 8000b76:	1c7b      	adds	r3, r7, #1
 8000b78:	1c0a      	adds	r2, r1, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b7c:	1c7b      	adds	r3, r7, #1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d004      	beq.n	8000b8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b84:	1cbb      	adds	r3, r7, #2
 8000b86:	881a      	ldrh	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b8c:	e003      	b.n	8000b96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b8e:	1cbb      	adds	r3, r7, #2
 8000b90:	881a      	ldrh	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d100      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x18>
 8000bb6:	e08d      	b.n	8000cd4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb8:	4bc3      	ldr	r3, [pc, #780]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d00e      	beq.n	8000be2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc4:	4bc0      	ldr	r3, [pc, #768]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	220c      	movs	r2, #12
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b08      	cmp	r3, #8
 8000bce:	d116      	bne.n	8000bfe <HAL_RCC_OscConfig+0x5e>
 8000bd0:	4bbd      	ldr	r3, [pc, #756]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	025b      	lsls	r3, r3, #9
 8000bd8:	401a      	ands	r2, r3
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d10d      	bne.n	8000bfe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be2:	4bb9      	ldr	r3, [pc, #740]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	029b      	lsls	r3, r3, #10
 8000bea:	4013      	ands	r3, r2
 8000bec:	d100      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x50>
 8000bee:	e070      	b.n	8000cd2 <HAL_RCC_OscConfig+0x132>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d000      	beq.n	8000bfa <HAL_RCC_OscConfig+0x5a>
 8000bf8:	e06b      	b.n	8000cd2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e2b6      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d107      	bne.n	8000c16 <HAL_RCC_OscConfig+0x76>
 8000c06:	4bb0      	ldr	r3, [pc, #704]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4baf      	ldr	r3, [pc, #700]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	0249      	lsls	r1, r1, #9
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e02f      	b.n	8000c76 <HAL_RCC_OscConfig+0xd6>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x98>
 8000c1e:	4baa      	ldr	r3, [pc, #680]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4ba9      	ldr	r3, [pc, #676]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c24:	49a9      	ldr	r1, [pc, #676]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c26:	400a      	ands	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	4ba7      	ldr	r3, [pc, #668]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4ba6      	ldr	r3, [pc, #664]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c30:	49a7      	ldr	r1, [pc, #668]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000c32:	400a      	ands	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e01e      	b.n	8000c76 <HAL_RCC_OscConfig+0xd6>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	d10e      	bne.n	8000c5e <HAL_RCC_OscConfig+0xbe>
 8000c40:	4ba1      	ldr	r3, [pc, #644]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4ba0      	ldr	r3, [pc, #640]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	02c9      	lsls	r1, r1, #11
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	4b9e      	ldr	r3, [pc, #632]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b9d      	ldr	r3, [pc, #628]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0249      	lsls	r1, r1, #9
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e00b      	b.n	8000c76 <HAL_RCC_OscConfig+0xd6>
 8000c5e:	4b9a      	ldr	r3, [pc, #616]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b99      	ldr	r3, [pc, #612]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c64:	4999      	ldr	r1, [pc, #612]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	4b97      	ldr	r3, [pc, #604]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b96      	ldr	r3, [pc, #600]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c70:	4997      	ldr	r1, [pc, #604]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000c72:	400a      	ands	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d014      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fb0b 	bl	8000298 <HAL_GetTick>
 8000c82:	0003      	movs	r3, r0
 8000c84:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fb06 	bl	8000298 <HAL_GetTick>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b64      	cmp	r3, #100	; 0x64
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e268      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	4b8b      	ldr	r3, [pc, #556]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	029b      	lsls	r3, r3, #10
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d0f0      	beq.n	8000c88 <HAL_RCC_OscConfig+0xe8>
 8000ca6:	e015      	b.n	8000cd4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff faf6 	bl	8000298 <HAL_GetTick>
 8000cac:	0003      	movs	r3, r0
 8000cae:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb0:	e008      	b.n	8000cc4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb2:	f7ff faf1 	bl	8000298 <HAL_GetTick>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b64      	cmp	r3, #100	; 0x64
 8000cbe:	d901      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e253      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc4:	4b80      	ldr	r3, [pc, #512]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d1f0      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x112>
 8000cd0:	e000      	b.n	8000cd4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d100      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x140>
 8000cde:	e069      	b.n	8000db4 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ce0:	4b79      	ldr	r3, [pc, #484]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	220c      	movs	r2, #12
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d00b      	beq.n	8000d02 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cea:	4b77      	ldr	r3, [pc, #476]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	220c      	movs	r2, #12
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d11c      	bne.n	8000d30 <HAL_RCC_OscConfig+0x190>
 8000cf6:	4b74      	ldr	r3, [pc, #464]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d116      	bne.n	8000d30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	4b71      	ldr	r3, [pc, #452]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2202      	movs	r2, #2
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d005      	beq.n	8000d18 <HAL_RCC_OscConfig+0x178>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d001      	beq.n	8000d18 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e229      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4b6b      	ldr	r3, [pc, #428]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	22f8      	movs	r2, #248	; 0xf8
 8000d1e:	4393      	bics	r3, r2
 8000d20:	0019      	movs	r1, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	00da      	lsls	r2, r3, #3
 8000d28:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d2e:	e041      	b.n	8000db4 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d024      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d38:	4b63      	ldr	r3, [pc, #396]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d3e:	2101      	movs	r1, #1
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff faa8 	bl	8000298 <HAL_GetTick>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff faa3 	bl	8000298 <HAL_GetTick>
 8000d52:	0002      	movs	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e205      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2202      	movs	r2, #2
 8000d66:	4013      	ands	r3, r2
 8000d68:	d0f1      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	22f8      	movs	r2, #248	; 0xf8
 8000d70:	4393      	bics	r3, r2
 8000d72:	0019      	movs	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	00da      	lsls	r2, r3, #3
 8000d7a:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e018      	b.n	8000db4 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	438a      	bics	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fa83 	bl	8000298 <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fa7e 	bl	8000298 <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e1e0      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2202      	movs	r2, #2
 8000db0:	4013      	ands	r3, r2
 8000db2:	d1f1      	bne.n	8000d98 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2208      	movs	r2, #8
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d036      	beq.n	8000e2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d019      	beq.n	8000dfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc6:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fa61 	bl	8000298 <HAL_GetTick>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fa5c 	bl	8000298 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e1be      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	d0f1      	beq.n	8000ddc <HAL_RCC_OscConfig+0x23c>
 8000df8:	e018      	b.n	8000e2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dfe:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	438a      	bics	r2, r1
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fa47 	bl	8000298 <HAL_GetTick>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fa42 	bl	8000298 <HAL_GetTick>
 8000e14:	0002      	movs	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e1a4      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	2202      	movs	r2, #2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d1f1      	bne.n	8000e10 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2204      	movs	r2, #4
 8000e32:	4013      	ands	r3, r2
 8000e34:	d100      	bne.n	8000e38 <HAL_RCC_OscConfig+0x298>
 8000e36:	e0b5      	b.n	8000fa4 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e38:	2317      	movs	r3, #23
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	055b      	lsls	r3, r3, #21
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d111      	bne.n	8000e70 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	0549      	lsls	r1, r1, #21
 8000e56:	430a      	orrs	r2, r1
 8000e58:	61da      	str	r2, [r3, #28]
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	055b      	lsls	r3, r3, #21
 8000e62:	4013      	ands	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e68:	2317      	movs	r3, #23
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d11a      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0049      	lsls	r1, r1, #1
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fa05 	bl	8000298 <HAL_GetTick>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e94:	f7ff fa00 	bl	8000298 <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e162      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d10e      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x338>
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <HAL_RCC_OscConfig+0x328>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	621a      	str	r2, [r3, #32]
 8000ec6:	e035      	b.n	8000f34 <HAL_RCC_OscConfig+0x394>
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	fffeffff 	.word	0xfffeffff
 8000ed0:	fffbffff 	.word	0xfffbffff
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10c      	bne.n	8000efa <HAL_RCC_OscConfig+0x35a>
 8000ee0:	4ba4      	ldr	r3, [pc, #656]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	4ba3      	ldr	r3, [pc, #652]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	438a      	bics	r2, r1
 8000eea:	621a      	str	r2, [r3, #32]
 8000eec:	4ba1      	ldr	r3, [pc, #644]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	4ba0      	ldr	r3, [pc, #640]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	621a      	str	r2, [r3, #32]
 8000ef8:	e01c      	b.n	8000f34 <HAL_RCC_OscConfig+0x394>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x37c>
 8000f02:	4b9c      	ldr	r3, [pc, #624]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f04:	6a1a      	ldr	r2, [r3, #32]
 8000f06:	4b9b      	ldr	r3, [pc, #620]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f08:	2104      	movs	r1, #4
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	4b99      	ldr	r3, [pc, #612]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	4b98      	ldr	r3, [pc, #608]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	621a      	str	r2, [r3, #32]
 8000f1a:	e00b      	b.n	8000f34 <HAL_RCC_OscConfig+0x394>
 8000f1c:	4b95      	ldr	r3, [pc, #596]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	4b94      	ldr	r3, [pc, #592]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	438a      	bics	r2, r1
 8000f26:	621a      	str	r2, [r3, #32]
 8000f28:	4b92      	ldr	r3, [pc, #584]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	4b91      	ldr	r3, [pc, #580]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f2e:	2104      	movs	r1, #4
 8000f30:	438a      	bics	r2, r1
 8000f32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d014      	beq.n	8000f66 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3c:	f7ff f9ac 	bl	8000298 <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f44:	e009      	b.n	8000f5a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff f9a7 	bl	8000298 <HAL_GetTick>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4a89      	ldr	r2, [pc, #548]	; (8001178 <HAL_RCC_OscConfig+0x5d8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e108      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5a:	4b86      	ldr	r3, [pc, #536]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x3a6>
 8000f64:	e013      	b.n	8000f8e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff f997 	bl	8000298 <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6e:	e009      	b.n	8000f84 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f70:	f7ff f992 	bl	8000298 <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a7f      	ldr	r2, [pc, #508]	; (8001178 <HAL_RCC_OscConfig+0x5d8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e0f3      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f8e:	2317      	movs	r3, #23
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f98:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f9a:	69da      	ldr	r2, [r3, #28]
 8000f9c:	4b75      	ldr	r3, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000f9e:	4977      	ldr	r1, [pc, #476]	; (800117c <HAL_RCC_OscConfig+0x5dc>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2210      	movs	r2, #16
 8000faa:	4013      	ands	r3, r2
 8000fac:	d063      	beq.n	8001076 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d12a      	bne.n	800100c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fb6:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fba:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000fc2:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc6:	4b6b      	ldr	r3, [pc, #428]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff f963 	bl	8000298 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fd8:	f7ff f95e 	bl	8000298 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e0c0      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d0f1      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ff4:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8000ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff8:	22f8      	movs	r2, #248	; 0xf8
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	00da      	lsls	r2, r3, #3
 8001004:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
 800100a:	e034      	b.n	8001076 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	3305      	adds	r3, #5
 8001012:	d111      	bne.n	8001038 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001014:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001018:	4b56      	ldr	r3, [pc, #344]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800101a:	2104      	movs	r1, #4
 800101c:	438a      	bics	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001020:	4b54      	ldr	r3, [pc, #336]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001024:	22f8      	movs	r2, #248	; 0xf8
 8001026:	4393      	bics	r3, r2
 8001028:	0019      	movs	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	00da      	lsls	r2, r3, #3
 8001030:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
 8001036:	e01e      	b.n	8001076 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001038:	4b4e      	ldr	r3, [pc, #312]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800103a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103c:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800103e:	2104      	movs	r1, #4
 8001040:	430a      	orrs	r2, r1
 8001042:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001048:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800104a:	2101      	movs	r1, #1
 800104c:	438a      	bics	r2, r1
 800104e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff f922 	bl	8000298 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800105a:	f7ff f91d 	bl	8000298 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e07f      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800106c:	4b41      	ldr	r3, [pc, #260]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	2202      	movs	r2, #2
 8001072:	4013      	ands	r3, r2
 8001074:	d1f1      	bne.n	800105a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d100      	bne.n	8001080 <HAL_RCC_OscConfig+0x4e0>
 800107e:	e074      	b.n	800116a <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	220c      	movs	r2, #12
 8001086:	4013      	ands	r3, r2
 8001088:	2b08      	cmp	r3, #8
 800108a:	d100      	bne.n	800108e <HAL_RCC_OscConfig+0x4ee>
 800108c:	e06b      	b.n	8001166 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d14c      	bne.n	8001130 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800109c:	4938      	ldr	r1, [pc, #224]	; (8001180 <HAL_RCC_OscConfig+0x5e0>)
 800109e:	400a      	ands	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff f8f9 	bl	8000298 <HAL_GetTick>
 80010a6:	0003      	movs	r3, r0
 80010a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff f8f4 	bl	8000298 <HAL_GetTick>
 80010b0:	0002      	movs	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e056      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	049b      	lsls	r3, r3, #18
 80010c6:	4013      	ands	r3, r2
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	220f      	movs	r2, #15
 80010d0:	4393      	bics	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010da:	430a      	orrs	r2, r1
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a28      	ldr	r2, [pc, #160]	; (8001184 <HAL_RCC_OscConfig+0x5e4>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	431a      	orrs	r2, r3
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0449      	lsls	r1, r1, #17
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff f8c7 	bl	8000298 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001110:	f7ff f8c2 	bl	8000298 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e024      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	049b      	lsls	r3, r3, #18
 800112a:	4013      	ands	r3, r2
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x570>
 800112e:	e01c      	b.n	800116a <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 8001136:	4912      	ldr	r1, [pc, #72]	; (8001180 <HAL_RCC_OscConfig+0x5e0>)
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff f8ac 	bl	8000298 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001146:	f7ff f8a7 	bl	8000298 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e009      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_RCC_OscConfig+0x5d4>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	049b      	lsls	r3, r3, #18
 8001160:	4013      	ands	r3, r2
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x5a6>
 8001164:	e001      	b.n	800116a <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b006      	add	sp, #24
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	00001388 	.word	0x00001388
 800117c:	efffffff 	.word	0xefffffff
 8001180:	feffffff 	.word	0xfeffffff
 8001184:	ffc2ffff 	.word	0xffc2ffff

08001188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	4013      	ands	r3, r2
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d911      	bls.n	80011c8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a4:	4b66      	ldr	r3, [pc, #408]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4393      	bics	r3, r2
 80011ac:	0019      	movs	r1, r3
 80011ae:	4b64      	ldr	r3, [pc, #400]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4013      	ands	r3, r2
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0b6      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2202      	movs	r2, #2
 80011ce:	4013      	ands	r3, r2
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	22f0      	movs	r2, #240	; 0xf0
 80011d8:	4393      	bics	r3, r2
 80011da:	0019      	movs	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	4b58      	ldr	r3, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4013      	ands	r3, r2
 80011ee:	d100      	bne.n	80011f2 <HAL_RCC_ClockConfig+0x6a>
 80011f0:	e067      	b.n	80012c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b52      	ldr	r3, [pc, #328]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d114      	bne.n	8001230 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e095      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	049b      	lsls	r3, r3, #18
 800121a:	4013      	ands	r3, r2
 800121c:	d108      	bne.n	8001230 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e089      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e082      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	4393      	bics	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff f828 	bl	8000298 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d111      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001254:	e009      	b.n	800126a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001256:	f7ff f81f 	bl	8000298 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a39      	ldr	r2, [pc, #228]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e065      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	220c      	movs	r2, #12
 8001270:	4013      	ands	r3, r2
 8001272:	2b04      	cmp	r3, #4
 8001274:	d1ef      	bne.n	8001256 <HAL_RCC_ClockConfig+0xce>
 8001276:	e024      	b.n	80012c2 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d11b      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	e009      	b.n	8001296 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001282:	f7ff f809 	bl	8000298 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e04f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	220c      	movs	r2, #12
 800129c:	4013      	ands	r3, r2
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d1ef      	bne.n	8001282 <HAL_RCC_ClockConfig+0xfa>
 80012a2:	e00e      	b.n	80012c2 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7fe fff8 	bl	8000298 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a26      	ldr	r2, [pc, #152]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e03e      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	220c      	movs	r2, #12
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2201      	movs	r2, #1
 80012c8:	4013      	ands	r3, r2
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d211      	bcs.n	80012f4 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4393      	bics	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4013      	ands	r3, r2
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e020      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2204      	movs	r2, #4
 80012fa:	4013      	ands	r3, r2
 80012fc:	d009      	beq.n	8001312 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	4013      	ands	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001312:	f000 f821 	bl	8001358 <HAL_RCC_GetSysClockFreq>
 8001316:	0001      	movs	r1, r0
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	220f      	movs	r2, #15
 8001320:	4013      	ands	r3, r2
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	000a      	movs	r2, r1
 8001328:	40da      	lsrs	r2, r3
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_RCC_ClockConfig+0x1cc>)
 800132c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f7fe ff8a 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	40022000 	.word	0x40022000
 8001344:	40021000 	.word	0x40021000
 8001348:	00001388 	.word	0x00001388
 800134c:	fffff8ff 	.word	0xfffff8ff
 8001350:	08002514 	.word	0x08002514
 8001354:	20000000 	.word	0x20000000

08001358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08f      	sub	sp, #60	; 0x3c
 800135c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800135e:	2314      	movs	r3, #20
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001364:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001366:	c313      	stmia	r3!, {r0, r1, r4}
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001370:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001372:	c313      	stmia	r3!, {r0, r1, r4}
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_RCC_GetSysClockFreq+0xc0>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	220c      	movs	r2, #12
 8001396:	4013      	ands	r3, r2
 8001398:	2b04      	cmp	r3, #4
 800139a:	d002      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800139c:	2b08      	cmp	r3, #8
 800139e:	d003      	beq.n	80013a8 <HAL_RCC_GetSysClockFreq+0x50>
 80013a0:	e02d      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_RCC_GetSysClockFreq+0xc4>)
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013a6:	e02d      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013aa:	0c9b      	lsrs	r3, r3, #18
 80013ac:	220f      	movs	r2, #15
 80013ae:	4013      	ands	r3, r2
 80013b0:	2214      	movs	r2, #20
 80013b2:	18ba      	adds	r2, r7, r2
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	220f      	movs	r2, #15
 80013be:	4013      	ands	r3, r2
 80013c0:	1d3a      	adds	r2, r7, #4
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	025b      	lsls	r3, r3, #9
 80013cc:	4013      	ands	r3, r2
 80013ce:	d009      	beq.n	80013e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80013d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013d2:	4812      	ldr	r0, [pc, #72]	; (800141c <HAL_RCC_GetSysClockFreq+0xc4>)
 80013d4:	f7fe fe98 	bl	8000108 <__udivsi3>
 80013d8:	0003      	movs	r3, r0
 80013da:	001a      	movs	r2, r3
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	4353      	muls	r3, r2
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
 80013e2:	e009      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80013e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e6:	000a      	movs	r2, r1
 80013e8:	0152      	lsls	r2, r2, #5
 80013ea:	1a52      	subs	r2, r2, r1
 80013ec:	0193      	lsls	r3, r2, #6
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	185b      	adds	r3, r3, r1
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80013f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013fc:	e002      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001402:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b00f      	add	sp, #60	; 0x3c
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	080024f4 	.word	0x080024f4
 8001414:	08002504 	.word	0x08002504
 8001418:	40021000 	.word	0x40021000
 800141c:	007a1200 	.word	0x007a1200

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_RCC_GetHCLKFreq+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	4013      	ands	r3, r2
 800144e:	d100      	bne.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001450:	e08f      	b.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001452:	2317      	movs	r3, #23
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	055b      	lsls	r3, r3, #21
 8001462:	4013      	ands	r3, r2
 8001464:	d111      	bne.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001468:	69da      	ldr	r2, [r3, #28]
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0549      	lsls	r1, r1, #21
 8001470:	430a      	orrs	r2, r1
 8001472:	61da      	str	r2, [r3, #28]
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001476:	69da      	ldr	r2, [r3, #28]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	055b      	lsls	r3, r3, #21
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2317      	movs	r3, #23
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4013      	ands	r3, r2
 8001494:	d11a      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0049      	lsls	r1, r1, #1
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a4:	f7fe fef8 	bl	8000298 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7fe fef3 	bl	8000298 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	; 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e077      	b.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	23c0      	movs	r3, #192	; 0xc0
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d034      	beq.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	23c0      	movs	r3, #192	; 0xc0
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d02c      	beq.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0249      	lsls	r1, r1, #9
 8001502:	430a      	orrs	r2, r1
 8001504:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800150c:	492d      	ldr	r1, [pc, #180]	; (80015c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800150e:	400a      	ands	r2, r1
 8001510:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7fe feba 	bl	8000298 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e009      	b.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7fe feb5 	bl	8000298 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e038      	b.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d0f0      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800154e:	4013      	ands	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001558:	430a      	orrs	r2, r1
 800155a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155c:	2317      	movs	r3, #23
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800156c:	4917      	ldr	r1, [pc, #92]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800156e:	400a      	ands	r2, r1
 8001570:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	4013      	ands	r3, r2
 800157a:	d009      	beq.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	2203      	movs	r2, #3
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800158c:	430a      	orrs	r2, r1
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2220      	movs	r2, #32
 8001596:	4013      	ands	r3, r2
 8001598:	d009      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	2210      	movs	r2, #16
 80015a0:	4393      	bics	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b006      	add	sp, #24
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40007000 	.word	0x40007000
 80015c0:	fffffcff 	.word	0xfffffcff
 80015c4:	fffeffff 	.word	0xfffeffff
 80015c8:	00001388 	.word	0x00001388
 80015cc:	efffffff 	.word	0xefffffff

080015d0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e081      	b.n	80016e6 <HAL_RTC_Init+0x116>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f5b      	ldrb	r3, [r3, #29]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fe59 	bl	80022ac <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2202      	movs	r2, #2
 80015fe:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	22ca      	movs	r2, #202	; 0xca
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2253      	movs	r2, #83	; 0x53
 800160e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 fb05 	bl	8001c22 <RTC_EnterInitMode>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d008      	beq.n	800162e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2204      	movs	r2, #4
 8001628:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e05b      	b.n	80016e6 <HAL_RTC_Init+0x116>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	492d      	ldr	r1, [pc, #180]	; (80016f0 <HAL_RTC_Init+0x120>)
 800163a:	400a      	ands	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68d2      	ldr	r2, [r2, #12]
 8001664:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6919      	ldr	r1, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	438a      	bics	r2, r1
 8001688:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2220      	movs	r2, #32
 8001692:	4013      	ands	r3, r2
 8001694:	d10e      	bne.n	80016b4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f000 fa99 	bl	8001bd0 <HAL_RTC_WaitForSynchro>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	22ff      	movs	r2, #255	; 0xff
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2204      	movs	r2, #4
 80016ae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e018      	b.n	80016e6 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <HAL_RTC_Init+0x124>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
  }
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	ff8fffbf 	.word	0xff8fffbf
 80016f4:	fffbffff 	.word	0xfffbffff

080016f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	7f1b      	ldrb	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_RTC_SetTime+0x1c>
 8001710:	2302      	movs	r3, #2
 8001712:	e0ad      	b.n	8001870 <HAL_RTC_SetTime+0x178>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2202      	movs	r2, #2
 800171e:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d125      	bne.n	8001772 <HAL_RTC_SetTime+0x7a>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2240      	movs	r2, #64	; 0x40
 800172e:	4013      	ands	r3, r2
 8001730:	d102      	bne.n	8001738 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2200      	movs	r2, #0
 8001736:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 fa9c 	bl	8001c7a <RTC_ByteToBcd2>
 8001742:	0003      	movs	r3, r0
 8001744:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fa95 	bl	8001c7a <RTC_ByteToBcd2>
 8001750:	0003      	movs	r3, r0
 8001752:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001754:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	789b      	ldrb	r3, [r3, #2]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fa8d 	bl	8001c7a <RTC_ByteToBcd2>
 8001760:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001762:	0022      	movs	r2, r4
 8001764:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	78db      	ldrb	r3, [r3, #3]
 800176a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e01f      	b.n	80017b2 <HAL_RTC_SetTime+0xba>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2240      	movs	r2, #64	; 0x40
 800177a:	4013      	ands	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_RTC_SetTime+0x96>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fa9a 	bl	8001cbc <RTC_Bcd2ToByte>
 8001788:	0003      	movs	r3, r0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e002      	b.n	8001794 <HAL_RTC_SetTime+0x9c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2200      	movs	r2, #0
 8001792:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80017a0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80017a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	78db      	ldrb	r3, [r3, #3]
 80017ac:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80017ae:	4313      	orrs	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	22ca      	movs	r2, #202	; 0xca
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2253      	movs	r2, #83	; 0x53
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 fa2c 	bl	8001c22 <RTC_EnterInitMode>
 80017ca:	1e03      	subs	r3, r0, #0
 80017cc:	d00b      	beq.n	80017e6 <HAL_RTC_SetTime+0xee>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2204      	movs	r2, #4
 80017da:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e044      	b.n	8001870 <HAL_RTC_SetTime+0x178>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4922      	ldr	r1, [pc, #136]	; (8001878 <HAL_RTC_SetTime+0x180>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	491f      	ldr	r1, [pc, #124]	; (800187c <HAL_RTC_SetTime+0x184>)
 80017fe:	400a      	ands	r2, r1
 8001800:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	438a      	bics	r2, r1
 8001828:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2220      	movs	r2, #32
 8001832:	4013      	ands	r3, r2
 8001834:	d111      	bne.n	800185a <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	0018      	movs	r0, r3
 800183a:	f000 f9c9 	bl	8001bd0 <HAL_RTC_WaitForSynchro>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d00b      	beq.n	800185a <HAL_RTC_SetTime+0x162>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2204      	movs	r2, #4
 800184e:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00a      	b.n	8001870 <HAL_RTC_SetTime+0x178>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 800186e:	2300      	movs	r3, #0
  }
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b007      	add	sp, #28
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	007f7f7f 	.word	0x007f7f7f
 800187c:	fffbffff 	.word	0xfffbffff

08001880 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	7f1b      	ldrb	r3, [r3, #28]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_RTC_SetDate+0x1c>
 8001898:	2302      	movs	r3, #2
 800189a:	e09f      	b.n	80019dc <HAL_RTC_SetDate+0x15c>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2202      	movs	r2, #2
 80018a6:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <HAL_RTC_SetDate+0x4c>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	001a      	movs	r2, r3
 80018b4:	2310      	movs	r3, #16
 80018b6:	4013      	ands	r3, r2
 80018b8:	d008      	beq.n	80018cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	2210      	movs	r2, #16
 80018c0:	4393      	bics	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	330a      	adds	r3, #10
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11c      	bne.n	800190c <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	78db      	ldrb	r3, [r3, #3]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 f9cf 	bl	8001c7a <RTC_ByteToBcd2>
 80018dc:	0003      	movs	r3, r0
 80018de:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f9c8 	bl	8001c7a <RTC_ByteToBcd2>
 80018ea:	0003      	movs	r3, r0
 80018ec:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80018ee:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f9c0 	bl	8001c7a <RTC_ByteToBcd2>
 80018fa:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80018fc:	0022      	movs	r2, r4
 80018fe:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e01c      	b.n	8001946 <HAL_RTC_SetDate+0xc6>
  }
  else
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	785b      	ldrb	r3, [r3, #1]
 8001910:	0018      	movs	r0, r3
 8001912:	f000 f9d3 	bl	8001cbc <RTC_Bcd2ToByte>
 8001916:	0003      	movs	r3, r0
 8001918:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	789b      	ldrb	r3, [r3, #2]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f9cc 	bl	8001cbc <RTC_Bcd2ToByte>
 8001924:	0003      	movs	r3, r0
 8001926:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	78db      	ldrb	r3, [r3, #3]
 800192c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	785b      	ldrb	r3, [r3, #1]
 8001932:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001934:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800193a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	22ca      	movs	r2, #202	; 0xca
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2253      	movs	r2, #83	; 0x53
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f962 	bl	8001c22 <RTC_EnterInitMode>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d00b      	beq.n	800197a <HAL_RTC_SetDate+0xfa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2204      	movs	r2, #4
 800196e:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e030      	b.n	80019dc <HAL_RTC_SetDate+0x15c>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4918      	ldr	r1, [pc, #96]	; (80019e4 <HAL_RTC_SetDate+0x164>)
 8001982:	400a      	ands	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	438a      	bics	r2, r1
 8001994:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2220      	movs	r2, #32
 800199e:	4013      	ands	r3, r2
 80019a0:	d111      	bne.n	80019c6 <HAL_RTC_SetDate+0x146>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 f913 	bl	8001bd0 <HAL_RTC_WaitForSynchro>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RTC_SetDate+0x146>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2204      	movs	r2, #4
 80019ba:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00a      	b.n	80019dc <HAL_RTC_SetDate+0x15c>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 80019da:	2300      	movs	r3, #0
  }
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b007      	add	sp, #28
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	00ffff3f 	.word	0x00ffff3f

080019e8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	7f1b      	ldrb	r3, [r3, #28]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_RTC_SetAlarm+0x24>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e0d9      	b.n	8001bc0 <HAL_RTC_SetAlarm+0x1d8>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2202      	movs	r2, #2
 8001a16:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d136      	bne.n	8001a8c <HAL_RTC_SetAlarm+0xa4>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2240      	movs	r2, #64	; 0x40
 8001a26:	4013      	ands	r3, r2
 8001a28:	d102      	bne.n	8001a30 <HAL_RTC_SetAlarm+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 f920 	bl	8001c7a <RTC_ByteToBcd2>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f919 	bl	8001c7a <RTC_ByteToBcd2>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a4c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f911 	bl	8001c7a <RTC_ByteToBcd2>
 8001a58:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a5a:	0022      	movs	r2, r4
 8001a5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	78db      	ldrb	r3, [r3, #3]
 8001a62:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001a64:	431a      	orrs	r2, r3
 8001a66:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	5c9b      	ldrb	r3, [r3, r2]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f903 	bl	8001c7a <RTC_ByteToBcd2>
 8001a74:	0003      	movs	r3, r0
 8001a76:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001a78:	0022      	movs	r2, r4
 8001a7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001a80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e03f      	b.n	8001b0c <HAL_RTC_SetAlarm+0x124>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	4013      	ands	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_RTC_SetAlarm+0xc0>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 f90d 	bl	8001cbc <RTC_Bcd2ToByte>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e002      	b.n	8001aae <HAL_RTC_SetAlarm+0xc6>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RTC_SetAlarm+0xe0>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	5c9b      	ldrb	r3, [r3, r2]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f8fd 	bl	8001cbc <RTC_Bcd2ToByte>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e007      	b.n	8001ad8 <HAL_RTC_SetAlarm+0xf0>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2220      	movs	r2, #32
 8001acc:	5c9b      	ldrb	r3, [r3, r2]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 f8f4 	bl	8001cbc <RTC_Bcd2ToByte>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }  
    
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ae4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001aea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001af2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2120      	movs	r1, #32
 8001af8:	5c5b      	ldrb	r3, [r3, r1]
 8001afa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001afc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));   
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	22ca      	movs	r2, #202	; 0xca
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2253      	movs	r2, #83	; 0x53
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4925      	ldr	r1, [pc, #148]	; (8001bc8 <HAL_RTC_SetAlarm+0x1e0>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */ 
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RTC_SetAlarm+0x1e4>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
         
  tickstart = HAL_GetTick();
 8001b48:	f7fe fba6 	bl	8000298 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	61bb      	str	r3, [r7, #24]
  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001b50:	e014      	b.n	8001b7c <HAL_RTC_SetAlarm+0x194>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001b52:	f7fe fba1 	bl	8000298 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad2      	subs	r2, r2, r3
 8001b5c:	23fa      	movs	r3, #250	; 0xfa
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d90b      	bls.n	8001b7c <HAL_RTC_SetAlarm+0x194>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	22ff      	movs	r2, #255	; 0xff
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
        
      return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e021      	b.n	8001bc0 <HAL_RTC_SetAlarm+0x1d8>
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0e4      	beq.n	8001b52 <HAL_RTC_SetAlarm+0x16a>
    }
  }
    
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	0049      	lsls	r1, r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	22ff      	movs	r2, #255	; 0xff
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b009      	add	sp, #36	; 0x24
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	fffffeff 	.word	0xfffffeff
 8001bcc:	ffffefff 	.word	0xffffefff

08001bd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	21a0      	movs	r1, #160	; 0xa0
 8001be8:	438a      	bics	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001bec:	f7fe fb54 	bl	8000298 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001bf6:	f7fe fb4f 	bl	8000298 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad2      	subs	r2, r2, r3
 8001c00:	23fa      	movs	r3, #250	; 0xfa
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d901      	bls.n	8001c0c <HAL_RTC_WaitForSynchro+0x3c>
    {       
      return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e006      	b.n	8001c1a <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0ee      	beq.n	8001bf6 <HAL_RTC_WaitForSynchro+0x26>
    } 
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	4013      	ands	r3, r2
 8001c38:	d11a      	bne.n	8001c70 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4252      	negs	r2, r2
 8001c42:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8001c44:	f7fe fb28 	bl	8000298 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001c4c:	e00a      	b.n	8001c64 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001c4e:	f7fe fb23 	bl	8000298 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	23fa      	movs	r3, #250	; 0xfa
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d901      	bls.n	8001c64 <RTC_EnterInitMode+0x42>
      {       
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e006      	b.n	8001c72 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2240      	movs	r2, #64	; 0x40
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d0ee      	beq.n	8001c4e <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	0002      	movs	r2, r0
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 8001c8a:	e007      	b.n	8001c9c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	1dfa      	adds	r2, r7, #7
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	3a0a      	subs	r2, #10
 8001c9a:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d8f3      	bhi.n	8001c8c <RTC_ByteToBcd2+0x12>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	1dfb      	adds	r3, r7, #7
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b2db      	uxtb	r3, r3
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	18d3      	adds	r3, r2, r3
 8001cf0:	b2db      	uxtb	r3, r3
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08a      	b.n	8001e24 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	225d      	movs	r2, #93	; 0x5d
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	225c      	movs	r2, #92	; 0x5c
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f000 fad6 	bl	80022dc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	225d      	movs	r2, #93	; 0x5d
 8001d34:	2102      	movs	r1, #2
 8001d36:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2140      	movs	r1, #64	; 0x40
 8001d44:	438a      	bics	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	23e0      	movs	r3, #224	; 0xe0
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d902      	bls.n	8001d5a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e002      	b.n	8001d60 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	23f0      	movs	r3, #240	; 0xf0
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d008      	beq.n	8001d7e <HAL_SPI_Init+0x82>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	23e0      	movs	r3, #224	; 0xe0
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d002      	beq.n	8001d7e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	23e0      	movs	r3, #224	; 0xe0
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d903      	bls.n	8001d9a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
 8001d98:	e002      	b.n	8001da0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6999      	ldr	r1, [r3, #24]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	0011      	movs	r1, r2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	2204      	movs	r2, #4
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	0011      	movs	r1, r2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4907      	ldr	r1, [pc, #28]	; (8001e2c <HAL_SPI_Init+0x130>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	225d      	movs	r2, #93	; 0x5d
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	fffff7ff 	.word	0xfffff7ff

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e34:	f7fe f9f4 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e38:	f000 f809 	bl	8001e4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3c:	f000 f9a2 	bl	8002184 <MX_GPIO_Init>
  MX_ADC_Init();
 8001e40:	f000 f862 	bl	8001f08 <MX_ADC_Init>
  MX_RTC_Init();
 8001e44:	f000 f8c8 	bl	8001fd8 <MX_RTC_Init>
  MX_SPI1_Init();
 8001e48:	f000 f960 	bl	800210c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <main+0x1c>

08001e4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e4e:	b590      	push	{r4, r7, lr}
 8001e50:	b095      	sub	sp, #84	; 0x54
 8001e52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e54:	2420      	movs	r4, #32
 8001e56:	193b      	adds	r3, r7, r4
 8001e58:	0018      	movs	r0, r3
 8001e5a:	2330      	movs	r3, #48	; 0x30
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f000 fb34 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e64:	2310      	movs	r3, #16
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	0018      	movs	r0, r3
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f000 fb2c 	bl	80024cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e74:	003b      	movs	r3, r7
 8001e76:	0018      	movs	r0, r3
 8001e78:	2310      	movs	r3, #16
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f000 fb25 	bl	80024cc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001e82:	0021      	movs	r1, r4
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	2211      	movs	r2, #17
 8001e88:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	2201      	movs	r2, #1
 8001e94:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2210      	movs	r2, #16
 8001e9a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fe7b 	bl	8000ba0 <HAL_RCC_OscConfig>
 8001eaa:	1e03      	subs	r3, r0, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001eae:	f000 f9b3 	bl	8002218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	2100      	movs	r1, #0
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff f959 	bl	8001188 <HAL_RCC_ClockConfig>
 8001ed6:	1e03      	subs	r3, r0, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001eda:	f000 f99d 	bl	8002218 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ede:	003b      	movs	r3, r7
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	0252      	lsls	r2, r2, #9
 8001ee4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	22c0      	movs	r2, #192	; 0xc0
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eee:	003b      	movs	r3, r7
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fa9f 	bl	8001434 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001efa:	f000 f98d 	bl	8002218 <Error_Handler>
  }
}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b015      	add	sp, #84	; 0x54
 8001f04:	bd90      	pop	{r4, r7, pc}
	...

08001f08 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	0018      	movs	r0, r3
 8001f12:	230c      	movs	r3, #12
 8001f14:	001a      	movs	r2, r3
 8001f16:	2100      	movs	r1, #0
 8001f18:	f000 fad8 	bl	80024cc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <MX_ADC_Init+0xcc>)
 8001f20:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f52:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f5a:	22c2      	movs	r2, #194	; 0xc2
 8001f5c:	32ff      	adds	r2, #255	; 0xff
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7fe f999 	bl	80002ac <HAL_ADC_Init>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8001f7e:	f000 f94b 	bl	8002218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2210      	movs	r2, #16
 8001f86:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	0152      	lsls	r2, r2, #5
 8001f8e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	0552      	lsls	r2, r2, #21
 8001f96:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f98:	1d3a      	adds	r2, r7, #4
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7fe fac2 	bl	8000528 <HAL_ADC_ConfigChannel>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001fa8:	f000 f936 	bl	8002218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2211      	movs	r2, #17
 8001fb0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fb2:	1d3a      	adds	r2, r7, #4
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_ADC_Init+0xc8>)
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe fab5 	bl	8000528 <HAL_ADC_ConfigChannel>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001fc2:	f000 f929 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b004      	add	sp, #16
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	200000a8 	.word	0x200000a8
 8001fd4:	40012400 	.word	0x40012400

08001fd8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b090      	sub	sp, #64	; 0x40
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fde:	232c      	movs	r3, #44	; 0x2c
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	2314      	movs	r3, #20
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f000 fa6f 	bl	80024cc <memset>
  RTC_DateTypeDef sDate = {0};
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001ff6:	003b      	movs	r3, r7
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	2328      	movs	r3, #40	; 0x28
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	2100      	movs	r1, #0
 8002000:	f000 fa64 	bl	80024cc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <MX_RTC_Init+0x12c>)
 8002006:	4a40      	ldr	r2, [pc, #256]	; (8002108 <MX_RTC_Init+0x130>)
 8002008:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <MX_RTC_Init+0x12c>)
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002010:	4b3c      	ldr	r3, [pc, #240]	; (8002104 <MX_RTC_Init+0x12c>)
 8002012:	227f      	movs	r2, #127	; 0x7f
 8002014:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <MX_RTC_Init+0x12c>)
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <MX_RTC_Init+0x12c>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002022:	4b38      	ldr	r3, [pc, #224]	; (8002104 <MX_RTC_Init+0x12c>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <MX_RTC_Init+0x12c>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <MX_RTC_Init+0x12c>)
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff facd 	bl	80015d0 <HAL_RTC_Init>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800203a:	f000 f8ed 	bl	8002218 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2200      	movs	r2, #0
 800204a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2200      	movs	r2, #0
 8002050:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800205e:	1879      	adds	r1, r7, r1
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <MX_RTC_Init+0x12c>)
 8002062:	2201      	movs	r2, #1
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff fb47 	bl	80016f8 <HAL_RTC_SetTime>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800206e:	f000 f8d3 	bl	8002218 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002072:	2128      	movs	r1, #40	; 0x28
 8002074:	187b      	adds	r3, r7, r1
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800207a:	187b      	adds	r3, r7, r1
 800207c:	2201      	movs	r2, #1
 800207e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002080:	187b      	adds	r3, r7, r1
 8002082:	2201      	movs	r2, #1
 8002084:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002086:	187b      	adds	r3, r7, r1
 8002088:	2200      	movs	r2, #0
 800208a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800208c:	1879      	adds	r1, r7, r1
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <MX_RTC_Init+0x12c>)
 8002090:	2201      	movs	r2, #1
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff fbf4 	bl	8001880 <HAL_RTC_SetDate>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d001      	beq.n	80020a0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800209c:	f000 f8bc 	bl	8002218 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80020a0:	003b      	movs	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80020a6:	003b      	movs	r3, r7
 80020a8:	2200      	movs	r2, #0
 80020aa:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80020ac:	003b      	movs	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020b2:	003b      	movs	r3, r7
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020b8:	003b      	movs	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020be:	003b      	movs	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020c4:	003b      	movs	r3, r7
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020ca:	003b      	movs	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020d0:	003b      	movs	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80020d6:	003b      	movs	r3, r7
 80020d8:	2220      	movs	r2, #32
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80020de:	003b      	movs	r3, r7
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	0052      	lsls	r2, r2, #1
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020e6:	0039      	movs	r1, r7
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_RTC_Init+0x12c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff fc7b 	bl	80019e8 <HAL_RTC_SetAlarm>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <MX_RTC_Init+0x122>
  {
    Error_Handler();
 80020f6:	f000 f88f 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b010      	add	sp, #64	; 0x40
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	20000024 	.word	0x20000024
 8002108:	40002800 	.word	0x40002800

0800210c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_SPI1_Init+0x70>)
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <MX_SPI1_Init+0x74>)
 8002114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_SPI1_Init+0x70>)
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_SPI1_Init+0x70>)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	0212      	lsls	r2, r2, #8
 8002122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_SPI1_Init+0x70>)
 8002126:	22c0      	movs	r2, #192	; 0xc0
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_SPI1_Init+0x70>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_SPI1_Init+0x70>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <MX_SPI1_Init+0x70>)
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_SPI1_Init+0x70>)
 8002142:	2200      	movs	r2, #0
 8002144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <MX_SPI1_Init+0x70>)
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <MX_SPI1_Init+0x70>)
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_SPI1_Init+0x70>)
 8002154:	2207      	movs	r2, #7
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <MX_SPI1_Init+0x70>)
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_SPI1_Init+0x70>)
 8002160:	2200      	movs	r2, #0
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <MX_SPI1_Init+0x70>)
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff fdc8 	bl	8001cfc <HAL_SPI_Init>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d001      	beq.n	8002174 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8002170:	f000 f852 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	20000044 	.word	0x20000044
 8002180:	40013000 	.word	0x40013000

08002184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	240c      	movs	r4, #12
 800218c:	193b      	adds	r3, r7, r4
 800218e:	0018      	movs	r0, r3
 8002190:	2314      	movs	r3, #20
 8002192:	001a      	movs	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	f000 f999 	bl	80024cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <MX_GPIO_Init+0x90>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <MX_GPIO_Init+0x90>)
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	03c9      	lsls	r1, r1, #15
 80021a4:	430a      	orrs	r2, r1
 80021a6:	615a      	str	r2, [r3, #20]
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_GPIO_Init+0x90>)
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	03db      	lsls	r3, r3, #15
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_GPIO_Init+0x90>)
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_GPIO_Init+0x90>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0289      	lsls	r1, r1, #10
 80021c0:	430a      	orrs	r2, r1
 80021c2:	615a      	str	r2, [r3, #20]
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <MX_GPIO_Init+0x90>)
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	0099      	lsls	r1, r3, #2
 80021d6:	2390      	movs	r3, #144	; 0x90
 80021d8:	05db      	lsls	r3, r3, #23
 80021da:	2200      	movs	r2, #0
 80021dc:	0018      	movs	r0, r3
 80021de:	f7fe fcc1 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2201      	movs	r2, #1
 80021ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	193a      	adds	r2, r7, r4
 80021fe:	2390      	movs	r3, #144	; 0x90
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	0011      	movs	r1, r2
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe fb39 	bl	800087c <HAL_GPIO_Init>

}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b009      	add	sp, #36	; 0x24
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40021000 	.word	0x40021000

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_MspInit+0x44>)
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_MspInit+0x44>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	619a      	str	r2, [r3, #24]
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_MspInit+0x44>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2201      	movs	r2, #1
 800223c:	4013      	ands	r3, r2
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_MspInit+0x44>)
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_MspInit+0x44>)
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0549      	lsls	r1, r1, #21
 800224c:	430a      	orrs	r2, r1
 800224e:	61da      	str	r2, [r3, #28]
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_MspInit+0x44>)
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	055b      	lsls	r3, r3, #21
 8002258:	4013      	ands	r3, r2
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_ADC_MspInit+0x38>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10d      	bne.n	800229a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_ADC_MspInit+0x3c>)
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_ADC_MspInit+0x3c>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0089      	lsls	r1, r1, #2
 8002288:	430a      	orrs	r2, r1
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_ADC_MspInit+0x3c>)
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40012400 	.word	0x40012400
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_RTC_MspInit+0x28>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d106      	bne.n	80022cc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RTC_MspInit+0x2c>)
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RTC_MspInit+0x2c>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0209      	lsls	r1, r1, #8
 80022c8:	430a      	orrs	r2, r1
 80022ca:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40002800 	.word	0x40002800
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	2314      	movs	r3, #20
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	0018      	movs	r0, r3
 80022ea:	2314      	movs	r3, #20
 80022ec:	001a      	movs	r2, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	f000 f8ec 	bl	80024cc <memset>
  if(hspi->Instance==SPI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_SPI_MspInit+0x90>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d132      	bne.n	8002364 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_SPI_MspInit+0x94>)
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_SPI_MspInit+0x94>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0149      	lsls	r1, r1, #5
 8002308:	430a      	orrs	r2, r1
 800230a:	619a      	str	r2, [r3, #24]
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_SPI_MspInit+0x94>)
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_SPI_MspInit+0x94>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_SPI_MspInit+0x94>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0289      	lsls	r1, r1, #10
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_SPI_MspInit+0x94>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002336:	2114      	movs	r1, #20
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2260      	movs	r2, #96	; 0x60
 800233c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2202      	movs	r2, #2
 8002342:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234a:	187b      	adds	r3, r7, r1
 800234c:	2203      	movs	r2, #3
 800234e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002350:	187b      	adds	r3, r7, r1
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	187a      	adds	r2, r7, r1
 8002358:	2390      	movs	r3, #144	; 0x90
 800235a:	05db      	lsls	r3, r3, #23
 800235c:	0011      	movs	r1, r2
 800235e:	0018      	movs	r0, r3
 8002360:	f7fe fa8c 	bl	800087c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b00a      	add	sp, #40	; 0x28
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40013000 	.word	0x40013000
 8002370:	40021000 	.word	0x40021000

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f7fd ff70 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <SystemInit+0x70>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <SystemInit+0x70>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <SystemInit+0x70>)
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <SystemInit+0x70>)
 80023be:	4917      	ldr	r1, [pc, #92]	; (800241c <SystemInit+0x74>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <SystemInit+0x70>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <SystemInit+0x70>)
 80023ca:	4915      	ldr	r1, [pc, #84]	; (8002420 <SystemInit+0x78>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <SystemInit+0x70>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <SystemInit+0x70>)
 80023d6:	4913      	ldr	r1, [pc, #76]	; (8002424 <SystemInit+0x7c>)
 80023d8:	400a      	ands	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <SystemInit+0x70>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <SystemInit+0x70>)
 80023e2:	4911      	ldr	r1, [pc, #68]	; (8002428 <SystemInit+0x80>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <SystemInit+0x70>)
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <SystemInit+0x70>)
 80023ee:	210f      	movs	r1, #15
 80023f0:	438a      	bics	r2, r1
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <SystemInit+0x70>)
 80023f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <SystemInit+0x70>)
 80023fa:	490c      	ldr	r1, [pc, #48]	; (800242c <SystemInit+0x84>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SystemInit+0x70>)
 8002402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SystemInit+0x70>)
 8002406:	2101      	movs	r1, #1
 8002408:	438a      	bics	r2, r1
 800240a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <SystemInit+0x70>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]

}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	08ffb80c 	.word	0x08ffb80c
 8002420:	fef6ffff 	.word	0xfef6ffff
 8002424:	fffbffff 	.word	0xfffbffff
 8002428:	ffc0ffff 	.word	0xffc0ffff
 800242c:	fffffeec 	.word	0xfffffeec

08002430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002430:	480d      	ldr	r0, [pc, #52]	; (8002468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002432:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <LoopForever+0x6>)
  ldr r1, =_edata
 8002436:	490e      	ldr	r1, [pc, #56]	; (8002470 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <LoopForever+0xe>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopForever+0x12>)
  ldr r4, =_ebss
 800244c:	4c0b      	ldr	r4, [pc, #44]	; (800247c <LoopForever+0x16>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800245a:	f7ff ffa5 	bl	80023a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800245e:	f000 f811 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002462:	f7ff fce5 	bl	8001e30 <main>

08002466 <LoopForever>:

LoopForever:
    b LoopForever
 8002466:	e7fe      	b.n	8002466 <LoopForever>
  ldr   r0, =_estack
 8002468:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002474:	0800252c 	.word	0x0800252c
  ldr r2, =_sbss
 8002478:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800247c:	200000f4 	.word	0x200000f4

08002480 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC1_IRQHandler>
	...

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	2600      	movs	r6, #0
 8002488:	4d0c      	ldr	r5, [pc, #48]	; (80024bc <__libc_init_array+0x38>)
 800248a:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248c:	1b64      	subs	r4, r4, r5
 800248e:	10a4      	asrs	r4, r4, #2
 8002490:	42a6      	cmp	r6, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	2600      	movs	r6, #0
 8002496:	f000 f821 	bl	80024dc <_init>
 800249a:	4d0a      	ldr	r5, [pc, #40]	; (80024c4 <__libc_init_array+0x40>)
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <__libc_init_array+0x44>)
 800249e:	1b64      	subs	r4, r4, r5
 80024a0:	10a4      	asrs	r4, r4, #2
 80024a2:	42a6      	cmp	r6, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	00b3      	lsls	r3, r6, #2
 80024aa:	58eb      	ldr	r3, [r5, r3]
 80024ac:	4798      	blx	r3
 80024ae:	3601      	adds	r6, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	00b3      	lsls	r3, r6, #2
 80024b4:	58eb      	ldr	r3, [r5, r3]
 80024b6:	4798      	blx	r3
 80024b8:	3601      	adds	r6, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002524 	.word	0x08002524
 80024c0:	08002524 	.word	0x08002524
 80024c4:	08002524 	.word	0x08002524
 80024c8:	08002528 	.word	0x08002528

080024cc <memset>:
 80024cc:	0003      	movs	r3, r0
 80024ce:	1812      	adds	r2, r2, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	7019      	strb	r1, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <_init>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

080024e8 <_fini>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr
