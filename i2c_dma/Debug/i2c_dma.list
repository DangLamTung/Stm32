
i2c_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008638  08008638  00018638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008778  08008778  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008778  08008778  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  200001e0  08008960  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001484  08008960  00021484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018769  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003575  00000000  00000000  00038972  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017de6  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010add  00000000  00000000  00056166  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077328  00000000  00000000  00066c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddf6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005338  00000000  00000000  000ddfe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800861c 	.word	0x0800861c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800861c 	.word	0x0800861c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x28>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f923 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f006 f904 	bl	800724c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f93b 	bl	80012ea <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f000 f903 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000118 	.word	0x20000118
 80010a8:	20000004 	.word	0x20000004
 80010ac:	20000000 	.word	0x20000000

080010b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x1c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_IncTick+0x20>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000004 	.word	0x20000004
 80010d0:	20000420 	.word	0x20000420

080010d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <HAL_GetTick+0x10>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	20000420 	.word	0x20000420

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff42 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff35 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e043      	b.n	80013a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_DMA_Init+0xa8>)
 8001322:	4413      	add	r3, r2
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_DMA_Init+0xac>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	009a      	lsls	r2, r3, #2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_DMA_Init+0xb0>)
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800134e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001352:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	bffdfff8 	.word	0xbffdfff8
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_DMA_Start_IT+0x20>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e04a      	b.n	800146e <HAL_DMA_Start_IT+0xb6>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d13a      	bne.n	8001460 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f938 	bl	8001684 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 020e 	orr.w	r2, r2, #14
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e00f      	b.n	800144e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0204 	bic.w	r2, r2, #4
 800143c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 020a 	orr.w	r2, r2, #10
 800144c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e005      	b.n	800146c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d04f      	beq.n	8001540 <HAL_DMA_IRQHandler+0xc8>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d04a      	beq.n	8001540 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_DMA_IRQHandler+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d029      	beq.n	8001526 <HAL_DMA_IRQHandler+0xae>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a65      	ldr	r2, [pc, #404]	; (800166c <HAL_DMA_IRQHandler+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0xaa>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_DMA_IRQHandler+0x1f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01a      	beq.n	800151c <HAL_DMA_IRQHandler+0xa4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a62      	ldr	r2, [pc, #392]	; (8001674 <HAL_DMA_IRQHandler+0x1fc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d012      	beq.n	8001516 <HAL_DMA_IRQHandler+0x9e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a60      	ldr	r2, [pc, #384]	; (8001678 <HAL_DMA_IRQHandler+0x200>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00a      	beq.n	8001510 <HAL_DMA_IRQHandler+0x98>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5f      	ldr	r2, [pc, #380]	; (800167c <HAL_DMA_IRQHandler+0x204>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <HAL_DMA_IRQHandler+0x92>
 8001504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001508:	e00e      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 800150a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800150e:	e00b      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001510:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001514:	e008      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151a:	e005      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 800151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001520:	e002      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001522:	2340      	movs	r3, #64	; 0x40
 8001524:	e000      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001526:	2304      	movs	r3, #4
 8001528:	4a55      	ldr	r2, [pc, #340]	; (8001680 <HAL_DMA_IRQHandler+0x208>)
 800152a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8094 	beq.w	800165e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800153e:	e08e      	b.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2202      	movs	r2, #2
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d056      	beq.n	80015fe <HAL_DMA_IRQHandler+0x186>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d051      	beq.n	80015fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10b      	bne.n	8001580 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020a 	bic.w	r2, r2, #10
 8001576:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a38      	ldr	r2, [pc, #224]	; (8001668 <HAL_DMA_IRQHandler+0x1f0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d029      	beq.n	80015de <HAL_DMA_IRQHandler+0x166>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_DMA_IRQHandler+0x1f4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <HAL_DMA_IRQHandler+0x162>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_DMA_IRQHandler+0x1f8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x15c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a34      	ldr	r2, [pc, #208]	; (8001674 <HAL_DMA_IRQHandler+0x1fc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d012      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_DMA_IRQHandler+0x200>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x150>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_IRQHandler+0x204>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d102      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x14a>
 80015bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015c0:	e00e      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c6:	e00b      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	e008      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	e005      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d8:	e002      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015da:	2320      	movs	r3, #32
 80015dc:	e000      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015de:	2302      	movs	r3, #2
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_DMA_IRQHandler+0x208>)
 80015e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d034      	beq.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015fc:	e02f      	b.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2208      	movs	r2, #8
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d028      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 020e 	bic.w	r2, r2, #14
 8001626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
    }
  }
  return;
 800165e:	bf00      	nop
 8001660:	bf00      	nop
}
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020008 	.word	0x40020008
 800166c:	4002001c 	.word	0x4002001c
 8001670:	40020030 	.word	0x40020030
 8001674:	40020044 	.word	0x40020044
 8001678:	40020058 	.word	0x40020058
 800167c:	4002006c 	.word	0x4002006c
 8001680:	40020000 	.word	0x40020000

08001684 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d108      	bne.n	80016c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016c2:	e007      	b.n	80016d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	60da      	str	r2, [r3, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e127      	b.n	8001944 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8116 	bne.w	800193e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d034      	beq.n	8001784 <HAL_GPIO_Init+0xa4>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d80d      	bhi.n	800173a <HAL_GPIO_Init+0x5a>
 800171e:	2b02      	cmp	r3, #2
 8001720:	d02b      	beq.n	800177a <HAL_GPIO_Init+0x9a>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d804      	bhi.n	8001730 <HAL_GPIO_Init+0x50>
 8001726:	2b00      	cmp	r3, #0
 8001728:	d031      	beq.n	800178e <HAL_GPIO_Init+0xae>
 800172a:	2b01      	cmp	r3, #1
 800172c:	d01c      	beq.n	8001768 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172e:	e048      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001730:	2b03      	cmp	r3, #3
 8001732:	d043      	beq.n	80017bc <HAL_GPIO_Init+0xdc>
 8001734:	2b11      	cmp	r3, #17
 8001736:	d01b      	beq.n	8001770 <HAL_GPIO_Init+0x90>
          break;
 8001738:	e043      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800173a:	4a89      	ldr	r2, [pc, #548]	; (8001960 <HAL_GPIO_Init+0x280>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d026      	beq.n	800178e <HAL_GPIO_Init+0xae>
 8001740:	4a87      	ldr	r2, [pc, #540]	; (8001960 <HAL_GPIO_Init+0x280>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d806      	bhi.n	8001754 <HAL_GPIO_Init+0x74>
 8001746:	4a87      	ldr	r2, [pc, #540]	; (8001964 <HAL_GPIO_Init+0x284>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d020      	beq.n	800178e <HAL_GPIO_Init+0xae>
 800174c:	4a86      	ldr	r2, [pc, #536]	; (8001968 <HAL_GPIO_Init+0x288>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01d      	beq.n	800178e <HAL_GPIO_Init+0xae>
          break;
 8001752:	e036      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001754:	4a85      	ldr	r2, [pc, #532]	; (800196c <HAL_GPIO_Init+0x28c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0xae>
 800175a:	4a85      	ldr	r2, [pc, #532]	; (8001970 <HAL_GPIO_Init+0x290>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d016      	beq.n	800178e <HAL_GPIO_Init+0xae>
 8001760:	4a84      	ldr	r2, [pc, #528]	; (8001974 <HAL_GPIO_Init+0x294>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0xae>
          break;
 8001766:	e02c      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e028      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	3304      	adds	r3, #4
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e023      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	3308      	adds	r3, #8
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e01e      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	330c      	adds	r3, #12
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e019      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001796:	2304      	movs	r3, #4
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e012      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a4:	2308      	movs	r3, #8
 80017a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	611a      	str	r2, [r3, #16]
          break;
 80017ae:	e008      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b0:	2308      	movs	r3, #8
 80017b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	615a      	str	r2, [r3, #20]
          break;
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2bff      	cmp	r3, #255	; 0xff
 80017c6:	d801      	bhi.n	80017cc <HAL_GPIO_Init+0xec>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e001      	b.n	80017d0 <HAL_GPIO_Init+0xf0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d802      	bhi.n	80017de <HAL_GPIO_Init+0xfe>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x104>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	3b08      	subs	r3, #8
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	210f      	movs	r1, #15
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	6a39      	ldr	r1, [r7, #32]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8096 	beq.w	800193e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_GPIO_Init+0x298>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x298>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b56      	ldr	r3, [pc, #344]	; (8001978 <HAL_GPIO_Init+0x298>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800182a:	4a54      	ldr	r2, [pc, #336]	; (800197c <HAL_GPIO_Init+0x29c>)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x19e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x19a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x196>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2ac>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x192>
 800186e:	2303      	movs	r3, #3
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 8001872:	2304      	movs	r3, #4
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 800187e:	2300      	movs	r3, #0
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001890:	493a      	ldr	r1, [pc, #232]	; (800197c <HAL_GPIO_Init+0x29c>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4938      	ldr	r1, [pc, #224]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4933      	ldr	r1, [pc, #204]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	492e      	ldr	r1, [pc, #184]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	4929      	ldr	r1, [pc, #164]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	4924      	ldr	r1, [pc, #144]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
 8001906:	e006      	b.n	8001916 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	43db      	mvns	r3, r3
 8001910:	491f      	ldr	r1, [pc, #124]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001912:	4013      	ands	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	491a      	ldr	r1, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	60cb      	str	r3, [r1, #12]
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	43db      	mvns	r3, r3
 8001938:	4915      	ldr	r1, [pc, #84]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800193a:	4013      	ands	r3, r2
 800193c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	3301      	adds	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	f47f aed0 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 8001954:	bf00      	nop
 8001956:	372c      	adds	r7, #44	; 0x2c
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	10210000 	.word	0x10210000
 8001964:	10110000 	.word	0x10110000
 8001968:	10120000 	.word	0x10120000
 800196c:	10310000 	.word	0x10310000
 8001970:	10320000 	.word	0x10320000
 8001974:	10220000 	.word	0x10220000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e10f      	b.n	8001bc6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f005 fc78 	bl	80072b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019d8:	f002 f870 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 80019dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a7b      	ldr	r2, [pc, #492]	; (8001bd0 <HAL_I2C_Init+0x23c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d807      	bhi.n	80019f8 <HAL_I2C_Init+0x64>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_I2C_Init+0x240>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	bf94      	ite	ls
 80019f0:	2301      	movls	r3, #1
 80019f2:	2300      	movhi	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e006      	b.n	8001a06 <HAL_I2C_Init+0x72>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a77      	ldr	r2, [pc, #476]	; (8001bd8 <HAL_I2C_Init+0x244>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0db      	b.n	8001bc6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a72      	ldr	r2, [pc, #456]	; (8001bdc <HAL_I2C_Init+0x248>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a64      	ldr	r2, [pc, #400]	; (8001bd0 <HAL_I2C_Init+0x23c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d802      	bhi.n	8001a48 <HAL_I2C_Init+0xb4>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	e009      	b.n	8001a5c <HAL_I2C_Init+0xc8>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_I2C_Init+0x24c>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4956      	ldr	r1, [pc, #344]	; (8001bd0 <HAL_I2C_Init+0x23c>)
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d80d      	bhi.n	8001a98 <HAL_I2C_Init+0x104>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e59      	subs	r1, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	bf38      	it	cc
 8001a94:	2304      	movcc	r3, #4
 8001a96:	e04f      	b.n	8001b38 <HAL_I2C_Init+0x1a4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_I2C_Init+0x130>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e012      	b.n	8001aea <HAL_I2C_Init+0x156>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	0099      	lsls	r1, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Init+0x15e>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e022      	b.n	8001b38 <HAL_I2C_Init+0x1a4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10e      	bne.n	8001b18 <HAL_I2C_Init+0x184>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e58      	subs	r0, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b16:	e00f      	b.n	8001b38 <HAL_I2C_Init+0x1a4>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	0099      	lsls	r1, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	6809      	ldr	r1, [r1, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6911      	ldr	r1, [r2, #16]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	000186a0 	.word	0x000186a0
 8001bd4:	001e847f 	.word	0x001e847f
 8001bd8:	003d08ff 	.word	0x003d08ff
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	f040 80ec 	bne.w	8001de2 <HAL_I2C_Master_Transmit_DMA+0x1fe>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c0a:	4b78      	ldr	r3, [pc, #480]	; (8001dec <HAL_I2C_Master_Transmit_DMA+0x208>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_I2C_Master_Transmit_DMA+0x20c>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0a1a      	lsrs	r2, r3, #8
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009a      	lsls	r2, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d116      	bne.n	8001c5e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 0220 	orr.w	r2, r3, #32
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0c2      	b.n	8001de4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d0db      	beq.n	8001c24 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Master_Transmit_DMA+0x96>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0b4      	b.n	8001de4 <HAL_I2C_Master_Transmit_DMA+0x200>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d007      	beq.n	8001ca0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2221      	movs	r2, #33	; 0x21
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2210      	movs	r2, #16
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	893a      	ldrh	r2, [r7, #8]
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001ce2:	897a      	ldrh	r2, [r7, #10]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d05a      	beq.n	8001da6 <HAL_I2C_Master_Transmit_DMA+0x1c2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	4a40      	ldr	r2, [pc, #256]	; (8001df8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_I2C_Master_Transmit_DMA+0x218>)
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	2200      	movs	r2, #0
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3310      	adds	r3, #16
 8001d20:	461a      	mov	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d26:	f7ff fb47 	bl	80013b8 <HAL_DMA_Start_IT>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d124      	bne.n	8001d7e <HAL_I2C_Master_Transmit_DMA+0x19a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d42:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d52:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001d6a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	e02f      	b.n	8001dde <HAL_I2C_Master_Transmit_DMA+0x1fa>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e01e      	b.n	8001de4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001db4:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ddc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_Master_Transmit_DMA+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000118 	.word	0x20000118
 8001df0:	14f8b589 	.word	0x14f8b589
 8001df4:	ffff0000 	.word	0xffff0000
 8001df8:	080022a9 	.word	0x080022a9
 8001dfc:	08002443 	.word	0x08002443

08001e00 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	817b      	strh	r3, [r7, #10]
 8001e10:	4613      	mov	r3, r2
 8001e12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	f040 80ec 	bne.w	8001ffe <HAL_I2C_Master_Receive_DMA+0x1fe>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_I2C_Master_Receive_DMA+0x208>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	4a77      	ldr	r2, [pc, #476]	; (800200c <HAL_I2C_Master_Receive_DMA+0x20c>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a1a      	lsrs	r2, r3, #8
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009a      	lsls	r2, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d116      	bne.n	8001e7a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f043 0220 	orr.w	r2, r3, #32
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0c2      	b.n	8002000 <HAL_I2C_Master_Receive_DMA+0x200>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d0db      	beq.n	8001e40 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Master_Receive_DMA+0x96>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0b4      	b.n	8002000 <HAL_I2C_Master_Receive_DMA+0x200>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d007      	beq.n	8001ebc <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2222      	movs	r2, #34	; 0x22
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	893a      	ldrh	r2, [r7, #8]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a45      	ldr	r2, [pc, #276]	; (8002010 <HAL_I2C_Master_Receive_DMA+0x210>)
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001efe:	897a      	ldrh	r2, [r7, #10]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05a      	beq.n	8001fc2 <HAL_I2C_Master_Receive_DMA+0x1c2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	4a40      	ldr	r2, [pc, #256]	; (8002014 <HAL_I2C_Master_Receive_DMA+0x214>)
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <HAL_I2C_Master_Receive_DMA+0x218>)
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	2200      	movs	r2, #0
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	2200      	movs	r2, #0
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3310      	adds	r3, #16
 8001f36:	4619      	mov	r1, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	f7ff fa39 	bl	80013b8 <HAL_DMA_Start_IT>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d124      	bne.n	8001f9a <HAL_I2C_Master_Receive_DMA+0x19a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001f86:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	e02f      	b.n	8001ffa <HAL_I2C_Master_Receive_DMA+0x1fa>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f043 0210 	orr.w	r2, r3, #16
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e01e      	b.n	8002000 <HAL_I2C_Master_Receive_DMA+0x200>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ff8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_I2C_Master_Receive_DMA+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000118 	.word	0x20000118
 800200c:	14f8b589 	.word	0x14f8b589
 8002010:	ffff0000 	.word	0xffff0000
 8002014:	080022a9 	.word	0x080022a9
 8002018:	08002443 	.word	0x08002443

0800201c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff f852 	bl	80010d4 <HAL_GetTick>
 8002030:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b20      	cmp	r3, #32
 8002040:	f040 8105 	bne.w	800224e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2319      	movs	r3, #25
 800204a:	2201      	movs	r2, #1
 800204c:	4982      	ldr	r1, [pc, #520]	; (8002258 <HAL_I2C_IsDeviceReady+0x23c>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fa26 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	e0f8      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_I2C_IsDeviceReady+0x50>
 8002068:	2302      	movs	r3, #2
 800206a:	e0f1      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d007      	beq.n	8002092 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2224      	movs	r2, #36	; 0x24
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_I2C_IsDeviceReady+0x240>)
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9e4 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0b6      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe ffef 	bl	80010d4 <HAL_GetTick>
 80020f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002126:	e025      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002128:	f7fe ffd4 	bl	80010d4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d302      	bcc.n	800213e <HAL_I2C_IsDeviceReady+0x122>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	22a0      	movs	r2, #160	; 0xa0
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2ba0      	cmp	r3, #160	; 0xa0
 800217e:	d005      	beq.n	800218c <HAL_I2C_IsDeviceReady+0x170>
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_I2C_IsDeviceReady+0x170>
 8002186:	7dbb      	ldrb	r3, [r7, #22]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0cd      	beq.n	8002128 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d129      	bne.n	80021f6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2319      	movs	r3, #25
 80021ce:	2201      	movs	r2, #1
 80021d0:	4921      	ldr	r1, [pc, #132]	; (8002258 <HAL_I2C_IsDeviceReady+0x23c>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f964 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e036      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e02c      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	490f      	ldr	r1, [pc, #60]	; (8002258 <HAL_I2C_IsDeviceReady+0x23c>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f940 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e012      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	3301      	adds	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	f4ff af3e 	bcc.w	80020b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	00100002 	.word	0x00100002
 800225c:	ffff0000 	.word	0xffff0000

08002260 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022c4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022da:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2200      	movs	r2, #0
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80022f2:	2b21      	cmp	r3, #33	; 0x21
 80022f4:	d007      	beq.n	8002306 <I2C_DMAXferCplt+0x5e>
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80022fc:	2b22      	cmp	r3, #34	; 0x22
 80022fe:	d131      	bne.n	8002364 <I2C_DMAXferCplt+0xbc>
 8002300:	7cbb      	ldrb	r3, [r7, #18]
 8002302:	2b20      	cmp	r3, #32
 8002304:	d12e      	bne.n	8002364 <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002314:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b29      	cmp	r3, #41	; 0x29
 8002320:	d10a      	bne.n	8002338 <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2221      	movs	r2, #33	; 0x21
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2228      	movs	r2, #40	; 0x28
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002330:	6978      	ldr	r0, [r7, #20]
 8002332:	f7ff ff95 	bl	8002260 <HAL_I2C_SlaveTxCpltCallback>
 8002336:	e00c      	b.n	8002352 <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b2a      	cmp	r3, #42	; 0x2a
 800233c:	d109      	bne.n	8002352 <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2222      	movs	r2, #34	; 0x22
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2228      	movs	r2, #40	; 0x28
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f7ff ff90 	bl	8002272 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002360:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002362:	e06a      	b.n	800243a <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d064      	beq.n	800243a <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002388:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002398:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a0:	d009      	beq.n	80023b6 <I2C_DMAXferCplt+0x10e>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d006      	beq.n	80023b6 <I2C_DMAXferCplt+0x10e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80023ae:	d002      	beq.n	80023b6 <I2C_DMAXferCplt+0x10e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d107      	bne.n	80023c6 <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023d4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7ff ff4e 	bl	8002296 <HAL_I2C_ErrorCallback>
}
 80023fa:	e01e      	b.n	800243a <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d10a      	bne.n	8002426 <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff30 	bl	8002284 <HAL_I2C_MemRxCpltCallback>
}
 8002424:	e009      	b.n	800243a <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2212      	movs	r2, #18
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f004 fb59 	bl	8006aec <HAL_I2C_MasterRxCpltCallback>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	2200      	movs	r2, #0
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff feff 	bl	8002296 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b0:	e025      	b.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b8:	d021      	beq.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7fe fe0b 	bl	80010d4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e023      	b.n	8002546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10d      	bne.n	8002524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	e00c      	b.n	800253e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	429a      	cmp	r2, r3
 8002542:	d0b6      	beq.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002550:	b08b      	sub	sp, #44	; 0x2c
 8002552:	af06      	add	r7, sp, #24
 8002554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d3      	b.n	8002708 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f005 f8dd 	bl	8007734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2203      	movs	r2, #3
 800257e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fcdb 	bl	8003f42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	687e      	ldr	r6, [r7, #4]
 8002594:	466d      	mov	r5, sp
 8002596:	f106 0410 	add.w	r4, r6, #16
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	1d33      	adds	r3, r6, #4
 80025a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f001 fca4 	bl	8003ef4 <USB_CoreInit>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0a4      	b.n	8002708 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 fcd8 	bl	8003f7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e035      	b.n	800263c <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	015b      	lsls	r3, r3, #5
 80025d6:	4413      	add	r3, r2
 80025d8:	3329      	adds	r3, #41	; 0x29
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	015b      	lsls	r3, r3, #5
 80025e4:	4413      	add	r3, r2
 80025e6:	3328      	adds	r3, #40	; 0x28
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	b291      	uxth	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	015b      	lsls	r3, r3, #5
 80025f6:	4413      	add	r3, r2
 80025f8:	3336      	adds	r3, #54	; 0x36
 80025fa:	460a      	mov	r2, r1
 80025fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	4413      	add	r3, r2
 8002606:	332b      	adds	r3, #43	; 0x2b
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	015b      	lsls	r3, r3, #5
 8002612:	4413      	add	r3, r2
 8002614:	3338      	adds	r3, #56	; 0x38
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	015b      	lsls	r3, r3, #5
 8002620:	4413      	add	r3, r2
 8002622:	333c      	adds	r3, #60	; 0x3c
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	3302      	adds	r3, #2
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	4413      	add	r3, r2
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	3301      	adds	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	d3c4      	bcc.n	80025d0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e031      	b.n	80026b0 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	015b      	lsls	r3, r3, #5
 8002652:	4413      	add	r3, r2
 8002654:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	4413      	add	r3, r2
 8002664:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	015b      	lsls	r3, r3, #5
 8002672:	4413      	add	r3, r2
 8002674:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	015b      	lsls	r3, r3, #5
 8002682:	4413      	add	r3, r2
 8002684:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	015b      	lsls	r3, r3, #5
 8002692:	4413      	add	r3, r2
 8002694:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	330a      	adds	r3, #10
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	4413      	add	r3, r2
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	3301      	adds	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3c8      	bcc.n	800264c <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	687e      	ldr	r6, [r7, #4]
 80026c2:	466d      	mov	r5, sp
 80026c4:	f106 0410 	add.w	r4, r6, #16
 80026c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	1d33      	adds	r3, r6, #4
 80026d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	f001 fc5c 	bl	8003f92 <USB_DevInit>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e00d      	b.n	8002708 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fc9a 	bl	800503a <USB_DevDisconnect>

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002710 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_PCD_Start+0x16>
 8002722:	2302      	movs	r3, #2
 8002724:	e016      	b.n	8002754 <HAL_PCD_Start+0x44>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800272e:	2101      	movs	r1, #1
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f005 fa66 	bl	8007c02 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fc73 	bl	8005026 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f001 fbe5 	bl	8003f14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fc70 	bl	800504e <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002778:	d102      	bne.n	8002780 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 faf2 	bl	8002d64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fc62 	bl	800504e <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d112      	bne.n	80027bc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a8:	b292      	uxth	r2, r2
 80027aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f005 f835 	bl	800781e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027b4:	2100      	movs	r1, #0
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8de 	bl	8002978 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 fc44 	bl	800504e <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d0:	d10b      	bne.n	80027ea <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027e4:	b292      	uxth	r2, r2
 80027e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fc2d 	bl	800504e <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fe:	d10b      	bne.n	8002818 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002812:	b292      	uxth	r2, r2
 8002814:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fc16 	bl	800504e <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282c:	d126      	bne.n	800287c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0204 	bic.w	r2, r2, #4
 8002840:	b292      	uxth	r2, r2
 8002842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	b292      	uxth	r2, r2
 800285a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 f816 	bl	8007890 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002876:	b292      	uxth	r2, r2
 8002878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fbe4 	bl	800504e <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002890:	d13d      	bne.n	800290e <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0208 	orr.w	r2, r2, #8
 80028a4:	b292      	uxth	r2, r2
 80028a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	b292      	uxth	r2, r2
 80028be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0204 	orr.w	r2, r2, #4
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fbb5 	bl	800504e <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	d10b      	bne.n	8002908 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002902:	b292      	uxth	r2, r2
 8002904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f004 ffa7 	bl	800785c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fb9b 	bl	800504e <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002922:	d10e      	bne.n	8002942 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002936:	b292      	uxth	r2, r2
 8002938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f004 ff60 	bl	8007802 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fb81 	bl	800504e <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002956:	d10b      	bne.n	8002970 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296a:	b292      	uxth	r2, r2
 800296c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_PCD_SetAddress+0x1a>
 800298e:	2302      	movs	r3, #2
 8002990:	e013      	b.n	80029ba <HAL_PCD_SetAddress+0x42>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fb28 	bl	8005000 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	4608      	mov	r0, r1
 80029cc:	4611      	mov	r1, r2
 80029ce:	461a      	mov	r2, r3
 80029d0:	4603      	mov	r3, r0
 80029d2:	70fb      	strb	r3, [r7, #3]
 80029d4:	460b      	mov	r3, r1
 80029d6:	803b      	strh	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	da0b      	bge.n	8002a00 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	3328      	adds	r3, #40	; 0x28
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	705a      	strb	r2, [r3, #1]
 80029fe:	e00b      	b.n	8002a18 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	015b      	lsls	r3, r3, #5
 8002a08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a24:	883a      	ldrh	r2, [r7, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	78ba      	ldrb	r2, [r7, #2]
 8002a2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a42:	78bb      	ldrb	r3, [r7, #2]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d102      	bne.n	8002a4e <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_PCD_EP_Open+0x9a>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e00e      	b.n	8002a7a <HAL_PCD_EP_Open+0xb8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68f9      	ldr	r1, [r7, #12]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 fab6 	bl	8003fdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002a78:	7afb      	ldrb	r3, [r7, #11]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da0b      	bge.n	8002aae <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	015b      	lsls	r3, r3, #5
 8002a9e:	3328      	adds	r3, #40	; 0x28
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
 8002aac:	e00b      	b.n	8002ac6 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_EP_Close+0x5e>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e00e      	b.n	8002afe <HAL_PCD_EP_Close+0x7c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 fd62 	bl	80045b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	460b      	mov	r3, r1
 8002b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	015b      	lsls	r3, r3, #5
 8002b1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6979      	ldr	r1, [r7, #20]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fec1 	bl	80048e4 <USB_EPStartXfer>
 8002b62:	e005      	b.n	8002b70 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6979      	ldr	r1, [r7, #20]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 feba 	bl	80048e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	330a      	adds	r3, #10
 8002b90:	015b      	lsls	r3, r3, #5
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	015b      	lsls	r3, r3, #5
 8002bba:	3328      	adds	r3, #40	; 0x28
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6979      	ldr	r1, [r7, #20]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fe74 	bl	80048e4 <USB_EPStartXfer>
 8002bfc:	e005      	b.n	8002c0a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fe6d 	bl	80048e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d901      	bls.n	8002c32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e046      	b.n	8002cc0 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	da0b      	bge.n	8002c52 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	3328      	adds	r3, #40	; 0x28
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	705a      	strb	r2, [r3, #1]
 8002c50:	e009      	b.n	8002c66 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	015b      	lsls	r3, r3, #5
 8002c56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_PCD_EP_SetStall+0x72>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e01c      	b.n	8002cc0 <HAL_PCD_EP_SetStall+0xac>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 f8dd 	bl	8004e54 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d108      	bne.n	8002cb6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f002 f9db 	bl	800506c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e03a      	b.n	8002d5c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0b      	bge.n	8002d06 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	015b      	lsls	r3, r3, #5
 8002cf6:	3328      	adds	r3, #40	; 0x28
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	705a      	strb	r2, [r3, #1]
 8002d04:	e00b      	b.n	8002d1e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	015b      	lsls	r3, r3, #5
 8002d0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_PCD_EP_ClrStall+0x76>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e00e      	b.n	8002d5c <HAL_PCD_EP_ClrStall+0x94>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 f8c3 	bl	8004ed8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d6c:	e282      	b.n	8003274 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d76:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d78:	8afb      	ldrh	r3, [r7, #22]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002d82:	7d7b      	ldrb	r3, [r7, #21]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 8142 	bne.w	800300e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d8a:	8afb      	ldrh	r3, [r7, #22]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d151      	bne.n	8002e38 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da4:	b29c      	uxth	r4, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3328      	adds	r3, #40	; 0x28
 8002dba:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	441a      	add	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002df6:	2100      	movs	r1, #0
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f004 fceb 	bl	80077d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8234 	beq.w	8003274 <PCD_EP_ISR_Handler+0x510>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 822f 	bne.w	8003274 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e36:	e21d      	b.n	8003274 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e3e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d033      	beq.n	8002eba <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	3306      	adds	r3, #6
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f002 f93a 	bl	800510a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29c      	uxth	r4, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f004 fc64 	bl	8007780 <HAL_PCD_SetupStageCallback>
 8002eb8:	e1dc      	b.n	8003274 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002eba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f280 81d8 	bge.w	8003274 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29c      	uxth	r4, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002edc:	b292      	uxth	r2, r2
 8002ede:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3306      	adds	r3, #6
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d019      	beq.n	8002f48 <PCD_EP_ISR_Handler+0x1e4>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6959      	ldr	r1, [r3, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f002 f8ec 	bl	800510a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f40:	2100      	movs	r1, #0
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f004 fc2e 	bl	80077a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	441c      	add	r4, r3
 8002f5a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002f5e:	461c      	mov	r4, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10e      	bne.n	8002f86 <PCD_EP_ISR_Handler+0x222>
 8002f68:	8823      	ldrh	r3, [r4, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	8023      	strh	r3, [r4, #0]
 8002f74:	8823      	ldrh	r3, [r4, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8023      	strh	r3, [r4, #0]
 8002f84:	e02d      	b.n	8002fe2 <PCD_EP_ISR_Handler+0x27e>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f8c:	d812      	bhi.n	8002fb4 <PCD_EP_ISR_Handler+0x250>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <PCD_EP_ISR_Handler+0x244>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	029b      	lsls	r3, r3, #10
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8023      	strh	r3, [r4, #0]
 8002fb2:	e016      	b.n	8002fe2 <PCD_EP_ISR_Handler+0x27e>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <PCD_EP_ISR_Handler+0x26a>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	b29c      	uxth	r4, r3
 8002ff4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ff8:	b29c      	uxth	r4, r3
 8002ffa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ffe:	b29c      	uxth	r4, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4ba2      	ldr	r3, [pc, #648]	; (8003290 <PCD_EP_ISR_Handler+0x52c>)
 8003006:	4323      	orrs	r3, r4
 8003008:	b29b      	uxth	r3, r3
 800300a:	8013      	strh	r3, [r2, #0]
 800300c:	e132      	b.n	8003274 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	7d7b      	ldrb	r3, [r7, #21]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800301e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f280 80d1 	bge.w	80031ca <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	7d7b      	ldrb	r3, [r7, #21]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29a      	uxth	r2, r3
 8003038:	f640 738f 	movw	r3, #3983	; 0xf8f
 800303c:	4013      	ands	r3, r2
 800303e:	b29c      	uxth	r4, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	7d7b      	ldrb	r3, [r7, #21]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003050:	b292      	uxth	r2, r2
 8003052:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003054:	7d7b      	ldrb	r3, [r7, #21]
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	7b1b      	ldrb	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d121      	bne.n	80030ae <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	3306      	adds	r3, #6
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003092:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003094:	8bfb      	ldrh	r3, [r7, #30]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d072      	beq.n	8003180 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6959      	ldr	r1, [r3, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88da      	ldrh	r2, [r3, #6]
 80030a6:	8bfb      	ldrh	r3, [r7, #30]
 80030a8:	f002 f82f 	bl	800510a <USB_ReadPMA>
 80030ac:	e068      	b.n	8003180 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d021      	beq.n	800310c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	3302      	adds	r3, #2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80030f2:	8bfb      	ldrh	r3, [r7, #30]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02a      	beq.n	800314e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6959      	ldr	r1, [r3, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	891a      	ldrh	r2, [r3, #8]
 8003104:	8bfb      	ldrh	r3, [r7, #30]
 8003106:	f002 f800 	bl	800510a <USB_ReadPMA>
 800310a:	e020      	b.n	800314e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003114:	b29b      	uxth	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	3306      	adds	r3, #6
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003134:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003136:	8bfb      	ldrh	r3, [r7, #30]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6959      	ldr	r1, [r3, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	895a      	ldrh	r2, [r3, #10]
 8003148:	8bfb      	ldrh	r3, [r7, #30]
 800314a:	f001 ffde 	bl	800510a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	b29c      	uxth	r4, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <PCD_EP_ISR_Handler+0x530>)
 800317a:	4323      	orrs	r3, r4
 800317c:	b29b      	uxth	r3, r3
 800317e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	8bfb      	ldrh	r3, [r7, #30]
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	8bfb      	ldrh	r3, [r7, #30]
 8003192:	441a      	add	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <PCD_EP_ISR_Handler+0x446>
 80031a0:	8bfa      	ldrh	r2, [r7, #30]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d206      	bcs.n	80031b8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f004 faf7 	bl	80077a4 <HAL_PCD_DataOutStageCallback>
 80031b6:	e008      	b.n	80031ca <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7819      	ldrb	r1, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fc9e 	bl	8002b06 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031ca:	8a7b      	ldrh	r3, [r7, #18]
 80031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d04f      	beq.n	8003274 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80031d4:	7d7b      	ldrb	r3, [r7, #21]
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	3328      	adds	r3, #40	; 0x28
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	7d7b      	ldrb	r3, [r7, #21]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	b29c      	uxth	r4, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	7d7b      	ldrb	r3, [r7, #21]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800320a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	3302      	adds	r3, #2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f004 faba 	bl	80077d4 <HAL_PCD_DataInStageCallback>
 8003260:	e008      	b.n	8003274 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	7819      	ldrb	r1, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fc97 	bl	8002ba2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800327c:	b29b      	uxth	r3, r3
 800327e:	b21b      	sxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	f6ff ad74 	blt.w	8002d6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3724      	adds	r7, #36	; 0x24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}
 8003290:	ffff8080 	.word	0xffff8080
 8003294:	ffff80c0 	.word	0xffff80c0

08003298 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	4613      	mov	r3, r2
 80032a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	015b      	lsls	r3, r3, #5
 80032be:	3328      	adds	r3, #40	; 0x28
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e006      	b.n	80032d6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032c8:	897b      	ldrh	r3, [r7, #10]
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	80da      	strh	r2, [r3, #6]
 80032ea:	e00b      	b.n	8003304 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2201      	movs	r2, #1
 80032f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b29a      	uxth	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e26c      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8087 	beq.w	800343e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003330:	4b92      	ldr	r3, [pc, #584]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00c      	beq.n	8003356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800333c:	4b8f      	ldr	r3, [pc, #572]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0x5e>
 8003348:	4b8c      	ldr	r3, [pc, #560]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d10b      	bne.n	800336e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003356:	4b89      	ldr	r3, [pc, #548]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d06c      	beq.n	800343c <HAL_RCC_OscConfig+0x12c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d168      	bne.n	800343c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e246      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x76>
 8003378:	4b80      	ldr	r3, [pc, #512]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a7f      	ldr	r2, [pc, #508]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e02e      	b.n	80033e4 <HAL_RCC_OscConfig+0xd4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x98>
 800338e:	4b7b      	ldr	r3, [pc, #492]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7a      	ldr	r2, [pc, #488]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b78      	ldr	r3, [pc, #480]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a77      	ldr	r2, [pc, #476]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xd4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0xbc>
 80033b2:	4b72      	ldr	r3, [pc, #456]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a71      	ldr	r2, [pc, #452]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b6f      	ldr	r3, [pc, #444]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6e      	ldr	r2, [pc, #440]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xd4>
 80033cc:	4b6b      	ldr	r3, [pc, #428]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b68      	ldr	r3, [pc, #416]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a67      	ldr	r2, [pc, #412]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe72 	bl	80010d4 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe6e 	bl	80010d4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1fa      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b5d      	ldr	r3, [pc, #372]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xe4>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd fe5e 	bl	80010d4 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fe5a 	bl	80010d4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1e6      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x10c>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d063      	beq.n	8003512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344a:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003456:	4b49      	ldr	r3, [pc, #292]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b08      	cmp	r3, #8
 8003460:	d11c      	bne.n	800349c <HAL_RCC_OscConfig+0x18c>
 8003462:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x176>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1ba      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4939      	ldr	r1, [pc, #228]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	e03a      	b.n	8003512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fd fe13 	bl	80010d4 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fd fe0f 	bl	80010d4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e19b      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4927      	ldr	r1, [pc, #156]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fdf2 	bl	80010d4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fd fdee 	bl	80010d4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e17a      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03a      	beq.n	8003594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_RCC_OscConfig+0x274>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fd fdd2 	bl	80010d4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd fdce 	bl	80010d4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e15a      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_RCC_OscConfig+0x26c>)
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003552:	2001      	movs	r0, #1
 8003554:	f000 fac6 	bl	8003ae4 <RCC_Delay>
 8003558:	e01c      	b.n	8003594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_RCC_OscConfig+0x274>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fd fdb8 	bl	80010d4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003566:	e00f      	b.n	8003588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd fdb4 	bl	80010d4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d908      	bls.n	8003588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e140      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	42420000 	.word	0x42420000
 8003584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	4b9e      	ldr	r3, [pc, #632]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e9      	bne.n	8003568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a6 	beq.w	80036ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b97      	ldr	r3, [pc, #604]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b94      	ldr	r3, [pc, #592]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4a93      	ldr	r2, [pc, #588]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	61d3      	str	r3, [r2, #28]
 80035be:	4b91      	ldr	r3, [pc, #580]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b8e      	ldr	r3, [pc, #568]	; (8003808 <HAL_RCC_OscConfig+0x4f8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <HAL_RCC_OscConfig+0x4f8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_RCC_OscConfig+0x4f8>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd fd75 	bl	80010d4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd fd71 	bl	80010d4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b64      	cmp	r3, #100	; 0x64
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0fd      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x4f8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x312>
 8003614:	4b7b      	ldr	r3, [pc, #492]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6213      	str	r3, [r2, #32]
 8003620:	e02d      	b.n	800367e <HAL_RCC_OscConfig+0x36e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x334>
 800362a:	4b76      	ldr	r3, [pc, #472]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a75      	ldr	r2, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6213      	str	r3, [r2, #32]
 8003636:	4b73      	ldr	r3, [pc, #460]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4a72      	ldr	r2, [pc, #456]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6213      	str	r3, [r2, #32]
 8003642:	e01c      	b.n	800367e <HAL_RCC_OscConfig+0x36e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x356>
 800364c:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a6c      	ldr	r2, [pc, #432]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a69      	ldr	r2, [pc, #420]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0x36e>
 8003666:	4b67      	ldr	r3, [pc, #412]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a66      	ldr	r2, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	4b64      	ldr	r3, [pc, #400]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a63      	ldr	r2, [pc, #396]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d015      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fd fd25 	bl	80010d4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fd fd21 	bl	80010d4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0ab      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ee      	beq.n	800368e <HAL_RCC_OscConfig+0x37e>
 80036b0:	e014      	b.n	80036dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fd0f 	bl	80010d4 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fd fd0b 	bl	80010d4 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e095      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e2:	4b48      	ldr	r3, [pc, #288]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4a47      	ldr	r2, [pc, #284]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8081 	beq.w	80037fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f8:	4b42      	ldr	r3, [pc, #264]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d061      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d146      	bne.n	800379a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x4fc>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fd fcdf 	bl	80010d4 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fd fcdb 	bl	80010d4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e067      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003740:	d108      	bne.n	8003754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003742:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	492d      	ldr	r1, [pc, #180]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a19      	ldr	r1, [r3, #32]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	430b      	orrs	r3, r1
 8003766:	4927      	ldr	r1, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <HAL_RCC_OscConfig+0x4fc>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fd fcaf 	bl	80010d4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fd fcab 	bl	80010d4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e037      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x46a>
 8003798:	e02f      	b.n	80037fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <HAL_RCC_OscConfig+0x4fc>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd fc98 	bl	80010d4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fd fc94 	bl	80010d4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e020      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x498>
 80037c6:	e018      	b.n	80037fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e013      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
 800380c:	42420060 	.word	0x42420060

08003810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0d0      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d910      	bls.n	8003854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 0207 	bic.w	r2, r3, #7
 800383a:	4965      	ldr	r1, [pc, #404]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b63      	ldr	r3, [pc, #396]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003884:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a52      	ldr	r2, [pc, #328]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800388e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	494d      	ldr	r1, [pc, #308]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d040      	beq.n	8003930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d115      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e073      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06b      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4936      	ldr	r1, [pc, #216]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003900:	f7fd fbe8 	bl	80010d4 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	e00a      	b.n	800391e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003908:	f7fd fbe4 	bl	80010d4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e053      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 020c 	and.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	429a      	cmp	r2, r3
 800392e:	d1eb      	bne.n	8003908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003930:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d210      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 0207 	bic.w	r2, r3, #7
 8003946:	4922      	ldr	r1, [pc, #136]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4916      	ldr	r1, [pc, #88]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	490e      	ldr	r1, [pc, #56]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399e:	f000 f821 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80039a2:	4601      	mov	r1, r0
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	5cd3      	ldrb	r3, [r2, r3]
 80039b2:	fa21 f303 	lsr.w	r3, r1, r3
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1cc>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1d0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fb46 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08008718 	.word	0x08008718
 80039dc:	20000118 	.word	0x20000118
 80039e0:	20000000 	.word	0x20000000

080039e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b490      	push	{r4, r7}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039ec:	1d3c      	adds	r4, r7, #4
 80039ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d002      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x40>
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x46>
 8003a22:	e02d      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a26:	623b      	str	r3, [r7, #32]
      break;
 8003a28:	e02d      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	0c9b      	lsrs	r3, r3, #18
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a36:	4413      	add	r3, r2
 8003a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0c5b      	lsrs	r3, r3, #17
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a56:	4413      	add	r3, r2
 8003a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a62:	fb02 f203 	mul.w	r2, r2, r3
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e004      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	623b      	str	r3, [r7, #32]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a82:	623b      	str	r3, [r7, #32]
      break;
 8003a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a86:	6a3b      	ldr	r3, [r7, #32]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc90      	pop	{r4, r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	08008638 	.word	0x08008638
 8003a98:	08008648 	.word	0x08008648
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	007a1200 	.word	0x007a1200
 8003aa4:	003d0900 	.word	0x003d0900

08003aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000118 	.word	0x20000118

08003abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac0:	f7ff fff2 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4a03      	ldr	r2, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08008728 	.word	0x08008728

08003ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <RCC_Delay+0x34>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <RCC_Delay+0x38>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0a5b      	lsrs	r3, r3, #9
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b00:	bf00      	nop
  }
  while (Delay --);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f9      	bne.n	8003b00 <RCC_Delay+0x1c>
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000118 	.word	0x20000118
 8003b1c:	10624dd3 	.word	0x10624dd3

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b40:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	61d3      	str	r3, [r2, #28]
 8003b58:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d118      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b74:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b80:	f7fd faa8 	bl	80010d4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd faa4 	bl	80010d4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e06d      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02e      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d027      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bce:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bda:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d014      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fd fa73 	bl	80010d4 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd fa6f 	bl	80010d4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e036      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ee      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c14:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4917      	ldr	r1, [pc, #92]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	490b      	ldr	r1, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4904      	ldr	r1, [pc, #16]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
 8003c88:	42420440 	.word	0x42420440

08003c8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e07f      	b.n	8003da0 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f003 fb9f 	bl	80073f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd0:	f023 0307 	bic.w	r3, r3, #7
 8003cd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f000 f861 	bl	8003da8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d2c:	f023 030c 	bic.w	r3, r3, #12
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	011a      	lsls	r2, r3, #4
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	031b      	lsls	r3, r3, #12
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	4313      	orrs	r3, r2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <TIM_Base_SetConfig+0xb8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00b      	beq.n	8003dd8 <TIM_Base_SetConfig+0x30>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d007      	beq.n	8003dd8 <TIM_Base_SetConfig+0x30>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <TIM_Base_SetConfig+0xbc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d003      	beq.n	8003dd8 <TIM_Base_SetConfig+0x30>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <TIM_Base_SetConfig+0xc0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d108      	bne.n	8003dea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <TIM_Base_SetConfig+0xb8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <TIM_Base_SetConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d007      	beq.n	8003e0a <TIM_Base_SetConfig+0x62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <TIM_Base_SetConfig+0xbc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_Base_SetConfig+0x62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <TIM_Base_SetConfig+0xc0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d108      	bne.n	8003e1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <TIM_Base_SetConfig+0xb8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	615a      	str	r2, [r3, #20]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800

08003e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e032      	b.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ebc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	f107 0014 	add.w	r0, r7, #20
 8003f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	b004      	add	sp, #16
 8003f12:	4770      	bx	lr

08003f14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f20:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	89fb      	ldrh	r3, [r7, #14]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f4a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f4e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	b21a      	sxth	r2, r3
 8003f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	b21b      	sxth	r3, r3
 8003f62:	4013      	ands	r3, r2
 8003f64:	b21b      	sxth	r3, r3
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f92:	b084      	sub	sp, #16
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	f107 0014 	add.w	r0, r7, #20
 8003fa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ffa5 	bl	8003f14 <USB_EnableGlobalInt>

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd6:	b004      	add	sp, #16
 8003fd8:	4770      	bx	lr
	...

08003fdc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fdc:	b490      	push	{r4, r7}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004000:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	78db      	ldrb	r3, [r3, #3]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d819      	bhi.n	800403e <USB_ActivateEndpoint+0x62>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <USB_ActivateEndpoint+0x34>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004021 	.word	0x08004021
 8004014:	08004035 	.word	0x08004035
 8004018:	08004045 	.word	0x08004045
 800401c:	0800402b 	.word	0x0800402b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004020:	89bb      	ldrh	r3, [r7, #12]
 8004022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004026:	81bb      	strh	r3, [r7, #12]
      break;
 8004028:	e00d      	b.n	8004046 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800402a:	89bb      	ldrh	r3, [r7, #12]
 800402c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004030:	81bb      	strh	r3, [r7, #12]
      break;
 8004032:	e008      	b.n	8004046 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004034:	89bb      	ldrh	r3, [r7, #12]
 8004036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403a:	81bb      	strh	r3, [r7, #12]
      break;
 800403c:	e003      	b.n	8004046 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      break;
 8004042:	e000      	b.n	8004046 <USB_ActivateEndpoint+0x6a>
      break;
 8004044:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	89bb      	ldrh	r3, [r7, #12]
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	b29a      	uxth	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	b29c      	uxth	r4, r3
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	4b8a      	ldr	r3, [pc, #552]	; (80042bc <USB_ActivateEndpoint+0x2e0>)
 8004094:	4323      	orrs	r3, r4
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	7b1b      	ldrb	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 8112 	bne.w	80042c8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d067      	beq.n	800417c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040ac:	687c      	ldr	r4, [r7, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	441c      	add	r4, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4423      	add	r3, r4
 80040c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c4:	461c      	mov	r4, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	88db      	ldrh	r3, [r3, #6]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29c      	uxth	r4, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d014      	beq.n	8004116 <USB_ActivateEndpoint+0x13a>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	b29c      	uxth	r4, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	441a      	add	r2, r3
 800410e:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <USB_ActivateEndpoint+0x2e4>)
 8004110:	4323      	orrs	r3, r4
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	78db      	ldrb	r3, [r3, #3]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d018      	beq.n	8004150 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004134:	b29c      	uxth	r4, r3
 8004136:	f084 0320 	eor.w	r3, r4, #32
 800413a:	b29c      	uxth	r4, r3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <USB_ActivateEndpoint+0x2e0>)
 8004148:	4323      	orrs	r3, r4
 800414a:	b29b      	uxth	r3, r3
 800414c:	8013      	strh	r3, [r2, #0]
 800414e:	e22b      	b.n	80045a8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004166:	b29c      	uxth	r4, r3
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	441a      	add	r2, r3
 8004172:	4b52      	ldr	r3, [pc, #328]	; (80042bc <USB_ActivateEndpoint+0x2e0>)
 8004174:	4323      	orrs	r3, r4
 8004176:	b29b      	uxth	r3, r3
 8004178:	8013      	strh	r3, [r2, #0]
 800417a:	e215      	b.n	80045a8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800417c:	687c      	ldr	r4, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	441c      	add	r4, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4423      	add	r3, r4
 8004190:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004194:	461c      	mov	r4, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	88db      	ldrh	r3, [r3, #6]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041a4:	687c      	ldr	r4, [r7, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	441c      	add	r4, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	4423      	add	r3, r4
 80041b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041bc:	461c      	mov	r4, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <USB_ActivateEndpoint+0x208>
 80041c6:	8823      	ldrh	r3, [r4, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8023      	strh	r3, [r4, #0]
 80041d2:	8823      	ldrh	r3, [r4, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8023      	strh	r3, [r4, #0]
 80041e2:	e02d      	b.n	8004240 <USB_ActivateEndpoint+0x264>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b3e      	cmp	r3, #62	; 0x3e
 80041ea:	d812      	bhi.n	8004212 <USB_ActivateEndpoint+0x236>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <USB_ActivateEndpoint+0x22a>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	3301      	adds	r3, #1
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	b29b      	uxth	r3, r3
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	b29b      	uxth	r3, r3
 800420e:	8023      	strh	r3, [r4, #0]
 8004210:	e016      	b.n	8004240 <USB_ActivateEndpoint+0x264>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <USB_ActivateEndpoint+0x250>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	b29b      	uxth	r3, r3
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	b29b      	uxth	r3, r3
 8004234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423c:	b29b      	uxth	r3, r3
 800423e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29c      	uxth	r4, r3
 800424e:	4623      	mov	r3, r4
 8004250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d014      	beq.n	8004282 <USB_ActivateEndpoint+0x2a6>
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	b29c      	uxth	r4, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <USB_ActivateEndpoint+0x2e8>)
 800427c:	4323      	orrs	r3, r4
 800427e:	b29b      	uxth	r3, r3
 8004280:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	b29c      	uxth	r4, r3
 800429a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800429e:	b29c      	uxth	r4, r3
 80042a0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80042a4:	b29c      	uxth	r4, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	4b02      	ldr	r3, [pc, #8]	; (80042bc <USB_ActivateEndpoint+0x2e0>)
 80042b2:	4323      	orrs	r3, r4
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]
 80042b8:	e176      	b.n	80045a8 <USB_ActivateEndpoint+0x5cc>
 80042ba:	bf00      	nop
 80042bc:	ffff8080 	.word	0xffff8080
 80042c0:	ffff80c0 	.word	0xffff80c0
 80042c4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	b29c      	uxth	r4, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	4b96      	ldr	r3, [pc, #600]	; (8004544 <USB_ActivateEndpoint+0x568>)
 80042ec:	4323      	orrs	r3, r4
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80042f2:	687c      	ldr	r4, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	441c      	add	r4, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	4423      	add	r3, r4
 8004306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800430a:	461c      	mov	r4, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	891b      	ldrh	r3, [r3, #8]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b29b      	uxth	r3, r3
 8004318:	8023      	strh	r3, [r4, #0]
 800431a:	687c      	ldr	r4, [r7, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	441c      	add	r4, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	4423      	add	r3, r4
 800432e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004332:	461c      	mov	r4, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	895b      	ldrh	r3, [r3, #10]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b29b      	uxth	r3, r3
 8004340:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 8088 	bne.w	800445c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29c      	uxth	r4, r3
 800435a:	4623      	mov	r3, r4
 800435c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d014      	beq.n	800438e <USB_ActivateEndpoint+0x3b2>
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	b29c      	uxth	r4, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <USB_ActivateEndpoint+0x56c>)
 8004388:	4323      	orrs	r3, r4
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29c      	uxth	r4, r3
 800439c:	4623      	mov	r3, r4
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d014      	beq.n	80043d0 <USB_ActivateEndpoint+0x3f4>
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	b29c      	uxth	r4, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	4b60      	ldr	r3, [pc, #384]	; (800454c <USB_ActivateEndpoint+0x570>)
 80043ca:	4323      	orrs	r3, r4
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	b29c      	uxth	r4, r3
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	4b56      	ldr	r3, [pc, #344]	; (800454c <USB_ActivateEndpoint+0x570>)
 80043f4:	4323      	orrs	r3, r4
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	b29c      	uxth	r4, r3
 8004412:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004416:	b29c      	uxth	r4, r3
 8004418:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800441c:	b29c      	uxth	r4, r3
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	441a      	add	r2, r3
 8004428:	4b49      	ldr	r3, [pc, #292]	; (8004550 <USB_ActivateEndpoint+0x574>)
 800442a:	4323      	orrs	r3, r4
 800442c:	b29b      	uxth	r3, r3
 800442e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	b29c      	uxth	r4, r3
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <USB_ActivateEndpoint+0x574>)
 8004454:	4323      	orrs	r3, r4
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]
 800445a:	e0a5      	b.n	80045a8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29c      	uxth	r4, r3
 800446a:	4623      	mov	r3, r4
 800446c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d014      	beq.n	800449e <USB_ActivateEndpoint+0x4c2>
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	b29c      	uxth	r4, r3
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <USB_ActivateEndpoint+0x56c>)
 8004498:	4323      	orrs	r3, r4
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29c      	uxth	r4, r3
 80044ac:	4623      	mov	r3, r4
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <USB_ActivateEndpoint+0x504>
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	b29c      	uxth	r4, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	4b1c      	ldr	r3, [pc, #112]	; (800454c <USB_ActivateEndpoint+0x570>)
 80044da:	4323      	orrs	r3, r4
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	b29c      	uxth	r4, r3
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <USB_ActivateEndpoint+0x56c>)
 8004504:	4323      	orrs	r3, r4
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	78db      	ldrb	r3, [r3, #3]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d020      	beq.n	8004554 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004528:	b29c      	uxth	r4, r3
 800452a:	f084 0320 	eor.w	r3, r4, #32
 800452e:	b29c      	uxth	r4, r3
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <USB_ActivateEndpoint+0x574>)
 800453c:	4323      	orrs	r3, r4
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
 8004542:	e01c      	b.n	800457e <USB_ActivateEndpoint+0x5a2>
 8004544:	ffff8180 	.word	0xffff8180
 8004548:	ffffc080 	.word	0xffffc080
 800454c:	ffff80c0 	.word	0xffff80c0
 8004550:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456a:	b29c      	uxth	r4, r3
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <USB_ActivateEndpoint+0x5d8>)
 8004578:	4323      	orrs	r3, r4
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	b29c      	uxth	r4, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <USB_ActivateEndpoint+0x5d8>)
 80045a2:	4323      	orrs	r3, r4
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc90      	pop	{r4, r7}
 80045b2:	4770      	bx	lr
 80045b4:	ffff8080 	.word	0xffff8080

080045b8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045b8:	b490      	push	{r4, r7}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	7b1b      	ldrb	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d171      	bne.n	80046ae <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d036      	beq.n	8004640 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29c      	uxth	r4, r3
 80045e0:	4623      	mov	r3, r4
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <USB_DeactivateEndpoint+0x5c>
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	b29c      	uxth	r4, r3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <USB_DeactivateEndpoint+0x204>)
 800460e:	4323      	orrs	r3, r4
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462a:	b29c      	uxth	r4, r3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <USB_DeactivateEndpoint+0x208>)
 8004638:	4323      	orrs	r3, r4
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
 800463e:	e144      	b.n	80048ca <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29c      	uxth	r4, r3
 800464e:	4623      	mov	r3, r4
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d014      	beq.n	8004682 <USB_DeactivateEndpoint+0xca>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	b29c      	uxth	r4, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	4b52      	ldr	r3, [pc, #328]	; (80047c4 <USB_DeactivateEndpoint+0x20c>)
 800467c:	4323      	orrs	r3, r4
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	b29c      	uxth	r4, r3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <USB_DeactivateEndpoint+0x208>)
 80046a6:	4323      	orrs	r3, r4
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	8013      	strh	r3, [r2, #0]
 80046ac:	e10d      	b.n	80048ca <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8088 	bne.w	80047c8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29c      	uxth	r4, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d014      	beq.n	80046fa <USB_DeactivateEndpoint+0x142>
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	b29c      	uxth	r4, r3
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <USB_DeactivateEndpoint+0x20c>)
 80046f4:	4323      	orrs	r3, r4
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29c      	uxth	r4, r3
 8004708:	4623      	mov	r3, r4
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <USB_DeactivateEndpoint+0x184>
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004728:	b29c      	uxth	r4, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <USB_DeactivateEndpoint+0x204>)
 8004736:	4323      	orrs	r3, r4
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	b29c      	uxth	r4, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <USB_DeactivateEndpoint+0x204>)
 8004760:	4323      	orrs	r3, r4
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477c:	b29c      	uxth	r4, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <USB_DeactivateEndpoint+0x208>)
 800478a:	4323      	orrs	r3, r4
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a6:	b29c      	uxth	r4, r3
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <USB_DeactivateEndpoint+0x208>)
 80047b4:	4323      	orrs	r3, r4
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
 80047ba:	e086      	b.n	80048ca <USB_DeactivateEndpoint+0x312>
 80047bc:	ffff80c0 	.word	0xffff80c0
 80047c0:	ffff8080 	.word	0xffff8080
 80047c4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29c      	uxth	r4, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d014      	beq.n	800480a <USB_DeactivateEndpoint+0x252>
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	b29c      	uxth	r4, r3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	4b35      	ldr	r3, [pc, #212]	; (80048d8 <USB_DeactivateEndpoint+0x320>)
 8004804:	4323      	orrs	r3, r4
 8004806:	b29b      	uxth	r3, r3
 8004808:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29c      	uxth	r4, r3
 8004818:	4623      	mov	r3, r4
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <USB_DeactivateEndpoint+0x294>
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	b29c      	uxth	r4, r3
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <USB_DeactivateEndpoint+0x324>)
 8004846:	4323      	orrs	r3, r4
 8004848:	b29b      	uxth	r3, r3
 800484a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	b29c      	uxth	r4, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <USB_DeactivateEndpoint+0x320>)
 8004870:	4323      	orrs	r3, r4
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488c:	b29c      	uxth	r4, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <USB_DeactivateEndpoint+0x328>)
 800489a:	4323      	orrs	r3, r4
 800489c:	b29b      	uxth	r3, r3
 800489e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	b29c      	uxth	r4, r3
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <USB_DeactivateEndpoint+0x328>)
 80048c4:	4323      	orrs	r3, r4
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc90      	pop	{r4, r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	ffffc080 	.word	0xffffc080
 80048dc:	ffff80c0 	.word	0xffff80c0
 80048e0:	ffff8080 	.word	0xffff8080

080048e4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b08d      	sub	sp, #52	; 0x34
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	f040 8160 	bne.w	8004bb8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d909      	bls.n	8004918 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	619a      	str	r2, [r3, #24]
 8004916:	e005      	b.n	8004924 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	7b1b      	ldrb	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d119      	bne.n	8004960 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6959      	ldr	r1, [r3, #20]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	88da      	ldrh	r2, [r3, #6]
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	b29b      	uxth	r3, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fba2 	bl	8005082 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800493e:	687c      	ldr	r4, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	441c      	add	r4, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4423      	add	r3, r4
 8004952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004956:	461c      	mov	r4, r3
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	b29b      	uxth	r3, r3
 800495c:	8023      	strh	r3, [r4, #0]
 800495e:	e10f      	b.n	8004b80 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d065      	beq.n	8004a42 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004976:	687c      	ldr	r4, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	785b      	ldrb	r3, [r3, #1]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d148      	bne.n	8004a12 <USB_EPStartXfer+0x12e>
 8004980:	687c      	ldr	r4, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	441c      	add	r4, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4423      	add	r3, r4
 8004994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004998:	461c      	mov	r4, r3
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <USB_EPStartXfer+0xda>
 80049a0:	8823      	ldrh	r3, [r4, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8023      	strh	r3, [r4, #0]
 80049ac:	8823      	ldrh	r3, [r4, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8023      	strh	r3, [r4, #0]
 80049bc:	e03d      	b.n	8004a3a <USB_EPStartXfer+0x156>
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2b3e      	cmp	r3, #62	; 0x3e
 80049c2:	d810      	bhi.n	80049e6 <USB_EPStartXfer+0x102>
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <USB_EPStartXfer+0xf6>
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	3301      	adds	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	b29b      	uxth	r3, r3
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8023      	strh	r3, [r4, #0]
 80049e4:	e029      	b.n	8004a3a <USB_EPStartXfer+0x156>
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <USB_EPStartXfer+0x118>
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	3b01      	subs	r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8023      	strh	r3, [r4, #0]
 8004a10:	e013      	b.n	8004a3a <USB_EPStartXfer+0x156>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10f      	bne.n	8004a3a <USB_EPStartXfer+0x156>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	441c      	add	r4, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	4423      	add	r3, r4
 8004a2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	895b      	ldrh	r3, [r3, #10]
 8004a3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a40:	e063      	b.n	8004b0a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d148      	bne.n	8004adc <USB_EPStartXfer+0x1f8>
 8004a4a:	687c      	ldr	r4, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	441c      	add	r4, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	4423      	add	r3, r4
 8004a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a62:	461c      	mov	r4, r3
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10e      	bne.n	8004a88 <USB_EPStartXfer+0x1a4>
 8004a6a:	8823      	ldrh	r3, [r4, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	8023      	strh	r3, [r4, #0]
 8004a76:	8823      	ldrh	r3, [r4, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8023      	strh	r3, [r4, #0]
 8004a86:	e03d      	b.n	8004b04 <USB_EPStartXfer+0x220>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a8c:	d810      	bhi.n	8004ab0 <USB_EPStartXfer+0x1cc>
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <USB_EPStartXfer+0x1c0>
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	623b      	str	r3, [r7, #32]
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	029b      	lsls	r3, r3, #10
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8023      	strh	r3, [r4, #0]
 8004aae:	e029      	b.n	8004b04 <USB_EPStartXfer+0x220>
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <USB_EPStartXfer+0x1e2>
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8023      	strh	r3, [r4, #0]
 8004ada:	e013      	b.n	8004b04 <USB_EPStartXfer+0x220>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d10f      	bne.n	8004b04 <USB_EPStartXfer+0x220>
 8004ae4:	687c      	ldr	r4, [r7, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	441c      	add	r4, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4423      	add	r3, r4
 8004af8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004afc:	461c      	mov	r4, r3
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	891b      	ldrh	r3, [r3, #8]
 8004b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6959      	ldr	r1, [r3, #20]
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fab4 	bl	8005082 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d115      	bne.n	8004b4e <USB_EPStartXfer+0x26a>
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	b29c      	uxth	r4, r3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	4b9a      	ldr	r3, [pc, #616]	; (8004db0 <USB_EPStartXfer+0x4cc>)
 8004b46:	4323      	orrs	r3, r4
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
 8004b4c:	e018      	b.n	8004b80 <USB_EPStartXfer+0x29c>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d114      	bne.n	8004b80 <USB_EPStartXfer+0x29c>
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	b29c      	uxth	r4, r3
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	4b8e      	ldr	r3, [pc, #568]	; (8004db4 <USB_EPStartXfer+0x4d0>)
 8004b7a:	4323      	orrs	r3, r4
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b96:	b29c      	uxth	r4, r3
 8004b98:	f084 0310 	eor.w	r3, r4, #16
 8004b9c:	b29c      	uxth	r4, r3
 8004b9e:	f084 0320 	eor.w	r3, r4, #32
 8004ba2:	b29c      	uxth	r4, r3
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	4b82      	ldr	r3, [pc, #520]	; (8004db8 <USB_EPStartXfer+0x4d4>)
 8004bb0:	4323      	orrs	r3, r4
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
 8004bb6:	e146      	b.n	8004e46 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d909      	bls.n	8004bd8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	619a      	str	r2, [r3, #24]
 8004bd6:	e005      	b.n	8004be4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	7b1b      	ldrb	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d148      	bne.n	8004c7e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004bec:	687c      	ldr	r4, [r7, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	441c      	add	r4, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	4423      	add	r3, r4
 8004c00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c04:	461c      	mov	r4, r3
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10e      	bne.n	8004c2a <USB_EPStartXfer+0x346>
 8004c0c:	8823      	ldrh	r3, [r4, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8023      	strh	r3, [r4, #0]
 8004c18:	8823      	ldrh	r3, [r4, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8023      	strh	r3, [r4, #0]
 8004c28:	e0f2      	b.n	8004e10 <USB_EPStartXfer+0x52c>
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c2e:	d810      	bhi.n	8004c52 <USB_EPStartXfer+0x36e>
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <USB_EPStartXfer+0x362>
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8023      	strh	r3, [r4, #0]
 8004c50:	e0de      	b.n	8004e10 <USB_EPStartXfer+0x52c>
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <USB_EPStartXfer+0x384>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8023      	strh	r3, [r4, #0]
 8004c7c:	e0c8      	b.n	8004e10 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d148      	bne.n	8004d18 <USB_EPStartXfer+0x434>
 8004c86:	687c      	ldr	r4, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	441c      	add	r4, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	4423      	add	r3, r4
 8004c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10e      	bne.n	8004cc4 <USB_EPStartXfer+0x3e0>
 8004ca6:	8823      	ldrh	r3, [r4, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	8023      	strh	r3, [r4, #0]
 8004cb2:	8823      	ldrh	r3, [r4, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8023      	strh	r3, [r4, #0]
 8004cc2:	e03d      	b.n	8004d40 <USB_EPStartXfer+0x45c>
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cc8:	d810      	bhi.n	8004cec <USB_EPStartXfer+0x408>
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <USB_EPStartXfer+0x3fc>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8023      	strh	r3, [r4, #0]
 8004cea:	e029      	b.n	8004d40 <USB_EPStartXfer+0x45c>
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <USB_EPStartXfer+0x41e>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	029b      	lsls	r3, r3, #10
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	8023      	strh	r3, [r4, #0]
 8004d16:	e013      	b.n	8004d40 <USB_EPStartXfer+0x45c>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10f      	bne.n	8004d40 <USB_EPStartXfer+0x45c>
 8004d20:	687c      	ldr	r4, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	441c      	add	r4, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	4423      	add	r3, r4
 8004d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d38:	461c      	mov	r4, r3
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	8023      	strh	r3, [r4, #0]
 8004d40:	687c      	ldr	r4, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d14e      	bne.n	8004de8 <USB_EPStartXfer+0x504>
 8004d4a:	687c      	ldr	r4, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	441c      	add	r4, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4423      	add	r3, r4
 8004d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d62:	461c      	mov	r4, r3
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10e      	bne.n	8004d88 <USB_EPStartXfer+0x4a4>
 8004d6a:	8823      	ldrh	r3, [r4, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8023      	strh	r3, [r4, #0]
 8004d76:	8823      	ldrh	r3, [r4, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8023      	strh	r3, [r4, #0]
 8004d86:	e043      	b.n	8004e10 <USB_EPStartXfer+0x52c>
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d8c:	d816      	bhi.n	8004dbc <USB_EPStartXfer+0x4d8>
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <USB_EPStartXfer+0x4c0>
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3301      	adds	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	8023      	strh	r3, [r4, #0]
 8004dae:	e02f      	b.n	8004e10 <USB_EPStartXfer+0x52c>
 8004db0:	ffff80c0 	.word	0xffff80c0
 8004db4:	ffffc080 	.word	0xffffc080
 8004db8:	ffff8080 	.word	0xffff8080
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <USB_EPStartXfer+0x4ee>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	029b      	lsls	r3, r3, #10
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8023      	strh	r3, [r4, #0]
 8004de6:	e013      	b.n	8004e10 <USB_EPStartXfer+0x52c>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10f      	bne.n	8004e10 <USB_EPStartXfer+0x52c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	441c      	add	r4, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4423      	add	r3, r4
 8004e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	b29c      	uxth	r4, r3
 8004e28:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e2c:	b29c      	uxth	r4, r3
 8004e2e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004e32:	b29c      	uxth	r4, r3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <USB_EPStartXfer+0x56c>)
 8004e40:	4323      	orrs	r3, r4
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3734      	adds	r7, #52	; 0x34
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}
 8004e50:	ffff8080 	.word	0xffff8080

08004e54 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e54:	b490      	push	{r4, r7}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7c:	b29c      	uxth	r4, r3
 8004e7e:	f084 0310 	eor.w	r3, r4, #16
 8004e82:	b29c      	uxth	r4, r3
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <USB_EPSetStall+0x80>)
 8004e90:	4323      	orrs	r3, r4
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e017      	b.n	8004ec8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	b29c      	uxth	r4, r3
 8004eb0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004eb4:	b29c      	uxth	r4, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <USB_EPSetStall+0x80>)
 8004ec2:	4323      	orrs	r3, r4
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc90      	pop	{r4, r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	ffff8080 	.word	0xffff8080

08004ed8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ed8:	b490      	push	{r4, r7}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	7b1b      	ldrb	r3, [r3, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d17d      	bne.n	8004fe6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03d      	beq.n	8004f6e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29c      	uxth	r4, r3
 8004f00:	4623      	mov	r3, r4
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <USB_EPClearStall+0x5c>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	b29c      	uxth	r4, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <USB_EPClearStall+0x11c>)
 8004f2e:	4323      	orrs	r3, r4
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	78db      	ldrb	r3, [r3, #3]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d054      	beq.n	8004fe6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f52:	b29c      	uxth	r4, r3
 8004f54:	f084 0320 	eor.w	r3, r4, #32
 8004f58:	b29c      	uxth	r4, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <USB_EPClearStall+0x120>)
 8004f66:	4323      	orrs	r3, r4
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]
 8004f6c:	e03b      	b.n	8004fe6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29c      	uxth	r4, r3
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d014      	beq.n	8004fb0 <USB_EPClearStall+0xd8>
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	b29c      	uxth	r4, r3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <USB_EPClearStall+0x124>)
 8004faa:	4323      	orrs	r3, r4
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	b29c      	uxth	r4, r3
 8004fc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fcc:	b29c      	uxth	r4, r3
 8004fce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <USB_EPClearStall+0x120>)
 8004fe0:	4323      	orrs	r3, r4
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc90      	pop	{r4, r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	ffff80c0 	.word	0xffff80c0
 8004ff8:	ffff8080 	.word	0xffff8080
 8004ffc:	ffffc080 	.word	0xffffc080

08005000 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800505c:	b29b      	uxth	r3, r3
 800505e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005082:	b480      	push	{r7}
 8005084:	b08d      	sub	sp, #52	; 0x34
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	4611      	mov	r1, r2
 800508e:	461a      	mov	r2, r3
 8005090:	460b      	mov	r3, r1
 8005092:	80fb      	strh	r3, [r7, #6]
 8005094:	4613      	mov	r3, r2
 8005096:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005098:	88bb      	ldrh	r3, [r7, #4]
 800509a:	3301      	adds	r3, #1
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	005a      	lsls	r2, r3, #1
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ba:	e01e      	b.n	80050fa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	3301      	adds	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	3302      	adds	r3, #2
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	3302      	adds	r3, #2
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	3301      	adds	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	3b01      	subs	r3, #1
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1dd      	bne.n	80050bc <USB_WritePMA+0x3a>
  }
}
 8005100:	bf00      	nop
 8005102:	3734      	adds	r7, #52	; 0x34
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800510a:	b480      	push	{r7}
 800510c:	b08b      	sub	sp, #44	; 0x2c
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	4611      	mov	r1, r2
 8005116:	461a      	mov	r2, r3
 8005118:	460b      	mov	r3, r1
 800511a:	80fb      	strh	r3, [r7, #6]
 800511c:	4613      	mov	r3, r2
 800511e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005120:	88bb      	ldrh	r3, [r7, #4]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	005a      	lsls	r2, r3, #1
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	e01b      	b.n	800517c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	3302      	adds	r3, #2
 8005150:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3301      	adds	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	b2da      	uxtb	r2, r3
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	3302      	adds	r3, #2
 8005174:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	3b01      	subs	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e0      	bne.n	8005144 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005182:	88bb      	ldrh	r3, [r7, #4]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	701a      	strb	r2, [r3, #0]
  }
}
 800519e:	bf00      	nop
 80051a0:	372c      	adds	r7, #44	; 0x2c
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	7c1b      	ldrb	r3, [r3, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d115      	bne.n	80051ec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c4:	2202      	movs	r2, #2
 80051c6:	2181      	movs	r1, #129	; 0x81
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f002 fbe4 	bl	8007996 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d8:	2202      	movs	r2, #2
 80051da:	2101      	movs	r1, #1
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f002 fbda 	bl	8007996 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80051ea:	e012      	b.n	8005212 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051ec:	2340      	movs	r3, #64	; 0x40
 80051ee:	2202      	movs	r2, #2
 80051f0:	2181      	movs	r1, #129	; 0x81
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f002 fbcf 	bl	8007996 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051fe:	2340      	movs	r3, #64	; 0x40
 8005200:	2202      	movs	r2, #2
 8005202:	2101      	movs	r1, #1
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f002 fbc6 	bl	8007996 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005212:	2308      	movs	r3, #8
 8005214:	2203      	movs	r2, #3
 8005216:	2182      	movs	r1, #130	; 0x82
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f002 fbbc 	bl	8007996 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005224:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005228:	f002 fcd6 	bl	8007bd8 <USBD_static_malloc>
 800522c:	4602      	mov	r2, r0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e026      	b.n	8005292 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7c1b      	ldrb	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005278:	2101      	movs	r1, #1
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f002 fc75 	bl	8007b6a <USBD_LL_PrepareReceive>
 8005280:	e007      	b.n	8005292 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005288:	2340      	movs	r3, #64	; 0x40
 800528a:	2101      	movs	r1, #1
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f002 fc6c 	bl	8007b6a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052ac:	2181      	movs	r1, #129	; 0x81
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f002 fb97 	bl	80079e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052ba:	2101      	movs	r1, #1
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f002 fb90 	bl	80079e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052ca:	2182      	movs	r1, #130	; 0x82
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f002 fb88 	bl	80079e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 fc7c 	bl	8007bf0 <USBD_static_free>
    pdev->pClassData = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005330:	2b00      	cmp	r3, #0
 8005332:	d039      	beq.n	80053a8 <USBD_CDC_Setup+0x9e>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d17c      	bne.n	8005432 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	88db      	ldrh	r3, [r3, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d029      	beq.n	8005394 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b25b      	sxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	da11      	bge.n	800536e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005356:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	88d2      	ldrh	r2, [r2, #6]
 800535c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	88db      	ldrh	r3, [r3, #6]
 8005364:	461a      	mov	r2, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 f9f6 	bl	8006758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800536c:	e068      	b.n	8005440 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	785a      	ldrb	r2, [r3, #1]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	88db      	ldrh	r3, [r3, #6]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005384:	6939      	ldr	r1, [r7, #16]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	88db      	ldrh	r3, [r3, #6]
 800538a:	461a      	mov	r2, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 fa11 	bl	80067b4 <USBD_CtlPrepareRx>
      break;
 8005392:	e055      	b.n	8005440 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	7850      	ldrb	r0, [r2, #1]
 80053a0:	2200      	movs	r2, #0
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	4798      	blx	r3
      break;
 80053a6:	e04b      	b.n	8005440 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b0a      	cmp	r3, #10
 80053ae:	d017      	beq.n	80053e0 <USBD_CDC_Setup+0xd6>
 80053b0:	2b0b      	cmp	r3, #11
 80053b2:	d029      	beq.n	8005408 <USBD_CDC_Setup+0xfe>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d133      	bne.n	8005420 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d107      	bne.n	80053d2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	2202      	movs	r2, #2
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f9c4 	bl	8006758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053d0:	e02e      	b.n	8005430 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 f955 	bl	8006684 <USBD_CtlError>
            ret = USBD_FAIL;
 80053da:	2302      	movs	r3, #2
 80053dc:	75fb      	strb	r3, [r7, #23]
          break;
 80053de:	e027      	b.n	8005430 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d107      	bne.n	80053fa <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80053ea:	f107 030f 	add.w	r3, r7, #15
 80053ee:	2201      	movs	r2, #1
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 f9b0 	bl	8006758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053f8:	e01a      	b.n	8005430 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 f941 	bl	8006684 <USBD_CtlError>
            ret = USBD_FAIL;
 8005402:	2302      	movs	r3, #2
 8005404:	75fb      	strb	r3, [r7, #23]
          break;
 8005406:	e013      	b.n	8005430 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800540e:	2b03      	cmp	r3, #3
 8005410:	d00d      	beq.n	800542e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 f935 	bl	8006684 <USBD_CtlError>
            ret = USBD_FAIL;
 800541a:	2302      	movs	r3, #2
 800541c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800541e:	e006      	b.n	800542e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 f92e 	bl	8006684 <USBD_CtlError>
          ret = USBD_FAIL;
 8005428:	2302      	movs	r3, #2
 800542a:	75fb      	strb	r3, [r7, #23]
          break;
 800542c:	e000      	b.n	8005430 <USBD_CDC_Setup+0x126>
          break;
 800542e:	bf00      	nop
      }
      break;
 8005430:	e006      	b.n	8005440 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 f925 	bl	8006684 <USBD_CtlError>
      ret = USBD_FAIL;
 800543a:	2302      	movs	r3, #2
 800543c:	75fb      	strb	r3, [r7, #23]
      break;
 800543e:	bf00      	nop
  }

  return ret;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005464:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d037      	beq.n	80054e0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	331c      	adds	r3, #28
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d026      	beq.n	80054d4 <USBD_CDC_DataIn+0x8a>
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	331c      	adds	r3, #28
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	0152      	lsls	r2, r2, #5
 800549e:	440a      	add	r2, r1
 80054a0:	3238      	adds	r2, #56	; 0x38
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80054a8:	fb02 f201 	mul.w	r2, r2, r1
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d110      	bne.n	80054d4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	331c      	adds	r3, #28
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054c6:	78f9      	ldrb	r1, [r7, #3]
 80054c8:	2300      	movs	r3, #0
 80054ca:	2200      	movs	r2, #0
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 fb29 	bl	8007b24 <USBD_LL_Transmit>
 80054d2:	e003      	b.n	80054dc <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fb54 	bl	8007bb0 <USBD_LL_GetRxDataSize>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800552e:	4611      	mov	r1, r2
 8005530:	4798      	blx	r3

    return USBD_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e000      	b.n	8005538 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005536:	2302      	movs	r3, #2
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005556:	2b00      	cmp	r3, #0
 8005558:	d015      	beq.n	8005586 <USBD_CDC_EP0_RxReady+0x46>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005560:	2bff      	cmp	r3, #255	; 0xff
 8005562:	d010      	beq.n	8005586 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005572:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800557a:	b292      	uxth	r2, r2
 800557c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2243      	movs	r2, #67	; 0x43
 800559c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800559e:	4b03      	ldr	r3, [pc, #12]	; (80055ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000090 	.word	0x20000090

080055b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2243      	movs	r2, #67	; 0x43
 80055bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055be:	4b03      	ldr	r3, [pc, #12]	; (80055cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	2000004c 	.word	0x2000004c

080055d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2243      	movs	r2, #67	; 0x43
 80055dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80055de:	4b03      	ldr	r3, [pc, #12]	; (80055ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	200000d4 	.word	0x200000d4

080055f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	220a      	movs	r2, #10
 80055fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000008 	.word	0x20000008

08005610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800561a:	2302      	movs	r3, #2
 800561c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005650:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800565a:	88fa      	ldrh	r2, [r7, #6]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01c      	beq.n	80056e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d115      	bne.n	80056e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2181      	movs	r1, #129	; 0x81
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f002 fa22 	bl	8007b24 <USBD_LL_Transmit>

      return USBD_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e002      	b.n	80056ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d017      	beq.n	800573c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7c1b      	ldrb	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800571a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800571e:	2101      	movs	r1, #1
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f002 fa22 	bl	8007b6a <USBD_LL_PrepareReceive>
 8005726:	e007      	b.n	8005738 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800572e:	2340      	movs	r3, #64	; 0x40
 8005730:	2101      	movs	r1, #1
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 fa19 	bl	8007b6a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	4613      	mov	r3, r2
 8005752:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800575a:	2302      	movs	r3, #2
 800575c:	e01a      	b.n	8005794 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	79fa      	ldrb	r2, [r7, #7]
 800578a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f002 f88d 	bl	80078ac <USBD_LL_Init>

  return USBD_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e001      	b.n	80057c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057be:	2302      	movs	r3, #2
 80057c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f002 f8c2 	bl	8007960 <USBD_LL_Start>

  return USBD_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005806:	2302      	movs	r3, #2
 8005808:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	4611      	mov	r1, r2
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	4611      	mov	r1, r2
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	4798      	blx	r3

  return USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fecb 	bl	800660c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005884:	461a      	mov	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2b01      	cmp	r3, #1
 8005898:	d00c      	beq.n	80058b4 <USBD_LL_SetupStage+0x56>
 800589a:	2b01      	cmp	r3, #1
 800589c:	d302      	bcc.n	80058a4 <USBD_LL_SetupStage+0x46>
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d010      	beq.n	80058c4 <USBD_LL_SetupStage+0x66>
 80058a2:	e017      	b.n	80058d4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9cb 	bl	8005c48 <USBD_StdDevReq>
      break;
 80058b2:	e01a      	b.n	80058ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa2d 	bl	8005d1c <USBD_StdItfReq>
      break;
 80058c2:	e012      	b.n	80058ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fa6b 	bl	8005da8 <USBD_StdEPReq>
      break;
 80058d2:	e00a      	b.n	80058ea <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f002 f89c 	bl	8007a20 <USBD_LL_StallEP>
      break;
 80058e8:	bf00      	nop
  }

  return USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	460b      	mov	r3, r1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d14b      	bne.n	80059a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800590e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005916:	2b03      	cmp	r3, #3
 8005918:	d134      	bne.n	8005984 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	d919      	bls.n	800595a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800593c:	429a      	cmp	r2, r3
 800593e:	d203      	bcs.n	8005948 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005944:	b29b      	uxth	r3, r3
 8005946:	e002      	b.n	800594e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800594c:	b29b      	uxth	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 ff4c 	bl	80067f0 <USBD_CtlContinueRx>
 8005958:	e038      	b.n	80059cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800596c:	2b03      	cmp	r3, #3
 800596e:	d105      	bne.n	800597c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 ff49 	bl	8006814 <USBD_CtlSendStatus>
 8005982:	e023      	b.n	80059cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800598a:	2b05      	cmp	r3, #5
 800598c:	d11e      	bne.n	80059cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005996:	2100      	movs	r1, #0
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f002 f841 	bl	8007a20 <USBD_LL_StallEP>
 800599e:	e015      	b.n	80059cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d108      	bne.n	80059c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	7afa      	ldrb	r2, [r7, #11]
 80059c0:	4611      	mov	r1, r2
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	4798      	blx	r3
 80059c6:	e001      	b.n	80059cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80059c8:	2302      	movs	r3, #2
 80059ca:	e000      	b.n	80059ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	460b      	mov	r3, r1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d17f      	bne.n	8005aea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3314      	adds	r3, #20
 80059ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d15c      	bne.n	8005ab4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d915      	bls.n	8005a32 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 feb6 	bl	8006790 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a24:	2300      	movs	r3, #0
 8005a26:	2200      	movs	r2, #0
 8005a28:	2100      	movs	r1, #0
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f002 f89d 	bl	8007b6a <USBD_LL_PrepareReceive>
 8005a30:	e04e      	b.n	8005ad0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	6912      	ldr	r2, [r2, #16]
 8005a3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a3e:	fb02 f201 	mul.w	r2, r2, r1
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11c      	bne.n	8005a82 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d316      	bcc.n	8005a82 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d20f      	bcs.n	8005a82 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2100      	movs	r1, #0
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fe92 	bl	8006790 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f002 f875 	bl	8007b6a <USBD_LL_PrepareReceive>
 8005a80:	e026      	b.n	8005ad0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d105      	bne.n	8005aa4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005aa4:	2180      	movs	r1, #128	; 0x80
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 ffba 	bl	8007a20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fec4 	bl	800683a <USBD_CtlReceiveStatus>
 8005ab2:	e00d      	b.n	8005ad0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d004      	beq.n	8005ac8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f001 ffa8 	bl	8007a20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d11d      	bne.n	8005b16 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff fe83 	bl	80057e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ae8:	e015      	b.n	8005b16 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00d      	beq.n	8005b12 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d108      	bne.n	8005b12 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	7afa      	ldrb	r2, [r7, #11]
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	4798      	blx	r3
 8005b10:	e001      	b.n	8005b16 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b12:	2302      	movs	r3, #2
 8005b14:	e000      	b.n	8005b18 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 ff31 	bl	8007996 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2240      	movs	r2, #64	; 0x40
 8005b40:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	2200      	movs	r2, #0
 8005b48:	2180      	movs	r1, #128	; 0x80
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 ff23 	bl	8007996 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2240      	movs	r2, #64	; 0x40
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	4611      	mov	r1, r2
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
  }

  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d105      	bne.n	8005c06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d10b      	bne.n	8005c3c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d004      	beq.n	8005c6c <USBD_StdDevReq+0x24>
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d002      	beq.n	8005c6c <USBD_StdDevReq+0x24>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <USBD_StdDevReq+0x34>
 8005c6a:	e04c      	b.n	8005d06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
      break;
 8005c7a:	e049      	b.n	8005d10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b09      	cmp	r3, #9
 8005c82:	d83a      	bhi.n	8005cfa <USBD_StdDevReq+0xb2>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <USBD_StdDevReq+0x44>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cdd 	.word	0x08005cdd
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cfb 	.word	0x08005cfb
 8005c98:	08005ce7 	.word	0x08005ce7
 8005c9c:	08005cfb 	.word	0x08005cfb
 8005ca0:	08005cbf 	.word	0x08005cbf
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cfb 	.word	0x08005cfb
 8005cac:	08005cd3 	.word	0x08005cd3
 8005cb0:	08005cc9 	.word	0x08005cc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9d4 	bl	8006064 <USBD_GetDescriptor>
          break;
 8005cbc:	e022      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb37 	bl	8006334 <USBD_SetAddress>
          break;
 8005cc6:	e01d      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fb74 	bl	80063b8 <USBD_SetConfig>
          break;
 8005cd0:	e018      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fbfd 	bl	80064d4 <USBD_GetConfig>
          break;
 8005cda:	e013      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fc2c 	bl	800653c <USBD_GetStatus>
          break;
 8005ce4:	e00e      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc5a 	bl	80065a2 <USBD_SetFeature>
          break;
 8005cee:	e009      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fc69 	bl	80065ca <USBD_ClrFeature>
          break;
 8005cf8:	e004      	b.n	8005d04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fcc1 	bl	8006684 <USBD_CtlError>
          break;
 8005d02:	bf00      	nop
      }
      break;
 8005d04:	e004      	b.n	8005d10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fcbb 	bl	8006684 <USBD_CtlError>
      break;
 8005d0e:	bf00      	nop
  }

  return ret;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop

08005d1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d003      	beq.n	8005d3e <USBD_StdItfReq+0x22>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d001      	beq.n	8005d3e <USBD_StdItfReq+0x22>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d12a      	bne.n	8005d94 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	3b01      	subs	r3, #1
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d81d      	bhi.n	8005d86 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	889b      	ldrh	r3, [r3, #4]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d813      	bhi.n	8005d7c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	88db      	ldrh	r3, [r3, #6]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d110      	bne.n	8005d90 <USBD_StdItfReq+0x74>
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10d      	bne.n	8005d90 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fd4d 	bl	8006814 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d7a:	e009      	b.n	8005d90 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fc80 	bl	8006684 <USBD_CtlError>
          break;
 8005d84:	e004      	b.n	8005d90 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fc7b 	bl	8006684 <USBD_CtlError>
          break;
 8005d8e:	e000      	b.n	8005d92 <USBD_StdItfReq+0x76>
          break;
 8005d90:	bf00      	nop
      }
      break;
 8005d92:	e004      	b.n	8005d9e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fc74 	bl	8006684 <USBD_CtlError>
      break;
 8005d9c:	bf00      	nop
  }

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	889b      	ldrh	r3, [r3, #4]
 8005dba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d004      	beq.n	8005dd2 <USBD_StdEPReq+0x2a>
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d002      	beq.n	8005dd2 <USBD_StdEPReq+0x2a>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <USBD_StdEPReq+0x3a>
 8005dd0:	e13d      	b.n	800604e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
      break;
 8005de0:	e13a      	b.n	8006058 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d10a      	bne.n	8005e04 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	e12a      	b.n	800605a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d03e      	beq.n	8005e8a <USBD_StdEPReq+0xe2>
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d002      	beq.n	8005e16 <USBD_StdEPReq+0x6e>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d070      	beq.n	8005ef6 <USBD_StdEPReq+0x14e>
 8005e14:	e115      	b.n	8006042 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d002      	beq.n	8005e26 <USBD_StdEPReq+0x7e>
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d015      	beq.n	8005e50 <USBD_StdEPReq+0xa8>
 8005e24:	e02b      	b.n	8005e7e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00c      	beq.n	8005e46 <USBD_StdEPReq+0x9e>
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d009      	beq.n	8005e46 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fdf2 	bl	8007a20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 fdee 	bl	8007a20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e44:	e020      	b.n	8005e88 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fc1b 	bl	8006684 <USBD_CtlError>
              break;
 8005e4e:	e01b      	b.n	8005e88 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	885b      	ldrh	r3, [r3, #2]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10e      	bne.n	8005e76 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <USBD_StdEPReq+0xce>
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	2b80      	cmp	r3, #128	; 0x80
 8005e62:	d008      	beq.n	8005e76 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	88db      	ldrh	r3, [r3, #6]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 fdd5 	bl	8007a20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fccc 	bl	8006814 <USBD_CtlSendStatus>

              break;
 8005e7c:	e004      	b.n	8005e88 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fbff 	bl	8006684 <USBD_CtlError>
              break;
 8005e86:	bf00      	nop
          }
          break;
 8005e88:	e0e0      	b.n	800604c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d002      	beq.n	8005e9a <USBD_StdEPReq+0xf2>
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d015      	beq.n	8005ec4 <USBD_StdEPReq+0x11c>
 8005e98:	e026      	b.n	8005ee8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e9a:	7bbb      	ldrb	r3, [r7, #14]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <USBD_StdEPReq+0x112>
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	2b80      	cmp	r3, #128	; 0x80
 8005ea4:	d009      	beq.n	8005eba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 fdb8 	bl	8007a20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fdb4 	bl	8007a20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eb8:	e01c      	b.n	8005ef4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fbe1 	bl	8006684 <USBD_CtlError>
              break;
 8005ec2:	e017      	b.n	8005ef4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	885b      	ldrh	r3, [r3, #2]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d112      	bne.n	8005ef2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fdbf 	bl	8007a5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc97 	bl	8006814 <USBD_CtlSendStatus>
              }
              break;
 8005ee6:	e004      	b.n	8005ef2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fbca 	bl	8006684 <USBD_CtlError>
              break;
 8005ef0:	e000      	b.n	8005ef4 <USBD_StdEPReq+0x14c>
              break;
 8005ef2:	bf00      	nop
          }
          break;
 8005ef4:	e0aa      	b.n	800604c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d002      	beq.n	8005f06 <USBD_StdEPReq+0x15e>
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d032      	beq.n	8005f6a <USBD_StdEPReq+0x1c2>
 8005f04:	e097      	b.n	8006036 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <USBD_StdEPReq+0x174>
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d004      	beq.n	8005f1c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fbb5 	bl	8006684 <USBD_CtlError>
                break;
 8005f1a:	e091      	b.n	8006040 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	da0b      	bge.n	8005f3c <USBD_StdEPReq+0x194>
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	3310      	adds	r3, #16
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	3304      	adds	r3, #4
 8005f3a:	e00b      	b.n	8005f54 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fbf8 	bl	8006758 <USBD_CtlSendData>
              break;
 8005f68:	e06a      	b.n	8006040 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da11      	bge.n	8005f96 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	3318      	adds	r3, #24
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d117      	bne.n	8005fbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fb78 	bl	8006684 <USBD_CtlError>
                  break;
 8005f94:	e054      	b.n	8006040 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb65 	bl	8006684 <USBD_CtlError>
                  break;
 8005fba:	e041      	b.n	8006040 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da0b      	bge.n	8005fdc <USBD_StdEPReq+0x234>
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	3310      	adds	r3, #16
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3304      	adds	r3, #4
 8005fda:	e00b      	b.n	8005ff4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <USBD_StdEPReq+0x25a>
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d103      	bne.n	800600a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e00e      	b.n	8006028 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fd44 	bl	8007a9c <USBD_LL_IsStallEP>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e002      	b.n	8006028 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2202      	movs	r2, #2
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fb92 	bl	8006758 <USBD_CtlSendData>
              break;
 8006034:	e004      	b.n	8006040 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb23 	bl	8006684 <USBD_CtlError>
              break;
 800603e:	bf00      	nop
          }
          break;
 8006040:	e004      	b.n	800604c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb1d 	bl	8006684 <USBD_CtlError>
          break;
 800604a:	bf00      	nop
      }
      break;
 800604c:	e004      	b.n	8006058 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fb17 	bl	8006684 <USBD_CtlError>
      break;
 8006056:	bf00      	nop
  }

  return ret;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	885b      	ldrh	r3, [r3, #2]
 800607e:	0a1b      	lsrs	r3, r3, #8
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	2b06      	cmp	r3, #6
 8006086:	f200 8128 	bhi.w	80062da <USBD_GetDescriptor+0x276>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <USBD_GetDescriptor+0x2c>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060c5 	.word	0x080060c5
 8006098:	08006105 	.word	0x08006105
 800609c:	080062db 	.word	0x080062db
 80060a0:	080062db 	.word	0x080062db
 80060a4:	0800627b 	.word	0x0800627b
 80060a8:	080062a7 	.word	0x080062a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	7c12      	ldrb	r2, [r2, #16]
 80060b8:	f107 0108 	add.w	r1, r7, #8
 80060bc:	4610      	mov	r0, r2
 80060be:	4798      	blx	r3
 80060c0:	60f8      	str	r0, [r7, #12]
      break;
 80060c2:	e112      	b.n	80062ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7c1b      	ldrb	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10d      	bne.n	80060e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	f107 0208 	add.w	r2, r7, #8
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	2202      	movs	r2, #2
 80060e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060e6:	e100      	b.n	80062ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	f107 0208 	add.w	r2, r7, #8
 80060f4:	4610      	mov	r0, r2
 80060f6:	4798      	blx	r3
 80060f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
      break;
 8006102:	e0f2      	b.n	80062ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	885b      	ldrh	r3, [r3, #2]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b05      	cmp	r3, #5
 800610c:	f200 80ac 	bhi.w	8006268 <USBD_GetDescriptor+0x204>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <USBD_GetDescriptor+0xb4>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	08006131 	.word	0x08006131
 800611c:	08006165 	.word	0x08006165
 8006120:	08006199 	.word	0x08006199
 8006124:	080061cd 	.word	0x080061cd
 8006128:	08006201 	.word	0x08006201
 800612c:	08006235 	.word	0x08006235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	7c12      	ldrb	r2, [r2, #16]
 8006148:	f107 0108 	add.w	r1, r7, #8
 800614c:	4610      	mov	r0, r2
 800614e:	4798      	blx	r3
 8006150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006152:	e091      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa94 	bl	8006684 <USBD_CtlError>
            err++;
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	3301      	adds	r3, #1
 8006160:	72fb      	strb	r3, [r7, #11]
          break;
 8006162:	e089      	b.n	8006278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	7c12      	ldrb	r2, [r2, #16]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006186:	e077      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa7a 	bl	8006684 <USBD_CtlError>
            err++;
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	3301      	adds	r3, #1
 8006194:	72fb      	strb	r3, [r7, #11]
          break;
 8006196:	e06f      	b.n	8006278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7c12      	ldrb	r2, [r2, #16]
 80061b0:	f107 0108 	add.w	r1, r7, #8
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ba:	e05d      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa60 	bl	8006684 <USBD_CtlError>
            err++;
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	3301      	adds	r3, #1
 80061c8:	72fb      	strb	r3, [r7, #11]
          break;
 80061ca:	e055      	b.n	8006278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	4610      	mov	r0, r2
 80061ea:	4798      	blx	r3
 80061ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ee:	e043      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa46 	bl	8006684 <USBD_CtlError>
            err++;
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	3301      	adds	r3, #1
 80061fc:	72fb      	strb	r3, [r7, #11]
          break;
 80061fe:	e03b      	b.n	8006278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	7c12      	ldrb	r2, [r2, #16]
 8006218:	f107 0108 	add.w	r1, r7, #8
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006222:	e029      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa2c 	bl	8006684 <USBD_CtlError>
            err++;
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	3301      	adds	r3, #1
 8006230:	72fb      	strb	r3, [r7, #11]
          break;
 8006232:	e021      	b.n	8006278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	7c12      	ldrb	r2, [r2, #16]
 800624c:	f107 0108 	add.w	r1, r7, #8
 8006250:	4610      	mov	r0, r2
 8006252:	4798      	blx	r3
 8006254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006256:	e00f      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa12 	bl	8006684 <USBD_CtlError>
            err++;
 8006260:	7afb      	ldrb	r3, [r7, #11]
 8006262:	3301      	adds	r3, #1
 8006264:	72fb      	strb	r3, [r7, #11]
          break;
 8006266:	e007      	b.n	8006278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa0a 	bl	8006684 <USBD_CtlError>
          err++;
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	3301      	adds	r3, #1
 8006274:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006276:	e038      	b.n	80062ea <USBD_GetDescriptor+0x286>
 8006278:	e037      	b.n	80062ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7c1b      	ldrb	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	f107 0208 	add.w	r2, r7, #8
 800628e:	4610      	mov	r0, r2
 8006290:	4798      	blx	r3
 8006292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006294:	e029      	b.n	80062ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9f3 	bl	8006684 <USBD_CtlError>
        err++;
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	3301      	adds	r3, #1
 80062a2:	72fb      	strb	r3, [r7, #11]
      break;
 80062a4:	e021      	b.n	80062ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	7c1b      	ldrb	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f107 0208 	add.w	r2, r7, #8
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
 80062be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	2207      	movs	r2, #7
 80062c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062c8:	e00f      	b.n	80062ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f9d9 	bl	8006684 <USBD_CtlError>
        err++;
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	3301      	adds	r3, #1
 80062d6:	72fb      	strb	r3, [r7, #11]
      break;
 80062d8:	e007      	b.n	80062ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f9d1 	bl	8006684 <USBD_CtlError>
      err++;
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	3301      	adds	r3, #1
 80062e6:	72fb      	strb	r3, [r7, #11]
      break;
 80062e8:	bf00      	nop
  }

  if (err != 0U)
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11c      	bne.n	800632a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80062f0:	893b      	ldrh	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d011      	beq.n	800631a <USBD_GetDescriptor+0x2b6>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00d      	beq.n	800631a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	88da      	ldrh	r2, [r3, #6]
 8006302:	893b      	ldrh	r3, [r7, #8]
 8006304:	4293      	cmp	r3, r2
 8006306:	bf28      	it	cs
 8006308:	4613      	movcs	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800630e:	893b      	ldrh	r3, [r7, #8]
 8006310:	461a      	mov	r2, r3
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fa1f 	bl	8006758 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d104      	bne.n	800632c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa76 	bl	8006814 <USBD_CtlSendStatus>
 8006328:	e000      	b.n	800632c <USBD_GetDescriptor+0x2c8>
    return;
 800632a:	bf00      	nop
    }
  }
}
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop

08006334 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d130      	bne.n	80063a8 <USBD_SetAddress+0x74>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d12c      	bne.n	80063a8 <USBD_SetAddress+0x74>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	2b7f      	cmp	r3, #127	; 0x7f
 8006354:	d828      	bhi.n	80063a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	885b      	ldrh	r3, [r3, #2]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006368:	2b03      	cmp	r3, #3
 800636a:	d104      	bne.n	8006376 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f988 	bl	8006684 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006374:	e01c      	b.n	80063b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fbaf 	bl	8007ae6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fa43 	bl	8006814 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639c:	e008      	b.n	80063b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a6:	e003      	b.n	80063b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f96a 	bl	8006684 <USBD_CtlError>
  }
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	885b      	ldrh	r3, [r3, #2]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	4b41      	ldr	r3, [pc, #260]	; (80064d0 <USBD_SetConfig+0x118>)
 80063ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063cc:	4b40      	ldr	r3, [pc, #256]	; (80064d0 <USBD_SetConfig+0x118>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d904      	bls.n	80063de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f954 	bl	8006684 <USBD_CtlError>
 80063dc:	e075      	b.n	80064ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d002      	beq.n	80063ee <USBD_SetConfig+0x36>
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d023      	beq.n	8006434 <USBD_SetConfig+0x7c>
 80063ec:	e062      	b.n	80064b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80063ee:	4b38      	ldr	r3, [pc, #224]	; (80064d0 <USBD_SetConfig+0x118>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d01a      	beq.n	800642c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80063f6:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <USBD_SetConfig+0x118>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2203      	movs	r2, #3
 8006404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006408:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <USBD_SetConfig+0x118>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff f9f3 	bl	80057fa <USBD_SetClassConfig>
 8006414:	4603      	mov	r3, r0
 8006416:	2b02      	cmp	r3, #2
 8006418:	d104      	bne.n	8006424 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f931 	bl	8006684 <USBD_CtlError>
            return;
 8006422:	e052      	b.n	80064ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f9f5 	bl	8006814 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800642a:	e04e      	b.n	80064ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9f1 	bl	8006814 <USBD_CtlSendStatus>
        break;
 8006432:	e04a      	b.n	80064ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006434:	4b26      	ldr	r3, [pc, #152]	; (80064d0 <USBD_SetConfig+0x118>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d112      	bne.n	8006462 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006444:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <USBD_SetConfig+0x118>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <USBD_SetConfig+0x118>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff f9ef 	bl	8005838 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9da 	bl	8006814 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006460:	e033      	b.n	80064ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006462:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <USBD_SetConfig+0x118>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d01d      	beq.n	80064ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff f9dd 	bl	8005838 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <USBD_SetConfig+0x118>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <USBD_SetConfig+0x118>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff f9b3 	bl	80057fa <USBD_SetClassConfig>
 8006494:	4603      	mov	r3, r0
 8006496:	2b02      	cmp	r3, #2
 8006498:	d104      	bne.n	80064a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f8f1 	bl	8006684 <USBD_CtlError>
            return;
 80064a2:	e012      	b.n	80064ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f9b5 	bl	8006814 <USBD_CtlSendStatus>
        break;
 80064aa:	e00e      	b.n	80064ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f9b1 	bl	8006814 <USBD_CtlSendStatus>
        break;
 80064b2:	e00a      	b.n	80064ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8e4 	bl	8006684 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <USBD_SetConfig+0x118>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff f9b8 	bl	8005838 <USBD_ClrClassConfig>
        break;
 80064c8:	bf00      	nop
    }
  }
}
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	200001fc 	.word	0x200001fc

080064d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	88db      	ldrh	r3, [r3, #6]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d004      	beq.n	80064f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8cb 	bl	8006684 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064ee:	e021      	b.n	8006534 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	db17      	blt.n	800652a <USBD_GetConfig+0x56>
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	dd02      	ble.n	8006504 <USBD_GetConfig+0x30>
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d00b      	beq.n	800651a <USBD_GetConfig+0x46>
 8006502:	e012      	b.n	800652a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3308      	adds	r3, #8
 800650e:	2201      	movs	r2, #1
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f920 	bl	8006758 <USBD_CtlSendData>
        break;
 8006518:	e00c      	b.n	8006534 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2201      	movs	r2, #1
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f918 	bl	8006758 <USBD_CtlSendData>
        break;
 8006528:	e004      	b.n	8006534 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8a9 	bl	8006684 <USBD_CtlError>
        break;
 8006532:	bf00      	nop
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654c:	3b01      	subs	r3, #1
 800654e:	2b02      	cmp	r3, #2
 8006550:	d81e      	bhi.n	8006590 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	88db      	ldrh	r3, [r3, #6]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d004      	beq.n	8006564 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f891 	bl	8006684 <USBD_CtlError>
        break;
 8006562:	e01a      	b.n	800659a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f043 0202 	orr.w	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	330c      	adds	r3, #12
 8006584:	2202      	movs	r2, #2
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8e5 	bl	8006758 <USBD_CtlSendData>
      break;
 800658e:	e004      	b.n	800659a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f876 	bl	8006684 <USBD_CtlError>
      break;
 8006598:	bf00      	nop
  }
}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	885b      	ldrh	r3, [r3, #2]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d106      	bne.n	80065c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f929 	bl	8006814 <USBD_CtlSendStatus>
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d80b      	bhi.n	80065f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	885b      	ldrh	r3, [r3, #2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10c      	bne.n	8006602 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f90f 	bl	8006814 <USBD_CtlSendStatus>
      }
      break;
 80065f6:	e004      	b.n	8006602 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f842 	bl	8006684 <USBD_CtlError>
      break;
 8006600:	e000      	b.n	8006604 <USBD_ClrFeature+0x3a>
      break;
 8006602:	bf00      	nop
  }
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	785a      	ldrb	r2, [r3, #1]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	3302      	adds	r3, #2
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b29a      	uxth	r2, r3
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	3303      	adds	r3, #3
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	b29b      	uxth	r3, r3
 800663a:	4413      	add	r3, r2
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	3304      	adds	r3, #4
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b29a      	uxth	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	3305      	adds	r3, #5
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	b29b      	uxth	r3, r3
 8006656:	4413      	add	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	3306      	adds	r3, #6
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b29a      	uxth	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	3307      	adds	r3, #7
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	b29b      	uxth	r3, r3
 8006672:	4413      	add	r3, r2
 8006674:	b29a      	uxth	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	80da      	strh	r2, [r3, #6]

}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f9c5 	bl	8007a20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006696:	2100      	movs	r1, #0
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f9c1 	bl	8007a20 <USBD_LL_StallEP>
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d032      	beq.n	8006722 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f834 	bl	800672a <USBD_GetLen>
 80066c2:	4603      	mov	r3, r0
 80066c4:	3301      	adds	r3, #1
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	75fa      	strb	r2, [r7, #23]
 80066d6:	461a      	mov	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4413      	add	r3, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	7812      	ldrb	r2, [r2, #0]
 80066e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	75fa      	strb	r2, [r7, #23]
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	2203      	movs	r2, #3
 80066f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80066f2:	e012      	b.n	800671a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	60fa      	str	r2, [r7, #12]
 80066fa:	7dfa      	ldrb	r2, [r7, #23]
 80066fc:	1c51      	adds	r1, r2, #1
 80066fe:	75f9      	strb	r1, [r7, #23]
 8006700:	4611      	mov	r1, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	440a      	add	r2, r1
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	75fa      	strb	r2, [r7, #23]
 8006710:	461a      	mov	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e8      	bne.n	80066f4 <USBD_GetString+0x4e>
    }
  }
}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006736:	e005      	b.n	8006744 <USBD_GetLen+0x1a>
  {
    len++;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	3301      	adds	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3301      	adds	r3, #1
 8006742:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f5      	bne.n	8006738 <USBD_GetLen+0xe>
  }

  return len;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2202      	movs	r2, #2
 800676a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800676e:	88fa      	ldrh	r2, [r7, #6]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006774:	88fa      	ldrh	r2, [r7, #6]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	2100      	movs	r1, #0
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 f9cf 	bl	8007b24 <USBD_LL_Transmit>

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f001 f9bd 	bl	8007b24 <USBD_LL_Transmit>

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2203      	movs	r2, #3
 80067c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80067d2:	88fa      	ldrh	r2, [r7, #6]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	2100      	movs	r1, #0
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f001 f9c2 	bl	8007b6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	2100      	movs	r1, #0
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f001 f9b0 	bl	8007b6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2204      	movs	r2, #4
 8006820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006824:	2300      	movs	r3, #0
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f97a 	bl	8007b24 <USBD_LL_Transmit>

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2205      	movs	r2, #5
 8006846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800684a:	2300      	movs	r3, #0
 800684c:	2200      	movs	r2, #0
 800684e:	2100      	movs	r1, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f98a 	bl	8007b6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006864:	f7fa fbde 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006868:	f000 f80f 	bl	800688a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800686c:	f000 f910 	bl	8006a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8006870:	f000 f8e8 	bl	8006a44 <MX_DMA_Init>
  MX_I2C1_Init();
 8006874:	f000 f864 	bl	8006940 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8006878:	f000 fe78 	bl	800756c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800687c:	f000 f88e 	bl	800699c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 8006880:	f000 fa7a 	bl	8006d78 <init_MPU>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  process_MPU();
 8006884:	f000 faf0 	bl	8006e68 <process_MPU>
 8006888:	e7fc      	b.n	8006884 <main+0x24>

0800688a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b094      	sub	sp, #80	; 0x50
 800688e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006894:	2228      	movs	r2, #40	; 0x28
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f001 feb7 	bl	800860c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800689e:	f107 0314 	add.w	r3, r7, #20
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	605a      	str	r2, [r3, #4]
 80068a8:	609a      	str	r2, [r3, #8]
 80068aa:	60da      	str	r2, [r3, #12]
 80068ac:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	605a      	str	r2, [r3, #4]
 80068b6:	609a      	str	r2, [r3, #8]
 80068b8:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80068be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80068c4:	2300      	movs	r3, #0
 80068c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80068c8:	2301      	movs	r3, #1
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80068cc:	2302      	movs	r3, #2
 80068ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80068d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80068d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80068dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fc fd15 	bl	8003310 <HAL_RCC_OscConfig>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80068ec:	f000 f908 	bl	8006b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80068f0:	230f      	movs	r3, #15
 80068f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80068f4:	2302      	movs	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80068fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006900:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006902:	2300      	movs	r3, #0
 8006904:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006906:	f107 0314 	add.w	r3, r7, #20
 800690a:	2102      	movs	r1, #2
 800690c:	4618      	mov	r0, r3
 800690e:	f7fc ff7f 	bl	8003810 <HAL_RCC_ClockConfig>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006918:	f000 f8f2 	bl	8006b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800691c:	2310      	movs	r3, #16
 800691e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd f8fa 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8006932:	f000 f8e5 	bl	8006b00 <Error_Handler>
  }
}
 8006936:	bf00      	nop
 8006938:	3750      	adds	r7, #80	; 0x50
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006944:	4b12      	ldr	r3, [pc, #72]	; (8006990 <MX_I2C1_Init+0x50>)
 8006946:	4a13      	ldr	r2, [pc, #76]	; (8006994 <MX_I2C1_Init+0x54>)
 8006948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <MX_I2C1_Init+0x50>)
 800694c:	4a12      	ldr	r2, [pc, #72]	; (8006998 <MX_I2C1_Init+0x58>)
 800694e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <MX_I2C1_Init+0x50>)
 8006952:	2200      	movs	r2, #0
 8006954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <MX_I2C1_Init+0x50>)
 8006958:	2200      	movs	r2, #0
 800695a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <MX_I2C1_Init+0x50>)
 800695e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006964:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <MX_I2C1_Init+0x50>)
 8006966:	2200      	movs	r2, #0
 8006968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800696a:	4b09      	ldr	r3, [pc, #36]	; (8006990 <MX_I2C1_Init+0x50>)
 800696c:	2200      	movs	r2, #0
 800696e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <MX_I2C1_Init+0x50>)
 8006972:	2200      	movs	r2, #0
 8006974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <MX_I2C1_Init+0x50>)
 8006978:	2200      	movs	r2, #0
 800697a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800697c:	4804      	ldr	r0, [pc, #16]	; (8006990 <MX_I2C1_Init+0x50>)
 800697e:	f7fb f809 	bl	8001994 <HAL_I2C_Init>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006988:	f000 f8ba 	bl	8006b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800698c:	bf00      	nop
 800698e:	bd80      	pop	{r7, pc}
 8006990:	200004ac 	.word	0x200004ac
 8006994:	40005400 	.word	0x40005400
 8006998:	000186a0 	.word	0x000186a0

0800699c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80069a2:	f107 030c 	add.w	r3, r7, #12
 80069a6:	2224      	movs	r2, #36	; 0x24
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fe2e 	bl	800860c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80069b8:	4b20      	ldr	r3, [pc, #128]	; (8006a3c <MX_TIM4_Init+0xa0>)
 80069ba:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <MX_TIM4_Init+0xa4>)
 80069bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80069be:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <MX_TIM4_Init+0xa0>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <MX_TIM4_Init+0xa0>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80069ca:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <MX_TIM4_Init+0xa0>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <MX_TIM4_Init+0xa0>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069d6:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <MX_TIM4_Init+0xa0>)
 80069d8:	2200      	movs	r2, #0
 80069da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80069dc:	2301      	movs	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80069e4:	2301      	movs	r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80069f0:	2300      	movs	r3, #0
 80069f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80069f4:	2301      	movs	r3, #1
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80069f8:	2300      	movs	r3, #0
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	4619      	mov	r1, r3
 8006a06:	480d      	ldr	r0, [pc, #52]	; (8006a3c <MX_TIM4_Init+0xa0>)
 8006a08:	f7fd f940 	bl	8003c8c <HAL_TIM_Encoder_Init>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8006a12:	f000 f875 	bl	8006b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006a1e:	1d3b      	adds	r3, r7, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4806      	ldr	r0, [pc, #24]	; (8006a3c <MX_TIM4_Init+0xa0>)
 8006a24:	f7fd fa22 	bl	8003e6c <HAL_TIMEx_MasterConfigSynchronization>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8006a2e:	f000 f867 	bl	8006b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006a32:	bf00      	nop
 8006a34:	3730      	adds	r7, #48	; 0x30
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000428 	.word	0x20000428
 8006a40:	40000800 	.word	0x40000800

08006a44 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a4a:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <MX_DMA_Init+0x48>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <MX_DMA_Init+0x48>)
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6153      	str	r3, [r2, #20]
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <MX_DMA_Init+0x48>)
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	2010      	movs	r0, #16
 8006a68:	f7fa fc15 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8006a6c:	2010      	movs	r0, #16
 8006a6e:	f7fa fc2e 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8006a72:	2200      	movs	r2, #0
 8006a74:	2100      	movs	r1, #0
 8006a76:	2011      	movs	r0, #17
 8006a78:	f7fa fc0d 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8006a7c:	2011      	movs	r0, #17
 8006a7e:	f7fa fc26 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40021000 	.word	0x40021000

08006a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006a9c:	f043 0320 	orr.w	r3, r3, #32
 8006aa0:	6193      	str	r3, [r2, #24]
 8006aa2:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aae:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006ab4:	f043 0304 	orr.w	r3, r3, #4
 8006ab8:	6193      	str	r3, [r2, #24]
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	60bb      	str	r3, [r7, #8]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac6:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	4a07      	ldr	r2, [pc, #28]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006acc:	f043 0308 	orr.w	r3, r3, #8
 8006ad0:	6193      	str	r3, [r2, #24]
 8006ad2:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <MX_GPIO_Init+0x58>)
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	607b      	str	r3, [r7, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]

}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr
 8006ae8:	40021000 	.word	0x40021000

08006aec <HAL_I2C_MasterRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  __NOP();
 8006af4:	bf00      	nop
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	0000      	movs	r0, r0
	...

08006b10 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 8006b10:	b590      	push	{r4, r7, lr}
 8006b12:	b08b      	sub	sp, #44	; 0x2c
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b0a      	cmp	r3, #10
 8006b2a:	dd01      	ble.n	8006b30 <ftoa+0x20>
		precision = MAX_PRECISION;
 8006b2c:	230a      	movs	r3, #10
 8006b2e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b3c:	f7f9 ff3e 	bl	80009bc <__aeabi_dcmplt>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <ftoa+0x4c>
	{
		f = -f;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b50:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	627a      	str	r2, [r7, #36]	; 0x24
 8006b58:	222d      	movs	r2, #45	; 0x2d
 8006b5a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da4f      	bge.n	8006c02 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	4b7e      	ldr	r3, [pc, #504]	; (8006d60 <ftoa+0x250>)
 8006b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b6c:	f7f9 ff26 	bl	80009bc <__aeabi_dcmplt>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <ftoa+0x6c>
 8006b76:	2306      	movs	r3, #6
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	e042      	b.n	8006c02 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	4b78      	ldr	r3, [pc, #480]	; (8006d64 <ftoa+0x254>)
 8006b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b86:	f7f9 ff19 	bl	80009bc <__aeabi_dcmplt>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <ftoa+0x86>
 8006b90:	2305      	movs	r3, #5
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	e035      	b.n	8006c02 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	4b73      	ldr	r3, [pc, #460]	; (8006d68 <ftoa+0x258>)
 8006b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ba0:	f7f9 ff0c 	bl	80009bc <__aeabi_dcmplt>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <ftoa+0xa0>
 8006baa:	2304      	movs	r3, #4
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	e028      	b.n	8006c02 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	4b6d      	ldr	r3, [pc, #436]	; (8006d6c <ftoa+0x25c>)
 8006bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bba:	f7f9 feff 	bl	80009bc <__aeabi_dcmplt>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <ftoa+0xba>
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	e01b      	b.n	8006c02 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 8006bca:	a361      	add	r3, pc, #388	; (adr r3, 8006d50 <ftoa+0x240>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bd4:	f7f9 fef2 	bl	80009bc <__aeabi_dcmplt>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <ftoa+0xd4>
 8006bde:	2302      	movs	r3, #2
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	e00e      	b.n	8006c02 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8006be4:	a35c      	add	r3, pc, #368	; (adr r3, 8006d58 <ftoa+0x248>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bee:	f7f9 fee5 	bl	80009bc <__aeabi_dcmplt>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <ftoa+0xee>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	e001      	b.n	8006c02 <ftoa+0xf2>
		else precision = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <ftoa+0x116>
		f += rounders[precision];
 8006c08:	4a59      	ldr	r2, [pc, #356]	; (8006d70 <ftoa+0x260>)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4413      	add	r3, r2
 8006c10:	cb18      	ldmia	r3, {r3, r4}
 8006c12:	461a      	mov	r2, r3
 8006c14:	4623      	mov	r3, r4
 8006c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c1a:	f7f9 faa7 	bl	800016c <__adddf3>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	460c      	mov	r4, r1
 8006c22:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8006c26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c2a:	f7f9 ff05 	bl	8000a38 <__aeabi_d2iz>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8006c32:	69f8      	ldr	r0, [r7, #28]
 8006c34:	f7f9 fbe6 	bl	8000404 <__aeabi_i2d>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4623      	mov	r3, r4
 8006c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c44:	f7f9 fa90 	bl	8000168 <__aeabi_dsub>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d105      	bne.n	8006c62 <ftoa+0x152>
		*ptr++ = '0';
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c5c:	2230      	movs	r2, #48	; 0x30
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	e038      	b.n	8006cd4 <ftoa+0x1c4>
	else
	{
		// save start pointer
		p = ptr;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8006c66:	e01a      	b.n	8006c9e <ftoa+0x18e>
		{
			*p++ = '0' + intPart % 10;
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <ftoa+0x264>)
 8006c6c:	fb83 1302 	smull	r1, r3, r3, r2
 8006c70:	1099      	asrs	r1, r3, #2
 8006c72:	17d3      	asrs	r3, r2, #31
 8006c74:	1ac9      	subs	r1, r1, r3
 8006c76:	460b      	mov	r3, r1
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	1ad1      	subs	r1, r2, r3
 8006c80:	b2ca      	uxtb	r2, r1
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	1c59      	adds	r1, r3, #1
 8006c86:	6239      	str	r1, [r7, #32]
 8006c88:	3230      	adds	r2, #48	; 0x30
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <ftoa+0x264>)
 8006c92:	fb82 1203 	smull	r1, r2, r2, r3
 8006c96:	1092      	asrs	r2, r2, #2
 8006c98:	17db      	asrs	r3, r3, #31
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
		while (intPart)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e1      	bne.n	8006c68 <ftoa+0x158>
		}

		// save end pos
		p1 = p;
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8006ca8:	e00e      	b.n	8006cc8 <ftoa+0x1b8>
		{
			c = *--p;
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	627a      	str	r2, [r7, #36]	; 0x24
 8006cc4:	7dfa      	ldrb	r2, [r7, #23]
 8006cc6:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d8ec      	bhi.n	8006caa <ftoa+0x19a>
		}

		// restore end pos
		ptr = p1;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d032      	beq.n	8006d40 <ftoa+0x230>
	{
		// place decimal point
		*ptr++ = '.';
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	627a      	str	r2, [r7, #36]	; 0x24
 8006ce0:	222e      	movs	r2, #46	; 0x2e
 8006ce2:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8006ce4:	e027      	b.n	8006d36 <ftoa+0x226>
		{
			f *= 10.0;
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <ftoa+0x254>)
 8006cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cf0:	f7f9 fbf2 	bl	80004d8 <__aeabi_dmul>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 8006cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d00:	f7f9 fec2 	bl	8000a88 <__aeabi_d2uiz>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8006d0e:	7dfa      	ldrb	r2, [r7, #23]
 8006d10:	3230      	adds	r2, #48	; 0x30
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
			f -= c;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7f9 fb73 	bl	8000404 <__aeabi_i2d>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	461a      	mov	r2, r3
 8006d24:	4623      	mov	r3, r4
 8006d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d2a:	f7f9 fa1d 	bl	8000168 <__aeabi_dsub>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	1e5a      	subs	r2, r3, #1
 8006d3a:	603a      	str	r2, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1d2      	bne.n	8006ce6 <ftoa+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]

	return buf;
 8006d46:	687b      	ldr	r3, [r7, #4]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	372c      	adds	r7, #44	; 0x2c
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd90      	pop	{r4, r7, pc}
 8006d50:	00000000 	.word	0x00000000
 8006d54:	40c38800 	.word	0x40c38800
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	40f86a00 	.word	0x40f86a00
 8006d60:	3ff00000 	.word	0x3ff00000
 8006d64:	40240000 	.word	0x40240000
 8006d68:	40590000 	.word	0x40590000
 8006d6c:	408f4000 	.word	0x408f4000
 8006d70:	080086c0 	.word	0x080086c0
 8006d74:	66666667 	.word	0x66666667

08006d78 <init_MPU>:





char init_MPU(){
 8006d78:	b5b0      	push	{r4, r5, r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af00      	add	r7, sp, #0
    char status = 1;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	77fb      	strb	r3, [r7, #31]
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8006d82:	23d0      	movs	r3, #208	; 0xd0
 8006d84:	77bb      	strb	r3, [r7, #30]

    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 8006d86:	7fbb      	ldrb	r3, [r7, #30]
 8006d88:	b299      	uxth	r1, r3
 8006d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d8e:	2203      	movs	r2, #3
 8006d90:	4832      	ldr	r0, [pc, #200]	; (8006e5c <init_MPU+0xe4>)
 8006d92:	f7fb f943 	bl	800201c <HAL_I2C_IsDeviceReady>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d007      	beq.n	8006dac <init_MPU+0x34>
    	strcpy( rx_data, "No Device \r \n");
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	4a30      	ldr	r2, [pc, #192]	; (8006e60 <init_MPU+0xe8>)
 8006da0:	461c      	mov	r4, r3
 8006da2:	4613      	mov	r3, r2
 8006da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006da6:	c407      	stmia	r4!, {r0, r1, r2}
 8006da8:	8023      	strh	r3, [r4, #0]
 8006daa:	e007      	b.n	8006dbc <init_MPU+0x44>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 8006dac:	463b      	mov	r3, r7
 8006dae:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <init_MPU+0xec>)
 8006db0:	461c      	mov	r4, r3
 8006db2:	4615      	mov	r5, r2
 8006db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	7023      	strb	r3, [r4, #0]
      }
    CDC_Transmit_FS((uint8_t *)&rx_data, sizeof(rx_data));
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	2119      	movs	r1, #25
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fc91 	bl	80076e8 <CDC_Transmit_FS>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8006dc6:	236b      	movs	r3, #107	; 0x6b
 8006dc8:	773b      	strb	r3, [r7, #28]
    d[1] = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2) == HAL_OK)
 8006dce:	7fbb      	ldrb	r3, [r7, #30]
 8006dd0:	b299      	uxth	r1, r3
 8006dd2:	f107 021c 	add.w	r2, r7, #28
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	4820      	ldr	r0, [pc, #128]	; (8006e5c <init_MPU+0xe4>)
 8006dda:	f7fa ff03 	bl	8001be4 <HAL_I2C_Master_Transmit_DMA>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <init_MPU+0x70>
	{
		status = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	77fb      	strb	r3, [r7, #31]
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8006de8:	2319      	movs	r3, #25
 8006dea:	773b      	strb	r3, [r7, #28]
	d[1] = sample_1khz;
 8006dec:	2307      	movs	r3, #7
 8006dee:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2)==HAL_OK){
 8006df0:	7fbb      	ldrb	r3, [r7, #30]
 8006df2:	b299      	uxth	r1, r3
 8006df4:	f107 021c 	add.w	r2, r7, #28
 8006df8:	2302      	movs	r3, #2
 8006dfa:	4818      	ldr	r0, [pc, #96]	; (8006e5c <init_MPU+0xe4>)
 8006dfc:	f7fa fef2 	bl	8001be4 <HAL_I2C_Master_Transmit_DMA>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <init_MPU+0x92>
		status = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	77fb      	strb	r3, [r7, #31]
	}

	d[0] = GYRO_CONFIG;
 8006e0a:	231b      	movs	r3, #27
 8006e0c:	773b      	strb	r3, [r7, #28]
	d[1] = gyro_con;
 8006e0e:	2318      	movs	r3, #24
 8006e10:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2)==HAL_OK){
 8006e12:	7fbb      	ldrb	r3, [r7, #30]
 8006e14:	b299      	uxth	r1, r3
 8006e16:	f107 021c 	add.w	r2, r7, #28
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	480f      	ldr	r0, [pc, #60]	; (8006e5c <init_MPU+0xe4>)
 8006e1e:	f7fa fee1 	bl	8001be4 <HAL_I2C_Master_Transmit_DMA>

	}

	d[0] = ACCEL_CONFIG;
 8006e22:	231c      	movs	r3, #28
 8006e24:	773b      	strb	r3, [r7, #28]
	d[1] = 0x00;
 8006e26:	2300      	movs	r3, #0
 8006e28:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2)==HAL_OK);
 8006e2a:	7fbb      	ldrb	r3, [r7, #30]
 8006e2c:	b299      	uxth	r1, r3
 8006e2e:	f107 021c 	add.w	r2, r7, #28
 8006e32:	2302      	movs	r3, #2
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <init_MPU+0xe4>)
 8006e36:	f7fa fed5 	bl	8001be4 <HAL_I2C_Master_Transmit_DMA>

	d[0] = INIT_ENB;
 8006e3a:	2338      	movs	r3, #56	; 0x38
 8006e3c:	773b      	strb	r3, [r7, #28]
	d[1] = inter;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2)==HAL_OK);
 8006e42:	7fbb      	ldrb	r3, [r7, #30]
 8006e44:	b299      	uxth	r1, r3
 8006e46:	f107 021c 	add.w	r2, r7, #28
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	4803      	ldr	r0, [pc, #12]	; (8006e5c <init_MPU+0xe4>)
 8006e4e:	f7fa fec9 	bl	8001be4 <HAL_I2C_Master_Transmit_DMA>

  return status;
 8006e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e5c:	200004ac 	.word	0x200004ac
 8006e60:	0800864c 	.word	0x0800864c
 8006e64:	0800865c 	.word	0x0800865c

08006e68 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 8006e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e6a:	b089      	sub	sp, #36	; 0x24
 8006e6c:	af00      	add	r7, sp, #0


	uint8_t data[13];
	uint8_t reg = ACCEL_XOUT_H;
 8006e6e:	233b      	movs	r3, #59	; 0x3b
 8006e70:	77fb      	strb	r3, [r7, #31]
	uint8_t device_address = MPU_ADDRESS;
 8006e72:	23d0      	movs	r3, #208	; 0xd0
 8006e74:	77bb      	strb	r3, [r7, #30]

	if(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address, (uint8_t *)reg, 1) != HAL_OK);
 8006e76:	7fbb      	ldrb	r3, [r7, #30]
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	7ffb      	ldrb	r3, [r7, #31]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2301      	movs	r3, #1
 8006e80:	48ab      	ldr	r0, [pc, #684]	; (8007130 <process_MPU+0x2c8>)
 8006e82:	f7fa feaf 	bl	8001be4 <HAL_I2C_Master_Transmit_DMA>
	if(HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)device_address, (uint8_t *)data,14) != HAL_OK);
 8006e86:	7fbb      	ldrb	r3, [r7, #30]
 8006e88:	b299      	uxth	r1, r3
 8006e8a:	f107 0210 	add.w	r2, r7, #16
 8006e8e:	230e      	movs	r3, #14
 8006e90:	48a7      	ldr	r0, [pc, #668]	; (8007130 <process_MPU+0x2c8>)
 8006e92:	f7fa ffb5 	bl	8001e00 <HAL_I2C_Master_Receive_DMA>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8006e96:	7c3b      	ldrb	r3, [r7, #16]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	b21a      	sxth	r2, r3
 8006e9c:	7c7b      	ldrb	r3, [r7, #17]
 8006e9e:	b21b      	sxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b21b      	sxth	r3, r3
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7f9 ff19 	bl	8000cdc <__aeabi_i2f>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4ba1      	ldr	r3, [pc, #644]	; (8007134 <process_MPU+0x2cc>)
 8006eae:	601a      	str	r2, [r3, #0]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8006eb0:	7cbb      	ldrb	r3, [r7, #18]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b21a      	sxth	r2, r3
 8006eb6:	7cfb      	ldrb	r3, [r7, #19]
 8006eb8:	b21b      	sxth	r3, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b21b      	sxth	r3, r3
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7f9 ff0c 	bl	8000cdc <__aeabi_i2f>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b9c      	ldr	r3, [pc, #624]	; (8007138 <process_MPU+0x2d0>)
 8006ec8:	601a      	str	r2, [r3, #0]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8006eca:	7d3b      	ldrb	r3, [r7, #20]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	b21a      	sxth	r2, r3
 8006ed0:	7d7b      	ldrb	r3, [r7, #21]
 8006ed2:	b21b      	sxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7f9 feff 	bl	8000cdc <__aeabi_i2f>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b96      	ldr	r3, [pc, #600]	; (800713c <process_MPU+0x2d4>)
 8006ee2:	601a      	str	r2, [r3, #0]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8006ee4:	7dbb      	ldrb	r3, [r7, #22]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	b21a      	sxth	r2, r3
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	b21b      	sxth	r3, r3
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7f9 fef2 	bl	8000cdc <__aeabi_i2f>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	4b91      	ldr	r3, [pc, #580]	; (8007140 <process_MPU+0x2d8>)
 8006efc:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8006efe:	7e3b      	ldrb	r3, [r7, #24]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	b21a      	sxth	r2, r3
 8006f04:	7e7b      	ldrb	r3, [r7, #25]
 8006f06:	b21b      	sxth	r3, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7f9 fee5 	bl	8000cdc <__aeabi_i2f>
 8006f12:	4602      	mov	r2, r0
 8006f14:	4b8b      	ldr	r3, [pc, #556]	; (8007144 <process_MPU+0x2dc>)
 8006f16:	601a      	str	r2, [r3, #0]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8006f18:	7ebb      	ldrb	r3, [r7, #26]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	b21a      	sxth	r2, r3
 8006f1e:	7efb      	ldrb	r3, [r7, #27]
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	b21b      	sxth	r3, r3
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7f9 fed8 	bl	8000cdc <__aeabi_i2f>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b86      	ldr	r3, [pc, #536]	; (8007148 <process_MPU+0x2e0>)
 8006f30:	601a      	str	r2, [r3, #0]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8006f32:	7f3b      	ldrb	r3, [r7, #28]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	b21a      	sxth	r2, r3
 8006f38:	7f7b      	ldrb	r3, [r7, #29]
 8006f3a:	b21b      	sxth	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7f9 fecb 	bl	8000cdc <__aeabi_i2f>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b80      	ldr	r3, [pc, #512]	; (800714c <process_MPU+0x2e4>)
 8006f4a:	601a      	str	r2, [r3, #0]

	Acc_x = (Acc_x-1092)/((float)accel_factor);
 8006f4c:	4b79      	ldr	r3, [pc, #484]	; (8007134 <process_MPU+0x2cc>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	497f      	ldr	r1, [pc, #508]	; (8007150 <process_MPU+0x2e8>)
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7f9 fe0c 	bl	8000b70 <__aeabi_fsub>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7f9 ffc4 	bl	8000eec <__aeabi_fdiv>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b72      	ldr	r3, [pc, #456]	; (8007134 <process_MPU+0x2cc>)
 8006f6a:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y-252)/((float)accel_factor);
 8006f6c:	4b72      	ldr	r3, [pc, #456]	; (8007138 <process_MPU+0x2d0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4978      	ldr	r1, [pc, #480]	; (8007154 <process_MPU+0x2ec>)
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7f9 fdfc 	bl	8000b70 <__aeabi_fsub>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 ffb4 	bl	8000eec <__aeabi_fdiv>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	4b6b      	ldr	r3, [pc, #428]	; (8007138 <process_MPU+0x2d0>)
 8006f8a:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z - 2792)/((float)accel_factor);
 8006f8c:	4b6b      	ldr	r3, [pc, #428]	; (800713c <process_MPU+0x2d4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4971      	ldr	r1, [pc, #452]	; (8007158 <process_MPU+0x2f0>)
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7f9 fdec 	bl	8000b70 <__aeabi_fsub>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7f9 ffa4 	bl	8000eec <__aeabi_fdiv>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4b64      	ldr	r3, [pc, #400]	; (800713c <process_MPU+0x2d4>)
 8006faa:	601a      	str	r2, [r3, #0]

	Gyro_x = (Gyro_x + 75)/gyro_factor;
 8006fac:	4b65      	ldr	r3, [pc, #404]	; (8007144 <process_MPU+0x2dc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	496a      	ldr	r1, [pc, #424]	; (800715c <process_MPU+0x2f4>)
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7f9 fdde 	bl	8000b74 <__addsf3>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7f9 fa34 	bl	8000428 <__aeabi_f2d>
 8006fc0:	a357      	add	r3, pc, #348	; (adr r3, 8007120 <process_MPU+0x2b8>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 fbb1 	bl	800072c <__aeabi_ddiv>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	4618      	mov	r0, r3
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f7f9 fd79 	bl	8000ac8 <__aeabi_d2f>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b5a      	ldr	r3, [pc, #360]	; (8007144 <process_MPU+0x2dc>)
 8006fda:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y + 10)/gyro_factor;
 8006fdc:	4b5a      	ldr	r3, [pc, #360]	; (8007148 <process_MPU+0x2e0>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	495f      	ldr	r1, [pc, #380]	; (8007160 <process_MPU+0x2f8>)
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7f9 fdc6 	bl	8000b74 <__addsf3>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7f9 fa1c 	bl	8000428 <__aeabi_f2d>
 8006ff0:	a34b      	add	r3, pc, #300	; (adr r3, 8007120 <process_MPU+0x2b8>)
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f7f9 fb99 	bl	800072c <__aeabi_ddiv>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	4618      	mov	r0, r3
 8007000:	4621      	mov	r1, r4
 8007002:	f7f9 fd61 	bl	8000ac8 <__aeabi_d2f>
 8007006:	4602      	mov	r2, r0
 8007008:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <process_MPU+0x2e0>)
 800700a:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z + 22)/gyro_factor;
 800700c:	4b4f      	ldr	r3, [pc, #316]	; (800714c <process_MPU+0x2e4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4954      	ldr	r1, [pc, #336]	; (8007164 <process_MPU+0x2fc>)
 8007012:	4618      	mov	r0, r3
 8007014:	f7f9 fdae 	bl	8000b74 <__addsf3>
 8007018:	4603      	mov	r3, r0
 800701a:	4618      	mov	r0, r3
 800701c:	f7f9 fa04 	bl	8000428 <__aeabi_f2d>
 8007020:	a33f      	add	r3, pc, #252	; (adr r3, 8007120 <process_MPU+0x2b8>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f7f9 fb81 	bl	800072c <__aeabi_ddiv>
 800702a:	4603      	mov	r3, r0
 800702c:	460c      	mov	r4, r1
 800702e:	4618      	mov	r0, r3
 8007030:	4621      	mov	r1, r4
 8007032:	f7f9 fd49 	bl	8000ac8 <__aeabi_d2f>
 8007036:	4602      	mov	r2, r0
 8007038:	4b44      	ldr	r3, [pc, #272]	; (800714c <process_MPU+0x2e4>)
 800703a:	601a      	str	r2, [r3, #0]


	char buffer[7];
	char n[1] = "\n";
 800703c:	230a      	movs	r3, #10
 800703e:	713b      	strb	r3, [r7, #4]
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8007040:	4b3d      	ldr	r3, [pc, #244]	; (8007138 <process_MPU+0x2d0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f7f9 f9ef 	bl	8000428 <__aeabi_f2d>
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	4b3b      	ldr	r3, [pc, #236]	; (800713c <process_MPU+0x2d4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7f9 f9e8 	bl	8000428 <__aeabi_f2d>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f001 f8c8 	bl	80081f4 <atan2>
 8007064:	a330      	add	r3, pc, #192	; (adr r3, 8007128 <process_MPU+0x2c0>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f7f9 fa35 	bl	80004d8 <__aeabi_dmul>
 800706e:	4603      	mov	r3, r0
 8007070:	460c      	mov	r4, r1
 8007072:	4618      	mov	r0, r3
 8007074:	4621      	mov	r1, r4
 8007076:	f7f9 fd27 	bl	8000ac8 <__aeabi_d2f>
 800707a:	4602      	mov	r2, r0
 800707c:	4b3a      	ldr	r3, [pc, #232]	; (8007168 <process_MPU+0x300>)
 800707e:	601a      	str	r2, [r3, #0]
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8007080:	4b2c      	ldr	r3, [pc, #176]	; (8007134 <process_MPU+0x2cc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 f9cd 	bl	8000428 <__aeabi_f2d>
 800708e:	4604      	mov	r4, r0
 8007090:	460d      	mov	r5, r1
 8007092:	4b29      	ldr	r3, [pc, #164]	; (8007138 <process_MPU+0x2d0>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b28      	ldr	r3, [pc, #160]	; (8007138 <process_MPU+0x2d0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7f9 fe71 	bl	8000d84 <__aeabi_fmul>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461e      	mov	r6, r3
 80070a6:	4b25      	ldr	r3, [pc, #148]	; (800713c <process_MPU+0x2d4>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4b24      	ldr	r3, [pc, #144]	; (800713c <process_MPU+0x2d4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7f9 fe67 	bl	8000d84 <__aeabi_fmul>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4619      	mov	r1, r3
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7f9 fd5a 	bl	8000b74 <__addsf3>
 80070c0:	4603      	mov	r3, r0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 f9b0 	bl	8000428 <__aeabi_f2d>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4610      	mov	r0, r2
 80070ce:	4619      	mov	r1, r3
 80070d0:	f001 f892 	bl	80081f8 <sqrt>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4620      	mov	r0, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	f7f9 fb26 	bl	800072c <__aeabi_ddiv>
 80070e0:	4603      	mov	r3, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	4618      	mov	r0, r3
 80070e6:	4621      	mov	r1, r4
 80070e8:	f000 fef6 	bl	8007ed8 <atan>
 80070ec:	a30e      	add	r3, pc, #56	; (adr r3, 8007128 <process_MPU+0x2c0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	4603      	mov	r3, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	4618      	mov	r0, r3
 80070fc:	4621      	mov	r1, r4
 80070fe:	f7f9 fce3 	bl	8000ac8 <__aeabi_d2f>
 8007102:	4602      	mov	r2, r0
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <process_MPU+0x304>)
 8007106:	601a      	str	r2, [r3, #0]


	complementary_filter(pitch,Gyro_x,0.0116);
 8007108:	4b18      	ldr	r3, [pc, #96]	; (800716c <process_MPU+0x304>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <process_MPU+0x2dc>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a17      	ldr	r2, [pc, #92]	; (8007170 <process_MPU+0x308>)
 8007112:	4619      	mov	r1, r3
 8007114:	f000 f854 	bl	80071c0 <complementary_filter>

    ftoa(com_angle, buffer, 2);
 8007118:	4b16      	ldr	r3, [pc, #88]	; (8007174 <process_MPU+0x30c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	e02c      	b.n	8007178 <process_MPU+0x310>
 800711e:	bf00      	nop
 8007120:	66666666 	.word	0x66666666
 8007124:	40306666 	.word	0x40306666
 8007128:	1a5d2372 	.word	0x1a5d2372
 800712c:	404ca5dc 	.word	0x404ca5dc
 8007130:	200004ac 	.word	0x200004ac
 8007134:	20000578 	.word	0x20000578
 8007138:	20000570 	.word	0x20000570
 800713c:	20000568 	.word	0x20000568
 8007140:	20000510 	.word	0x20000510
 8007144:	2000056c 	.word	0x2000056c
 8007148:	2000057c 	.word	0x2000057c
 800714c:	20000574 	.word	0x20000574
 8007150:	44888000 	.word	0x44888000
 8007154:	437c0000 	.word	0x437c0000
 8007158:	452e8000 	.word	0x452e8000
 800715c:	42960000 	.word	0x42960000
 8007160:	41200000 	.word	0x41200000
 8007164:	41b00000 	.word	0x41b00000
 8007168:	20000564 	.word	0x20000564
 800716c:	20000560 	.word	0x20000560
 8007170:	3c3e0ded 	.word	0x3c3e0ded
 8007174:	20000424 	.word	0x20000424
 8007178:	4618      	mov	r0, r3
 800717a:	f7f9 f955 	bl	8000428 <__aeabi_f2d>
 800717e:	f107 0208 	add.w	r2, r7, #8
 8007182:	2302      	movs	r3, #2
 8007184:	f7ff fcc4 	bl	8006b10 <ftoa>
    strcat(buffer,"\n");
 8007188:	f107 0308 	add.w	r3, r7, #8
 800718c:	4618      	mov	r0, r3
 800718e:	f7f8 ffdf 	bl	8000150 <strlen>
 8007192:	4603      	mov	r3, r0
 8007194:	461a      	mov	r2, r3
 8007196:	f107 0308 	add.w	r3, r7, #8
 800719a:	4413      	add	r3, r2
 800719c:	4907      	ldr	r1, [pc, #28]	; (80071bc <process_MPU+0x354>)
 800719e:	461a      	mov	r2, r3
 80071a0:	460b      	mov	r3, r1
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	8013      	strh	r3, [r2, #0]
    CDC_Transmit_FS((uint8_t *)buffer, sizeof(buffer));
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	2107      	movs	r1, #7
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fa9b 	bl	80076e8 <CDC_Transmit_FS>

}
 80071b2:	bf00      	nop
 80071b4:	3724      	adds	r7, #36	; 0x24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ba:	bf00      	nop
 80071bc:	08008670 	.word	0x08008670

080071c0 <complementary_filter>:
void complementary_filter(float angle_acc,float gyro_rate,float dt){
 80071c0:	b5b0      	push	{r4, r5, r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
	com_angle = alpha*(com_angle + dt*gyro_rate) + (1-alpha)*angle_acc;
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7f9 fdd8 	bl	8000d84 <__aeabi_fmul>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <complementary_filter+0x88>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7f9 fcc8 	bl	8000b74 <__addsf3>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 f91e 	bl	8000428 <__aeabi_f2d>
 80071ec:	a312      	add	r3, pc, #72	; (adr r3, 8007238 <complementary_filter+0x78>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f971 	bl	80004d8 <__aeabi_dmul>
 80071f6:	4603      	mov	r3, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	4625      	mov	r5, r4
 80071fc:	461c      	mov	r4, r3
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7f9 f912 	bl	8000428 <__aeabi_f2d>
 8007204:	a30e      	add	r3, pc, #56	; (adr r3, 8007240 <complementary_filter+0x80>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f8 ffa9 	bl	800016c <__adddf3>
 800721a:	4603      	mov	r3, r0
 800721c:	460c      	mov	r4, r1
 800721e:	4618      	mov	r0, r3
 8007220:	4621      	mov	r1, r4
 8007222:	f7f9 fc51 	bl	8000ac8 <__aeabi_d2f>
 8007226:	4602      	mov	r2, r0
 8007228:	4b07      	ldr	r3, [pc, #28]	; (8007248 <complementary_filter+0x88>)
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bdb0      	pop	{r4, r5, r7, pc}
 8007234:	f3af 8000 	nop.w
 8007238:	9999999a 	.word	0x9999999a
 800723c:	3fe99999 	.word	0x3fe99999
 8007240:	99999998 	.word	0x99999998
 8007244:	3fc99999 	.word	0x3fc99999
 8007248:	20000424 	.word	0x20000424

0800724c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <HAL_MspInit+0x5c>)
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <HAL_MspInit+0x5c>)
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	6193      	str	r3, [r2, #24]
 800725e:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <HAL_MspInit+0x5c>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <HAL_MspInit+0x5c>)
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	4a0e      	ldr	r2, [pc, #56]	; (80072a8 <HAL_MspInit+0x5c>)
 8007270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007274:	61d3      	str	r3, [r2, #28]
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <HAL_MspInit+0x5c>)
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007282:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <HAL_MspInit+0x60>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	4a04      	ldr	r2, [pc, #16]	; (80072ac <HAL_MspInit+0x60>)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40010000 	.word	0x40010000

080072b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a43      	ldr	r2, [pc, #268]	; (80073d8 <HAL_I2C_MspInit+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d17e      	bne.n	80073ce <HAL_I2C_MspInit+0x11e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072d0:	4b42      	ldr	r3, [pc, #264]	; (80073dc <HAL_I2C_MspInit+0x12c>)
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	4a41      	ldr	r2, [pc, #260]	; (80073dc <HAL_I2C_MspInit+0x12c>)
 80072d6:	f043 0308 	orr.w	r3, r3, #8
 80072da:	6193      	str	r3, [r2, #24]
 80072dc:	4b3f      	ldr	r3, [pc, #252]	; (80073dc <HAL_I2C_MspInit+0x12c>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80072e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072ee:	2312      	movs	r3, #18
 80072f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072f2:	2303      	movs	r3, #3
 80072f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4619      	mov	r1, r3
 80072fc:	4838      	ldr	r0, [pc, #224]	; (80073e0 <HAL_I2C_MspInit+0x130>)
 80072fe:	f7fa f9ef 	bl	80016e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8007302:	4b38      	ldr	r3, [pc, #224]	; (80073e4 <HAL_I2C_MspInit+0x134>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f043 0302 	orr.w	r3, r3, #2
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
 8007318:	4a32      	ldr	r2, [pc, #200]	; (80073e4 <HAL_I2C_MspInit+0x134>)
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800731e:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <HAL_I2C_MspInit+0x12c>)
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4a2e      	ldr	r2, [pc, #184]	; (80073dc <HAL_I2C_MspInit+0x12c>)
 8007324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007328:	61d3      	str	r3, [r2, #28]
 800732a:	4b2c      	ldr	r3, [pc, #176]	; (80073dc <HAL_I2C_MspInit+0x12c>)
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8007336:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 8007338:	4a2c      	ldr	r2, [pc, #176]	; (80073ec <HAL_I2C_MspInit+0x13c>)
 800733a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800733c:	4b2a      	ldr	r3, [pc, #168]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 8007344:	2200      	movs	r2, #0
 8007346:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007348:	4b27      	ldr	r3, [pc, #156]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 800734a:	2280      	movs	r2, #128	; 0x80
 800734c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 8007350:	2200      	movs	r2, #0
 8007352:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007354:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 8007356:	2200      	movs	r2, #0
 8007358:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800735a:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 800735c:	2200      	movs	r2, #0
 800735e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007360:	4b21      	ldr	r3, [pc, #132]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 8007362:	2200      	movs	r2, #0
 8007364:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007366:	4820      	ldr	r0, [pc, #128]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 8007368:	f7f9 ffcc 	bl	8001304 <HAL_DMA_Init>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8007372:	f7ff fbc5 	bl	8006b00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a1b      	ldr	r2, [pc, #108]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
 800737c:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <HAL_I2C_MspInit+0x138>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8007382:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 8007384:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <HAL_I2C_MspInit+0x144>)
 8007386:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 800738a:	2210      	movs	r2, #16
 800738c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007394:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 8007396:	2280      	movs	r2, #128	; 0x80
 8007398:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 800739c:	2200      	movs	r2, #0
 800739e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80073b2:	480f      	ldr	r0, [pc, #60]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 80073b4:	f7f9 ffa6 	bl	8001304 <HAL_DMA_Init>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_I2C_MspInit+0x112>
    {
      Error_Handler();
 80073be:	f7ff fb9f 	bl	8006b00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 80073c6:	635a      	str	r2, [r3, #52]	; 0x34
 80073c8:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <HAL_I2C_MspInit+0x140>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80073ce:	bf00      	nop
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40005400 	.word	0x40005400
 80073dc:	40021000 	.word	0x40021000
 80073e0:	40010c00 	.word	0x40010c00
 80073e4:	40010000 	.word	0x40010000
 80073e8:	20000518 	.word	0x20000518
 80073ec:	40020080 	.word	0x40020080
 80073f0:	20000468 	.word	0x20000468
 80073f4:	4002006c 	.word	0x4002006c

080073f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007400:	f107 0310 	add.w	r3, r7, #16
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a15      	ldr	r2, [pc, #84]	; (8007468 <HAL_TIM_Encoder_MspInit+0x70>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d123      	bne.n	8007460 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007418:	4b14      	ldr	r3, [pc, #80]	; (800746c <HAL_TIM_Encoder_MspInit+0x74>)
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	4a13      	ldr	r2, [pc, #76]	; (800746c <HAL_TIM_Encoder_MspInit+0x74>)
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	61d3      	str	r3, [r2, #28]
 8007424:	4b11      	ldr	r3, [pc, #68]	; (800746c <HAL_TIM_Encoder_MspInit+0x74>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007430:	4b0e      	ldr	r3, [pc, #56]	; (800746c <HAL_TIM_Encoder_MspInit+0x74>)
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	4a0d      	ldr	r2, [pc, #52]	; (800746c <HAL_TIM_Encoder_MspInit+0x74>)
 8007436:	f043 0308 	orr.w	r3, r3, #8
 800743a:	6193      	str	r3, [r2, #24]
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <HAL_TIM_Encoder_MspInit+0x74>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f003 0308 	and.w	r3, r3, #8
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007448:	23c0      	movs	r3, #192	; 0xc0
 800744a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	4619      	mov	r1, r3
 800745a:	4805      	ldr	r0, [pc, #20]	; (8007470 <HAL_TIM_Encoder_MspInit+0x78>)
 800745c:	f7fa f940 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007460:	bf00      	nop
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40000800 	.word	0x40000800
 800746c:	40021000 	.word	0x40021000
 8007470:	40010c00 	.word	0x40010c00

08007474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007478:	bf00      	nop
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007484:	e7fe      	b.n	8007484 <HardFault_Handler+0x4>

08007486 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007486:	b480      	push	{r7}
 8007488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800748a:	e7fe      	b.n	800748a <MemManage_Handler+0x4>

0800748c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007490:	e7fe      	b.n	8007490 <BusFault_Handler+0x4>

08007492 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007496:	e7fe      	b.n	8007496 <UsageFault_Handler+0x4>

08007498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800749c:	bf00      	nop
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074a8:	bf00      	nop
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bc80      	pop	{r7}
 80074ae:	4770      	bx	lr

080074b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074c0:	f7f9 fdf6 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074c4:	bf00      	nop
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80074cc:	4802      	ldr	r0, [pc, #8]	; (80074d8 <DMA1_Channel6_IRQHandler+0x10>)
 80074ce:	f7f9 ffd3 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80074d2:	bf00      	nop
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000468 	.word	0x20000468

080074dc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80074e0:	4802      	ldr	r0, [pc, #8]	; (80074ec <DMA1_Channel7_IRQHandler+0x10>)
 80074e2:	f7f9 ffc9 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000518 	.word	0x20000518

080074f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80074f4:	4802      	ldr	r0, [pc, #8]	; (8007500 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80074f6:	f7fb f931 	bl	800275c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80074fa:	bf00      	nop
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20001018 	.word	0x20001018

08007504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <SystemInit+0x5c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a14      	ldr	r2, [pc, #80]	; (8007560 <SystemInit+0x5c>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007514:	4b12      	ldr	r3, [pc, #72]	; (8007560 <SystemInit+0x5c>)
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	4911      	ldr	r1, [pc, #68]	; (8007560 <SystemInit+0x5c>)
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <SystemInit+0x60>)
 800751c:	4013      	ands	r3, r2
 800751e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <SystemInit+0x5c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a0e      	ldr	r2, [pc, #56]	; (8007560 <SystemInit+0x5c>)
 8007526:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800752a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <SystemInit+0x5c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <SystemInit+0x5c>)
 8007536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800753a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800753c:	4b08      	ldr	r3, [pc, #32]	; (8007560 <SystemInit+0x5c>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a07      	ldr	r2, [pc, #28]	; (8007560 <SystemInit+0x5c>)
 8007542:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007546:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <SystemInit+0x5c>)
 800754a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800754e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007550:	4b05      	ldr	r3, [pc, #20]	; (8007568 <SystemInit+0x64>)
 8007552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007556:	609a      	str	r2, [r3, #8]
#endif 
}
 8007558:	bf00      	nop
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr
 8007560:	40021000 	.word	0x40021000
 8007564:	f8ff0000 	.word	0xf8ff0000
 8007568:	e000ed00 	.word	0xe000ed00

0800756c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007570:	2200      	movs	r2, #0
 8007572:	4912      	ldr	r1, [pc, #72]	; (80075bc <MX_USB_DEVICE_Init+0x50>)
 8007574:	4812      	ldr	r0, [pc, #72]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 8007576:	f7fe f8e6 	bl	8005746 <USBD_Init>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007580:	f7ff fabe 	bl	8006b00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007584:	490f      	ldr	r1, [pc, #60]	; (80075c4 <MX_USB_DEVICE_Init+0x58>)
 8007586:	480e      	ldr	r0, [pc, #56]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 8007588:	f7fe f908 	bl	800579c <USBD_RegisterClass>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007592:	f7ff fab5 	bl	8006b00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007596:	490c      	ldr	r1, [pc, #48]	; (80075c8 <MX_USB_DEVICE_Init+0x5c>)
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 800759a:	f7fe f839 	bl	8005610 <USBD_CDC_RegisterInterface>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075a4:	f7ff faac 	bl	8006b00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075a8:	4805      	ldr	r0, [pc, #20]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 80075aa:	f7fe f910 	bl	80057ce <USBD_Start>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075b4:	f7ff faa4 	bl	8006b00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075b8:	bf00      	nop
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	2000012c 	.word	0x2000012c
 80075c0:	20000584 	.word	0x20000584
 80075c4:	20000014 	.word	0x20000014
 80075c8:	2000011c 	.word	0x2000011c

080075cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075d0:	2200      	movs	r2, #0
 80075d2:	4905      	ldr	r1, [pc, #20]	; (80075e8 <CDC_Init_FS+0x1c>)
 80075d4:	4805      	ldr	r0, [pc, #20]	; (80075ec <CDC_Init_FS+0x20>)
 80075d6:	f7fe f831 	bl	800563c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075da:	4905      	ldr	r1, [pc, #20]	; (80075f0 <CDC_Init_FS+0x24>)
 80075dc:	4803      	ldr	r0, [pc, #12]	; (80075ec <CDC_Init_FS+0x20>)
 80075de:	f7fe f846 	bl	800566e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000c30 	.word	0x20000c30
 80075ec:	20000584 	.word	0x20000584
 80075f0:	20000848 	.word	0x20000848

080075f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
	...

08007604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
 8007610:	4613      	mov	r3, r2
 8007612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	2b23      	cmp	r3, #35	; 0x23
 8007618:	d84a      	bhi.n	80076b0 <CDC_Control_FS+0xac>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <CDC_Control_FS+0x1c>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	080076b1 	.word	0x080076b1
 8007624:	080076b1 	.word	0x080076b1
 8007628:	080076b1 	.word	0x080076b1
 800762c:	080076b1 	.word	0x080076b1
 8007630:	080076b1 	.word	0x080076b1
 8007634:	080076b1 	.word	0x080076b1
 8007638:	080076b1 	.word	0x080076b1
 800763c:	080076b1 	.word	0x080076b1
 8007640:	080076b1 	.word	0x080076b1
 8007644:	080076b1 	.word	0x080076b1
 8007648:	080076b1 	.word	0x080076b1
 800764c:	080076b1 	.word	0x080076b1
 8007650:	080076b1 	.word	0x080076b1
 8007654:	080076b1 	.word	0x080076b1
 8007658:	080076b1 	.word	0x080076b1
 800765c:	080076b1 	.word	0x080076b1
 8007660:	080076b1 	.word	0x080076b1
 8007664:	080076b1 	.word	0x080076b1
 8007668:	080076b1 	.word	0x080076b1
 800766c:	080076b1 	.word	0x080076b1
 8007670:	080076b1 	.word	0x080076b1
 8007674:	080076b1 	.word	0x080076b1
 8007678:	080076b1 	.word	0x080076b1
 800767c:	080076b1 	.word	0x080076b1
 8007680:	080076b1 	.word	0x080076b1
 8007684:	080076b1 	.word	0x080076b1
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076b1 	.word	0x080076b1
 8007690:	080076b1 	.word	0x080076b1
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b1 	.word	0x080076b1
 800769c:	080076b1 	.word	0x080076b1
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076b1 	.word	0x080076b1
 80076a8:	080076b1 	.word	0x080076b1
 80076ac:	080076b1 	.word	0x080076b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076b0:	bf00      	nop
  }

  return (USBD_OK);
 80076b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4805      	ldr	r0, [pc, #20]	; (80076e4 <CDC_Receive_FS+0x24>)
 80076ce:	f7fd ffce 	bl	800566e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076d2:	4804      	ldr	r0, [pc, #16]	; (80076e4 <CDC_Receive_FS+0x24>)
 80076d4:	f7fe f80d 	bl	80056f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000584 	.word	0x20000584

080076e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <CDC_Transmit_FS+0x48>)
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800770a:	2301      	movs	r3, #1
 800770c:	e00b      	b.n	8007726 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	461a      	mov	r2, r3
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4806      	ldr	r0, [pc, #24]	; (8007730 <CDC_Transmit_FS+0x48>)
 8007716:	f7fd ff91 	bl	800563c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800771a:	4805      	ldr	r0, [pc, #20]	; (8007730 <CDC_Transmit_FS+0x48>)
 800771c:	f7fd ffba 	bl	8005694 <USBD_CDC_TransmitPacket>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000584 	.word	0x20000584

08007734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0d      	ldr	r2, [pc, #52]	; (8007778 <HAL_PCD_MspInit+0x44>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d113      	bne.n	800776e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <HAL_PCD_MspInit+0x48>)
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	4a0c      	ldr	r2, [pc, #48]	; (800777c <HAL_PCD_MspInit+0x48>)
 800774c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007750:	61d3      	str	r3, [r2, #28]
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <HAL_PCD_MspInit+0x48>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800775e:	2200      	movs	r2, #0
 8007760:	2100      	movs	r1, #0
 8007762:	2014      	movs	r0, #20
 8007764:	f7f9 fd97 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007768:	2014      	movs	r0, #20
 800776a:	f7f9 fdb0 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	40005c00 	.word	0x40005c00
 800777c:	40021000 	.word	0x40021000

08007780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7fe f861 	bl	800585e <USBD_LL_SetupStage>
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	015b      	lsls	r3, r3, #5
 80077bc:	4413      	add	r3, r2
 80077be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	4619      	mov	r1, r3
 80077c8:	f7fe f894 	bl	80058f4 <USBD_LL_DataOutStage>
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	015b      	lsls	r3, r3, #5
 80077ec:	4413      	add	r3, r2
 80077ee:	333c      	adds	r3, #60	; 0x3c
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	4619      	mov	r1, r3
 80077f6:	f7fe f8ee 	bl	80059d6 <USBD_LL_DataInStage>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe f9fe 	bl	8005c12 <USBD_LL_SOF>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007826:	2301      	movs	r3, #1
 8007828:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d001      	beq.n	8007836 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007832:	f7ff f965 	bl	8006b00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800783c:	7bfa      	ldrb	r2, [r7, #15]
 800783e:	4611      	mov	r1, r2
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe f9ae 	bl	8005ba2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe f967 	bl	8005b20 <USBD_LL_Reset>
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f9a8 	bl	8005bc0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <HAL_PCD_SuspendCallback+0x30>)
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	4a03      	ldr	r2, [pc, #12]	; (800788c <HAL_PCD_SuspendCallback+0x30>)
 800787e:	f043 0306 	orr.w	r3, r3, #6
 8007882:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe f9a2 	bl	8005be8 <USBD_LL_Resume>
}
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078b4:	4a28      	ldr	r2, [pc, #160]	; (8007958 <USBD_LL_Init+0xac>)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <USBD_LL_Init+0xac>)
 80078c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078c4:	4b24      	ldr	r3, [pc, #144]	; (8007958 <USBD_LL_Init+0xac>)
 80078c6:	4a25      	ldr	r2, [pc, #148]	; (800795c <USBD_LL_Init+0xb0>)
 80078c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078ca:	4b23      	ldr	r3, [pc, #140]	; (8007958 <USBD_LL_Init+0xac>)
 80078cc:	2208      	movs	r2, #8
 80078ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078d0:	4b21      	ldr	r3, [pc, #132]	; (8007958 <USBD_LL_Init+0xac>)
 80078d2:	2202      	movs	r2, #2
 80078d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078d6:	4b20      	ldr	r3, [pc, #128]	; (8007958 <USBD_LL_Init+0xac>)
 80078d8:	2200      	movs	r2, #0
 80078da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078dc:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <USBD_LL_Init+0xac>)
 80078de:	2200      	movs	r2, #0
 80078e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <USBD_LL_Init+0xac>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078e8:	481b      	ldr	r0, [pc, #108]	; (8007958 <USBD_LL_Init+0xac>)
 80078ea:	f7fa fe30 	bl	800254e <HAL_PCD_Init>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80078f4:	f7ff f904 	bl	8006b00 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078fe:	2318      	movs	r3, #24
 8007900:	2200      	movs	r2, #0
 8007902:	2100      	movs	r1, #0
 8007904:	f7fb fcc8 	bl	8003298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800790e:	2358      	movs	r3, #88	; 0x58
 8007910:	2200      	movs	r2, #0
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	f7fb fcc0 	bl	8003298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800791e:	23c0      	movs	r3, #192	; 0xc0
 8007920:	2200      	movs	r2, #0
 8007922:	2181      	movs	r1, #129	; 0x81
 8007924:	f7fb fcb8 	bl	8003298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800792e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007932:	2200      	movs	r2, #0
 8007934:	2101      	movs	r1, #1
 8007936:	f7fb fcaf 	bl	8003298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007944:	2200      	movs	r2, #0
 8007946:	2182      	movs	r1, #130	; 0x82
 8007948:	f7fb fca6 	bl	8003298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20001018 	.word	0x20001018
 800795c:	40005c00 	.word	0x40005c00

08007960 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007976:	4618      	mov	r0, r3
 8007978:	f7fa feca 	bl	8002710 <HAL_PCD_Start>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f948 	bl	8007c18 <USBD_Get_USB_Status>
 8007988:	4603      	mov	r3, r0
 800798a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800798c:	7bbb      	ldrb	r3, [r7, #14]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	461a      	mov	r2, r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	70fb      	strb	r3, [r7, #3]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70bb      	strb	r3, [r7, #2]
 80079ac:	4613      	mov	r3, r2
 80079ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079be:	78bb      	ldrb	r3, [r7, #2]
 80079c0:	883a      	ldrh	r2, [r7, #0]
 80079c2:	78f9      	ldrb	r1, [r7, #3]
 80079c4:	f7fa fffd 	bl	80029c2 <HAL_PCD_EP_Open>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f922 	bl	8007c18 <USBD_Get_USB_Status>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fb f83e 	bl	8002a82 <HAL_PCD_EP_Close>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f903 	bl	8007c18 <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fb f8e8 	bl	8002c14 <HAL_PCD_EP_SetStall>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f8e4 	bl	8007c18 <USBD_Get_USB_Status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fb f923 	bl	8002cc8 <HAL_PCD_EP_ClrStall>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f8c5 	bl	8007c18 <USBD_Get_USB_Status>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	da08      	bge.n	8007aca <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	015b      	lsls	r3, r3, #5
 8007ac2:	4413      	add	r3, r2
 8007ac4:	332a      	adds	r3, #42	; 0x2a
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	e008      	b.n	8007adc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	015b      	lsls	r3, r3, #5
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007ada:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fa ff37 	bl	8002978 <HAL_PCD_SetAddress>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f881 	bl	8007c18 <USBD_Get_USB_Status>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	72fb      	strb	r3, [r7, #11]
 8007b34:	4613      	mov	r3, r2
 8007b36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b46:	893b      	ldrh	r3, [r7, #8]
 8007b48:	7af9      	ldrb	r1, [r7, #11]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	f7fb f829 	bl	8002ba2 <HAL_PCD_EP_Transmit>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f85e 	bl	8007c18 <USBD_Get_USB_Status>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007b60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	461a      	mov	r2, r3
 8007b76:	460b      	mov	r3, r1
 8007b78:	72fb      	strb	r3, [r7, #11]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b8c:	893b      	ldrh	r3, [r7, #8]
 8007b8e:	7af9      	ldrb	r1, [r7, #11]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	f7fa ffb8 	bl	8002b06 <HAL_PCD_EP_Receive>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f83b 	bl	8007c18 <USBD_Get_USB_Status>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007ba6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fa ffd7 	bl	8002b7a <HAL_PCD_EP_GetRxCount>
 8007bcc:	4603      	mov	r3, r0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <USBD_static_malloc+0x14>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	20000200 	.word	0x20000200

08007bf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr

08007c02 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr

08007c18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d817      	bhi.n	8007c5c <USBD_Get_USB_Status+0x44>
 8007c2c:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <USBD_Get_USB_Status+0x1c>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c4b 	.word	0x08007c4b
 8007c3c:	08007c51 	.word	0x08007c51
 8007c40:	08007c57 	.word	0x08007c57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
    break;
 8007c48:	e00b      	b.n	8007c62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4e:	e008      	b.n	8007c62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
    break;
 8007c54:	e005      	b.n	8007c62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5a:	e002      	b.n	8007c62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c60:	bf00      	nop
  }
  return usb_status;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop

08007c70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2212      	movs	r2, #18
 8007c80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000148 	.word	0x20000148

08007c94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ca6:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc80      	pop	{r7}
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	2000015c 	.word	0x2000015c

08007cb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	4907      	ldr	r1, [pc, #28]	; (8007cec <USBD_FS_ProductStrDescriptor+0x34>)
 8007cce:	4808      	ldr	r0, [pc, #32]	; (8007cf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cd0:	f7fe fce9 	bl	80066a6 <USBD_GetString>
 8007cd4:	e004      	b.n	8007ce0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <USBD_FS_ProductStrDescriptor+0x34>)
 8007cda:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cdc:	f7fe fce3 	bl	80066a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20001284 	.word	0x20001284
 8007cf0:	08008674 	.word	0x08008674

08007cf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	4904      	ldr	r1, [pc, #16]	; (8007d14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d04:	4804      	ldr	r0, [pc, #16]	; (8007d18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d06:	f7fe fcce 	bl	80066a6 <USBD_GetString>
  return USBD_StrDesc;
 8007d0a:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20001284 	.word	0x20001284
 8007d18:	0800868c 	.word	0x0800868c

08007d1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	221a      	movs	r2, #26
 8007d2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d2e:	f000 f843 	bl	8007db8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d32:	4b02      	ldr	r3, [pc, #8]	; (8007d3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20000160 	.word	0x20000160

08007d40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d105      	bne.n	8007d5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	4907      	ldr	r1, [pc, #28]	; (8007d74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d56:	4808      	ldr	r0, [pc, #32]	; (8007d78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d58:	f7fe fca5 	bl	80066a6 <USBD_GetString>
 8007d5c:	e004      	b.n	8007d68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	4904      	ldr	r1, [pc, #16]	; (8007d74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d62:	4805      	ldr	r0, [pc, #20]	; (8007d78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d64:	f7fe fc9f 	bl	80066a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20001284 	.word	0x20001284
 8007d78:	080086a0 	.word	0x080086a0

08007d7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4907      	ldr	r1, [pc, #28]	; (8007db0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d92:	4808      	ldr	r0, [pc, #32]	; (8007db4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d94:	f7fe fc87 	bl	80066a6 <USBD_GetString>
 8007d98:	e004      	b.n	8007da4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	4904      	ldr	r1, [pc, #16]	; (8007db0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d9e:	4805      	ldr	r0, [pc, #20]	; (8007db4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007da0:	f7fe fc81 	bl	80066a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007da4:	4b02      	ldr	r3, [pc, #8]	; (8007db0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20001284 	.word	0x20001284
 8007db4:	080086ac 	.word	0x080086ac

08007db8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <Get_SerialNum+0x44>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <Get_SerialNum+0x48>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007dca:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <Get_SerialNum+0x4c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007dde:	2208      	movs	r2, #8
 8007de0:	4909      	ldr	r1, [pc, #36]	; (8007e08 <Get_SerialNum+0x50>)
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f814 	bl	8007e10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007de8:	2204      	movs	r2, #4
 8007dea:	4908      	ldr	r1, [pc, #32]	; (8007e0c <Get_SerialNum+0x54>)
 8007dec:	68b8      	ldr	r0, [r7, #8]
 8007dee:	f000 f80f 	bl	8007e10 <IntToUnicode>
  }
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	1ffff7e8 	.word	0x1ffff7e8
 8007e00:	1ffff7ec 	.word	0x1ffff7ec
 8007e04:	1ffff7f0 	.word	0x1ffff7f0
 8007e08:	20000162 	.word	0x20000162
 8007e0c:	20000172 	.word	0x20000172

08007e10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e22:	2300      	movs	r3, #0
 8007e24:	75fb      	strb	r3, [r7, #23]
 8007e26:	e027      	b.n	8007e78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	0f1b      	lsrs	r3, r3, #28
 8007e2c:	2b09      	cmp	r3, #9
 8007e2e:	d80b      	bhi.n	8007e48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	0f1b      	lsrs	r3, r3, #28
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	440b      	add	r3, r1
 8007e40:	3230      	adds	r2, #48	; 0x30
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e00a      	b.n	8007e5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	0f1b      	lsrs	r3, r3, #28
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	4619      	mov	r1, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	440b      	add	r3, r1
 8007e58:	3237      	adds	r2, #55	; 0x37
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	3301      	adds	r3, #1
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	3301      	adds	r3, #1
 8007e76:	75fb      	strb	r3, [r7, #23]
 8007e78:	7dfa      	ldrb	r2, [r7, #23]
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d3d3      	bcc.n	8007e28 <IntToUnicode+0x18>
  }
}
 8007e80:	bf00      	nop
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
	...

08007e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007e8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007e8e:	e003      	b.n	8007e98 <LoopCopyDataInit>

08007e90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007e92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007e94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007e96:	3104      	adds	r1, #4

08007e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007e98:	480a      	ldr	r0, [pc, #40]	; (8007ec4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007e9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007e9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007ea0:	d3f6      	bcc.n	8007e90 <CopyDataInit>
  ldr r2, =_sbss
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007ea4:	e002      	b.n	8007eac <LoopFillZerobss>

08007ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007ea6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007ea8:	f842 3b04 	str.w	r3, [r2], #4

08007eac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007eae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007eb0:	d3f9      	bcc.n	8007ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007eb2:	f7ff fb27 	bl	8007504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007eb6:	f000 fb85 	bl	80085c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007eba:	f7fe fcd1 	bl	8006860 <main>
  bx lr
 8007ebe:	4770      	bx	lr
  ldr r3, =_sidata
 8007ec0:	08008780 	.word	0x08008780
  ldr r0, =_sdata
 8007ec4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007ec8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8007ecc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8007ed0:	20001484 	.word	0x20001484

08007ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007ed4:	e7fe      	b.n	8007ed4 <ADC1_2_IRQHandler>
	...

08007ed8 <atan>:
 8007ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	4bb6      	ldr	r3, [pc, #728]	; (80081b8 <atan+0x2e0>)
 8007ede:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007ee2:	429e      	cmp	r6, r3
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	468b      	mov	fp, r1
 8007eea:	dd17      	ble.n	8007f1c <atan+0x44>
 8007eec:	4bb3      	ldr	r3, [pc, #716]	; (80081bc <atan+0x2e4>)
 8007eee:	429e      	cmp	r6, r3
 8007ef0:	dc01      	bgt.n	8007ef6 <atan+0x1e>
 8007ef2:	d109      	bne.n	8007f08 <atan+0x30>
 8007ef4:	b140      	cbz	r0, 8007f08 <atan+0x30>
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	462b      	mov	r3, r5
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 f935 	bl	800016c <__adddf3>
 8007f02:	4604      	mov	r4, r0
 8007f04:	460d      	mov	r5, r1
 8007f06:	e005      	b.n	8007f14 <atan+0x3c>
 8007f08:	f1bb 0f00 	cmp.w	fp, #0
 8007f0c:	4cac      	ldr	r4, [pc, #688]	; (80081c0 <atan+0x2e8>)
 8007f0e:	f340 8121 	ble.w	8008154 <atan+0x27c>
 8007f12:	4dac      	ldr	r5, [pc, #688]	; (80081c4 <atan+0x2ec>)
 8007f14:	4620      	mov	r0, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	4baa      	ldr	r3, [pc, #680]	; (80081c8 <atan+0x2f0>)
 8007f1e:	429e      	cmp	r6, r3
 8007f20:	dc11      	bgt.n	8007f46 <atan+0x6e>
 8007f22:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007f26:	429e      	cmp	r6, r3
 8007f28:	dc0a      	bgt.n	8007f40 <atan+0x68>
 8007f2a:	a38b      	add	r3, pc, #556	; (adr r3, 8008158 <atan+0x280>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f91c 	bl	800016c <__adddf3>
 8007f34:	2200      	movs	r2, #0
 8007f36:	4ba5      	ldr	r3, [pc, #660]	; (80081cc <atan+0x2f4>)
 8007f38:	f7f8 fd5e 	bl	80009f8 <__aeabi_dcmpgt>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d1e9      	bne.n	8007f14 <atan+0x3c>
 8007f40:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007f44:	e027      	b.n	8007f96 <atan+0xbe>
 8007f46:	f000 f951 	bl	80081ec <fabs>
 8007f4a:	4ba1      	ldr	r3, [pc, #644]	; (80081d0 <atan+0x2f8>)
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	460d      	mov	r5, r1
 8007f52:	f300 80b8 	bgt.w	80080c6 <atan+0x1ee>
 8007f56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f5a:	429e      	cmp	r6, r3
 8007f5c:	f300 809c 	bgt.w	8008098 <atan+0x1c0>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	f7f8 f902 	bl	800016c <__adddf3>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4b98      	ldr	r3, [pc, #608]	; (80081cc <atan+0x2f4>)
 8007f6c:	f7f8 f8fc 	bl	8000168 <__aeabi_dsub>
 8007f70:	2200      	movs	r2, #0
 8007f72:	4606      	mov	r6, r0
 8007f74:	460f      	mov	r7, r1
 8007f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 f8f5 	bl	800016c <__adddf3>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 fbcf 	bl	800072c <__aeabi_ddiv>
 8007f8e:	f04f 0a00 	mov.w	sl, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	460d      	mov	r5, r1
 8007f96:	4622      	mov	r2, r4
 8007f98:	462b      	mov	r3, r5
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	f7f8 fa9b 	bl	80004d8 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4689      	mov	r9, r1
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	a36c      	add	r3, pc, #432	; (adr r3, 8008160 <atan+0x288>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	460f      	mov	r7, r1
 8007fb8:	f7f8 fa8e 	bl	80004d8 <__aeabi_dmul>
 8007fbc:	a36a      	add	r3, pc, #424	; (adr r3, 8008168 <atan+0x290>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 f8d3 	bl	800016c <__adddf3>
 8007fc6:	4632      	mov	r2, r6
 8007fc8:	463b      	mov	r3, r7
 8007fca:	f7f8 fa85 	bl	80004d8 <__aeabi_dmul>
 8007fce:	a368      	add	r3, pc, #416	; (adr r3, 8008170 <atan+0x298>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f7f8 f8ca 	bl	800016c <__adddf3>
 8007fd8:	4632      	mov	r2, r6
 8007fda:	463b      	mov	r3, r7
 8007fdc:	f7f8 fa7c 	bl	80004d8 <__aeabi_dmul>
 8007fe0:	a365      	add	r3, pc, #404	; (adr r3, 8008178 <atan+0x2a0>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 f8c1 	bl	800016c <__adddf3>
 8007fea:	4632      	mov	r2, r6
 8007fec:	463b      	mov	r3, r7
 8007fee:	f7f8 fa73 	bl	80004d8 <__aeabi_dmul>
 8007ff2:	a363      	add	r3, pc, #396	; (adr r3, 8008180 <atan+0x2a8>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 f8b8 	bl	800016c <__adddf3>
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	f7f8 fa6a 	bl	80004d8 <__aeabi_dmul>
 8008004:	a360      	add	r3, pc, #384	; (adr r3, 8008188 <atan+0x2b0>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f7f8 f8af 	bl	800016c <__adddf3>
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	f7f8 fa61 	bl	80004d8 <__aeabi_dmul>
 8008016:	a35e      	add	r3, pc, #376	; (adr r3, 8008190 <atan+0x2b8>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	4680      	mov	r8, r0
 800801e:	4689      	mov	r9, r1
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fa58 	bl	80004d8 <__aeabi_dmul>
 8008028:	a35b      	add	r3, pc, #364	; (adr r3, 8008198 <atan+0x2c0>)
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f7f8 f89b 	bl	8000168 <__aeabi_dsub>
 8008032:	4632      	mov	r2, r6
 8008034:	463b      	mov	r3, r7
 8008036:	f7f8 fa4f 	bl	80004d8 <__aeabi_dmul>
 800803a:	a359      	add	r3, pc, #356	; (adr r3, 80081a0 <atan+0x2c8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 f892 	bl	8000168 <__aeabi_dsub>
 8008044:	4632      	mov	r2, r6
 8008046:	463b      	mov	r3, r7
 8008048:	f7f8 fa46 	bl	80004d8 <__aeabi_dmul>
 800804c:	a356      	add	r3, pc, #344	; (adr r3, 80081a8 <atan+0x2d0>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f7f8 f889 	bl	8000168 <__aeabi_dsub>
 8008056:	4632      	mov	r2, r6
 8008058:	463b      	mov	r3, r7
 800805a:	f7f8 fa3d 	bl	80004d8 <__aeabi_dmul>
 800805e:	a354      	add	r3, pc, #336	; (adr r3, 80081b0 <atan+0x2d8>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 f880 	bl	8000168 <__aeabi_dsub>
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	f7f8 fa34 	bl	80004d8 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4640      	mov	r0, r8
 8008076:	4649      	mov	r1, r9
 8008078:	f7f8 f878 	bl	800016c <__adddf3>
 800807c:	4622      	mov	r2, r4
 800807e:	462b      	mov	r3, r5
 8008080:	f7f8 fa2a 	bl	80004d8 <__aeabi_dmul>
 8008084:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	d144      	bne.n	8008118 <atan+0x240>
 800808e:	4620      	mov	r0, r4
 8008090:	4629      	mov	r1, r5
 8008092:	f7f8 f869 	bl	8000168 <__aeabi_dsub>
 8008096:	e734      	b.n	8007f02 <atan+0x2a>
 8008098:	2200      	movs	r2, #0
 800809a:	4b4c      	ldr	r3, [pc, #304]	; (80081cc <atan+0x2f4>)
 800809c:	f7f8 f864 	bl	8000168 <__aeabi_dsub>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	4b49      	ldr	r3, [pc, #292]	; (80081cc <atan+0x2f4>)
 80080a8:	4620      	mov	r0, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	f7f8 f85e 	bl	800016c <__adddf3>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 fb38 	bl	800072c <__aeabi_ddiv>
 80080bc:	f04f 0a01 	mov.w	sl, #1
 80080c0:	4604      	mov	r4, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	e767      	b.n	8007f96 <atan+0xbe>
 80080c6:	4b43      	ldr	r3, [pc, #268]	; (80081d4 <atan+0x2fc>)
 80080c8:	429e      	cmp	r6, r3
 80080ca:	dc1a      	bgt.n	8008102 <atan+0x22a>
 80080cc:	2200      	movs	r2, #0
 80080ce:	4b42      	ldr	r3, [pc, #264]	; (80081d8 <atan+0x300>)
 80080d0:	f7f8 f84a 	bl	8000168 <__aeabi_dsub>
 80080d4:	2200      	movs	r2, #0
 80080d6:	4606      	mov	r6, r0
 80080d8:	460f      	mov	r7, r1
 80080da:	4b3f      	ldr	r3, [pc, #252]	; (80081d8 <atan+0x300>)
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 f9fa 	bl	80004d8 <__aeabi_dmul>
 80080e4:	2200      	movs	r2, #0
 80080e6:	4b39      	ldr	r3, [pc, #228]	; (80081cc <atan+0x2f4>)
 80080e8:	f7f8 f840 	bl	800016c <__adddf3>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 fb1a 	bl	800072c <__aeabi_ddiv>
 80080f8:	f04f 0a02 	mov.w	sl, #2
 80080fc:	4604      	mov	r4, r0
 80080fe:	460d      	mov	r5, r1
 8008100:	e749      	b.n	8007f96 <atan+0xbe>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	2000      	movs	r0, #0
 8008108:	4934      	ldr	r1, [pc, #208]	; (80081dc <atan+0x304>)
 800810a:	f7f8 fb0f 	bl	800072c <__aeabi_ddiv>
 800810e:	f04f 0a03 	mov.w	sl, #3
 8008112:	4604      	mov	r4, r0
 8008114:	460d      	mov	r5, r1
 8008116:	e73e      	b.n	8007f96 <atan+0xbe>
 8008118:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <atan+0x308>)
 800811a:	4e32      	ldr	r6, [pc, #200]	; (80081e4 <atan+0x30c>)
 800811c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008120:	4456      	add	r6, sl
 8008122:	449a      	add	sl, r3
 8008124:	e9da 2300 	ldrd	r2, r3, [sl]
 8008128:	f7f8 f81e 	bl	8000168 <__aeabi_dsub>
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	f7f8 f81a 	bl	8000168 <__aeabi_dsub>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	e9d6 0100 	ldrd	r0, r1, [r6]
 800813c:	f7f8 f814 	bl	8000168 <__aeabi_dsub>
 8008140:	f1bb 0f00 	cmp.w	fp, #0
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	f6bf aee4 	bge.w	8007f14 <atan+0x3c>
 800814c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008150:	461d      	mov	r5, r3
 8008152:	e6df      	b.n	8007f14 <atan+0x3c>
 8008154:	4d24      	ldr	r5, [pc, #144]	; (80081e8 <atan+0x310>)
 8008156:	e6dd      	b.n	8007f14 <atan+0x3c>
 8008158:	8800759c 	.word	0x8800759c
 800815c:	7e37e43c 	.word	0x7e37e43c
 8008160:	e322da11 	.word	0xe322da11
 8008164:	3f90ad3a 	.word	0x3f90ad3a
 8008168:	24760deb 	.word	0x24760deb
 800816c:	3fa97b4b 	.word	0x3fa97b4b
 8008170:	a0d03d51 	.word	0xa0d03d51
 8008174:	3fb10d66 	.word	0x3fb10d66
 8008178:	c54c206e 	.word	0xc54c206e
 800817c:	3fb745cd 	.word	0x3fb745cd
 8008180:	920083ff 	.word	0x920083ff
 8008184:	3fc24924 	.word	0x3fc24924
 8008188:	5555550d 	.word	0x5555550d
 800818c:	3fd55555 	.word	0x3fd55555
 8008190:	2c6a6c2f 	.word	0x2c6a6c2f
 8008194:	bfa2b444 	.word	0xbfa2b444
 8008198:	52defd9a 	.word	0x52defd9a
 800819c:	3fadde2d 	.word	0x3fadde2d
 80081a0:	af749a6d 	.word	0xaf749a6d
 80081a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80081a8:	fe231671 	.word	0xfe231671
 80081ac:	3fbc71c6 	.word	0x3fbc71c6
 80081b0:	9998ebc4 	.word	0x9998ebc4
 80081b4:	3fc99999 	.word	0x3fc99999
 80081b8:	440fffff 	.word	0x440fffff
 80081bc:	7ff00000 	.word	0x7ff00000
 80081c0:	54442d18 	.word	0x54442d18
 80081c4:	3ff921fb 	.word	0x3ff921fb
 80081c8:	3fdbffff 	.word	0x3fdbffff
 80081cc:	3ff00000 	.word	0x3ff00000
 80081d0:	3ff2ffff 	.word	0x3ff2ffff
 80081d4:	40037fff 	.word	0x40037fff
 80081d8:	3ff80000 	.word	0x3ff80000
 80081dc:	bff00000 	.word	0xbff00000
 80081e0:	08008750 	.word	0x08008750
 80081e4:	08008730 	.word	0x08008730
 80081e8:	bff921fb 	.word	0xbff921fb

080081ec <fabs>:
 80081ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081f0:	4619      	mov	r1, r3
 80081f2:	4770      	bx	lr

080081f4 <atan2>:
 80081f4:	f000 b854 	b.w	80082a0 <__ieee754_atan2>

080081f8 <sqrt>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	b08b      	sub	sp, #44	; 0x2c
 80081fe:	4604      	mov	r4, r0
 8008200:	460d      	mov	r5, r1
 8008202:	f000 f92b 	bl	800845c <__ieee754_sqrt>
 8008206:	4b24      	ldr	r3, [pc, #144]	; (8008298 <sqrt+0xa0>)
 8008208:	4680      	mov	r8, r0
 800820a:	f993 a000 	ldrsb.w	sl, [r3]
 800820e:	4689      	mov	r9, r1
 8008210:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008214:	d02b      	beq.n	800826e <sqrt+0x76>
 8008216:	4622      	mov	r2, r4
 8008218:	462b      	mov	r3, r5
 800821a:	4620      	mov	r0, r4
 800821c:	4629      	mov	r1, r5
 800821e:	f7f8 fbf5 	bl	8000a0c <__aeabi_dcmpun>
 8008222:	4683      	mov	fp, r0
 8008224:	bb18      	cbnz	r0, 800826e <sqrt+0x76>
 8008226:	2600      	movs	r6, #0
 8008228:	2700      	movs	r7, #0
 800822a:	4632      	mov	r2, r6
 800822c:	463b      	mov	r3, r7
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 fbc3 	bl	80009bc <__aeabi_dcmplt>
 8008236:	b1d0      	cbz	r0, 800826e <sqrt+0x76>
 8008238:	2301      	movs	r3, #1
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	4b17      	ldr	r3, [pc, #92]	; (800829c <sqrt+0xa4>)
 800823e:	f8cd b020 	str.w	fp, [sp, #32]
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008248:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800824c:	f1ba 0f00 	cmp.w	sl, #0
 8008250:	d112      	bne.n	8008278 <sqrt+0x80>
 8008252:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008256:	4668      	mov	r0, sp
 8008258:	f000 f9ac 	bl	80085b4 <matherr>
 800825c:	b1b8      	cbz	r0, 800828e <sqrt+0x96>
 800825e:	9b08      	ldr	r3, [sp, #32]
 8008260:	b11b      	cbz	r3, 800826a <sqrt+0x72>
 8008262:	f000 f9a9 	bl	80085b8 <__errno>
 8008266:	9b08      	ldr	r3, [sp, #32]
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800826e:	4640      	mov	r0, r8
 8008270:	4649      	mov	r1, r9
 8008272:	b00b      	add	sp, #44	; 0x2c
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 fa54 	bl	800072c <__aeabi_ddiv>
 8008284:	f1ba 0f02 	cmp.w	sl, #2
 8008288:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800828c:	d1e3      	bne.n	8008256 <sqrt+0x5e>
 800828e:	f000 f993 	bl	80085b8 <__errno>
 8008292:	2321      	movs	r3, #33	; 0x21
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	e7e2      	b.n	800825e <sqrt+0x66>
 8008298:	2000017a 	.word	0x2000017a
 800829c:	08008770 	.word	0x08008770

080082a0 <__ieee754_atan2>:
 80082a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	4256      	negs	r6, r2
 80082a6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80082aa:	4316      	orrs	r6, r2
 80082ac:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008458 <__ieee754_atan2+0x1b8>
 80082b0:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80082b4:	454e      	cmp	r6, r9
 80082b6:	4604      	mov	r4, r0
 80082b8:	460d      	mov	r5, r1
 80082ba:	469e      	mov	lr, r3
 80082bc:	d808      	bhi.n	80082d0 <__ieee754_atan2+0x30>
 80082be:	4246      	negs	r6, r0
 80082c0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80082c4:	4306      	orrs	r6, r0
 80082c6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80082ca:	454e      	cmp	r6, r9
 80082cc:	4688      	mov	r8, r1
 80082ce:	d906      	bls.n	80082de <__ieee754_atan2+0x3e>
 80082d0:	4620      	mov	r0, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	f7f7 ff4a 	bl	800016c <__adddf3>
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	e030      	b.n	8008340 <__ieee754_atan2+0xa0>
 80082de:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80082e2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80082e6:	4316      	orrs	r6, r2
 80082e8:	d103      	bne.n	80082f2 <__ieee754_atan2+0x52>
 80082ea:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ee:	f7ff bdf3 	b.w	8007ed8 <atan>
 80082f2:	179e      	asrs	r6, r3, #30
 80082f4:	f006 0602 	and.w	r6, r6, #2
 80082f8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80082fc:	ea57 0100 	orrs.w	r1, r7, r0
 8008300:	d107      	bne.n	8008312 <__ieee754_atan2+0x72>
 8008302:	2e02      	cmp	r6, #2
 8008304:	d079      	beq.n	80083fa <__ieee754_atan2+0x15a>
 8008306:	2e03      	cmp	r6, #3
 8008308:	d11a      	bne.n	8008340 <__ieee754_atan2+0xa0>
 800830a:	a541      	add	r5, pc, #260	; (adr r5, 8008410 <__ieee754_atan2+0x170>)
 800830c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008310:	e016      	b.n	8008340 <__ieee754_atan2+0xa0>
 8008312:	ea5c 0102 	orrs.w	r1, ip, r2
 8008316:	d106      	bne.n	8008326 <__ieee754_atan2+0x86>
 8008318:	f1b8 0f00 	cmp.w	r8, #0
 800831c:	da71      	bge.n	8008402 <__ieee754_atan2+0x162>
 800831e:	a53e      	add	r5, pc, #248	; (adr r5, 8008418 <__ieee754_atan2+0x178>)
 8008320:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008324:	e00c      	b.n	8008340 <__ieee754_atan2+0xa0>
 8008326:	45cc      	cmp	ip, r9
 8008328:	d123      	bne.n	8008372 <__ieee754_atan2+0xd2>
 800832a:	4567      	cmp	r7, ip
 800832c:	d114      	bne.n	8008358 <__ieee754_atan2+0xb8>
 800832e:	2e02      	cmp	r6, #2
 8008330:	d00a      	beq.n	8008348 <__ieee754_atan2+0xa8>
 8008332:	2e03      	cmp	r6, #3
 8008334:	d00c      	beq.n	8008350 <__ieee754_atan2+0xb0>
 8008336:	2e01      	cmp	r6, #1
 8008338:	d15b      	bne.n	80083f2 <__ieee754_atan2+0x152>
 800833a:	a539      	add	r5, pc, #228	; (adr r5, 8008420 <__ieee754_atan2+0x180>)
 800833c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008340:	4620      	mov	r0, r4
 8008342:	4629      	mov	r1, r5
 8008344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	a537      	add	r5, pc, #220	; (adr r5, 8008428 <__ieee754_atan2+0x188>)
 800834a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800834e:	e7f7      	b.n	8008340 <__ieee754_atan2+0xa0>
 8008350:	a537      	add	r5, pc, #220	; (adr r5, 8008430 <__ieee754_atan2+0x190>)
 8008352:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008356:	e7f3      	b.n	8008340 <__ieee754_atan2+0xa0>
 8008358:	2e02      	cmp	r6, #2
 800835a:	d04e      	beq.n	80083fa <__ieee754_atan2+0x15a>
 800835c:	2e03      	cmp	r6, #3
 800835e:	d0d4      	beq.n	800830a <__ieee754_atan2+0x6a>
 8008360:	2e01      	cmp	r6, #1
 8008362:	f04f 0400 	mov.w	r4, #0
 8008366:	d102      	bne.n	800836e <__ieee754_atan2+0xce>
 8008368:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800836c:	e7e8      	b.n	8008340 <__ieee754_atan2+0xa0>
 800836e:	2500      	movs	r5, #0
 8008370:	e7e6      	b.n	8008340 <__ieee754_atan2+0xa0>
 8008372:	454f      	cmp	r7, r9
 8008374:	d0d0      	beq.n	8008318 <__ieee754_atan2+0x78>
 8008376:	eba7 070c 	sub.w	r7, r7, ip
 800837a:	153f      	asrs	r7, r7, #20
 800837c:	2f3c      	cmp	r7, #60	; 0x3c
 800837e:	dc1e      	bgt.n	80083be <__ieee754_atan2+0x11e>
 8008380:	2b00      	cmp	r3, #0
 8008382:	da01      	bge.n	8008388 <__ieee754_atan2+0xe8>
 8008384:	373c      	adds	r7, #60	; 0x3c
 8008386:	db1e      	blt.n	80083c6 <__ieee754_atan2+0x126>
 8008388:	4620      	mov	r0, r4
 800838a:	4629      	mov	r1, r5
 800838c:	f7f8 f9ce 	bl	800072c <__aeabi_ddiv>
 8008390:	f7ff ff2c 	bl	80081ec <fabs>
 8008394:	f7ff fda0 	bl	8007ed8 <atan>
 8008398:	4604      	mov	r4, r0
 800839a:	460d      	mov	r5, r1
 800839c:	2e01      	cmp	r6, #1
 800839e:	d015      	beq.n	80083cc <__ieee754_atan2+0x12c>
 80083a0:	2e02      	cmp	r6, #2
 80083a2:	d017      	beq.n	80083d4 <__ieee754_atan2+0x134>
 80083a4:	2e00      	cmp	r6, #0
 80083a6:	d0cb      	beq.n	8008340 <__ieee754_atan2+0xa0>
 80083a8:	a323      	add	r3, pc, #140	; (adr r3, 8008438 <__ieee754_atan2+0x198>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	f7f7 fed9 	bl	8000168 <__aeabi_dsub>
 80083b6:	a322      	add	r3, pc, #136	; (adr r3, 8008440 <__ieee754_atan2+0x1a0>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	e016      	b.n	80083ec <__ieee754_atan2+0x14c>
 80083be:	a522      	add	r5, pc, #136	; (adr r5, 8008448 <__ieee754_atan2+0x1a8>)
 80083c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083c4:	e7ea      	b.n	800839c <__ieee754_atan2+0xfc>
 80083c6:	2400      	movs	r4, #0
 80083c8:	2500      	movs	r5, #0
 80083ca:	e7e7      	b.n	800839c <__ieee754_atan2+0xfc>
 80083cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80083d0:	461d      	mov	r5, r3
 80083d2:	e7b5      	b.n	8008340 <__ieee754_atan2+0xa0>
 80083d4:	a318      	add	r3, pc, #96	; (adr r3, 8008438 <__ieee754_atan2+0x198>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	4620      	mov	r0, r4
 80083dc:	4629      	mov	r1, r5
 80083de:	f7f7 fec3 	bl	8000168 <__aeabi_dsub>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	a116      	add	r1, pc, #88	; (adr r1, 8008440 <__ieee754_atan2+0x1a0>)
 80083e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ec:	f7f7 febc 	bl	8000168 <__aeabi_dsub>
 80083f0:	e772      	b.n	80082d8 <__ieee754_atan2+0x38>
 80083f2:	a517      	add	r5, pc, #92	; (adr r5, 8008450 <__ieee754_atan2+0x1b0>)
 80083f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083f8:	e7a2      	b.n	8008340 <__ieee754_atan2+0xa0>
 80083fa:	a511      	add	r5, pc, #68	; (adr r5, 8008440 <__ieee754_atan2+0x1a0>)
 80083fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008400:	e79e      	b.n	8008340 <__ieee754_atan2+0xa0>
 8008402:	a511      	add	r5, pc, #68	; (adr r5, 8008448 <__ieee754_atan2+0x1a8>)
 8008404:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008408:	e79a      	b.n	8008340 <__ieee754_atan2+0xa0>
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w
 8008410:	54442d18 	.word	0x54442d18
 8008414:	c00921fb 	.word	0xc00921fb
 8008418:	54442d18 	.word	0x54442d18
 800841c:	bff921fb 	.word	0xbff921fb
 8008420:	54442d18 	.word	0x54442d18
 8008424:	bfe921fb 	.word	0xbfe921fb
 8008428:	7f3321d2 	.word	0x7f3321d2
 800842c:	4002d97c 	.word	0x4002d97c
 8008430:	7f3321d2 	.word	0x7f3321d2
 8008434:	c002d97c 	.word	0xc002d97c
 8008438:	33145c07 	.word	0x33145c07
 800843c:	3ca1a626 	.word	0x3ca1a626
 8008440:	54442d18 	.word	0x54442d18
 8008444:	400921fb 	.word	0x400921fb
 8008448:	54442d18 	.word	0x54442d18
 800844c:	3ff921fb 	.word	0x3ff921fb
 8008450:	54442d18 	.word	0x54442d18
 8008454:	3fe921fb 	.word	0x3fe921fb
 8008458:	7ff00000 	.word	0x7ff00000

0800845c <__ieee754_sqrt>:
 800845c:	4b54      	ldr	r3, [pc, #336]	; (80085b0 <__ieee754_sqrt+0x154>)
 800845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	438b      	bics	r3, r1
 8008464:	4606      	mov	r6, r0
 8008466:	460d      	mov	r5, r1
 8008468:	460a      	mov	r2, r1
 800846a:	460c      	mov	r4, r1
 800846c:	d10f      	bne.n	800848e <__ieee754_sqrt+0x32>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	f7f8 f831 	bl	80004d8 <__aeabi_dmul>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4630      	mov	r0, r6
 800847c:	4629      	mov	r1, r5
 800847e:	f7f7 fe75 	bl	800016c <__adddf3>
 8008482:	4606      	mov	r6, r0
 8008484:	460d      	mov	r5, r1
 8008486:	4630      	mov	r0, r6
 8008488:	4629      	mov	r1, r5
 800848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848e:	2900      	cmp	r1, #0
 8008490:	4607      	mov	r7, r0
 8008492:	4603      	mov	r3, r0
 8008494:	dc0e      	bgt.n	80084b4 <__ieee754_sqrt+0x58>
 8008496:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800849a:	ea5c 0707 	orrs.w	r7, ip, r7
 800849e:	d0f2      	beq.n	8008486 <__ieee754_sqrt+0x2a>
 80084a0:	b141      	cbz	r1, 80084b4 <__ieee754_sqrt+0x58>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	f7f7 fe5f 	bl	8000168 <__aeabi_dsub>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	f7f8 f93d 	bl	800072c <__aeabi_ddiv>
 80084b2:	e7e6      	b.n	8008482 <__ieee754_sqrt+0x26>
 80084b4:	1512      	asrs	r2, r2, #20
 80084b6:	d074      	beq.n	80085a2 <__ieee754_sqrt+0x146>
 80084b8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80084bc:	07d5      	lsls	r5, r2, #31
 80084be:	f04f 0500 	mov.w	r5, #0
 80084c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80084c6:	bf48      	it	mi
 80084c8:	0fd9      	lsrmi	r1, r3, #31
 80084ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80084ce:	bf44      	itt	mi
 80084d0:	005b      	lslmi	r3, r3, #1
 80084d2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80084d6:	1051      	asrs	r1, r2, #1
 80084d8:	0fda      	lsrs	r2, r3, #31
 80084da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80084de:	4628      	mov	r0, r5
 80084e0:	2216      	movs	r2, #22
 80084e2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	1987      	adds	r7, r0, r6
 80084ea:	42a7      	cmp	r7, r4
 80084ec:	bfde      	ittt	le
 80084ee:	19b8      	addle	r0, r7, r6
 80084f0:	1be4      	suble	r4, r4, r7
 80084f2:	19ad      	addle	r5, r5, r6
 80084f4:	0fdf      	lsrs	r7, r3, #31
 80084f6:	3a01      	subs	r2, #1
 80084f8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80084fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008500:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008504:	d1f0      	bne.n	80084e8 <__ieee754_sqrt+0x8c>
 8008506:	f04f 0c20 	mov.w	ip, #32
 800850a:	4696      	mov	lr, r2
 800850c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008510:	4284      	cmp	r4, r0
 8008512:	eb06 070e 	add.w	r7, r6, lr
 8008516:	dc02      	bgt.n	800851e <__ieee754_sqrt+0xc2>
 8008518:	d112      	bne.n	8008540 <__ieee754_sqrt+0xe4>
 800851a:	429f      	cmp	r7, r3
 800851c:	d810      	bhi.n	8008540 <__ieee754_sqrt+0xe4>
 800851e:	2f00      	cmp	r7, #0
 8008520:	eb07 0e06 	add.w	lr, r7, r6
 8008524:	da42      	bge.n	80085ac <__ieee754_sqrt+0x150>
 8008526:	f1be 0f00 	cmp.w	lr, #0
 800852a:	db3f      	blt.n	80085ac <__ieee754_sqrt+0x150>
 800852c:	f100 0801 	add.w	r8, r0, #1
 8008530:	1a24      	subs	r4, r4, r0
 8008532:	4640      	mov	r0, r8
 8008534:	429f      	cmp	r7, r3
 8008536:	bf88      	it	hi
 8008538:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800853c:	1bdb      	subs	r3, r3, r7
 800853e:	4432      	add	r2, r6
 8008540:	0064      	lsls	r4, r4, #1
 8008542:	f1bc 0c01 	subs.w	ip, ip, #1
 8008546:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800854a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800854e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008552:	d1dd      	bne.n	8008510 <__ieee754_sqrt+0xb4>
 8008554:	4323      	orrs	r3, r4
 8008556:	d006      	beq.n	8008566 <__ieee754_sqrt+0x10a>
 8008558:	1c54      	adds	r4, r2, #1
 800855a:	bf0b      	itete	eq
 800855c:	4662      	moveq	r2, ip
 800855e:	3201      	addne	r2, #1
 8008560:	3501      	addeq	r5, #1
 8008562:	f022 0201 	bicne.w	r2, r2, #1
 8008566:	106b      	asrs	r3, r5, #1
 8008568:	0852      	lsrs	r2, r2, #1
 800856a:	07e8      	lsls	r0, r5, #31
 800856c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008570:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008574:	bf48      	it	mi
 8008576:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800857a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800857e:	4616      	mov	r6, r2
 8008580:	e781      	b.n	8008486 <__ieee754_sqrt+0x2a>
 8008582:	0adc      	lsrs	r4, r3, #11
 8008584:	3915      	subs	r1, #21
 8008586:	055b      	lsls	r3, r3, #21
 8008588:	2c00      	cmp	r4, #0
 800858a:	d0fa      	beq.n	8008582 <__ieee754_sqrt+0x126>
 800858c:	02e6      	lsls	r6, r4, #11
 800858e:	d50a      	bpl.n	80085a6 <__ieee754_sqrt+0x14a>
 8008590:	f1c2 0020 	rsb	r0, r2, #32
 8008594:	fa23 f000 	lsr.w	r0, r3, r0
 8008598:	1e55      	subs	r5, r2, #1
 800859a:	4093      	lsls	r3, r2
 800859c:	4304      	orrs	r4, r0
 800859e:	1b4a      	subs	r2, r1, r5
 80085a0:	e78a      	b.n	80084b8 <__ieee754_sqrt+0x5c>
 80085a2:	4611      	mov	r1, r2
 80085a4:	e7f0      	b.n	8008588 <__ieee754_sqrt+0x12c>
 80085a6:	0064      	lsls	r4, r4, #1
 80085a8:	3201      	adds	r2, #1
 80085aa:	e7ef      	b.n	800858c <__ieee754_sqrt+0x130>
 80085ac:	4680      	mov	r8, r0
 80085ae:	e7bf      	b.n	8008530 <__ieee754_sqrt+0xd4>
 80085b0:	7ff00000 	.word	0x7ff00000

080085b4 <matherr>:
 80085b4:	2000      	movs	r0, #0
 80085b6:	4770      	bx	lr

080085b8 <__errno>:
 80085b8:	4b01      	ldr	r3, [pc, #4]	; (80085c0 <__errno+0x8>)
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	2000017c 	.word	0x2000017c

080085c4 <__libc_init_array>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	2500      	movs	r5, #0
 80085c8:	4e0c      	ldr	r6, [pc, #48]	; (80085fc <__libc_init_array+0x38>)
 80085ca:	4c0d      	ldr	r4, [pc, #52]	; (8008600 <__libc_init_array+0x3c>)
 80085cc:	1ba4      	subs	r4, r4, r6
 80085ce:	10a4      	asrs	r4, r4, #2
 80085d0:	42a5      	cmp	r5, r4
 80085d2:	d109      	bne.n	80085e8 <__libc_init_array+0x24>
 80085d4:	f000 f822 	bl	800861c <_init>
 80085d8:	2500      	movs	r5, #0
 80085da:	4e0a      	ldr	r6, [pc, #40]	; (8008604 <__libc_init_array+0x40>)
 80085dc:	4c0a      	ldr	r4, [pc, #40]	; (8008608 <__libc_init_array+0x44>)
 80085de:	1ba4      	subs	r4, r4, r6
 80085e0:	10a4      	asrs	r4, r4, #2
 80085e2:	42a5      	cmp	r5, r4
 80085e4:	d105      	bne.n	80085f2 <__libc_init_array+0x2e>
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085ec:	4798      	blx	r3
 80085ee:	3501      	adds	r5, #1
 80085f0:	e7ee      	b.n	80085d0 <__libc_init_array+0xc>
 80085f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085f6:	4798      	blx	r3
 80085f8:	3501      	adds	r5, #1
 80085fa:	e7f2      	b.n	80085e2 <__libc_init_array+0x1e>
 80085fc:	08008778 	.word	0x08008778
 8008600:	08008778 	.word	0x08008778
 8008604:	08008778 	.word	0x08008778
 8008608:	0800877c 	.word	0x0800877c

0800860c <memset>:
 800860c:	4603      	mov	r3, r0
 800860e:	4402      	add	r2, r0
 8008610:	4293      	cmp	r3, r2
 8008612:	d100      	bne.n	8008616 <memset+0xa>
 8008614:	4770      	bx	lr
 8008616:	f803 1b01 	strb.w	r1, [r3], #1
 800861a:	e7f9      	b.n	8008610 <memset+0x4>

0800861c <_init>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr

08008628 <_fini>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	bf00      	nop
 800862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862e:	bc08      	pop	{r3}
 8008630:	469e      	mov	lr, r3
 8008632:	4770      	bx	lr
