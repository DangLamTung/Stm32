
i2c_scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e08  08002e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e08  08002e08  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e08  08002e08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08002e80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002e80  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bdf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001726  00000000  00000000  00028c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000144ad  00000000  00000000  0002b558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000708f  00000000  00000000  0003fa05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d980  00000000  00000000  00046a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000b4490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d24 	.word	0x08002d24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d24 	.word	0x08002d24

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fc8c 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e10f      	b.n	8000902 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d106      	bne.n	80006fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 f9f6 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2224      	movs	r2, #36	; 0x24
 8000700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0201 	bic.w	r2, r2, #1
 8000712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000714:	f000 fe54 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 8000718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	4a7b      	ldr	r2, [pc, #492]	; (800090c <HAL_I2C_Init+0x23c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d807      	bhi.n	8000734 <HAL_I2C_Init+0x64>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a7a      	ldr	r2, [pc, #488]	; (8000910 <HAL_I2C_Init+0x240>)
 8000728:	4293      	cmp	r3, r2
 800072a:	bf94      	ite	ls
 800072c:	2301      	movls	r3, #1
 800072e:	2300      	movhi	r3, #0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	e006      	b.n	8000742 <HAL_I2C_Init+0x72>
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4a77      	ldr	r2, [pc, #476]	; (8000914 <HAL_I2C_Init+0x244>)
 8000738:	4293      	cmp	r3, r2
 800073a:	bf94      	ite	ls
 800073c:	2301      	movls	r3, #1
 800073e:	2300      	movhi	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e0db      	b.n	8000902 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4a72      	ldr	r2, [pc, #456]	; (8000918 <HAL_I2C_Init+0x248>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	0c9b      	lsrs	r3, r3, #18
 8000754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	4a64      	ldr	r2, [pc, #400]	; (800090c <HAL_I2C_Init+0x23c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d802      	bhi.n	8000784 <HAL_I2C_Init+0xb4>
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3301      	adds	r3, #1
 8000782:	e009      	b.n	8000798 <HAL_I2C_Init+0xc8>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	4a63      	ldr	r2, [pc, #396]	; (800091c <HAL_I2C_Init+0x24c>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	099b      	lsrs	r3, r3, #6
 8000796:	3301      	adds	r3, #1
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	430b      	orrs	r3, r1
 800079e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80007aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4956      	ldr	r1, [pc, #344]	; (800090c <HAL_I2C_Init+0x23c>)
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d80d      	bhi.n	80007d4 <HAL_I2C_Init+0x104>
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1e59      	subs	r1, r3, #1
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	bf38      	it	cc
 80007d0:	2304      	movcc	r3, #4
 80007d2:	e04f      	b.n	8000874 <HAL_I2C_Init+0x1a4>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d111      	bne.n	8000800 <HAL_I2C_Init+0x130>
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	1e58      	subs	r0, r3, #1
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6859      	ldr	r1, [r3, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	440b      	add	r3, r1
 80007ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	e012      	b.n	8000826 <HAL_I2C_Init+0x156>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	1e58      	subs	r0, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6859      	ldr	r1, [r3, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	0099      	lsls	r1, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	fbb0 f3f3 	udiv	r3, r0, r3
 8000816:	3301      	adds	r3, #1
 8000818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_I2C_Init+0x15e>
 800082a:	2301      	movs	r3, #1
 800082c:	e022      	b.n	8000874 <HAL_I2C_Init+0x1a4>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10e      	bne.n	8000854 <HAL_I2C_Init+0x184>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1e58      	subs	r0, r3, #1
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6859      	ldr	r1, [r3, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	440b      	add	r3, r1
 8000844:	fbb0 f3f3 	udiv	r3, r0, r3
 8000848:	3301      	adds	r3, #1
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000852:	e00f      	b.n	8000874 <HAL_I2C_Init+0x1a4>
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1e58      	subs	r0, r3, #1
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6859      	ldr	r1, [r3, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	440b      	add	r3, r1
 8000862:	0099      	lsls	r1, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	fbb0 f3f3 	udiv	r3, r0, r3
 800086a:	3301      	adds	r3, #1
 800086c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	6809      	ldr	r1, [r1, #0]
 8000878:	4313      	orrs	r3, r2
 800087a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69da      	ldr	r2, [r3, #28]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a1b      	ldr	r3, [r3, #32]
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80008a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6911      	ldr	r1, [r2, #16]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68d2      	ldr	r2, [r2, #12]
 80008ae:	4311      	orrs	r1, r2
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	431a      	orrs	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0201 	orr.w	r2, r2, #1
 80008e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2220      	movs	r2, #32
 80008ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	000186a0 	.word	0x000186a0
 8000910:	001e847f 	.word	0x001e847f
 8000914:	003d08ff 	.word	0x003d08ff
 8000918:	431bde83 	.word	0x431bde83
 800091c:	10624dd3 	.word	0x10624dd3

08000920 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af02      	add	r7, sp, #8
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	460b      	mov	r3, r1
 800092e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff fc64 	bl	80001fc <HAL_GetTick>
 8000934:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b20      	cmp	r3, #32
 8000944:	f040 8105 	bne.w	8000b52 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2319      	movs	r3, #25
 800094e:	2201      	movs	r2, #1
 8000950:	4982      	ldr	r1, [pc, #520]	; (8000b5c <HAL_I2C_IsDeviceReady+0x23c>)
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f000 f906 	bl	8000b64 <I2C_WaitOnFlagUntilTimeout>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800095e:	2302      	movs	r3, #2
 8000960:	e0f8      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000968:	2b01      	cmp	r3, #1
 800096a:	d101      	bne.n	8000970 <HAL_I2C_IsDeviceReady+0x50>
 800096c:	2302      	movs	r3, #2
 800096e:	e0f1      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b01      	cmp	r3, #1
 8000984:	d007      	beq.n	8000996 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2224      	movs	r2, #36	; 0x24
 80009aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2200      	movs	r2, #0
 80009b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a6a      	ldr	r2, [pc, #424]	; (8000b60 <HAL_I2C_IsDeviceReady+0x240>)
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f000 f8c4 	bl	8000b64 <I2C_WaitOnFlagUntilTimeout>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e0b6      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80009e6:	897b      	ldrh	r3, [r7, #10]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80009f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80009f6:	f7ff fc01 	bl	80001fc <HAL_GetTick>
 80009fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	bf0c      	ite	eq
 8000a0a:	2301      	moveq	r3, #1
 8000a0c:	2300      	movne	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a20:	bf0c      	ite	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	2300      	movne	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000a2a:	e025      	b.n	8000a78 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000a2c:	f7ff fbe6 	bl	80001fc <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d302      	bcc.n	8000a42 <HAL_I2C_IsDeviceReady+0x122>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	22a0      	movs	r2, #160	; 0xa0
 8000a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	bf0c      	ite	eq
 8000a58:	2301      	moveq	r3, #1
 8000a5a:	2300      	movne	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6e:	bf0c      	ite	eq
 8000a70:	2301      	moveq	r3, #1
 8000a72:	2300      	movne	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2ba0      	cmp	r3, #160	; 0xa0
 8000a82:	d005      	beq.n	8000a90 <HAL_I2C_IsDeviceReady+0x170>
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <HAL_I2C_IsDeviceReady+0x170>
 8000a8a:	7dbb      	ldrb	r3, [r7, #22]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0cd      	beq.n	8000a2c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2220      	movs	r2, #32
 8000a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d129      	bne.n	8000afa <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ab4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2319      	movs	r3, #25
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4921      	ldr	r1, [pc, #132]	; (8000b5c <HAL_I2C_IsDeviceReady+0x23c>)
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f000 f844 	bl	8000b64 <I2C_WaitOnFlagUntilTimeout>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e036      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2220      	movs	r2, #32
 8000aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e02c      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000b12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2319      	movs	r3, #25
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	490f      	ldr	r1, [pc, #60]	; (8000b5c <HAL_I2C_IsDeviceReady+0x23c>)
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f820 	bl	8000b64 <I2C_WaitOnFlagUntilTimeout>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e012      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f4ff af3e 	bcc.w	80009ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2220      	movs	r2, #32
 8000b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8000b52:	2302      	movs	r3, #2
  }
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	00100002 	.word	0x00100002
 8000b60:	ffff0000 	.word	0xffff0000

08000b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b74:	e025      	b.n	8000bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b7c:	d021      	beq.n	8000bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b7e:	f7ff fb3d 	bl	80001fc <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d302      	bcc.n	8000b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d116      	bne.n	8000bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f043 0220 	orr.w	r2, r3, #32
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e023      	b.n	8000c0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10d      	bne.n	8000be8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf0c      	ite	eq
 8000bde:	2301      	moveq	r3, #1
 8000be0:	2300      	movne	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	e00c      	b.n	8000c02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2301      	moveq	r3, #1
 8000bfc:	2300      	movne	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d0b6      	beq.n	8000b76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e26c      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 8087 	beq.w	8000d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c34:	4b92      	ldr	r3, [pc, #584]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d00c      	beq.n	8000c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c40:	4b8f      	ldr	r3, [pc, #572]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d112      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5e>
 8000c4c:	4b8c      	ldr	r3, [pc, #560]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c58:	d10b      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5a:	4b89      	ldr	r3, [pc, #548]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d06c      	beq.n	8000d40 <HAL_RCC_OscConfig+0x12c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d168      	bne.n	8000d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e246      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7a:	d106      	bne.n	8000c8a <HAL_RCC_OscConfig+0x76>
 8000c7c:	4b80      	ldr	r3, [pc, #512]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a7f      	ldr	r2, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e02e      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a7a      	ldr	r2, [pc, #488]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b78      	ldr	r3, [pc, #480]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a77      	ldr	r2, [pc, #476]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e01d      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0xbc>
 8000cb6:	4b72      	ldr	r3, [pc, #456]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a71      	ldr	r2, [pc, #452]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a6e      	ldr	r2, [pc, #440]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e00b      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000cd0:	4b6b      	ldr	r3, [pc, #428]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a6a      	ldr	r2, [pc, #424]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a67      	ldr	r2, [pc, #412]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fa84 	bl	80001fc <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fa80 	bl	80001fc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e1fa      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f0      	beq.n	8000cf8 <HAL_RCC_OscConfig+0xe4>
 8000d16:	e014      	b.n	8000d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fa70 	bl	80001fc <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fa6c 	bl	80001fc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e1e6      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f0      	bne.n	8000d20 <HAL_RCC_OscConfig+0x10c>
 8000d3e:	e000      	b.n	8000d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d063      	beq.n	8000e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4e:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d11c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x18c>
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d116      	bne.n	8000da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x176>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d001      	beq.n	8000d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e1ba      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4939      	ldr	r1, [pc, #228]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	e03a      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d020      	beq.n	8000dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x270>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dae:	f7ff fa25 	bl	80001fc <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fa21 	bl	80001fc <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e19b      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4927      	ldr	r1, [pc, #156]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	e015      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_RCC_OscConfig+0x270>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fa04 	bl	80001fc <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df8:	f7ff fa00 	bl	80001fc <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e17a      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d03a      	beq.n	8000e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d019      	beq.n	8000e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e30:	f7ff f9e4 	bl	80001fc <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff f9e0 	bl	80001fc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e15a      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 fada 	bl	8001410 <RCC_Delay>
 8000e5c:	e01c      	b.n	8000e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e64:	f7ff f9ca 	bl	80001fc <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6a:	e00f      	b.n	8000e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff f9c6 	bl	80001fc <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d908      	bls.n	8000e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e140      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	42420000 	.word	0x42420000
 8000e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	4b9e      	ldr	r3, [pc, #632]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e9      	bne.n	8000e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a6 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eaa:	4b97      	ldr	r3, [pc, #604]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b94      	ldr	r3, [pc, #592]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a93      	ldr	r2, [pc, #588]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b91      	ldr	r3, [pc, #580]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed2:	4b8e      	ldr	r3, [pc, #568]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ede:	4b8b      	ldr	r3, [pc, #556]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a8a      	ldr	r2, [pc, #552]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eea:	f7ff f987 	bl	80001fc <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff f983 	bl	80001fc <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e0fd      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	4b81      	ldr	r3, [pc, #516]	; (800110c <HAL_RCC_OscConfig+0x4f8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x312>
 8000f18:	4b7b      	ldr	r3, [pc, #492]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a7a      	ldr	r2, [pc, #488]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	e02d      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x334>
 8000f2e:	4b76      	ldr	r3, [pc, #472]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a75      	ldr	r2, [pc, #468]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	4b73      	ldr	r3, [pc, #460]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a72      	ldr	r2, [pc, #456]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	e01c      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x356>
 8000f50:	4b6d      	ldr	r3, [pc, #436]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a6c      	ldr	r2, [pc, #432]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a69      	ldr	r2, [pc, #420]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f6a:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a66      	ldr	r2, [pc, #408]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	4b64      	ldr	r3, [pc, #400]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4a63      	ldr	r2, [pc, #396]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d015      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff f937 	bl	80001fc <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff f933 	bl	80001fc <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e0ab      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	4b57      	ldr	r3, [pc, #348]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0ee      	beq.n	8000f92 <HAL_RCC_OscConfig+0x37e>
 8000fb4:	e014      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff f921 	bl	80001fc <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff f91d 	bl	80001fc <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e095      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1ee      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe6:	4b48      	ldr	r3, [pc, #288]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8081 	beq.w	80010fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b08      	cmp	r3, #8
 8001006:	d061      	beq.n	80010cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d146      	bne.n	800109e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_RCC_OscConfig+0x4fc>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff f8f1 	bl	80001fc <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff f8ed 	bl	80001fc <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e067      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d108      	bne.n	8001058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	492d      	ldr	r1, [pc, #180]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a19      	ldr	r1, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	430b      	orrs	r3, r1
 800106a:	4927      	ldr	r1, [pc, #156]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x4fc>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff f8c1 	bl	80001fc <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff f8bd 	bl	80001fc <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e037      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x46a>
 800109c:	e02f      	b.n	80010fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_RCC_OscConfig+0x4fc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff f8aa 	bl	80001fc <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff f8a6 	bl	80001fc <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e020      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x498>
 80010ca:	e018      	b.n	80010fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e013      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_RCC_OscConfig+0x4f4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	40007000 	.word	0x40007000
 8001110:	42420060 	.word	0x42420060

08001114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0d0      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d910      	bls.n	8001158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 0207 	bic.w	r2, r3, #7
 800113e:	4965      	ldr	r1, [pc, #404]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0b8      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d020      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001170:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800117a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	494d      	ldr	r1, [pc, #308]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d040      	beq.n	8001234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d115      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e07f      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e073      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e06b      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4936      	ldr	r1, [pc, #216]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001204:	f7fe fffa 	bl	80001fc <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7fe fff6 	bl	80001fc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e053      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d210      	bcs.n	8001264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 0207 	bic.w	r2, r3, #7
 800124a:	4922      	ldr	r1, [pc, #136]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d001      	beq.n	8001264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e032      	b.n	80012ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4916      	ldr	r1, [pc, #88]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	490e      	ldr	r1, [pc, #56]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a2:	f000 f821 	bl	80012e8 <HAL_RCC_GetSysClockFreq>
 80012a6:	4601      	mov	r1, r0
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	fa21 f303 	lsr.w	r3, r1, r3
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_RCC_ClockConfig+0x1cc>)
 80012bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1d0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff58 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	08002d58 	.word	0x08002d58
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000000 	.word	0x20000000

080012e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e8:	b490      	push	{r4, r7}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012f0:	1d3c      	adds	r4, r7, #4
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d002      	beq.n	8001328 <HAL_RCC_GetSysClockFreq+0x40>
 8001322:	2b08      	cmp	r3, #8
 8001324:	d003      	beq.n	800132e <HAL_RCC_GetSysClockFreq+0x46>
 8001326:	e02d      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800132a:	623b      	str	r3, [r7, #32]
      break;
 800132c:	e02d      	b.n	800138a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800133a:	4413      	add	r3, r2
 800133c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001340:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	0c5b      	lsrs	r3, r3, #17
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800135a:	4413      	add	r3, r2
 800135c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001360:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001366:	fb02 f203 	mul.w	r2, r2, r3
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	e004      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	623b      	str	r3, [r7, #32]
      break;
 8001382:	e002      	b.n	800138a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001386:	623b      	str	r3, [r7, #32]
      break;
 8001388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800138a:	6a3b      	ldr	r3, [r7, #32]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bc90      	pop	{r4, r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	08002d3c 	.word	0x08002d3c
 800139c:	08002d4c 	.word	0x08002d4c
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	003d0900 	.word	0x003d0900

080013ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_RCC_GetHCLKFreq+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000008 	.word	0x20000008

080013c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c4:	f7ff fff2 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013c8:	4601      	mov	r1, r0
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08002d68 	.word	0x08002d68

080013e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013ec:	f7ff ffde 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013f0:	4601      	mov	r1, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0adb      	lsrs	r3, r3, #11
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	08002d68 	.word	0x08002d68

08001410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <RCC_Delay+0x34>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <RCC_Delay+0x38>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0a5b      	lsrs	r3, r3, #9
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800142c:	bf00      	nop
  }
  while (Delay --);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	60fa      	str	r2, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f9      	bne.n	800142c <RCC_Delay+0x1c>
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e03f      	b.n	80014de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fb88 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2224      	movs	r2, #36	; 0x24
 800147c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800148e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f90b 	bl	80016ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b088      	sub	sp, #32
 80014ea:	af02      	add	r7, sp, #8
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b20      	cmp	r3, #32
 8001504:	f040 8083 	bne.w	800160e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_UART_Transmit+0x2e>
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e07b      	b.n	8001610 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_UART_Transmit+0x40>
 8001522:	2302      	movs	r3, #2
 8001524:	e074      	b.n	8001610 <HAL_UART_Transmit+0x12a>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2221      	movs	r2, #33	; 0x21
 8001538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800153c:	f7fe fe5e 	bl	80001fc <HAL_GetTick>
 8001540:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800154e:	e042      	b.n	80015d6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001566:	d122      	bne.n	80015ae <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f850 	bl	8001618 <UART_WaitOnFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e046      	b.n	8001610 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001594:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3302      	adds	r3, #2
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	e017      	b.n	80015d6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	e013      	b.n	80015d6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2200      	movs	r2, #0
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f82d 	bl	8001618 <UART_WaitOnFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e023      	b.n	8001610 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015da:	b29b      	uxth	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1b7      	bne.n	8001550 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2200      	movs	r2, #0
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f814 	bl	8001618 <UART_WaitOnFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e00a      	b.n	8001610 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800160e:	2302      	movs	r3, #2
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001628:	e02c      	b.n	8001684 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001630:	d028      	beq.n	8001684 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <UART_WaitOnFlagUntilTimeout+0x30>
 8001638:	f7fe fde0 	bl	80001fc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	429a      	cmp	r2, r3
 8001646:	d21d      	bcs.n	8001684 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001656:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e00f      	b.n	80016a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	4013      	ands	r3, r2
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	bf0c      	ite	eq
 8001694:	2301      	moveq	r3, #1
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d0c3      	beq.n	800162a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016e6:	f023 030c 	bic.w	r3, r3, #12
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a52      	ldr	r2, [pc, #328]	; (8001858 <UART_SetConfig+0x1ac>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d14e      	bne.n	80017b2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001714:	f7ff fe68 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
 8001718:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	441a      	add	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	4a4a      	ldr	r2, [pc, #296]	; (800185c <UART_SetConfig+0x1b0>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	0119      	lsls	r1, r3, #4
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009a      	lsls	r2, r3, #2
 8001744:	441a      	add	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <UART_SetConfig+0x1b0>)
 8001752:	fba3 0302 	umull	r0, r3, r3, r2
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2064      	movs	r0, #100	; 0x64
 800175a:	fb00 f303 	mul.w	r3, r0, r3
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	3332      	adds	r3, #50	; 0x32
 8001764:	4a3d      	ldr	r2, [pc, #244]	; (800185c <UART_SetConfig+0x1b0>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001770:	4419      	add	r1, r3
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009a      	lsls	r2, r3, #2
 800177c:	441a      	add	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	fbb2 f2f3 	udiv	r2, r2, r3
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <UART_SetConfig+0x1b0>)
 800178a:	fba3 0302 	umull	r0, r3, r3, r2
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	fb00 f303 	mul.w	r3, r0, r3
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	3332      	adds	r3, #50	; 0x32
 800179c:	4a2f      	ldr	r2, [pc, #188]	; (800185c <UART_SetConfig+0x1b0>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	f003 020f 	and.w	r2, r3, #15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	440a      	add	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80017b0:	e04d      	b.n	800184e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80017b2:	f7ff fe05 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 80017b6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	441a      	add	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <UART_SetConfig+0x1b0>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	0119      	lsls	r1, r3, #4
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	441a      	add	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <UART_SetConfig+0x1b0>)
 80017f0:	fba3 0302 	umull	r0, r3, r3, r2
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	fb00 f303 	mul.w	r3, r0, r3
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	3332      	adds	r3, #50	; 0x32
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <UART_SetConfig+0x1b0>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180e:	4419      	add	r1, r3
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	009a      	lsls	r2, r3, #2
 800181a:	441a      	add	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	fbb2 f2f3 	udiv	r2, r2, r3
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <UART_SetConfig+0x1b0>)
 8001828:	fba3 0302 	umull	r0, r3, r3, r2
 800182c:	095b      	lsrs	r3, r3, #5
 800182e:	2064      	movs	r0, #100	; 0x64
 8001830:	fb00 f303 	mul.w	r3, r0, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	3332      	adds	r3, #50	; 0x32
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <UART_SetConfig+0x1b0>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	f003 020f 	and.w	r2, r3, #15
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	440a      	add	r2, r1
 800184c:	609a      	str	r2, [r3, #8]
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40013800 	.word	0x40013800
 800185c:	51eb851f 	.word	0x51eb851f

08001860 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8001868:	1d39      	adds	r1, r7, #4
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	2201      	movs	r2, #1
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <__io_putchar+0x20>)
 8001870:	f7ff fe39 	bl	80014e6 <HAL_UART_Transmit>


    return ch;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200000f0 	.word	0x200000f0

08001884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188a:	f7fe fc5f 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188e:	f000 f831 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001892:	f000 f8c3 	bl	8001a1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001896:	f000 f869 	bl	800196c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800189a:	f000 f895 	bl	80019c8 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_StatusTypeDef result;

		  for (i=1; i<128; i++)
 800189e:	2301      	movs	r3, #1
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	e01b      	b.n	80018dc <main+0x58>
		   	   * &hi2c1 is the handle
		   	   * (uint16_t)(i<<1) is the i2c address left aligned
		   	   * retries 2
		   	   * timeout 2
		   	   */
		   	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2000);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b299      	uxth	r1, r3
 80018ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018b0:	2202      	movs	r2, #2
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <main+0x68>)
 80018b4:	f7ff f834 	bl	8000920 <HAL_I2C_IsDeviceReady>
 80018b8:	4603      	mov	r3, r0
 80018ba:	70fb      	strb	r3, [r7, #3]
		   	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <main+0x44>
		   	  {
		   		  printf("."); // No ACK received at that address
 80018c2:	202e      	movs	r0, #46	; 0x2e
 80018c4:	f000 fb0e 	bl	8001ee4 <putchar>
		   	  }
		   	  if (result == HAL_OK)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d103      	bne.n	80018d6 <main+0x52>
		   	  {
		   		  printf("0x%X", i); // Received an ACK at that address
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <main+0x6c>)
 80018d2:	f000 faef 	bl	8001eb4 <iprintf>
		  for (i=1; i<128; i++)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3301      	adds	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b7f      	cmp	r3, #127	; 0x7f
 80018e0:	dde0      	ble.n	80018a4 <main+0x20>
		   	  }
		   	}
		  HAL_Delay(100);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f7fe fc94 	bl	8000210 <HAL_Delay>
  {
 80018e8:	e7d9      	b.n	800189e <main+0x1a>
 80018ea:	bf00      	nop
 80018ec:	2000009c 	.word	0x2000009c
 80018f0:	08002d50 	.word	0x08002d50

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b090      	sub	sp, #64	; 0x40
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	2228      	movs	r2, #40	; 0x28
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f000 face 	bl	8001ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191a:	2301      	movs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191e:	2310      	movs	r3, #16
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f972 	bl	8000c14 <HAL_RCC_OscConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001936:	f000 f89f 	bl	8001a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fbde 	bl	8001114 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800195e:	f000 f88b 	bl	8001a78 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3740      	adds	r7, #64	; 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_I2C1_Init+0x50>)
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <MX_I2C1_Init+0x54>)
 8001974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_I2C1_Init+0x50>)
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_I2C1_Init+0x58>)
 800197a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_I2C1_Init+0x50>)
 800198a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_I2C1_Init+0x50>)
 80019aa:	f7fe fe91 	bl	80006d0 <HAL_I2C_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b4:	f000 f860 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000009c 	.word	0x2000009c
 80019c0:	40005400 	.word	0x40005400
 80019c4:	000186a0 	.word	0x000186a0

080019c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART2_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 8001a00:	f7ff fd24 	bl	800144c <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f835 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200000f0 	.word	0x200000f0
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	6193      	str	r3, [r2, #24]
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <MX_GPIO_Init+0x58>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_MspInit+0x60>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_MspInit+0x60>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000

08001ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_I2C_MspInit+0x90>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d132      	bne.n	8001b6e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_I2C_MspInit+0x94>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_I2C_MspInit+0x94>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_I2C_MspInit+0x94>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b26:	2312      	movs	r3, #18
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <HAL_I2C_MspInit+0x98>)
 8001b36:	f7fe fc71 	bl	800041c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_I2C_MspInit+0x9c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_I2C_MspInit+0x9c>)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_I2C_MspInit+0x94>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_I2C_MspInit+0x94>)
 8001b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_I2C_MspInit+0x94>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40010000 	.word	0x40010000

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0x88>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d12f      	bne.n	8001c08 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb2:	61d3      	str	r3, [r2, #28]
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <HAL_UART_MspInit+0x90>)
 8001bec:	f7fe fc16 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0x90>)
 8001c04:	f7fe fc0a 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010800 	.word	0x40010800

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <HardFault_Handler+0x4>

08001c2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <UsageFault_Handler+0x4>

08001c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f7fe fab6 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e00a      	b.n	8001c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c82:	f3af 8000 	nop.w
 8001c86:	4601      	mov	r1, r0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	b2ca      	uxtb	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf0      	blt.n	8001c82 <_read+0x12>
	}

return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e009      	b.n	8001cd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fdcb 	bl	8001860 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf1      	blt.n	8001cbc <_write+0x12>
	}
	return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_close>:

int _close(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d08:	605a      	str	r2, [r3, #4]
	return 0;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <_isatty>:

int _isatty(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
	return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
	...

08001d44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x50>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x16>
		heap_end = &end;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <_sbrk+0x50>)
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <_sbrk+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <_sbrk+0x50>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <_sbrk+0x50>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	466a      	mov	r2, sp
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d907      	bls.n	8001d7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d6e:	f000 f86f 	bl	8001e50 <__errno>
 8001d72:	4602      	mov	r2, r0
 8001d74:	230c      	movs	r3, #12
 8001d76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7c:	e006      	b.n	8001d8c <_sbrk+0x48>
	}

	heap_end += incr;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_sbrk+0x50>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <_sbrk+0x50>)
 8001d88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000008c 	.word	0x2000008c
 8001d98:	20000138 	.word	0x20000138

08001d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <SystemInit+0x5c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <SystemInit+0x5c>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <SystemInit+0x5c>)
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4911      	ldr	r1, [pc, #68]	; (8001df8 <SystemInit+0x5c>)
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <SystemInit+0x60>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <SystemInit+0x5c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <SystemInit+0x5c>)
 8001dbe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <SystemInit+0x5c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SystemInit+0x5c>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <SystemInit+0x5c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <SystemInit+0x5c>)
 8001dda:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dde:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SystemInit+0x5c>)
 8001de2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001de6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SystemInit+0x64>)
 8001dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dee:	609a      	str	r2, [r3, #8]
#endif 
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	f8ff0000 	.word	0xf8ff0000
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e06:	e003      	b.n	8001e10 <LoopCopyDataInit>

08001e08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e0e:	3104      	adds	r1, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e10:	480a      	ldr	r0, [pc, #40]	; (8001e3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e18:	d3f6      	bcc.n	8001e08 <CopyDataInit>
  ldr r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e1c:	e002      	b.n	8001e24 <LoopFillZerobss>

08001e1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e20:	f842 3b04 	str.w	r3, [r2], #4

08001e24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e28:	d3f9      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e2a:	f7ff ffb7 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f000 f815 	bl	8001e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e32:	f7ff fd27 	bl	8001884 <main>
  bx lr
 8001e36:	4770      	bx	lr
  ldr r3, =_sidata
 8001e38:	08002e10 	.word	0x08002e10
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e40:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001e44:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001e48:	20000134 	.word	0x20000134

08001e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_2_IRQHandler>
	...

08001e50 <__errno>:
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <__errno+0x8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <__libc_init_array>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	2500      	movs	r5, #0
 8001e60:	4e0c      	ldr	r6, [pc, #48]	; (8001e94 <__libc_init_array+0x38>)
 8001e62:	4c0d      	ldr	r4, [pc, #52]	; (8001e98 <__libc_init_array+0x3c>)
 8001e64:	1ba4      	subs	r4, r4, r6
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	42a5      	cmp	r5, r4
 8001e6a:	d109      	bne.n	8001e80 <__libc_init_array+0x24>
 8001e6c:	f000 ff5a 	bl	8002d24 <_init>
 8001e70:	2500      	movs	r5, #0
 8001e72:	4e0a      	ldr	r6, [pc, #40]	; (8001e9c <__libc_init_array+0x40>)
 8001e74:	4c0a      	ldr	r4, [pc, #40]	; (8001ea0 <__libc_init_array+0x44>)
 8001e76:	1ba4      	subs	r4, r4, r6
 8001e78:	10a4      	asrs	r4, r4, #2
 8001e7a:	42a5      	cmp	r5, r4
 8001e7c:	d105      	bne.n	8001e8a <__libc_init_array+0x2e>
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e84:	4798      	blx	r3
 8001e86:	3501      	adds	r5, #1
 8001e88:	e7ee      	b.n	8001e68 <__libc_init_array+0xc>
 8001e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e8e:	4798      	blx	r3
 8001e90:	3501      	adds	r5, #1
 8001e92:	e7f2      	b.n	8001e7a <__libc_init_array+0x1e>
 8001e94:	08002e08 	.word	0x08002e08
 8001e98:	08002e08 	.word	0x08002e08
 8001e9c:	08002e08 	.word	0x08002e08
 8001ea0:	08002e0c 	.word	0x08002e0c

08001ea4 <memset>:
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4402      	add	r2, r0
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d100      	bne.n	8001eae <memset+0xa>
 8001eac:	4770      	bx	lr
 8001eae:	f803 1b01 	strb.w	r1, [r3], #1
 8001eb2:	e7f9      	b.n	8001ea8 <memset+0x4>

08001eb4 <iprintf>:
 8001eb4:	b40f      	push	{r0, r1, r2, r3}
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <iprintf+0x2c>)
 8001eb8:	b513      	push	{r0, r1, r4, lr}
 8001eba:	681c      	ldr	r4, [r3, #0]
 8001ebc:	b124      	cbz	r4, 8001ec8 <iprintf+0x14>
 8001ebe:	69a3      	ldr	r3, [r4, #24]
 8001ec0:	b913      	cbnz	r3, 8001ec8 <iprintf+0x14>
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f000 f862 	bl	8001f8c <__sinit>
 8001ec8:	ab05      	add	r3, sp, #20
 8001eca:	9a04      	ldr	r2, [sp, #16]
 8001ecc:	68a1      	ldr	r1, [r4, #8]
 8001ece:	4620      	mov	r0, r4
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	f000 f967 	bl	80021a4 <_vfiprintf_r>
 8001ed6:	b002      	add	sp, #8
 8001ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001edc:	b004      	add	sp, #16
 8001ede:	4770      	bx	lr
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <putchar>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <putchar+0x24>)
 8001ee8:	4605      	mov	r5, r0
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	b124      	cbz	r4, 8001ef8 <putchar+0x14>
 8001eee:	69a3      	ldr	r3, [r4, #24]
 8001ef0:	b913      	cbnz	r3, 8001ef8 <putchar+0x14>
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f000 f84a 	bl	8001f8c <__sinit>
 8001ef8:	68a2      	ldr	r2, [r4, #8]
 8001efa:	4629      	mov	r1, r5
 8001efc:	4620      	mov	r0, r4
 8001efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f02:	f000 bbed 	b.w	80026e0 <_putc_r>
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <std>:
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	b510      	push	{r4, lr}
 8001f10:	4604      	mov	r4, r0
 8001f12:	e9c0 3300 	strd	r3, r3, [r0]
 8001f16:	6083      	str	r3, [r0, #8]
 8001f18:	8181      	strh	r1, [r0, #12]
 8001f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8001f1c:	81c2      	strh	r2, [r0, #14]
 8001f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f22:	6183      	str	r3, [r0, #24]
 8001f24:	4619      	mov	r1, r3
 8001f26:	2208      	movs	r2, #8
 8001f28:	305c      	adds	r0, #92	; 0x5c
 8001f2a:	f7ff ffbb 	bl	8001ea4 <memset>
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <std+0x38>)
 8001f30:	6224      	str	r4, [r4, #32]
 8001f32:	6263      	str	r3, [r4, #36]	; 0x24
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <std+0x3c>)
 8001f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <std+0x40>)
 8001f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <std+0x44>)
 8001f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f40:	bd10      	pop	{r4, pc}
 8001f42:	bf00      	nop
 8001f44:	0800276d 	.word	0x0800276d
 8001f48:	0800278f 	.word	0x0800278f
 8001f4c:	080027c7 	.word	0x080027c7
 8001f50:	080027eb 	.word	0x080027eb

08001f54 <_cleanup_r>:
 8001f54:	4901      	ldr	r1, [pc, #4]	; (8001f5c <_cleanup_r+0x8>)
 8001f56:	f000 b885 	b.w	8002064 <_fwalk_reent>
 8001f5a:	bf00      	nop
 8001f5c:	08002ac5 	.word	0x08002ac5

08001f60 <__sfmoreglue>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	2568      	movs	r5, #104	; 0x68
 8001f64:	1e4a      	subs	r2, r1, #1
 8001f66:	4355      	muls	r5, r2
 8001f68:	460e      	mov	r6, r1
 8001f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f6e:	f000 f897 	bl	80020a0 <_malloc_r>
 8001f72:	4604      	mov	r4, r0
 8001f74:	b140      	cbz	r0, 8001f88 <__sfmoreglue+0x28>
 8001f76:	2100      	movs	r1, #0
 8001f78:	e9c0 1600 	strd	r1, r6, [r0]
 8001f7c:	300c      	adds	r0, #12
 8001f7e:	60a0      	str	r0, [r4, #8]
 8001f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f84:	f7ff ff8e 	bl	8001ea4 <memset>
 8001f88:	4620      	mov	r0, r4
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}

08001f8c <__sinit>:
 8001f8c:	6983      	ldr	r3, [r0, #24]
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	4604      	mov	r4, r0
 8001f92:	bb33      	cbnz	r3, 8001fe2 <__sinit+0x56>
 8001f94:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001f98:	6503      	str	r3, [r0, #80]	; 0x50
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <__sinit+0x58>)
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <__sinit+0x5c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6282      	str	r2, [r0, #40]	; 0x28
 8001fa2:	4298      	cmp	r0, r3
 8001fa4:	bf04      	itt	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	6183      	streq	r3, [r0, #24]
 8001faa:	f000 f81f 	bl	8001fec <__sfp>
 8001fae:	6060      	str	r0, [r4, #4]
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f000 f81b 	bl	8001fec <__sfp>
 8001fb6:	60a0      	str	r0, [r4, #8]
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f000 f817 	bl	8001fec <__sfp>
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60e0      	str	r0, [r4, #12]
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	6860      	ldr	r0, [r4, #4]
 8001fc6:	f7ff ffa1 	bl	8001f0c <std>
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2109      	movs	r1, #9
 8001fce:	68a0      	ldr	r0, [r4, #8]
 8001fd0:	f7ff ff9c 	bl	8001f0c <std>
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	2112      	movs	r1, #18
 8001fd8:	68e0      	ldr	r0, [r4, #12]
 8001fda:	f7ff ff97 	bl	8001f0c <std>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61a3      	str	r3, [r4, #24]
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	08002d70 	.word	0x08002d70
 8001fe8:	08001f55 	.word	0x08001f55

08001fec <__sfp>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <__sfp+0x70>)
 8001ff0:	4607      	mov	r7, r0
 8001ff2:	681e      	ldr	r6, [r3, #0]
 8001ff4:	69b3      	ldr	r3, [r6, #24]
 8001ff6:	b913      	cbnz	r3, 8001ffe <__sfp+0x12>
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	f7ff ffc7 	bl	8001f8c <__sinit>
 8001ffe:	3648      	adds	r6, #72	; 0x48
 8002000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002004:	3b01      	subs	r3, #1
 8002006:	d503      	bpl.n	8002010 <__sfp+0x24>
 8002008:	6833      	ldr	r3, [r6, #0]
 800200a:	b133      	cbz	r3, 800201a <__sfp+0x2e>
 800200c:	6836      	ldr	r6, [r6, #0]
 800200e:	e7f7      	b.n	8002000 <__sfp+0x14>
 8002010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002014:	b16d      	cbz	r5, 8002032 <__sfp+0x46>
 8002016:	3468      	adds	r4, #104	; 0x68
 8002018:	e7f4      	b.n	8002004 <__sfp+0x18>
 800201a:	2104      	movs	r1, #4
 800201c:	4638      	mov	r0, r7
 800201e:	f7ff ff9f 	bl	8001f60 <__sfmoreglue>
 8002022:	6030      	str	r0, [r6, #0]
 8002024:	2800      	cmp	r0, #0
 8002026:	d1f1      	bne.n	800200c <__sfp+0x20>
 8002028:	230c      	movs	r3, #12
 800202a:	4604      	mov	r4, r0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4620      	mov	r0, r4
 8002030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <__sfp+0x74>)
 8002034:	6665      	str	r5, [r4, #100]	; 0x64
 8002036:	e9c4 5500 	strd	r5, r5, [r4]
 800203a:	60a5      	str	r5, [r4, #8]
 800203c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002040:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002044:	2208      	movs	r2, #8
 8002046:	4629      	mov	r1, r5
 8002048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800204c:	f7ff ff2a 	bl	8001ea4 <memset>
 8002050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002058:	e7e9      	b.n	800202e <__sfp+0x42>
 800205a:	bf00      	nop
 800205c:	08002d70 	.word	0x08002d70
 8002060:	ffff0001 	.word	0xffff0001

08002064 <_fwalk_reent>:
 8002064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002068:	4680      	mov	r8, r0
 800206a:	4689      	mov	r9, r1
 800206c:	2600      	movs	r6, #0
 800206e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002072:	b914      	cbnz	r4, 800207a <_fwalk_reent+0x16>
 8002074:	4630      	mov	r0, r6
 8002076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800207a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800207e:	3f01      	subs	r7, #1
 8002080:	d501      	bpl.n	8002086 <_fwalk_reent+0x22>
 8002082:	6824      	ldr	r4, [r4, #0]
 8002084:	e7f5      	b.n	8002072 <_fwalk_reent+0xe>
 8002086:	89ab      	ldrh	r3, [r5, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d907      	bls.n	800209c <_fwalk_reent+0x38>
 800208c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002090:	3301      	adds	r3, #1
 8002092:	d003      	beq.n	800209c <_fwalk_reent+0x38>
 8002094:	4629      	mov	r1, r5
 8002096:	4640      	mov	r0, r8
 8002098:	47c8      	blx	r9
 800209a:	4306      	orrs	r6, r0
 800209c:	3568      	adds	r5, #104	; 0x68
 800209e:	e7ee      	b.n	800207e <_fwalk_reent+0x1a>

080020a0 <_malloc_r>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	1ccd      	adds	r5, r1, #3
 80020a4:	f025 0503 	bic.w	r5, r5, #3
 80020a8:	3508      	adds	r5, #8
 80020aa:	2d0c      	cmp	r5, #12
 80020ac:	bf38      	it	cc
 80020ae:	250c      	movcc	r5, #12
 80020b0:	2d00      	cmp	r5, #0
 80020b2:	4606      	mov	r6, r0
 80020b4:	db01      	blt.n	80020ba <_malloc_r+0x1a>
 80020b6:	42a9      	cmp	r1, r5
 80020b8:	d903      	bls.n	80020c2 <_malloc_r+0x22>
 80020ba:	230c      	movs	r3, #12
 80020bc:	6033      	str	r3, [r6, #0]
 80020be:	2000      	movs	r0, #0
 80020c0:	bd70      	pop	{r4, r5, r6, pc}
 80020c2:	f000 fdad 	bl	8002c20 <__malloc_lock>
 80020c6:	4a21      	ldr	r2, [pc, #132]	; (800214c <_malloc_r+0xac>)
 80020c8:	6814      	ldr	r4, [r2, #0]
 80020ca:	4621      	mov	r1, r4
 80020cc:	b991      	cbnz	r1, 80020f4 <_malloc_r+0x54>
 80020ce:	4c20      	ldr	r4, [pc, #128]	; (8002150 <_malloc_r+0xb0>)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	b91b      	cbnz	r3, 80020dc <_malloc_r+0x3c>
 80020d4:	4630      	mov	r0, r6
 80020d6:	f000 fb39 	bl	800274c <_sbrk_r>
 80020da:	6020      	str	r0, [r4, #0]
 80020dc:	4629      	mov	r1, r5
 80020de:	4630      	mov	r0, r6
 80020e0:	f000 fb34 	bl	800274c <_sbrk_r>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d124      	bne.n	8002132 <_malloc_r+0x92>
 80020e8:	230c      	movs	r3, #12
 80020ea:	4630      	mov	r0, r6
 80020ec:	6033      	str	r3, [r6, #0]
 80020ee:	f000 fd98 	bl	8002c22 <__malloc_unlock>
 80020f2:	e7e4      	b.n	80020be <_malloc_r+0x1e>
 80020f4:	680b      	ldr	r3, [r1, #0]
 80020f6:	1b5b      	subs	r3, r3, r5
 80020f8:	d418      	bmi.n	800212c <_malloc_r+0x8c>
 80020fa:	2b0b      	cmp	r3, #11
 80020fc:	d90f      	bls.n	800211e <_malloc_r+0x7e>
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	18cc      	adds	r4, r1, r3
 8002102:	50cd      	str	r5, [r1, r3]
 8002104:	4630      	mov	r0, r6
 8002106:	f000 fd8c 	bl	8002c22 <__malloc_unlock>
 800210a:	f104 000b 	add.w	r0, r4, #11
 800210e:	1d23      	adds	r3, r4, #4
 8002110:	f020 0007 	bic.w	r0, r0, #7
 8002114:	1ac3      	subs	r3, r0, r3
 8002116:	d0d3      	beq.n	80020c0 <_malloc_r+0x20>
 8002118:	425a      	negs	r2, r3
 800211a:	50e2      	str	r2, [r4, r3]
 800211c:	e7d0      	b.n	80020c0 <_malloc_r+0x20>
 800211e:	684b      	ldr	r3, [r1, #4]
 8002120:	428c      	cmp	r4, r1
 8002122:	bf16      	itet	ne
 8002124:	6063      	strne	r3, [r4, #4]
 8002126:	6013      	streq	r3, [r2, #0]
 8002128:	460c      	movne	r4, r1
 800212a:	e7eb      	b.n	8002104 <_malloc_r+0x64>
 800212c:	460c      	mov	r4, r1
 800212e:	6849      	ldr	r1, [r1, #4]
 8002130:	e7cc      	b.n	80020cc <_malloc_r+0x2c>
 8002132:	1cc4      	adds	r4, r0, #3
 8002134:	f024 0403 	bic.w	r4, r4, #3
 8002138:	42a0      	cmp	r0, r4
 800213a:	d005      	beq.n	8002148 <_malloc_r+0xa8>
 800213c:	1a21      	subs	r1, r4, r0
 800213e:	4630      	mov	r0, r6
 8002140:	f000 fb04 	bl	800274c <_sbrk_r>
 8002144:	3001      	adds	r0, #1
 8002146:	d0cf      	beq.n	80020e8 <_malloc_r+0x48>
 8002148:	6025      	str	r5, [r4, #0]
 800214a:	e7db      	b.n	8002104 <_malloc_r+0x64>
 800214c:	20000090 	.word	0x20000090
 8002150:	20000094 	.word	0x20000094

08002154 <__sfputc_r>:
 8002154:	6893      	ldr	r3, [r2, #8]
 8002156:	b410      	push	{r4}
 8002158:	3b01      	subs	r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	da07      	bge.n	8002170 <__sfputc_r+0x1c>
 8002160:	6994      	ldr	r4, [r2, #24]
 8002162:	42a3      	cmp	r3, r4
 8002164:	db01      	blt.n	800216a <__sfputc_r+0x16>
 8002166:	290a      	cmp	r1, #10
 8002168:	d102      	bne.n	8002170 <__sfputc_r+0x1c>
 800216a:	bc10      	pop	{r4}
 800216c:	f000 bb42 	b.w	80027f4 <__swbuf_r>
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	1c58      	adds	r0, r3, #1
 8002174:	6010      	str	r0, [r2, #0]
 8002176:	7019      	strb	r1, [r3, #0]
 8002178:	4608      	mov	r0, r1
 800217a:	bc10      	pop	{r4}
 800217c:	4770      	bx	lr

0800217e <__sfputs_r>:
 800217e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002180:	4606      	mov	r6, r0
 8002182:	460f      	mov	r7, r1
 8002184:	4614      	mov	r4, r2
 8002186:	18d5      	adds	r5, r2, r3
 8002188:	42ac      	cmp	r4, r5
 800218a:	d101      	bne.n	8002190 <__sfputs_r+0x12>
 800218c:	2000      	movs	r0, #0
 800218e:	e007      	b.n	80021a0 <__sfputs_r+0x22>
 8002190:	463a      	mov	r2, r7
 8002192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002196:	4630      	mov	r0, r6
 8002198:	f7ff ffdc 	bl	8002154 <__sfputc_r>
 800219c:	1c43      	adds	r3, r0, #1
 800219e:	d1f3      	bne.n	8002188 <__sfputs_r+0xa>
 80021a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021a4 <_vfiprintf_r>:
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a8:	460c      	mov	r4, r1
 80021aa:	b09d      	sub	sp, #116	; 0x74
 80021ac:	4617      	mov	r7, r2
 80021ae:	461d      	mov	r5, r3
 80021b0:	4606      	mov	r6, r0
 80021b2:	b118      	cbz	r0, 80021bc <_vfiprintf_r+0x18>
 80021b4:	6983      	ldr	r3, [r0, #24]
 80021b6:	b90b      	cbnz	r3, 80021bc <_vfiprintf_r+0x18>
 80021b8:	f7ff fee8 	bl	8001f8c <__sinit>
 80021bc:	4b7c      	ldr	r3, [pc, #496]	; (80023b0 <_vfiprintf_r+0x20c>)
 80021be:	429c      	cmp	r4, r3
 80021c0:	d158      	bne.n	8002274 <_vfiprintf_r+0xd0>
 80021c2:	6874      	ldr	r4, [r6, #4]
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	0718      	lsls	r0, r3, #28
 80021c8:	d55e      	bpl.n	8002288 <_vfiprintf_r+0xe4>
 80021ca:	6923      	ldr	r3, [r4, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d05b      	beq.n	8002288 <_vfiprintf_r+0xe4>
 80021d0:	2300      	movs	r3, #0
 80021d2:	9309      	str	r3, [sp, #36]	; 0x24
 80021d4:	2320      	movs	r3, #32
 80021d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021da:	2330      	movs	r3, #48	; 0x30
 80021dc:	f04f 0b01 	mov.w	fp, #1
 80021e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021e4:	9503      	str	r5, [sp, #12]
 80021e6:	46b8      	mov	r8, r7
 80021e8:	4645      	mov	r5, r8
 80021ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80021ee:	b10b      	cbz	r3, 80021f4 <_vfiprintf_r+0x50>
 80021f0:	2b25      	cmp	r3, #37	; 0x25
 80021f2:	d154      	bne.n	800229e <_vfiprintf_r+0xfa>
 80021f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80021f8:	d00b      	beq.n	8002212 <_vfiprintf_r+0x6e>
 80021fa:	4653      	mov	r3, sl
 80021fc:	463a      	mov	r2, r7
 80021fe:	4621      	mov	r1, r4
 8002200:	4630      	mov	r0, r6
 8002202:	f7ff ffbc 	bl	800217e <__sfputs_r>
 8002206:	3001      	adds	r0, #1
 8002208:	f000 80c2 	beq.w	8002390 <_vfiprintf_r+0x1ec>
 800220c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220e:	4453      	add	r3, sl
 8002210:	9309      	str	r3, [sp, #36]	; 0x24
 8002212:	f898 3000 	ldrb.w	r3, [r8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80ba 	beq.w	8002390 <_vfiprintf_r+0x1ec>
 800221c:	2300      	movs	r3, #0
 800221e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	9307      	str	r3, [sp, #28]
 800222a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800222e:	931a      	str	r3, [sp, #104]	; 0x68
 8002230:	46a8      	mov	r8, r5
 8002232:	2205      	movs	r2, #5
 8002234:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002238:	485e      	ldr	r0, [pc, #376]	; (80023b4 <_vfiprintf_r+0x210>)
 800223a:	f000 fce3 	bl	8002c04 <memchr>
 800223e:	9b04      	ldr	r3, [sp, #16]
 8002240:	bb78      	cbnz	r0, 80022a2 <_vfiprintf_r+0xfe>
 8002242:	06d9      	lsls	r1, r3, #27
 8002244:	bf44      	itt	mi
 8002246:	2220      	movmi	r2, #32
 8002248:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800224c:	071a      	lsls	r2, r3, #28
 800224e:	bf44      	itt	mi
 8002250:	222b      	movmi	r2, #43	; 0x2b
 8002252:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002256:	782a      	ldrb	r2, [r5, #0]
 8002258:	2a2a      	cmp	r2, #42	; 0x2a
 800225a:	d02a      	beq.n	80022b2 <_vfiprintf_r+0x10e>
 800225c:	46a8      	mov	r8, r5
 800225e:	2000      	movs	r0, #0
 8002260:	250a      	movs	r5, #10
 8002262:	9a07      	ldr	r2, [sp, #28]
 8002264:	4641      	mov	r1, r8
 8002266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800226a:	3b30      	subs	r3, #48	; 0x30
 800226c:	2b09      	cmp	r3, #9
 800226e:	d969      	bls.n	8002344 <_vfiprintf_r+0x1a0>
 8002270:	b360      	cbz	r0, 80022cc <_vfiprintf_r+0x128>
 8002272:	e024      	b.n	80022be <_vfiprintf_r+0x11a>
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <_vfiprintf_r+0x214>)
 8002276:	429c      	cmp	r4, r3
 8002278:	d101      	bne.n	800227e <_vfiprintf_r+0xda>
 800227a:	68b4      	ldr	r4, [r6, #8]
 800227c:	e7a2      	b.n	80021c4 <_vfiprintf_r+0x20>
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <_vfiprintf_r+0x218>)
 8002280:	429c      	cmp	r4, r3
 8002282:	bf08      	it	eq
 8002284:	68f4      	ldreq	r4, [r6, #12]
 8002286:	e79d      	b.n	80021c4 <_vfiprintf_r+0x20>
 8002288:	4621      	mov	r1, r4
 800228a:	4630      	mov	r0, r6
 800228c:	f000 fb16 	bl	80028bc <__swsetup_r>
 8002290:	2800      	cmp	r0, #0
 8002292:	d09d      	beq.n	80021d0 <_vfiprintf_r+0x2c>
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	b01d      	add	sp, #116	; 0x74
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800229e:	46a8      	mov	r8, r5
 80022a0:	e7a2      	b.n	80021e8 <_vfiprintf_r+0x44>
 80022a2:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <_vfiprintf_r+0x210>)
 80022a4:	4645      	mov	r5, r8
 80022a6:	1a80      	subs	r0, r0, r2
 80022a8:	fa0b f000 	lsl.w	r0, fp, r0
 80022ac:	4318      	orrs	r0, r3
 80022ae:	9004      	str	r0, [sp, #16]
 80022b0:	e7be      	b.n	8002230 <_vfiprintf_r+0x8c>
 80022b2:	9a03      	ldr	r2, [sp, #12]
 80022b4:	1d11      	adds	r1, r2, #4
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	9103      	str	r1, [sp, #12]
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	db01      	blt.n	80022c2 <_vfiprintf_r+0x11e>
 80022be:	9207      	str	r2, [sp, #28]
 80022c0:	e004      	b.n	80022cc <_vfiprintf_r+0x128>
 80022c2:	4252      	negs	r2, r2
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	9207      	str	r2, [sp, #28]
 80022ca:	9304      	str	r3, [sp, #16]
 80022cc:	f898 3000 	ldrb.w	r3, [r8]
 80022d0:	2b2e      	cmp	r3, #46	; 0x2e
 80022d2:	d10e      	bne.n	80022f2 <_vfiprintf_r+0x14e>
 80022d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80022d8:	2b2a      	cmp	r3, #42	; 0x2a
 80022da:	d138      	bne.n	800234e <_vfiprintf_r+0x1aa>
 80022dc:	9b03      	ldr	r3, [sp, #12]
 80022de:	f108 0802 	add.w	r8, r8, #2
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	9203      	str	r2, [sp, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bfb8      	it	lt
 80022ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022f0:	9305      	str	r3, [sp, #20]
 80022f2:	4d33      	ldr	r5, [pc, #204]	; (80023c0 <_vfiprintf_r+0x21c>)
 80022f4:	2203      	movs	r2, #3
 80022f6:	f898 1000 	ldrb.w	r1, [r8]
 80022fa:	4628      	mov	r0, r5
 80022fc:	f000 fc82 	bl	8002c04 <memchr>
 8002300:	b140      	cbz	r0, 8002314 <_vfiprintf_r+0x170>
 8002302:	2340      	movs	r3, #64	; 0x40
 8002304:	1b40      	subs	r0, r0, r5
 8002306:	fa03 f000 	lsl.w	r0, r3, r0
 800230a:	9b04      	ldr	r3, [sp, #16]
 800230c:	f108 0801 	add.w	r8, r8, #1
 8002310:	4303      	orrs	r3, r0
 8002312:	9304      	str	r3, [sp, #16]
 8002314:	f898 1000 	ldrb.w	r1, [r8]
 8002318:	2206      	movs	r2, #6
 800231a:	482a      	ldr	r0, [pc, #168]	; (80023c4 <_vfiprintf_r+0x220>)
 800231c:	f108 0701 	add.w	r7, r8, #1
 8002320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002324:	f000 fc6e 	bl	8002c04 <memchr>
 8002328:	2800      	cmp	r0, #0
 800232a:	d037      	beq.n	800239c <_vfiprintf_r+0x1f8>
 800232c:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <_vfiprintf_r+0x224>)
 800232e:	bb1b      	cbnz	r3, 8002378 <_vfiprintf_r+0x1d4>
 8002330:	9b03      	ldr	r3, [sp, #12]
 8002332:	3307      	adds	r3, #7
 8002334:	f023 0307 	bic.w	r3, r3, #7
 8002338:	3308      	adds	r3, #8
 800233a:	9303      	str	r3, [sp, #12]
 800233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800233e:	444b      	add	r3, r9
 8002340:	9309      	str	r3, [sp, #36]	; 0x24
 8002342:	e750      	b.n	80021e6 <_vfiprintf_r+0x42>
 8002344:	fb05 3202 	mla	r2, r5, r2, r3
 8002348:	2001      	movs	r0, #1
 800234a:	4688      	mov	r8, r1
 800234c:	e78a      	b.n	8002264 <_vfiprintf_r+0xc0>
 800234e:	2300      	movs	r3, #0
 8002350:	250a      	movs	r5, #10
 8002352:	4619      	mov	r1, r3
 8002354:	f108 0801 	add.w	r8, r8, #1
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	4640      	mov	r0, r8
 800235c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002360:	3a30      	subs	r2, #48	; 0x30
 8002362:	2a09      	cmp	r2, #9
 8002364:	d903      	bls.n	800236e <_vfiprintf_r+0x1ca>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0c3      	beq.n	80022f2 <_vfiprintf_r+0x14e>
 800236a:	9105      	str	r1, [sp, #20]
 800236c:	e7c1      	b.n	80022f2 <_vfiprintf_r+0x14e>
 800236e:	fb05 2101 	mla	r1, r5, r1, r2
 8002372:	2301      	movs	r3, #1
 8002374:	4680      	mov	r8, r0
 8002376:	e7f0      	b.n	800235a <_vfiprintf_r+0x1b6>
 8002378:	ab03      	add	r3, sp, #12
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4622      	mov	r2, r4
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_vfiprintf_r+0x228>)
 8002380:	a904      	add	r1, sp, #16
 8002382:	4630      	mov	r0, r6
 8002384:	f3af 8000 	nop.w
 8002388:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800238c:	4681      	mov	r9, r0
 800238e:	d1d5      	bne.n	800233c <_vfiprintf_r+0x198>
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	065b      	lsls	r3, r3, #25
 8002394:	f53f af7e 	bmi.w	8002294 <_vfiprintf_r+0xf0>
 8002398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800239a:	e77d      	b.n	8002298 <_vfiprintf_r+0xf4>
 800239c:	ab03      	add	r3, sp, #12
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4622      	mov	r2, r4
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <_vfiprintf_r+0x228>)
 80023a4:	a904      	add	r1, sp, #16
 80023a6:	4630      	mov	r0, r6
 80023a8:	f000 f888 	bl	80024bc <_printf_i>
 80023ac:	e7ec      	b.n	8002388 <_vfiprintf_r+0x1e4>
 80023ae:	bf00      	nop
 80023b0:	08002d94 	.word	0x08002d94
 80023b4:	08002dd4 	.word	0x08002dd4
 80023b8:	08002db4 	.word	0x08002db4
 80023bc:	08002d74 	.word	0x08002d74
 80023c0:	08002dda 	.word	0x08002dda
 80023c4:	08002dde 	.word	0x08002dde
 80023c8:	00000000 	.word	0x00000000
 80023cc:	0800217f 	.word	0x0800217f

080023d0 <_printf_common>:
 80023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d4:	4691      	mov	r9, r2
 80023d6:	461f      	mov	r7, r3
 80023d8:	688a      	ldr	r2, [r1, #8]
 80023da:	690b      	ldr	r3, [r1, #16]
 80023dc:	4606      	mov	r6, r0
 80023de:	4293      	cmp	r3, r2
 80023e0:	bfb8      	it	lt
 80023e2:	4613      	movlt	r3, r2
 80023e4:	f8c9 3000 	str.w	r3, [r9]
 80023e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023ec:	460c      	mov	r4, r1
 80023ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023f2:	b112      	cbz	r2, 80023fa <_printf_common+0x2a>
 80023f4:	3301      	adds	r3, #1
 80023f6:	f8c9 3000 	str.w	r3, [r9]
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	0699      	lsls	r1, r3, #26
 80023fe:	bf42      	ittt	mi
 8002400:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002404:	3302      	addmi	r3, #2
 8002406:	f8c9 3000 	strmi.w	r3, [r9]
 800240a:	6825      	ldr	r5, [r4, #0]
 800240c:	f015 0506 	ands.w	r5, r5, #6
 8002410:	d107      	bne.n	8002422 <_printf_common+0x52>
 8002412:	f104 0a19 	add.w	sl, r4, #25
 8002416:	68e3      	ldr	r3, [r4, #12]
 8002418:	f8d9 2000 	ldr.w	r2, [r9]
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	42ab      	cmp	r3, r5
 8002420:	dc29      	bgt.n	8002476 <_printf_common+0xa6>
 8002422:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	3300      	adds	r3, #0
 800242a:	bf18      	it	ne
 800242c:	2301      	movne	r3, #1
 800242e:	0692      	lsls	r2, r2, #26
 8002430:	d42e      	bmi.n	8002490 <_printf_common+0xc0>
 8002432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002436:	4639      	mov	r1, r7
 8002438:	4630      	mov	r0, r6
 800243a:	47c0      	blx	r8
 800243c:	3001      	adds	r0, #1
 800243e:	d021      	beq.n	8002484 <_printf_common+0xb4>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	68e5      	ldr	r5, [r4, #12]
 8002444:	f003 0306 	and.w	r3, r3, #6
 8002448:	2b04      	cmp	r3, #4
 800244a:	bf18      	it	ne
 800244c:	2500      	movne	r5, #0
 800244e:	f8d9 2000 	ldr.w	r2, [r9]
 8002452:	f04f 0900 	mov.w	r9, #0
 8002456:	bf08      	it	eq
 8002458:	1aad      	subeq	r5, r5, r2
 800245a:	68a3      	ldr	r3, [r4, #8]
 800245c:	6922      	ldr	r2, [r4, #16]
 800245e:	bf08      	it	eq
 8002460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002464:	4293      	cmp	r3, r2
 8002466:	bfc4      	itt	gt
 8002468:	1a9b      	subgt	r3, r3, r2
 800246a:	18ed      	addgt	r5, r5, r3
 800246c:	341a      	adds	r4, #26
 800246e:	454d      	cmp	r5, r9
 8002470:	d11a      	bne.n	80024a8 <_printf_common+0xd8>
 8002472:	2000      	movs	r0, #0
 8002474:	e008      	b.n	8002488 <_printf_common+0xb8>
 8002476:	2301      	movs	r3, #1
 8002478:	4652      	mov	r2, sl
 800247a:	4639      	mov	r1, r7
 800247c:	4630      	mov	r0, r6
 800247e:	47c0      	blx	r8
 8002480:	3001      	adds	r0, #1
 8002482:	d103      	bne.n	800248c <_printf_common+0xbc>
 8002484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800248c:	3501      	adds	r5, #1
 800248e:	e7c2      	b.n	8002416 <_printf_common+0x46>
 8002490:	2030      	movs	r0, #48	; 0x30
 8002492:	18e1      	adds	r1, r4, r3
 8002494:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800249e:	4422      	add	r2, r4
 80024a0:	3302      	adds	r3, #2
 80024a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024a6:	e7c4      	b.n	8002432 <_printf_common+0x62>
 80024a8:	2301      	movs	r3, #1
 80024aa:	4622      	mov	r2, r4
 80024ac:	4639      	mov	r1, r7
 80024ae:	4630      	mov	r0, r6
 80024b0:	47c0      	blx	r8
 80024b2:	3001      	adds	r0, #1
 80024b4:	d0e6      	beq.n	8002484 <_printf_common+0xb4>
 80024b6:	f109 0901 	add.w	r9, r9, #1
 80024ba:	e7d8      	b.n	800246e <_printf_common+0x9e>

080024bc <_printf_i>:
 80024bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80024c4:	460c      	mov	r4, r1
 80024c6:	7e09      	ldrb	r1, [r1, #24]
 80024c8:	b085      	sub	sp, #20
 80024ca:	296e      	cmp	r1, #110	; 0x6e
 80024cc:	4617      	mov	r7, r2
 80024ce:	4606      	mov	r6, r0
 80024d0:	4698      	mov	r8, r3
 80024d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80024d4:	f000 80b3 	beq.w	800263e <_printf_i+0x182>
 80024d8:	d822      	bhi.n	8002520 <_printf_i+0x64>
 80024da:	2963      	cmp	r1, #99	; 0x63
 80024dc:	d036      	beq.n	800254c <_printf_i+0x90>
 80024de:	d80a      	bhi.n	80024f6 <_printf_i+0x3a>
 80024e0:	2900      	cmp	r1, #0
 80024e2:	f000 80b9 	beq.w	8002658 <_printf_i+0x19c>
 80024e6:	2958      	cmp	r1, #88	; 0x58
 80024e8:	f000 8083 	beq.w	80025f2 <_printf_i+0x136>
 80024ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80024f4:	e032      	b.n	800255c <_printf_i+0xa0>
 80024f6:	2964      	cmp	r1, #100	; 0x64
 80024f8:	d001      	beq.n	80024fe <_printf_i+0x42>
 80024fa:	2969      	cmp	r1, #105	; 0x69
 80024fc:	d1f6      	bne.n	80024ec <_printf_i+0x30>
 80024fe:	6820      	ldr	r0, [r4, #0]
 8002500:	6813      	ldr	r3, [r2, #0]
 8002502:	0605      	lsls	r5, r0, #24
 8002504:	f103 0104 	add.w	r1, r3, #4
 8002508:	d52a      	bpl.n	8002560 <_printf_i+0xa4>
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	da03      	bge.n	800251a <_printf_i+0x5e>
 8002512:	222d      	movs	r2, #45	; 0x2d
 8002514:	425b      	negs	r3, r3
 8002516:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800251a:	486f      	ldr	r0, [pc, #444]	; (80026d8 <_printf_i+0x21c>)
 800251c:	220a      	movs	r2, #10
 800251e:	e039      	b.n	8002594 <_printf_i+0xd8>
 8002520:	2973      	cmp	r1, #115	; 0x73
 8002522:	f000 809d 	beq.w	8002660 <_printf_i+0x1a4>
 8002526:	d808      	bhi.n	800253a <_printf_i+0x7e>
 8002528:	296f      	cmp	r1, #111	; 0x6f
 800252a:	d020      	beq.n	800256e <_printf_i+0xb2>
 800252c:	2970      	cmp	r1, #112	; 0x70
 800252e:	d1dd      	bne.n	80024ec <_printf_i+0x30>
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	f043 0320 	orr.w	r3, r3, #32
 8002536:	6023      	str	r3, [r4, #0]
 8002538:	e003      	b.n	8002542 <_printf_i+0x86>
 800253a:	2975      	cmp	r1, #117	; 0x75
 800253c:	d017      	beq.n	800256e <_printf_i+0xb2>
 800253e:	2978      	cmp	r1, #120	; 0x78
 8002540:	d1d4      	bne.n	80024ec <_printf_i+0x30>
 8002542:	2378      	movs	r3, #120	; 0x78
 8002544:	4865      	ldr	r0, [pc, #404]	; (80026dc <_printf_i+0x220>)
 8002546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800254a:	e055      	b.n	80025f8 <_printf_i+0x13c>
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002552:	1d19      	adds	r1, r3, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6011      	str	r1, [r2, #0]
 8002558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800255c:	2301      	movs	r3, #1
 800255e:	e08c      	b.n	800267a <_printf_i+0x1be>
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002566:	6011      	str	r1, [r2, #0]
 8002568:	bf18      	it	ne
 800256a:	b21b      	sxthne	r3, r3
 800256c:	e7cf      	b.n	800250e <_printf_i+0x52>
 800256e:	6813      	ldr	r3, [r2, #0]
 8002570:	6825      	ldr	r5, [r4, #0]
 8002572:	1d18      	adds	r0, r3, #4
 8002574:	6010      	str	r0, [r2, #0]
 8002576:	0628      	lsls	r0, r5, #24
 8002578:	d501      	bpl.n	800257e <_printf_i+0xc2>
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e002      	b.n	8002584 <_printf_i+0xc8>
 800257e:	0668      	lsls	r0, r5, #25
 8002580:	d5fb      	bpl.n	800257a <_printf_i+0xbe>
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	296f      	cmp	r1, #111	; 0x6f
 8002586:	bf14      	ite	ne
 8002588:	220a      	movne	r2, #10
 800258a:	2208      	moveq	r2, #8
 800258c:	4852      	ldr	r0, [pc, #328]	; (80026d8 <_printf_i+0x21c>)
 800258e:	2100      	movs	r1, #0
 8002590:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002594:	6865      	ldr	r5, [r4, #4]
 8002596:	2d00      	cmp	r5, #0
 8002598:	60a5      	str	r5, [r4, #8]
 800259a:	f2c0 8095 	blt.w	80026c8 <_printf_i+0x20c>
 800259e:	6821      	ldr	r1, [r4, #0]
 80025a0:	f021 0104 	bic.w	r1, r1, #4
 80025a4:	6021      	str	r1, [r4, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d13d      	bne.n	8002626 <_printf_i+0x16a>
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	f040 808e 	bne.w	80026cc <_printf_i+0x210>
 80025b0:	4665      	mov	r5, ip
 80025b2:	2a08      	cmp	r2, #8
 80025b4:	d10b      	bne.n	80025ce <_printf_i+0x112>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	07db      	lsls	r3, r3, #31
 80025ba:	d508      	bpl.n	80025ce <_printf_i+0x112>
 80025bc:	6923      	ldr	r3, [r4, #16]
 80025be:	6862      	ldr	r2, [r4, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	bfde      	ittt	le
 80025c4:	2330      	movle	r3, #48	; 0x30
 80025c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80025ce:	ebac 0305 	sub.w	r3, ip, r5
 80025d2:	6123      	str	r3, [r4, #16]
 80025d4:	f8cd 8000 	str.w	r8, [sp]
 80025d8:	463b      	mov	r3, r7
 80025da:	aa03      	add	r2, sp, #12
 80025dc:	4621      	mov	r1, r4
 80025de:	4630      	mov	r0, r6
 80025e0:	f7ff fef6 	bl	80023d0 <_printf_common>
 80025e4:	3001      	adds	r0, #1
 80025e6:	d14d      	bne.n	8002684 <_printf_i+0x1c8>
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	b005      	add	sp, #20
 80025ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025f2:	4839      	ldr	r0, [pc, #228]	; (80026d8 <_printf_i+0x21c>)
 80025f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	6821      	ldr	r1, [r4, #0]
 80025fc:	1d1d      	adds	r5, r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6015      	str	r5, [r2, #0]
 8002602:	060a      	lsls	r2, r1, #24
 8002604:	d50b      	bpl.n	800261e <_printf_i+0x162>
 8002606:	07ca      	lsls	r2, r1, #31
 8002608:	bf44      	itt	mi
 800260a:	f041 0120 	orrmi.w	r1, r1, #32
 800260e:	6021      	strmi	r1, [r4, #0]
 8002610:	b91b      	cbnz	r3, 800261a <_printf_i+0x15e>
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	f022 0220 	bic.w	r2, r2, #32
 8002618:	6022      	str	r2, [r4, #0]
 800261a:	2210      	movs	r2, #16
 800261c:	e7b7      	b.n	800258e <_printf_i+0xd2>
 800261e:	064d      	lsls	r5, r1, #25
 8002620:	bf48      	it	mi
 8002622:	b29b      	uxthmi	r3, r3
 8002624:	e7ef      	b.n	8002606 <_printf_i+0x14a>
 8002626:	4665      	mov	r5, ip
 8002628:	fbb3 f1f2 	udiv	r1, r3, r2
 800262c:	fb02 3311 	mls	r3, r2, r1, r3
 8002630:	5cc3      	ldrb	r3, [r0, r3]
 8002632:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002636:	460b      	mov	r3, r1
 8002638:	2900      	cmp	r1, #0
 800263a:	d1f5      	bne.n	8002628 <_printf_i+0x16c>
 800263c:	e7b9      	b.n	80025b2 <_printf_i+0xf6>
 800263e:	6813      	ldr	r3, [r2, #0]
 8002640:	6825      	ldr	r5, [r4, #0]
 8002642:	1d18      	adds	r0, r3, #4
 8002644:	6961      	ldr	r1, [r4, #20]
 8002646:	6010      	str	r0, [r2, #0]
 8002648:	0628      	lsls	r0, r5, #24
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	d501      	bpl.n	8002652 <_printf_i+0x196>
 800264e:	6019      	str	r1, [r3, #0]
 8002650:	e002      	b.n	8002658 <_printf_i+0x19c>
 8002652:	066a      	lsls	r2, r5, #25
 8002654:	d5fb      	bpl.n	800264e <_printf_i+0x192>
 8002656:	8019      	strh	r1, [r3, #0]
 8002658:	2300      	movs	r3, #0
 800265a:	4665      	mov	r5, ip
 800265c:	6123      	str	r3, [r4, #16]
 800265e:	e7b9      	b.n	80025d4 <_printf_i+0x118>
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	1d19      	adds	r1, r3, #4
 8002664:	6011      	str	r1, [r2, #0]
 8002666:	681d      	ldr	r5, [r3, #0]
 8002668:	6862      	ldr	r2, [r4, #4]
 800266a:	2100      	movs	r1, #0
 800266c:	4628      	mov	r0, r5
 800266e:	f000 fac9 	bl	8002c04 <memchr>
 8002672:	b108      	cbz	r0, 8002678 <_printf_i+0x1bc>
 8002674:	1b40      	subs	r0, r0, r5
 8002676:	6060      	str	r0, [r4, #4]
 8002678:	6863      	ldr	r3, [r4, #4]
 800267a:	6123      	str	r3, [r4, #16]
 800267c:	2300      	movs	r3, #0
 800267e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002682:	e7a7      	b.n	80025d4 <_printf_i+0x118>
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	462a      	mov	r2, r5
 8002688:	4639      	mov	r1, r7
 800268a:	4630      	mov	r0, r6
 800268c:	47c0      	blx	r8
 800268e:	3001      	adds	r0, #1
 8002690:	d0aa      	beq.n	80025e8 <_printf_i+0x12c>
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	079b      	lsls	r3, r3, #30
 8002696:	d413      	bmi.n	80026c0 <_printf_i+0x204>
 8002698:	68e0      	ldr	r0, [r4, #12]
 800269a:	9b03      	ldr	r3, [sp, #12]
 800269c:	4298      	cmp	r0, r3
 800269e:	bfb8      	it	lt
 80026a0:	4618      	movlt	r0, r3
 80026a2:	e7a3      	b.n	80025ec <_printf_i+0x130>
 80026a4:	2301      	movs	r3, #1
 80026a6:	464a      	mov	r2, r9
 80026a8:	4639      	mov	r1, r7
 80026aa:	4630      	mov	r0, r6
 80026ac:	47c0      	blx	r8
 80026ae:	3001      	adds	r0, #1
 80026b0:	d09a      	beq.n	80025e8 <_printf_i+0x12c>
 80026b2:	3501      	adds	r5, #1
 80026b4:	68e3      	ldr	r3, [r4, #12]
 80026b6:	9a03      	ldr	r2, [sp, #12]
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	42ab      	cmp	r3, r5
 80026bc:	dcf2      	bgt.n	80026a4 <_printf_i+0x1e8>
 80026be:	e7eb      	b.n	8002698 <_printf_i+0x1dc>
 80026c0:	2500      	movs	r5, #0
 80026c2:	f104 0919 	add.w	r9, r4, #25
 80026c6:	e7f5      	b.n	80026b4 <_printf_i+0x1f8>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ac      	bne.n	8002626 <_printf_i+0x16a>
 80026cc:	7803      	ldrb	r3, [r0, #0]
 80026ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026d6:	e76c      	b.n	80025b2 <_printf_i+0xf6>
 80026d8:	08002de5 	.word	0x08002de5
 80026dc:	08002df6 	.word	0x08002df6

080026e0 <_putc_r>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	460d      	mov	r5, r1
 80026e4:	4614      	mov	r4, r2
 80026e6:	4606      	mov	r6, r0
 80026e8:	b118      	cbz	r0, 80026f2 <_putc_r+0x12>
 80026ea:	6983      	ldr	r3, [r0, #24]
 80026ec:	b90b      	cbnz	r3, 80026f2 <_putc_r+0x12>
 80026ee:	f7ff fc4d 	bl	8001f8c <__sinit>
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_putc_r+0x60>)
 80026f4:	429c      	cmp	r4, r3
 80026f6:	d112      	bne.n	800271e <_putc_r+0x3e>
 80026f8:	6874      	ldr	r4, [r6, #4]
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	60a3      	str	r3, [r4, #8]
 8002702:	da16      	bge.n	8002732 <_putc_r+0x52>
 8002704:	69a2      	ldr	r2, [r4, #24]
 8002706:	4293      	cmp	r3, r2
 8002708:	db02      	blt.n	8002710 <_putc_r+0x30>
 800270a:	b2eb      	uxtb	r3, r5
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d110      	bne.n	8002732 <_putc_r+0x52>
 8002710:	4622      	mov	r2, r4
 8002712:	4629      	mov	r1, r5
 8002714:	4630      	mov	r0, r6
 8002716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800271a:	f000 b86b 	b.w	80027f4 <__swbuf_r>
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <_putc_r+0x64>)
 8002720:	429c      	cmp	r4, r3
 8002722:	d101      	bne.n	8002728 <_putc_r+0x48>
 8002724:	68b4      	ldr	r4, [r6, #8]
 8002726:	e7e8      	b.n	80026fa <_putc_r+0x1a>
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <_putc_r+0x68>)
 800272a:	429c      	cmp	r4, r3
 800272c:	bf08      	it	eq
 800272e:	68f4      	ldreq	r4, [r6, #12]
 8002730:	e7e3      	b.n	80026fa <_putc_r+0x1a>
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	b2e8      	uxtb	r0, r5
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	6022      	str	r2, [r4, #0]
 800273a:	701d      	strb	r5, [r3, #0]
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	bf00      	nop
 8002740:	08002d94 	.word	0x08002d94
 8002744:	08002db4 	.word	0x08002db4
 8002748:	08002d74 	.word	0x08002d74

0800274c <_sbrk_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	2300      	movs	r3, #0
 8002750:	4c05      	ldr	r4, [pc, #20]	; (8002768 <_sbrk_r+0x1c>)
 8002752:	4605      	mov	r5, r0
 8002754:	4608      	mov	r0, r1
 8002756:	6023      	str	r3, [r4, #0]
 8002758:	f7ff faf4 	bl	8001d44 <_sbrk>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d102      	bne.n	8002766 <_sbrk_r+0x1a>
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	b103      	cbz	r3, 8002766 <_sbrk_r+0x1a>
 8002764:	602b      	str	r3, [r5, #0]
 8002766:	bd38      	pop	{r3, r4, r5, pc}
 8002768:	20000130 	.word	0x20000130

0800276c <__sread>:
 800276c:	b510      	push	{r4, lr}
 800276e:	460c      	mov	r4, r1
 8002770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002774:	f000 faa2 	bl	8002cbc <_read_r>
 8002778:	2800      	cmp	r0, #0
 800277a:	bfab      	itete	ge
 800277c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800277e:	89a3      	ldrhlt	r3, [r4, #12]
 8002780:	181b      	addge	r3, r3, r0
 8002782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002786:	bfac      	ite	ge
 8002788:	6563      	strge	r3, [r4, #84]	; 0x54
 800278a:	81a3      	strhlt	r3, [r4, #12]
 800278c:	bd10      	pop	{r4, pc}

0800278e <__swrite>:
 800278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002792:	461f      	mov	r7, r3
 8002794:	898b      	ldrh	r3, [r1, #12]
 8002796:	4605      	mov	r5, r0
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	460c      	mov	r4, r1
 800279c:	4616      	mov	r6, r2
 800279e:	d505      	bpl.n	80027ac <__swrite+0x1e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	2200      	movs	r2, #0
 80027a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a8:	f000 f9b6 	bl	8002b18 <_lseek_r>
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	4632      	mov	r2, r6
 80027b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b4:	81a3      	strh	r3, [r4, #12]
 80027b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027ba:	463b      	mov	r3, r7
 80027bc:	4628      	mov	r0, r5
 80027be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027c2:	f000 b869 	b.w	8002898 <_write_r>

080027c6 <__sseek>:
 80027c6:	b510      	push	{r4, lr}
 80027c8:	460c      	mov	r4, r1
 80027ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ce:	f000 f9a3 	bl	8002b18 <_lseek_r>
 80027d2:	1c43      	adds	r3, r0, #1
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	bf15      	itete	ne
 80027d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80027da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027e2:	81a3      	strheq	r3, [r4, #12]
 80027e4:	bf18      	it	ne
 80027e6:	81a3      	strhne	r3, [r4, #12]
 80027e8:	bd10      	pop	{r4, pc}

080027ea <__sclose>:
 80027ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ee:	f000 b8d3 	b.w	8002998 <_close_r>
	...

080027f4 <__swbuf_r>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	460e      	mov	r6, r1
 80027f8:	4614      	mov	r4, r2
 80027fa:	4605      	mov	r5, r0
 80027fc:	b118      	cbz	r0, 8002806 <__swbuf_r+0x12>
 80027fe:	6983      	ldr	r3, [r0, #24]
 8002800:	b90b      	cbnz	r3, 8002806 <__swbuf_r+0x12>
 8002802:	f7ff fbc3 	bl	8001f8c <__sinit>
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <__swbuf_r+0x98>)
 8002808:	429c      	cmp	r4, r3
 800280a:	d12a      	bne.n	8002862 <__swbuf_r+0x6e>
 800280c:	686c      	ldr	r4, [r5, #4]
 800280e:	69a3      	ldr	r3, [r4, #24]
 8002810:	60a3      	str	r3, [r4, #8]
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	071a      	lsls	r2, r3, #28
 8002816:	d52e      	bpl.n	8002876 <__swbuf_r+0x82>
 8002818:	6923      	ldr	r3, [r4, #16]
 800281a:	b363      	cbz	r3, 8002876 <__swbuf_r+0x82>
 800281c:	6923      	ldr	r3, [r4, #16]
 800281e:	6820      	ldr	r0, [r4, #0]
 8002820:	b2f6      	uxtb	r6, r6
 8002822:	1ac0      	subs	r0, r0, r3
 8002824:	6963      	ldr	r3, [r4, #20]
 8002826:	4637      	mov	r7, r6
 8002828:	4283      	cmp	r3, r0
 800282a:	dc04      	bgt.n	8002836 <__swbuf_r+0x42>
 800282c:	4621      	mov	r1, r4
 800282e:	4628      	mov	r0, r5
 8002830:	f000 f948 	bl	8002ac4 <_fflush_r>
 8002834:	bb28      	cbnz	r0, 8002882 <__swbuf_r+0x8e>
 8002836:	68a3      	ldr	r3, [r4, #8]
 8002838:	3001      	adds	r0, #1
 800283a:	3b01      	subs	r3, #1
 800283c:	60a3      	str	r3, [r4, #8]
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	6022      	str	r2, [r4, #0]
 8002844:	701e      	strb	r6, [r3, #0]
 8002846:	6963      	ldr	r3, [r4, #20]
 8002848:	4283      	cmp	r3, r0
 800284a:	d004      	beq.n	8002856 <__swbuf_r+0x62>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	07db      	lsls	r3, r3, #31
 8002850:	d519      	bpl.n	8002886 <__swbuf_r+0x92>
 8002852:	2e0a      	cmp	r6, #10
 8002854:	d117      	bne.n	8002886 <__swbuf_r+0x92>
 8002856:	4621      	mov	r1, r4
 8002858:	4628      	mov	r0, r5
 800285a:	f000 f933 	bl	8002ac4 <_fflush_r>
 800285e:	b190      	cbz	r0, 8002886 <__swbuf_r+0x92>
 8002860:	e00f      	b.n	8002882 <__swbuf_r+0x8e>
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <__swbuf_r+0x9c>)
 8002864:	429c      	cmp	r4, r3
 8002866:	d101      	bne.n	800286c <__swbuf_r+0x78>
 8002868:	68ac      	ldr	r4, [r5, #8]
 800286a:	e7d0      	b.n	800280e <__swbuf_r+0x1a>
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <__swbuf_r+0xa0>)
 800286e:	429c      	cmp	r4, r3
 8002870:	bf08      	it	eq
 8002872:	68ec      	ldreq	r4, [r5, #12]
 8002874:	e7cb      	b.n	800280e <__swbuf_r+0x1a>
 8002876:	4621      	mov	r1, r4
 8002878:	4628      	mov	r0, r5
 800287a:	f000 f81f 	bl	80028bc <__swsetup_r>
 800287e:	2800      	cmp	r0, #0
 8002880:	d0cc      	beq.n	800281c <__swbuf_r+0x28>
 8002882:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002886:	4638      	mov	r0, r7
 8002888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800288a:	bf00      	nop
 800288c:	08002d94 	.word	0x08002d94
 8002890:	08002db4 	.word	0x08002db4
 8002894:	08002d74 	.word	0x08002d74

08002898 <_write_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4605      	mov	r5, r0
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	2200      	movs	r2, #0
 80028a2:	4c05      	ldr	r4, [pc, #20]	; (80028b8 <_write_r+0x20>)
 80028a4:	6022      	str	r2, [r4, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f7ff f9ff 	bl	8001caa <_write>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d102      	bne.n	80028b6 <_write_r+0x1e>
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	b103      	cbz	r3, 80028b6 <_write_r+0x1e>
 80028b4:	602b      	str	r3, [r5, #0]
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
 80028b8:	20000130 	.word	0x20000130

080028bc <__swsetup_r>:
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <__swsetup_r+0xcc>)
 80028be:	b570      	push	{r4, r5, r6, lr}
 80028c0:	681d      	ldr	r5, [r3, #0]
 80028c2:	4606      	mov	r6, r0
 80028c4:	460c      	mov	r4, r1
 80028c6:	b125      	cbz	r5, 80028d2 <__swsetup_r+0x16>
 80028c8:	69ab      	ldr	r3, [r5, #24]
 80028ca:	b913      	cbnz	r3, 80028d2 <__swsetup_r+0x16>
 80028cc:	4628      	mov	r0, r5
 80028ce:	f7ff fb5d 	bl	8001f8c <__sinit>
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <__swsetup_r+0xd0>)
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d10f      	bne.n	80028f8 <__swsetup_r+0x3c>
 80028d8:	686c      	ldr	r4, [r5, #4]
 80028da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	0715      	lsls	r5, r2, #28
 80028e2:	d42c      	bmi.n	800293e <__swsetup_r+0x82>
 80028e4:	06d0      	lsls	r0, r2, #27
 80028e6:	d411      	bmi.n	800290c <__swsetup_r+0x50>
 80028e8:	2209      	movs	r2, #9
 80028ea:	6032      	str	r2, [r6, #0]
 80028ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f0:	81a3      	strh	r3, [r4, #12]
 80028f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028f6:	e03e      	b.n	8002976 <__swsetup_r+0xba>
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <__swsetup_r+0xd4>)
 80028fa:	429c      	cmp	r4, r3
 80028fc:	d101      	bne.n	8002902 <__swsetup_r+0x46>
 80028fe:	68ac      	ldr	r4, [r5, #8]
 8002900:	e7eb      	b.n	80028da <__swsetup_r+0x1e>
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <__swsetup_r+0xd8>)
 8002904:	429c      	cmp	r4, r3
 8002906:	bf08      	it	eq
 8002908:	68ec      	ldreq	r4, [r5, #12]
 800290a:	e7e6      	b.n	80028da <__swsetup_r+0x1e>
 800290c:	0751      	lsls	r1, r2, #29
 800290e:	d512      	bpl.n	8002936 <__swsetup_r+0x7a>
 8002910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002912:	b141      	cbz	r1, 8002926 <__swsetup_r+0x6a>
 8002914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002918:	4299      	cmp	r1, r3
 800291a:	d002      	beq.n	8002922 <__swsetup_r+0x66>
 800291c:	4630      	mov	r0, r6
 800291e:	f000 f981 	bl	8002c24 <_free_r>
 8002922:	2300      	movs	r3, #0
 8002924:	6363      	str	r3, [r4, #52]	; 0x34
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800292c:	81a3      	strh	r3, [r4, #12]
 800292e:	2300      	movs	r3, #0
 8002930:	6063      	str	r3, [r4, #4]
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	6923      	ldr	r3, [r4, #16]
 8002940:	b94b      	cbnz	r3, 8002956 <__swsetup_r+0x9a>
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d003      	beq.n	8002956 <__swsetup_r+0x9a>
 800294e:	4621      	mov	r1, r4
 8002950:	4630      	mov	r0, r6
 8002952:	f000 f917 	bl	8002b84 <__smakebuf_r>
 8002956:	89a2      	ldrh	r2, [r4, #12]
 8002958:	f012 0301 	ands.w	r3, r2, #1
 800295c:	d00c      	beq.n	8002978 <__swsetup_r+0xbc>
 800295e:	2300      	movs	r3, #0
 8002960:	60a3      	str	r3, [r4, #8]
 8002962:	6963      	ldr	r3, [r4, #20]
 8002964:	425b      	negs	r3, r3
 8002966:	61a3      	str	r3, [r4, #24]
 8002968:	6923      	ldr	r3, [r4, #16]
 800296a:	b953      	cbnz	r3, 8002982 <__swsetup_r+0xc6>
 800296c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002970:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002974:	d1ba      	bne.n	80028ec <__swsetup_r+0x30>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	0792      	lsls	r2, r2, #30
 800297a:	bf58      	it	pl
 800297c:	6963      	ldrpl	r3, [r4, #20]
 800297e:	60a3      	str	r3, [r4, #8]
 8002980:	e7f2      	b.n	8002968 <__swsetup_r+0xac>
 8002982:	2000      	movs	r0, #0
 8002984:	e7f7      	b.n	8002976 <__swsetup_r+0xba>
 8002986:	bf00      	nop
 8002988:	2000000c 	.word	0x2000000c
 800298c:	08002d94 	.word	0x08002d94
 8002990:	08002db4 	.word	0x08002db4
 8002994:	08002d74 	.word	0x08002d74

08002998 <_close_r>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	2300      	movs	r3, #0
 800299c:	4c05      	ldr	r4, [pc, #20]	; (80029b4 <_close_r+0x1c>)
 800299e:	4605      	mov	r5, r0
 80029a0:	4608      	mov	r0, r1
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	f7ff f99d 	bl	8001ce2 <_close>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d102      	bne.n	80029b2 <_close_r+0x1a>
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	b103      	cbz	r3, 80029b2 <_close_r+0x1a>
 80029b0:	602b      	str	r3, [r5, #0]
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	20000130 	.word	0x20000130

080029b8 <__sflush_r>:
 80029b8:	898a      	ldrh	r2, [r1, #12]
 80029ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029be:	4605      	mov	r5, r0
 80029c0:	0710      	lsls	r0, r2, #28
 80029c2:	460c      	mov	r4, r1
 80029c4:	d458      	bmi.n	8002a78 <__sflush_r+0xc0>
 80029c6:	684b      	ldr	r3, [r1, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	dc05      	bgt.n	80029d8 <__sflush_r+0x20>
 80029cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dc02      	bgt.n	80029d8 <__sflush_r+0x20>
 80029d2:	2000      	movs	r0, #0
 80029d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029da:	2e00      	cmp	r6, #0
 80029dc:	d0f9      	beq.n	80029d2 <__sflush_r+0x1a>
 80029de:	2300      	movs	r3, #0
 80029e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029e4:	682f      	ldr	r7, [r5, #0]
 80029e6:	6a21      	ldr	r1, [r4, #32]
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	d032      	beq.n	8002a52 <__sflush_r+0x9a>
 80029ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029ee:	89a3      	ldrh	r3, [r4, #12]
 80029f0:	075a      	lsls	r2, r3, #29
 80029f2:	d505      	bpl.n	8002a00 <__sflush_r+0x48>
 80029f4:	6863      	ldr	r3, [r4, #4]
 80029f6:	1ac0      	subs	r0, r0, r3
 80029f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029fa:	b10b      	cbz	r3, 8002a00 <__sflush_r+0x48>
 80029fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029fe:	1ac0      	subs	r0, r0, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	4602      	mov	r2, r0
 8002a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a06:	6a21      	ldr	r1, [r4, #32]
 8002a08:	4628      	mov	r0, r5
 8002a0a:	47b0      	blx	r6
 8002a0c:	1c43      	adds	r3, r0, #1
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	d106      	bne.n	8002a20 <__sflush_r+0x68>
 8002a12:	6829      	ldr	r1, [r5, #0]
 8002a14:	291d      	cmp	r1, #29
 8002a16:	d848      	bhi.n	8002aaa <__sflush_r+0xf2>
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <__sflush_r+0x108>)
 8002a1a:	40ca      	lsrs	r2, r1
 8002a1c:	07d6      	lsls	r6, r2, #31
 8002a1e:	d544      	bpl.n	8002aaa <__sflush_r+0xf2>
 8002a20:	2200      	movs	r2, #0
 8002a22:	6062      	str	r2, [r4, #4]
 8002a24:	6922      	ldr	r2, [r4, #16]
 8002a26:	04d9      	lsls	r1, r3, #19
 8002a28:	6022      	str	r2, [r4, #0]
 8002a2a:	d504      	bpl.n	8002a36 <__sflush_r+0x7e>
 8002a2c:	1c42      	adds	r2, r0, #1
 8002a2e:	d101      	bne.n	8002a34 <__sflush_r+0x7c>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	b903      	cbnz	r3, 8002a36 <__sflush_r+0x7e>
 8002a34:	6560      	str	r0, [r4, #84]	; 0x54
 8002a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a38:	602f      	str	r7, [r5, #0]
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	d0c9      	beq.n	80029d2 <__sflush_r+0x1a>
 8002a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a42:	4299      	cmp	r1, r3
 8002a44:	d002      	beq.n	8002a4c <__sflush_r+0x94>
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f8ec 	bl	8002c24 <_free_r>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a50:	e7c0      	b.n	80029d4 <__sflush_r+0x1c>
 8002a52:	2301      	movs	r3, #1
 8002a54:	4628      	mov	r0, r5
 8002a56:	47b0      	blx	r6
 8002a58:	1c41      	adds	r1, r0, #1
 8002a5a:	d1c8      	bne.n	80029ee <__sflush_r+0x36>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0c5      	beq.n	80029ee <__sflush_r+0x36>
 8002a62:	2b1d      	cmp	r3, #29
 8002a64:	d001      	beq.n	8002a6a <__sflush_r+0xb2>
 8002a66:	2b16      	cmp	r3, #22
 8002a68:	d101      	bne.n	8002a6e <__sflush_r+0xb6>
 8002a6a:	602f      	str	r7, [r5, #0]
 8002a6c:	e7b1      	b.n	80029d2 <__sflush_r+0x1a>
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a74:	81a3      	strh	r3, [r4, #12]
 8002a76:	e7ad      	b.n	80029d4 <__sflush_r+0x1c>
 8002a78:	690f      	ldr	r7, [r1, #16]
 8002a7a:	2f00      	cmp	r7, #0
 8002a7c:	d0a9      	beq.n	80029d2 <__sflush_r+0x1a>
 8002a7e:	0793      	lsls	r3, r2, #30
 8002a80:	bf18      	it	ne
 8002a82:	2300      	movne	r3, #0
 8002a84:	680e      	ldr	r6, [r1, #0]
 8002a86:	bf08      	it	eq
 8002a88:	694b      	ldreq	r3, [r1, #20]
 8002a8a:	eba6 0807 	sub.w	r8, r6, r7
 8002a8e:	600f      	str	r7, [r1, #0]
 8002a90:	608b      	str	r3, [r1, #8]
 8002a92:	f1b8 0f00 	cmp.w	r8, #0
 8002a96:	dd9c      	ble.n	80029d2 <__sflush_r+0x1a>
 8002a98:	4643      	mov	r3, r8
 8002a9a:	463a      	mov	r2, r7
 8002a9c:	6a21      	ldr	r1, [r4, #32]
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002aa2:	47b0      	blx	r6
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	dc06      	bgt.n	8002ab6 <__sflush_r+0xfe>
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab4:	e78e      	b.n	80029d4 <__sflush_r+0x1c>
 8002ab6:	4407      	add	r7, r0
 8002ab8:	eba8 0800 	sub.w	r8, r8, r0
 8002abc:	e7e9      	b.n	8002a92 <__sflush_r+0xda>
 8002abe:	bf00      	nop
 8002ac0:	20400001 	.word	0x20400001

08002ac4 <_fflush_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	690b      	ldr	r3, [r1, #16]
 8002ac8:	4605      	mov	r5, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	b1db      	cbz	r3, 8002b06 <_fflush_r+0x42>
 8002ace:	b118      	cbz	r0, 8002ad8 <_fflush_r+0x14>
 8002ad0:	6983      	ldr	r3, [r0, #24]
 8002ad2:	b90b      	cbnz	r3, 8002ad8 <_fflush_r+0x14>
 8002ad4:	f7ff fa5a 	bl	8001f8c <__sinit>
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <_fflush_r+0x48>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d109      	bne.n	8002af2 <_fflush_r+0x2e>
 8002ade:	686c      	ldr	r4, [r5, #4]
 8002ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae4:	b17b      	cbz	r3, 8002b06 <_fflush_r+0x42>
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	4628      	mov	r0, r5
 8002aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aee:	f7ff bf63 	b.w	80029b8 <__sflush_r>
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <_fflush_r+0x4c>)
 8002af4:	429c      	cmp	r4, r3
 8002af6:	d101      	bne.n	8002afc <_fflush_r+0x38>
 8002af8:	68ac      	ldr	r4, [r5, #8]
 8002afa:	e7f1      	b.n	8002ae0 <_fflush_r+0x1c>
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <_fflush_r+0x50>)
 8002afe:	429c      	cmp	r4, r3
 8002b00:	bf08      	it	eq
 8002b02:	68ec      	ldreq	r4, [r5, #12]
 8002b04:	e7ec      	b.n	8002ae0 <_fflush_r+0x1c>
 8002b06:	2000      	movs	r0, #0
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08002d94 	.word	0x08002d94
 8002b10:	08002db4 	.word	0x08002db4
 8002b14:	08002d74 	.word	0x08002d74

08002b18 <_lseek_r>:
 8002b18:	b538      	push	{r3, r4, r5, lr}
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	2200      	movs	r2, #0
 8002b22:	4c05      	ldr	r4, [pc, #20]	; (8002b38 <_lseek_r+0x20>)
 8002b24:	6022      	str	r2, [r4, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f7ff f8ff 	bl	8001d2a <_lseek>
 8002b2c:	1c43      	adds	r3, r0, #1
 8002b2e:	d102      	bne.n	8002b36 <_lseek_r+0x1e>
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	b103      	cbz	r3, 8002b36 <_lseek_r+0x1e>
 8002b34:	602b      	str	r3, [r5, #0]
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	20000130 	.word	0x20000130

08002b3c <__swhatbuf_r>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	460e      	mov	r6, r1
 8002b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b44:	b096      	sub	sp, #88	; 0x58
 8002b46:	2900      	cmp	r1, #0
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	da07      	bge.n	8002b5e <__swhatbuf_r+0x22>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	89b3      	ldrh	r3, [r6, #12]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	d410      	bmi.n	8002b7a <__swhatbuf_r+0x3e>
 8002b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5c:	e00e      	b.n	8002b7c <__swhatbuf_r+0x40>
 8002b5e:	466a      	mov	r2, sp
 8002b60:	f000 f8be 	bl	8002ce0 <_fstat_r>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	dbf2      	blt.n	8002b4e <__swhatbuf_r+0x12>
 8002b68:	9a01      	ldr	r2, [sp, #4]
 8002b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b72:	425a      	negs	r2, r3
 8002b74:	415a      	adcs	r2, r3
 8002b76:	602a      	str	r2, [r5, #0]
 8002b78:	e7ee      	b.n	8002b58 <__swhatbuf_r+0x1c>
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	6023      	str	r3, [r4, #0]
 8002b80:	b016      	add	sp, #88	; 0x58
 8002b82:	bd70      	pop	{r4, r5, r6, pc}

08002b84 <__smakebuf_r>:
 8002b84:	898b      	ldrh	r3, [r1, #12]
 8002b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b88:	079d      	lsls	r5, r3, #30
 8002b8a:	4606      	mov	r6, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	d507      	bpl.n	8002ba0 <__smakebuf_r+0x1c>
 8002b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	6123      	str	r3, [r4, #16]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	6163      	str	r3, [r4, #20]
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	ab01      	add	r3, sp, #4
 8002ba2:	466a      	mov	r2, sp
 8002ba4:	f7ff ffca 	bl	8002b3c <__swhatbuf_r>
 8002ba8:	9900      	ldr	r1, [sp, #0]
 8002baa:	4605      	mov	r5, r0
 8002bac:	4630      	mov	r0, r6
 8002bae:	f7ff fa77 	bl	80020a0 <_malloc_r>
 8002bb2:	b948      	cbnz	r0, 8002bc8 <__smakebuf_r+0x44>
 8002bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bb8:	059a      	lsls	r2, r3, #22
 8002bba:	d4ef      	bmi.n	8002b9c <__smakebuf_r+0x18>
 8002bbc:	f023 0303 	bic.w	r3, r3, #3
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	e7e3      	b.n	8002b90 <__smakebuf_r+0xc>
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <__smakebuf_r+0x7c>)
 8002bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	6020      	str	r0, [r4, #0]
 8002bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd4:	81a3      	strh	r3, [r4, #12]
 8002bd6:	9b00      	ldr	r3, [sp, #0]
 8002bd8:	6120      	str	r0, [r4, #16]
 8002bda:	6163      	str	r3, [r4, #20]
 8002bdc:	9b01      	ldr	r3, [sp, #4]
 8002bde:	b15b      	cbz	r3, 8002bf8 <__smakebuf_r+0x74>
 8002be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002be4:	4630      	mov	r0, r6
 8002be6:	f000 f88d 	bl	8002d04 <_isatty_r>
 8002bea:	b128      	cbz	r0, 8002bf8 <__smakebuf_r+0x74>
 8002bec:	89a3      	ldrh	r3, [r4, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	81a3      	strh	r3, [r4, #12]
 8002bf8:	89a3      	ldrh	r3, [r4, #12]
 8002bfa:	431d      	orrs	r5, r3
 8002bfc:	81a5      	strh	r5, [r4, #12]
 8002bfe:	e7cd      	b.n	8002b9c <__smakebuf_r+0x18>
 8002c00:	08001f55 	.word	0x08001f55

08002c04 <memchr>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	b2c9      	uxtb	r1, r1
 8002c08:	4402      	add	r2, r0
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	d101      	bne.n	8002c14 <memchr+0x10>
 8002c10:	2300      	movs	r3, #0
 8002c12:	e003      	b.n	8002c1c <memchr+0x18>
 8002c14:	781c      	ldrb	r4, [r3, #0]
 8002c16:	3001      	adds	r0, #1
 8002c18:	428c      	cmp	r4, r1
 8002c1a:	d1f6      	bne.n	8002c0a <memchr+0x6>
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd10      	pop	{r4, pc}

08002c20 <__malloc_lock>:
 8002c20:	4770      	bx	lr

08002c22 <__malloc_unlock>:
 8002c22:	4770      	bx	lr

08002c24 <_free_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4605      	mov	r5, r0
 8002c28:	2900      	cmp	r1, #0
 8002c2a:	d043      	beq.n	8002cb4 <_free_r+0x90>
 8002c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c30:	1f0c      	subs	r4, r1, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfb8      	it	lt
 8002c36:	18e4      	addlt	r4, r4, r3
 8002c38:	f7ff fff2 	bl	8002c20 <__malloc_lock>
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <_free_r+0x94>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	4610      	mov	r0, r2
 8002c42:	b933      	cbnz	r3, 8002c52 <_free_r+0x2e>
 8002c44:	6063      	str	r3, [r4, #4]
 8002c46:	6014      	str	r4, [r2, #0]
 8002c48:	4628      	mov	r0, r5
 8002c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c4e:	f7ff bfe8 	b.w	8002c22 <__malloc_unlock>
 8002c52:	42a3      	cmp	r3, r4
 8002c54:	d90b      	bls.n	8002c6e <_free_r+0x4a>
 8002c56:	6821      	ldr	r1, [r4, #0]
 8002c58:	1862      	adds	r2, r4, r1
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	bf01      	itttt	eq
 8002c5e:	681a      	ldreq	r2, [r3, #0]
 8002c60:	685b      	ldreq	r3, [r3, #4]
 8002c62:	1852      	addeq	r2, r2, r1
 8002c64:	6022      	streq	r2, [r4, #0]
 8002c66:	6063      	str	r3, [r4, #4]
 8002c68:	6004      	str	r4, [r0, #0]
 8002c6a:	e7ed      	b.n	8002c48 <_free_r+0x24>
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	b10a      	cbz	r2, 8002c76 <_free_r+0x52>
 8002c72:	42a2      	cmp	r2, r4
 8002c74:	d9fa      	bls.n	8002c6c <_free_r+0x48>
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	1858      	adds	r0, r3, r1
 8002c7a:	42a0      	cmp	r0, r4
 8002c7c:	d10b      	bne.n	8002c96 <_free_r+0x72>
 8002c7e:	6820      	ldr	r0, [r4, #0]
 8002c80:	4401      	add	r1, r0
 8002c82:	1858      	adds	r0, r3, r1
 8002c84:	4282      	cmp	r2, r0
 8002c86:	6019      	str	r1, [r3, #0]
 8002c88:	d1de      	bne.n	8002c48 <_free_r+0x24>
 8002c8a:	6810      	ldr	r0, [r2, #0]
 8002c8c:	6852      	ldr	r2, [r2, #4]
 8002c8e:	4401      	add	r1, r0
 8002c90:	6019      	str	r1, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e7d8      	b.n	8002c48 <_free_r+0x24>
 8002c96:	d902      	bls.n	8002c9e <_free_r+0x7a>
 8002c98:	230c      	movs	r3, #12
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	e7d4      	b.n	8002c48 <_free_r+0x24>
 8002c9e:	6820      	ldr	r0, [r4, #0]
 8002ca0:	1821      	adds	r1, r4, r0
 8002ca2:	428a      	cmp	r2, r1
 8002ca4:	bf01      	itttt	eq
 8002ca6:	6811      	ldreq	r1, [r2, #0]
 8002ca8:	6852      	ldreq	r2, [r2, #4]
 8002caa:	1809      	addeq	r1, r1, r0
 8002cac:	6021      	streq	r1, [r4, #0]
 8002cae:	6062      	str	r2, [r4, #4]
 8002cb0:	605c      	str	r4, [r3, #4]
 8002cb2:	e7c9      	b.n	8002c48 <_free_r+0x24>
 8002cb4:	bd38      	pop	{r3, r4, r5, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000090 	.word	0x20000090

08002cbc <_read_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4c05      	ldr	r4, [pc, #20]	; (8002cdc <_read_r+0x20>)
 8002cc8:	6022      	str	r2, [r4, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7fe ffd0 	bl	8001c70 <_read>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	d102      	bne.n	8002cda <_read_r+0x1e>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	b103      	cbz	r3, 8002cda <_read_r+0x1e>
 8002cd8:	602b      	str	r3, [r5, #0]
 8002cda:	bd38      	pop	{r3, r4, r5, pc}
 8002cdc:	20000130 	.word	0x20000130

08002ce0 <_fstat_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4c06      	ldr	r4, [pc, #24]	; (8002d00 <_fstat_r+0x20>)
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	f7ff f803 	bl	8001cf8 <_fstat>
 8002cf2:	1c43      	adds	r3, r0, #1
 8002cf4:	d102      	bne.n	8002cfc <_fstat_r+0x1c>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	b103      	cbz	r3, 8002cfc <_fstat_r+0x1c>
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	bd38      	pop	{r3, r4, r5, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000130 	.word	0x20000130

08002d04 <_isatty_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	2300      	movs	r3, #0
 8002d08:	4c05      	ldr	r4, [pc, #20]	; (8002d20 <_isatty_r+0x1c>)
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	6023      	str	r3, [r4, #0]
 8002d10:	f7ff f801 	bl	8001d16 <_isatty>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_isatty_r+0x1a>
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_isatty_r+0x1a>
 8002d1c:	602b      	str	r3, [r5, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	20000130 	.word	0x20000130

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
