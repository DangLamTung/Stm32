
mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  080060ac  080060ac  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ac  080060ac  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080060b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000164  08006218  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  08006218  00020984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fbc  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f4a  00000000  00000000  00033149  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  00036098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001727c  00000000  00000000  00037b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd5f  00000000  00000000  0004ed9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074479  00000000  00000000  0005cafb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  000d0ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	0800601c 	.word	0x0800601c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	0800601c 	.word	0x0800601c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fc2f 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f005 f9f0 	bl	800554c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc47 	bl	8000a2a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 fc0f 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000110 	.word	0x20000110
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000198 	.word	0x20000198

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000198 	.word	0x20000198

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f005 f98c 	bl	80055b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fa81 	bl	80007a0 <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7b1b      	ldrb	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d1b      	ldrb	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b1b      	ldrb	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <HAL_ADC_Init+0x1a8>)
 800035c:	4013      	ands	r3, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f003 0320 	and.w	r3, r3, #32
 8000416:	2b20      	cmp	r3, #32
 8000418:	d140      	bne.n	800049c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f003 0302 	and.w	r3, r3, #2
 8000424:	2b02      	cmp	r3, #2
 8000426:	d139      	bne.n	800049c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	2b00      	cmp	r3, #0
 8000432:	d105      	bne.n	8000440 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000438:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800044a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800044e:	d11d      	bne.n	800048c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000454:	2b00      	cmp	r3, #0
 8000456:	d119      	bne.n	800048c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f022 0220 	bic.w	r2, r2, #32
 8000466:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800047c:	2b00      	cmp	r3, #0
 800047e:	d105      	bne.n	800048c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f043 0201 	orr.w	r2, r3, #1
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 f87c 	bl	800058a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f06f 0212 	mvn.w	r2, #18
 800049a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a6:	2b80      	cmp	r3, #128	; 0x80
 80004a8:	d14f      	bne.n	800054a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d148      	bne.n	800054a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004bc:	f003 0310 	and.w	r3, r3, #16
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d105      	bne.n	80004d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80004da:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80004de:	d012      	beq.n	8000506 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d125      	bne.n	800053a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80004f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004fc:	d11d      	bne.n	800053a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000502:	2b00      	cmp	r3, #0
 8000504:	d119      	bne.n	800053a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	685a      	ldr	r2, [r3, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000514:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800052a:	2b00      	cmp	r3, #0
 800052c:	d105      	bne.n	800053a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000532:	f043 0201 	orr.w	r2, r3, #1
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 f96a 	bl	8000814 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f06f 020c 	mvn.w	r2, #12
 8000548:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000554:	2b40      	cmp	r3, #64	; 0x40
 8000556:	d114      	bne.n	8000582 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b01      	cmp	r3, #1
 8000564:	d10d      	bne.n	8000582 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 f812 	bl	800059c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f06f 0201 	mvn.w	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
	...

080005b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d101      	bne.n	80005d0 <HAL_ADC_ConfigChannel+0x20>
 80005cc:	2302      	movs	r3, #2
 80005ce:	e0dc      	b.n	800078a <HAL_ADC_ConfigChannel+0x1da>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2201      	movs	r2, #1
 80005d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b06      	cmp	r3, #6
 80005de:	d81c      	bhi.n	800061a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	3b05      	subs	r3, #5
 80005f2:	221f      	movs	r2, #31
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4019      	ands	r1, r3
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	3b05      	subs	r3, #5
 800060c:	fa00 f203 	lsl.w	r2, r0, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	e03c      	b.n	8000694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d81c      	bhi.n	800065c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	4613      	mov	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	3b23      	subs	r3, #35	; 0x23
 8000634:	221f      	movs	r2, #31
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	4019      	ands	r1, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	3b23      	subs	r3, #35	; 0x23
 800064e:	fa00 f203 	lsl.w	r2, r0, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	430a      	orrs	r2, r1
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
 800065a:	e01b      	b.n	8000694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	3b41      	subs	r3, #65	; 0x41
 800066e:	221f      	movs	r2, #31
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	43db      	mvns	r3, r3
 8000676:	4019      	ands	r1, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	3b41      	subs	r3, #65	; 0x41
 8000688:	fa00 f203 	lsl.w	r2, r0, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	430a      	orrs	r2, r1
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b09      	cmp	r3, #9
 800069a:	d91c      	bls.n	80006d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68d9      	ldr	r1, [r3, #12]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	3b1e      	subs	r3, #30
 80006ae:	2207      	movs	r2, #7
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	4019      	ands	r1, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	6898      	ldr	r0, [r3, #8]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	3b1e      	subs	r3, #30
 80006c8:	fa00 f203 	lsl.w	r2, r0, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	e019      	b.n	800070a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6919      	ldr	r1, [r3, #16]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4019      	ands	r1, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	6898      	ldr	r0, [r3, #8]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	fa00 f203 	lsl.w	r2, r0, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	430a      	orrs	r2, r1
 8000708:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b10      	cmp	r3, #16
 8000710:	d003      	beq.n	800071a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000716:	2b11      	cmp	r3, #17
 8000718:	d132      	bne.n	8000780 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <HAL_ADC_ConfigChannel+0x1e4>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d125      	bne.n	8000770 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d126      	bne.n	8000780 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000740:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b10      	cmp	r3, #16
 8000748:	d11a      	bne.n	8000780 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_ADC_ConfigChannel+0x1e8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <HAL_ADC_ConfigChannel+0x1ec>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	0c9a      	lsrs	r2, r3, #18
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000760:	e002      	b.n	8000768 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f9      	bne.n	8000762 <HAL_ADC_ConfigChannel+0x1b2>
 800076e:	e007      	b.n	8000780 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	f043 0220 	orr.w	r2, r3, #32
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40012400 	.word	0x40012400
 8000798:	20000110 	.word	0x20000110
 800079c:	431bde83 	.word	0x431bde83

080007a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d127      	bne.n	800080a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f022 0201 	bic.w	r2, r2, #1
 80007c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80007ca:	f7ff fd17 	bl	80001fc <HAL_GetTick>
 80007ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007d0:	e014      	b.n	80007fc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80007d2:	f7ff fd13 	bl	80001fc <HAL_GetTick>
 80007d6:	4602      	mov	r2, r0
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d90d      	bls.n	80007fc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e4:	f043 0210 	orr.w	r2, r3, #16
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f0:	f043 0201 	orr.w	r2, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e007      	b.n	800080c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b01      	cmp	r3, #1
 8000808:	d0e3      	beq.n	80007d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
	...

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <__NVIC_EnableIRQ+0x34>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff2d 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff42 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff35 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffa2 	bl	800097c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e043      	b.n	8000ae2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_DMA_Init+0xa8>)
 8000a62:	4413      	add	r3, r2
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_DMA_Init+0xac>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	009a      	lsls	r2, r3, #2
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_DMA_Init+0xb0>)
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	bffdfff8 	.word	0xbffdfff8
 8000af0:	cccccccd 	.word	0xcccccccd
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	2204      	movs	r2, #4
 8000b16:	409a      	lsls	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d04f      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0xc8>
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d04a      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0320 	and.w	r3, r3, #32
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d107      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0204 	bic.w	r2, r2, #4
 8000b46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a66      	ldr	r2, [pc, #408]	; (8000ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d029      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0xae>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a65      	ldr	r2, [pc, #404]	; (8000cec <HAL_DMA_IRQHandler+0x1f4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d022      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0xaa>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a63      	ldr	r2, [pc, #396]	; (8000cf0 <HAL_DMA_IRQHandler+0x1f8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d01a      	beq.n	8000b9c <HAL_DMA_IRQHandler+0xa4>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a62      	ldr	r2, [pc, #392]	; (8000cf4 <HAL_DMA_IRQHandler+0x1fc>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d012      	beq.n	8000b96 <HAL_DMA_IRQHandler+0x9e>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a60      	ldr	r2, [pc, #384]	; (8000cf8 <HAL_DMA_IRQHandler+0x200>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d00a      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x98>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a5f      	ldr	r2, [pc, #380]	; (8000cfc <HAL_DMA_IRQHandler+0x204>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d102      	bne.n	8000b8a <HAL_DMA_IRQHandler+0x92>
 8000b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b88:	e00e      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xb0>
 8000b8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b8e:	e00b      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xb0>
 8000b90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b94:	e008      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xb0>
 8000b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b9a:	e005      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xb0>
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba0:	e002      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xb0>
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	e000      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xb0>
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	4a55      	ldr	r2, [pc, #340]	; (8000d00 <HAL_DMA_IRQHandler+0x208>)
 8000baa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f000 8094 	beq.w	8000cde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000bbe:	e08e      	b.n	8000cde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d056      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x186>
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d051      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10b      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 020a 	bic.w	r2, r2, #10
 8000bf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d029      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x166>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a37      	ldr	r2, [pc, #220]	; (8000cec <HAL_DMA_IRQHandler+0x1f4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d022      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x162>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a35      	ldr	r2, [pc, #212]	; (8000cf0 <HAL_DMA_IRQHandler+0x1f8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01a      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x15c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a34      	ldr	r2, [pc, #208]	; (8000cf4 <HAL_DMA_IRQHandler+0x1fc>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d012      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x156>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <HAL_DMA_IRQHandler+0x200>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00a      	beq.n	8000c48 <HAL_DMA_IRQHandler+0x150>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <HAL_DMA_IRQHandler+0x204>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d102      	bne.n	8000c42 <HAL_DMA_IRQHandler+0x14a>
 8000c3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c40:	e00e      	b.n	8000c60 <HAL_DMA_IRQHandler+0x168>
 8000c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c46:	e00b      	b.n	8000c60 <HAL_DMA_IRQHandler+0x168>
 8000c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4c:	e008      	b.n	8000c60 <HAL_DMA_IRQHandler+0x168>
 8000c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c52:	e005      	b.n	8000c60 <HAL_DMA_IRQHandler+0x168>
 8000c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c58:	e002      	b.n	8000c60 <HAL_DMA_IRQHandler+0x168>
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	e000      	b.n	8000c60 <HAL_DMA_IRQHandler+0x168>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <HAL_DMA_IRQHandler+0x208>)
 8000c62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d034      	beq.n	8000cde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c7c:	e02f      	b.n	8000cde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	2208      	movs	r2, #8
 8000c84:	409a      	lsls	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d028      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x1e8>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d023      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 020e 	bic.w	r2, r2, #14
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
    }
  }
  return;
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
}
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40020008 	.word	0x40020008
 8000cec:	4002001c 	.word	0x4002001c
 8000cf0:	40020030 	.word	0x40020030
 8000cf4:	40020044 	.word	0x40020044
 8000cf8:	40020058 	.word	0x40020058
 8000cfc:	4002006c 	.word	0x4002006c
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b08b      	sub	sp, #44	; 0x2c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e127      	b.n	8000f68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8116 	bne.w	8000f62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d034      	beq.n	8000da8 <HAL_GPIO_Init+0xa4>
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d80d      	bhi.n	8000d5e <HAL_GPIO_Init+0x5a>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d02b      	beq.n	8000d9e <HAL_GPIO_Init+0x9a>
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d804      	bhi.n	8000d54 <HAL_GPIO_Init+0x50>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d031      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d01c      	beq.n	8000d8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d52:	e048      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d043      	beq.n	8000de0 <HAL_GPIO_Init+0xdc>
 8000d58:	2b11      	cmp	r3, #17
 8000d5a:	d01b      	beq.n	8000d94 <HAL_GPIO_Init+0x90>
          break;
 8000d5c:	e043      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5e:	4a89      	ldr	r2, [pc, #548]	; (8000f84 <HAL_GPIO_Init+0x280>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d026      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d64:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_GPIO_Init+0x280>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d806      	bhi.n	8000d78 <HAL_GPIO_Init+0x74>
 8000d6a:	4a87      	ldr	r2, [pc, #540]	; (8000f88 <HAL_GPIO_Init+0x284>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d020      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d70:	4a86      	ldr	r2, [pc, #536]	; (8000f8c <HAL_GPIO_Init+0x288>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01d      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
          break;
 8000d76:	e036      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d78:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <HAL_GPIO_Init+0x28c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d019      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d7e:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <HAL_GPIO_Init+0x290>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d016      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d84:	4a84      	ldr	r2, [pc, #528]	; (8000f98 <HAL_GPIO_Init+0x294>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
          break;
 8000d8a:	e02c      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e028      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e023      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e01e      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e019      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e012      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	611a      	str	r2, [r3, #16]
          break;
 8000dd2:	e008      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	615a      	str	r2, [r3, #20]
          break;
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d801      	bhi.n	8000df0 <HAL_GPIO_Init+0xec>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	e001      	b.n	8000df4 <HAL_GPIO_Init+0xf0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3304      	adds	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2bff      	cmp	r3, #255	; 0xff
 8000dfa:	d802      	bhi.n	8000e02 <HAL_GPIO_Init+0xfe>
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x104>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3b08      	subs	r3, #8
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	210f      	movs	r1, #15
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	6a39      	ldr	r1, [r7, #32]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	431a      	orrs	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8096 	beq.w	8000f62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e4e:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <HAL_GPIO_Init+0x29c>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4b      	ldr	r2, [pc, #300]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x19e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4a      	ldr	r2, [pc, #296]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x19a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a49      	ldr	r2, [pc, #292]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x196>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x192>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <HAL_GPIO_Init+0x29c>)
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	4933      	ldr	r1, [pc, #204]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	492e      	ldr	r1, [pc, #184]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4929      	ldr	r1, [pc, #164]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	4924      	ldr	r1, [pc, #144]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	608b      	str	r3, [r1, #8]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	491f      	ldr	r1, [pc, #124]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	491a      	ldr	r1, [pc, #104]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60cb      	str	r3, [r1, #12]
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4915      	ldr	r1, [pc, #84]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f47f aed0 	bne.w	8000d18 <HAL_GPIO_Init+0x14>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	372c      	adds	r7, #44	; 0x2c
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	10210000 	.word	0x10210000
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	10120000 	.word	0x10120000
 8000f90:	10310000 	.word	0x10310000
 8000f94:	10320000 	.word	0x10320000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	611a      	str	r2, [r3, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001006:	e002      	b.n	800100e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af06      	add	r7, sp, #24
 800101e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0d3      	b.n	80011d2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f004 fc14 	bl	800586c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2203      	movs	r2, #3
 8001048:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fdb2 	bl	8002bba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	687e      	ldr	r6, [r7, #4]
 800105e:	466d      	mov	r5, sp
 8001060:	f106 0410 	add.w	r4, r6, #16
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	602b      	str	r3, [r5, #0]
 800106c:	1d33      	adds	r3, r6, #4
 800106e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f001 fd7b 	bl	8002b6c <USB_CoreInit>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0a4      	b.n	80011d2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fdaf 	bl	8002bf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e035      	b.n	8001106 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	015b      	lsls	r3, r3, #5
 80010a0:	4413      	add	r3, r2
 80010a2:	3329      	adds	r3, #41	; 0x29
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	4413      	add	r3, r2
 80010b0:	3328      	adds	r3, #40	; 0x28
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	b291      	uxth	r1, r2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	4413      	add	r3, r2
 80010c2:	3336      	adds	r3, #54	; 0x36
 80010c4:	460a      	mov	r2, r1
 80010c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	4413      	add	r3, r2
 80010d0:	332b      	adds	r3, #43	; 0x2b
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	015b      	lsls	r3, r3, #5
 80010dc:	4413      	add	r3, r2
 80010de:	3338      	adds	r3, #56	; 0x38
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	015b      	lsls	r3, r3, #5
 80010ea:	4413      	add	r3, r2
 80010ec:	333c      	adds	r3, #60	; 0x3c
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	3302      	adds	r3, #2
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	4413      	add	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	3301      	adds	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3c4      	bcc.n	800109a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e031      	b.n	800117a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	015b      	lsls	r3, r3, #5
 800111c:	4413      	add	r3, r2
 800111e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	015b      	lsls	r3, r3, #5
 800112c:	4413      	add	r3, r2
 800112e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	4413      	add	r3, r2
 800113e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	015b      	lsls	r3, r3, #5
 800114c:	4413      	add	r3, r2
 800114e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	015b      	lsls	r3, r3, #5
 800115c:	4413      	add	r3, r2
 800115e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	330a      	adds	r3, #10
 800116c:	015b      	lsls	r3, r3, #5
 800116e:	4413      	add	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	d3c8      	bcc.n	8001116 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	687e      	ldr	r6, [r7, #4]
 800118c:	466d      	mov	r5, sp
 800118e:	f106 0410 	add.w	r4, r6, #16
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	602b      	str	r3, [r5, #0]
 800119a:	1d33      	adds	r3, r6, #4
 800119c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f001 fd33 	bl	8002c0a <USB_DevInit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2202      	movs	r2, #2
 80011ae:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00d      	b.n	80011d2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fd71 	bl	8003cb2 <USB_DevDisconnect>

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_PCD_Start+0x16>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e016      	b.n	800121e <HAL_PCD_Start+0x44>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011f8:	2101      	movs	r1, #1
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f004 fd77 	bl	8005cee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fd4a 	bl	8003c9e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fcbc 	bl	8002b8c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f002 fd47 	bl	8003cc6 <USB_ReadInterrupts>
 8001238:	4603      	mov	r3, r0
 800123a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001242:	d102      	bne.n	800124a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fadf 	bl	8001808 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fd39 	bl	8003cc6 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d112      	bne.n	8001286 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001272:	b292      	uxth	r2, r2
 8001274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f004 fb6c 	bl	8005956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800127e:	2100      	movs	r1, #0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8de 	bl	8001442 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fd1b 	bl	8003cc6 <USB_ReadInterrupts>
 8001290:	4603      	mov	r3, r0
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800129a:	d10b      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012ae:	b292      	uxth	r2, r2
 80012b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fd04 	bl	8003cc6 <USB_ReadInterrupts>
 80012be:	4603      	mov	r3, r0
 80012c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012c8:	d10b      	bne.n	80012e2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012dc:	b292      	uxth	r2, r2
 80012de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fced 	bl	8003cc6 <USB_ReadInterrupts>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f6:	d126      	bne.n	8001346 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0204 	bic.w	r2, r2, #4
 800130a:	b292      	uxth	r2, r2
 800130c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0208 	bic.w	r2, r2, #8
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f004 fb4d 	bl	80059c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fcbb 	bl	8003cc6 <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800135a:	d13d      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0208 	orr.w	r2, r2, #8
 800136e:	b292      	uxth	r2, r2
 8001370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001386:	b292      	uxth	r2, r2
 8001388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0204 	orr.w	r2, r2, #4
 800139e:	b292      	uxth	r2, r2
 80013a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fc8c 	bl	8003cc6 <USB_ReadInterrupts>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013b8:	d10b      	bne.n	80013d2 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013cc:	b292      	uxth	r2, r2
 80013ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f004 fade 	bl	8005994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fc72 	bl	8003cc6 <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ec:	d10e      	bne.n	800140c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001400:	b292      	uxth	r2, r2
 8001402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f004 fa97 	bl	800593a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fc58 	bl	8003cc6 <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001420:	d10b      	bne.n	800143a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142a:	b29a      	uxth	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001434:	b292      	uxth	r2, r2
 8001436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_PCD_SetAddress+0x1a>
 8001458:	2302      	movs	r3, #2
 800145a:	e013      	b.n	8001484 <HAL_PCD_SetAddress+0x42>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fbff 	bl	8003c78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	4608      	mov	r0, r1
 8001496:	4611      	mov	r1, r2
 8001498:	461a      	mov	r2, r3
 800149a:	4603      	mov	r3, r0
 800149c:	70fb      	strb	r3, [r7, #3]
 800149e:	460b      	mov	r3, r1
 80014a0:	803b      	strh	r3, [r7, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da0b      	bge.n	80014ca <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	015b      	lsls	r3, r3, #5
 80014ba:	3328      	adds	r3, #40	; 0x28
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2201      	movs	r2, #1
 80014c6:	705a      	strb	r2, [r3, #1]
 80014c8:	e00b      	b.n	80014e2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014ee:	883a      	ldrh	r2, [r7, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	78ba      	ldrb	r2, [r7, #2]
 80014f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800150c:	78bb      	ldrb	r3, [r7, #2]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d102      	bne.n	8001518 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_PCD_EP_Open+0x9a>
 8001522:	2302      	movs	r3, #2
 8001524:	e00e      	b.n	8001544 <HAL_PCD_EP_Open+0xb8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fb8d 	bl	8002c54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001542:	7afb      	ldrb	r3, [r7, #11]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da0b      	bge.n	8001578 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	015b      	lsls	r3, r3, #5
 8001568:	3328      	adds	r3, #40	; 0x28
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	705a      	strb	r2, [r3, #1]
 8001576:	e00b      	b.n	8001590 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	015b      	lsls	r3, r3, #5
 8001580:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	b2da      	uxtb	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_PCD_EP_Close+0x5e>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e00e      	b.n	80015c8 <HAL_PCD_EP_Close+0x7c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68f9      	ldr	r1, [r7, #12]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fe39 	bl	8003230 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	460b      	mov	r3, r1
 80015de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e0:	7afb      	ldrb	r3, [r7, #11]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2200      	movs	r2, #0
 8001608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	b2da      	uxtb	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001616:	7afb      	ldrb	r3, [r7, #11]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	4618      	mov	r0, r3
 8001628:	f001 ff98 	bl	800355c <USB_EPStartXfer>
 800162c:	e005      	b.n	800163a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6979      	ldr	r1, [r7, #20]
 8001634:	4618      	mov	r0, r3
 8001636:	f001 ff91 	bl	800355c <USB_EPStartXfer>
  }

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	460b      	mov	r3, r1
 8001652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	015b      	lsls	r3, r3, #5
 800165c:	3328      	adds	r3, #40	; 0x28
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2201      	movs	r2, #1
 800167a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	b2da      	uxtb	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001688:	7afb      	ldrb	r3, [r7, #11]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	4618      	mov	r0, r3
 800169a:	f001 ff5f 	bl	800355c <USB_EPStartXfer>
 800169e:	e005      	b.n	80016ac <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6979      	ldr	r1, [r7, #20]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 ff58 	bl	800355c <USB_EPStartXfer>
  }

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0207 	and.w	r2, r3, #7
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d901      	bls.n	80016d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e046      	b.n	8001762 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da0b      	bge.n	80016f4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	015b      	lsls	r3, r3, #5
 80016e4:	3328      	adds	r3, #40	; 0x28
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	705a      	strb	r2, [r3, #1]
 80016f2:	e009      	b.n	8001708 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_PCD_EP_SetStall+0x72>
 8001724:	2302      	movs	r3, #2
 8001726:	e01c      	b.n	8001762 <HAL_PCD_EP_SetStall+0xac>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 f9c8 	bl	8003acc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f002 fac6 	bl	8003ce4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	f003 020f 	and.w	r2, r3, #15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	d901      	bls.n	8001788 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e03a      	b.n	80017fe <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0b      	bge.n	80017a8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	015b      	lsls	r3, r3, #5
 8001798:	3328      	adds	r3, #40	; 0x28
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	705a      	strb	r2, [r3, #1]
 80017a6:	e00b      	b.n	80017c0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	015b      	lsls	r3, r3, #5
 80017b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_PCD_EP_ClrStall+0x76>
 80017dc:	2302      	movs	r3, #2
 80017de:	e00e      	b.n	80017fe <HAL_PCD_EP_ClrStall+0x94>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 f9ae 	bl	8003b50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001810:	e282      	b.n	8001d18 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800181a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800181c:	8afb      	ldrh	r3, [r7, #22]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001826:	7d7b      	ldrb	r3, [r7, #21]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 8142 	bne.w	8001ab2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800182e:	8afb      	ldrh	r3, [r7, #22]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d151      	bne.n	80018dc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001848:	b29c      	uxth	r4, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001856:	b29b      	uxth	r3, r3
 8001858:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3328      	adds	r3, #40	; 0x28
 800185e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4413      	add	r3, r2
 8001874:	3302      	adds	r3, #2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	441a      	add	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800189a:	2100      	movs	r1, #0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f004 f835 	bl	800590c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8234 	beq.w	8001d18 <PCD_EP_ISR_Handler+0x510>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 822f 	bne.w	8001d18 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018da:	e21d      	b.n	8001d18 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018e2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018ec:	8a7b      	ldrh	r3, [r7, #18]
 80018ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d033      	beq.n	800195e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	3306      	adds	r3, #6
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4413      	add	r3, r2
 8001914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001934:	b29b      	uxth	r3, r3
 8001936:	f002 fa24 	bl	8003d82 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29a      	uxth	r2, r3
 8001942:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001946:	4013      	ands	r3, r2
 8001948:	b29c      	uxth	r4, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001952:	b292      	uxth	r2, r2
 8001954:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f003 ffae 	bl	80058b8 <HAL_PCD_SetupStageCallback>
 800195c:	e1dc      	b.n	8001d18 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f280 81d8 	bge.w	8001d18 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29a      	uxth	r2, r3
 8001970:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001974:	4013      	ands	r3, r2
 8001976:	b29c      	uxth	r4, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001980:	b292      	uxth	r2, r2
 8001982:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	3306      	adds	r3, #6
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d019      	beq.n	80019ec <PCD_EP_ISR_Handler+0x1e4>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d015      	beq.n	80019ec <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6959      	ldr	r1, [r3, #20]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f002 f9d6 	bl	8003d82 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	441a      	add	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019e4:	2100      	movs	r1, #0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f003 ff78 	bl	80058dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461c      	mov	r4, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	441c      	add	r4, r3
 80019fe:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001a02:	461c      	mov	r4, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <PCD_EP_ISR_Handler+0x222>
 8001a0c:	8823      	ldrh	r3, [r4, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8023      	strh	r3, [r4, #0]
 8001a18:	8823      	ldrh	r3, [r4, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	8023      	strh	r3, [r4, #0]
 8001a28:	e02d      	b.n	8001a86 <PCD_EP_ISR_Handler+0x27e>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001a30:	d812      	bhi.n	8001a58 <PCD_EP_ISR_Handler+0x250>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <PCD_EP_ISR_Handler+0x244>
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	8023      	strh	r3, [r4, #0]
 8001a56:	e016      	b.n	8001a86 <PCD_EP_ISR_Handler+0x27e>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x26a>
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a96:	b29c      	uxth	r4, r3
 8001a98:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001a9c:	b29c      	uxth	r4, r3
 8001a9e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001aa2:	b29c      	uxth	r4, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4ba2      	ldr	r3, [pc, #648]	; (8001d34 <PCD_EP_ISR_Handler+0x52c>)
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	8013      	strh	r3, [r2, #0]
 8001ab0:	e132      	b.n	8001d18 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	7d7b      	ldrb	r3, [r7, #21]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ac2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f280 80d1 	bge.w	8001c6e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	7d7b      	ldrb	r3, [r7, #21]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b29c      	uxth	r4, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	7d7b      	ldrb	r3, [r7, #21]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001af4:	b292      	uxth	r2, r2
 8001af6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
 8001afa:	015b      	lsls	r3, r3, #5
 8001afc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	7b1b      	ldrb	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d121      	bne.n	8001b52 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	3306      	adds	r3, #6
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b36:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001b38:	8bfb      	ldrh	r3, [r7, #30]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d072      	beq.n	8001c24 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6959      	ldr	r1, [r3, #20]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	88da      	ldrh	r2, [r3, #6]
 8001b4a:	8bfb      	ldrh	r3, [r7, #30]
 8001b4c:	f002 f919 	bl	8003d82 <USB_ReadPMA>
 8001b50:	e068      	b.n	8001c24 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d021      	beq.n	8001bb0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3302      	adds	r3, #2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b94:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b96:	8bfb      	ldrh	r3, [r7, #30]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02a      	beq.n	8001bf2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6959      	ldr	r1, [r3, #20]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	891a      	ldrh	r2, [r3, #8]
 8001ba8:	8bfb      	ldrh	r3, [r7, #30]
 8001baa:	f002 f8ea 	bl	8003d82 <USB_ReadPMA>
 8001bae:	e020      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001bda:	8bfb      	ldrh	r3, [r7, #30]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6959      	ldr	r1, [r3, #20]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	895a      	ldrh	r2, [r3, #10]
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	f002 f8c8 	bl	8003d82 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0c:	b29c      	uxth	r4, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	441a      	add	r2, r3
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <PCD_EP_ISR_Handler+0x530>)
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	8bfb      	ldrh	r3, [r7, #30]
 8001c2a:	441a      	add	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	8bfb      	ldrh	r3, [r7, #30]
 8001c36:	441a      	add	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <PCD_EP_ISR_Handler+0x446>
 8001c44:	8bfa      	ldrh	r2, [r7, #30]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d206      	bcs.n	8001c5c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f003 fe41 	bl	80058dc <HAL_PCD_DataOutStageCallback>
 8001c5a:	e008      	b.n	8001c6e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	7819      	ldrb	r1, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff fcb1 	bl	80015d0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c6e:	8a7b      	ldrh	r3, [r7, #18]
 8001c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d04f      	beq.n	8001d18 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c78:	7d7b      	ldrb	r3, [r7, #21]
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	3328      	adds	r3, #40	; 0x28
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	7d7b      	ldrb	r3, [r7, #21]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9c:	b29c      	uxth	r4, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	7d7b      	ldrb	r3, [r7, #21]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	441a      	add	r2, r3
 8001caa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	441a      	add	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f003 fe04 	bl	800590c <HAL_PCD_DataInStageCallback>
 8001d04:	e008      	b.n	8001d18 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	7819      	ldrb	r1, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fc96 	bl	8001644 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f6ff ad74 	blt.w	8001812 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3724      	adds	r7, #36	; 0x24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd90      	pop	{r4, r7, pc}
 8001d34:	ffff8080 	.word	0xffff8080
 8001d38:	ffff80c0 	.word	0xffff80c0

08001d3c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	817b      	strh	r3, [r7, #10]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	897b      	ldrh	r3, [r7, #10]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	3328      	adds	r3, #40	; 0x28
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e006      	b.n	8001d7a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001d7a:	893b      	ldrh	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	80da      	strh	r2, [r3, #6]
 8001d8e:	e00b      	b.n	8001da8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2201      	movs	r2, #1
 8001d94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e26c      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de0:	4b8f      	ldr	r3, [pc, #572]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
 8001dec:	4b8c      	ldr	r3, [pc, #560]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b89      	ldr	r3, [pc, #548]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d168      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e246      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x76>
 8001e1c:	4b80      	ldr	r3, [pc, #512]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7f      	ldr	r2, [pc, #508]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e02e      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x98>
 8001e32:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b78      	ldr	r3, [pc, #480]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a77      	ldr	r2, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xbc>
 8001e56:	4b72      	ldr	r3, [pc, #456]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a71      	ldr	r2, [pc, #452]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e70:	4b6b      	ldr	r3, [pc, #428]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6a      	ldr	r2, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a67      	ldr	r2, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe f9b4 	bl	80001fc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe f9b0 	bl	80001fc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1fa      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe4>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe f9a0 	bl	80001fc <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7fe f99c 	bl	80001fc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1e6      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x10c>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d063      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x18c>
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1ba      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4939      	ldr	r1, [pc, #228]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7fe f955 	bl	80001fc <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7fe f951 	bl	80001fc <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e19b      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4927      	ldr	r1, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe f934 	bl	80001fc <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7fe f930 	bl	80001fc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e17a      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03a      	beq.n	8002038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7fe f914 	bl	80001fc <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7fe f910 	bl	80001fc <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e15a      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fada 	bl	80025b0 <RCC_Delay>
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_RCC_OscConfig+0x274>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002004:	f7fe f8fa 	bl	80001fc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200a:	e00f      	b.n	800202c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe f8f6 	bl	80001fc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d908      	bls.n	800202c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e140      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	42420000 	.word	0x42420000
 8002028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e9      	bne.n	800200c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a6 	beq.w	8002192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b97      	ldr	r3, [pc, #604]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10d      	bne.n	8002072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b94      	ldr	r3, [pc, #592]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a93      	ldr	r2, [pc, #588]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b8e      	ldr	r3, [pc, #568]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8a      	ldr	r2, [pc, #552]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7fe f8b7 	bl	80001fc <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7fe f8b3 	bl	80001fc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0fd      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b81      	ldr	r3, [pc, #516]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x312>
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x334>
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b73      	ldr	r3, [pc, #460]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a72      	ldr	r2, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	e01c      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x356>
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a63      	ldr	r2, [pc, #396]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7fe f867 	bl	80001fc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe f863 	bl	80001fc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0ab      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ee      	beq.n	8002132 <HAL_RCC_OscConfig+0x37e>
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7fe f851 	bl	80001fc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe f84d 	bl	80001fc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e095      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8081 	beq.w	800229e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219c:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d061      	beq.n	800226c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d146      	bne.n	800223e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x4fc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe f821 	bl	80001fc <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe f81d 	bl	80001fc <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e067      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d108      	bne.n	80021f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	492d      	ldr	r1, [pc, #180]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a19      	ldr	r1, [r3, #32]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	430b      	orrs	r3, r1
 800220a:	4927      	ldr	r1, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x4fc>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fd fff1 	bl	80001fc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7fd ffed 	bl	80001fc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e037      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x46a>
 800223c:	e02f      	b.n	800229e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_RCC_OscConfig+0x4fc>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fd ffda 	bl	80001fc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fd ffd6 	bl	80001fc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e020      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x498>
 800226a:	e018      	b.n	800229e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	429a      	cmp	r2, r3
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	42420060 	.word	0x42420060

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d0      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d910      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4965      	ldr	r1, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800231a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d040      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d115      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e073      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4936      	ldr	r1, [pc, #216]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7fd ff2a 	bl	80001fc <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fd ff26 	bl	80001fc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e053      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d210      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4922      	ldr	r1, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4601      	mov	r1, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	fa21 f303 	lsr.w	r3, r1, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1cc>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd fe88 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	08006094 	.word	0x08006094
 8002480:	20000110 	.word	0x20000110
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b490      	push	{r4, r7}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002490:	1d3c      	adds	r4, r7, #4
 8002492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCC_GetSysClockFreq+0xb4>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x46>
 80024c6:	e02d      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ca:	623b      	str	r3, [r7, #32]
      break;
 80024cc:	e02d      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024da:	4413      	add	r3, r2
 80024dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c5b      	lsrs	r3, r3, #17
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024fa:	4413      	add	r3, r2
 80024fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002500:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	e004      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	623b      	str	r3, [r7, #32]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002526:	623b      	str	r3, [r7, #32]
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	6a3b      	ldr	r3, [r7, #32]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc90      	pop	{r4, r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	08006034 	.word	0x08006034
 800253c:	08006044 	.word	0x08006044
 8002540:	40021000 	.word	0x40021000
 8002544:	007a1200 	.word	0x007a1200
 8002548:	003d0900 	.word	0x003d0900

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <HAL_RCC_GetHCLKFreq+0x10>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000110 	.word	0x20000110

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002564:	f7ff fff2 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002568:	4601      	mov	r1, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	080060a4 	.word	0x080060a4

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800258c:	f7ff ffde 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002590:	4601      	mov	r1, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	080060a4 	.word	0x080060a4

080025b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <RCC_Delay+0x34>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <RCC_Delay+0x38>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0a5b      	lsrs	r3, r3, #9
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025cc:	bf00      	nop
  }
  while (Delay --);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	60fa      	str	r2, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f9      	bne.n	80025cc <RCC_Delay+0x1c>
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000110 	.word	0x20000110
 80025e8:	10624dd3 	.word	0x10624dd3

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d07d      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b4c      	ldr	r3, [pc, #304]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	4a4b      	ldr	r2, [pc, #300]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	61d3      	str	r3, [r2, #28]
 8002624:	4b49      	ldr	r3, [pc, #292]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002630:	2301      	movs	r3, #1
 8002632:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d118      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002640:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a42      	ldr	r2, [pc, #264]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264c:	f7fd fdd6 	bl	80001fc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	e008      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fd fdd2 	bl	80001fc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e06d      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02e      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d027      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a0:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026a6:	4a29      	ldr	r2, [pc, #164]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d014      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7fd fda1 	bl	80001fc <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fd fd9d 	bl	80001fc <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e036      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ee      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4917      	ldr	r1, [pc, #92]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	490b      	ldr	r1, [pc, #44]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4904      	ldr	r1, [pc, #16]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	42420440 	.word	0x42420440

08002758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e03f      	b.n	80027ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f002 ff86 	bl	8005690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f90b 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b088      	sub	sp, #32
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 8083 	bne.w	800291a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_UART_Transmit+0x2e>
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07b      	b.n	800291c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_UART_Transmit+0x40>
 800282e:	2302      	movs	r3, #2
 8002830:	e074      	b.n	800291c <HAL_UART_Transmit+0x12a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002848:	f7fd fcd8 	bl	80001fc <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800285a:	e042      	b.n	80028e2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d122      	bne.n	80028ba <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2200      	movs	r2, #0
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f850 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e046      	b.n	800291c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3302      	adds	r3, #2
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e017      	b.n	80028e2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e013      	b.n	80028e2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f82d 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e023      	b.n	800291c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1b7      	bne.n	800285c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f814 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e00a      	b.n	800291c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002934:	e02c      	b.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293c:	d028      	beq.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <UART_WaitOnFlagUntilTimeout+0x30>
 8002944:	f7fd fc5a 	bl	80001fc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d21d      	bcs.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002962:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e00f      	b.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d0c3      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029f2:	f023 030c 	bic.w	r3, r3, #12
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <UART_SetConfig+0x1ac>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d14e      	bne.n	8002abe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a20:	f7ff fdb2 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8002a24:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	441a      	add	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	0119      	lsls	r1, r3, #4
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2064      	movs	r0, #100	; 0x64
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	3332      	adds	r3, #50	; 0x32
 8002a70:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7c:	4419      	add	r1, r3
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a94:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002a96:	fba3 0302 	umull	r0, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	fb00 f303 	mul.w	r3, r0, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	3332      	adds	r3, #50	; 0x32
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	440a      	add	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002abc:	e04d      	b.n	8002b5a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002abe:	f7ff fd4f 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002ac2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009a      	lsls	r2, r3, #2
 8002ace:	441a      	add	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	0119      	lsls	r1, r3, #4
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009a      	lsls	r2, r3, #2
 8002aee:	441a      	add	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002afc:	fba3 0302 	umull	r0, r3, r3, r2
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	2064      	movs	r0, #100	; 0x64
 8002b04:	fb00 f303 	mul.w	r3, r0, r3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	3332      	adds	r3, #50	; 0x32
 8002b0e:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1a:	4419      	add	r1, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	009a      	lsls	r2, r3, #2
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002b34:	fba3 0302 	umull	r0, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	2064      	movs	r0, #100	; 0x64
 8002b3c:	fb00 f303 	mul.w	r3, r0, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	3332      	adds	r3, #50	; 0x32
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <UART_SetConfig+0x1b0>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	f003 020f 	and.w	r2, r3, #15
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	440a      	add	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40013800 	.word	0x40013800
 8002b68:	51eb851f 	.word	0x51eb851f

08002b6c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	f107 0014 	add.w	r0, r7, #20
 8002b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	b004      	add	sp, #16
 8002b8a:	4770      	bx	lr

08002b8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b98:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	89fb      	ldrh	r3, [r7, #14]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bc2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bc6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	f107 0014 	add.w	r0, r7, #20
 8002c18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffa5 	bl	8002b8c <USB_EnableGlobalInt>

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c4e:	b004      	add	sp, #16
 8002c50:	4770      	bx	lr
	...

08002c54 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c54:	b490      	push	{r4, r7}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	78db      	ldrb	r3, [r3, #3]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d819      	bhi.n	8002cb6 <USB_ActivateEndpoint+0x62>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <USB_ActivateEndpoint+0x34>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002cbd 	.word	0x08002cbd
 8002c94:	08002ca3 	.word	0x08002ca3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c98:	89bb      	ldrh	r3, [r7, #12]
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9e:	81bb      	strh	r3, [r7, #12]
      break;
 8002ca0:	e00d      	b.n	8002cbe <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ca2:	89bb      	ldrh	r3, [r7, #12]
 8002ca4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ca8:	81bb      	strh	r3, [r7, #12]
      break;
 8002caa:	e008      	b.n	8002cbe <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002cac:	89bb      	ldrh	r3, [r7, #12]
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	81bb      	strh	r3, [r7, #12]
      break;
 8002cb4:	e003      	b.n	8002cbe <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cba:	e000      	b.n	8002cbe <USB_ActivateEndpoint+0x6a>
      break;
 8002cbc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	441a      	add	r2, r3
 8002cc8:	89bb      	ldrh	r3, [r7, #12]
 8002cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b29c      	uxth	r4, r3
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	4b8a      	ldr	r3, [pc, #552]	; (8002f34 <USB_ActivateEndpoint+0x2e0>)
 8002d0c:	4323      	orrs	r3, r4
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	7b1b      	ldrb	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8112 	bne.w	8002f40 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d067      	beq.n	8002df4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d24:	687c      	ldr	r4, [r7, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	441c      	add	r4, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4423      	add	r3, r4
 8002d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	88db      	ldrh	r3, [r3, #6]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29c      	uxth	r4, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d014      	beq.n	8002d8e <USB_ActivateEndpoint+0x13a>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	b29c      	uxth	r4, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <USB_ActivateEndpoint+0x2e4>)
 8002d88:	4323      	orrs	r3, r4
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	78db      	ldrb	r3, [r3, #3]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d018      	beq.n	8002dc8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	b29c      	uxth	r4, r3
 8002dae:	f084 0320 	eor.w	r3, r4, #32
 8002db2:	b29c      	uxth	r4, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <USB_ActivateEndpoint+0x2e0>)
 8002dc0:	4323      	orrs	r3, r4
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
 8002dc6:	e22b      	b.n	8003220 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dde:	b29c      	uxth	r4, r3
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <USB_ActivateEndpoint+0x2e0>)
 8002dec:	4323      	orrs	r3, r4
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	8013      	strh	r3, [r2, #0]
 8002df2:	e215      	b.n	8003220 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002df4:	687c      	ldr	r4, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	441c      	add	r4, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	4423      	add	r3, r4
 8002e08:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e0c:	461c      	mov	r4, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	88db      	ldrh	r3, [r3, #6]
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e1c:	687c      	ldr	r4, [r7, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	441c      	add	r4, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4423      	add	r3, r4
 8002e30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e34:	461c      	mov	r4, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <USB_ActivateEndpoint+0x208>
 8002e3e:	8823      	ldrh	r3, [r4, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8023      	strh	r3, [r4, #0]
 8002e4a:	8823      	ldrh	r3, [r4, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8023      	strh	r3, [r4, #0]
 8002e5a:	e02d      	b.n	8002eb8 <USB_ActivateEndpoint+0x264>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b3e      	cmp	r3, #62	; 0x3e
 8002e62:	d812      	bhi.n	8002e8a <USB_ActivateEndpoint+0x236>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <USB_ActivateEndpoint+0x22a>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8023      	strh	r3, [r4, #0]
 8002e88:	e016      	b.n	8002eb8 <USB_ActivateEndpoint+0x264>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <USB_ActivateEndpoint+0x250>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29c      	uxth	r4, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d014      	beq.n	8002efa <USB_ActivateEndpoint+0x2a6>
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	b29c      	uxth	r4, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <USB_ActivateEndpoint+0x2e8>)
 8002ef4:	4323      	orrs	r3, r4
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	b29c      	uxth	r4, r3
 8002f12:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002f16:	b29c      	uxth	r4, r3
 8002f18:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002f1c:	b29c      	uxth	r4, r3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	441a      	add	r2, r3
 8002f28:	4b02      	ldr	r3, [pc, #8]	; (8002f34 <USB_ActivateEndpoint+0x2e0>)
 8002f2a:	4323      	orrs	r3, r4
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8013      	strh	r3, [r2, #0]
 8002f30:	e176      	b.n	8003220 <USB_ActivateEndpoint+0x5cc>
 8002f32:	bf00      	nop
 8002f34:	ffff8080 	.word	0xffff8080
 8002f38:	ffff80c0 	.word	0xffff80c0
 8002f3c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	b29c      	uxth	r4, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	4b96      	ldr	r3, [pc, #600]	; (80031bc <USB_ActivateEndpoint+0x568>)
 8002f64:	4323      	orrs	r3, r4
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f6a:	687c      	ldr	r4, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	441c      	add	r4, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	4423      	add	r3, r4
 8002f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f82:	461c      	mov	r4, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	891b      	ldrh	r3, [r3, #8]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	8023      	strh	r3, [r4, #0]
 8002f92:	687c      	ldr	r4, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	441c      	add	r4, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4423      	add	r3, r4
 8002fa6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002faa:	461c      	mov	r4, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	895b      	ldrh	r3, [r3, #10]
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 8088 	bne.w	80030d4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29c      	uxth	r4, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d014      	beq.n	8003006 <USB_ActivateEndpoint+0x3b2>
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	b29c      	uxth	r4, r3
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	4b70      	ldr	r3, [pc, #448]	; (80031c0 <USB_ActivateEndpoint+0x56c>)
 8003000:	4323      	orrs	r3, r4
 8003002:	b29b      	uxth	r3, r3
 8003004:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29c      	uxth	r4, r3
 8003014:	4623      	mov	r3, r4
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d014      	beq.n	8003048 <USB_ActivateEndpoint+0x3f4>
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	b29c      	uxth	r4, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	4b60      	ldr	r3, [pc, #384]	; (80031c4 <USB_ActivateEndpoint+0x570>)
 8003042:	4323      	orrs	r3, r4
 8003044:	b29b      	uxth	r3, r3
 8003046:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	b29c      	uxth	r4, r3
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <USB_ActivateEndpoint+0x570>)
 800306c:	4323      	orrs	r3, r4
 800306e:	b29b      	uxth	r3, r3
 8003070:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003088:	b29c      	uxth	r4, r3
 800308a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800308e:	b29c      	uxth	r4, r3
 8003090:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003094:	b29c      	uxth	r4, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <USB_ActivateEndpoint+0x574>)
 80030a2:	4323      	orrs	r3, r4
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	b29c      	uxth	r4, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <USB_ActivateEndpoint+0x574>)
 80030cc:	4323      	orrs	r3, r4
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
 80030d2:	e0a5      	b.n	8003220 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29c      	uxth	r4, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d014      	beq.n	8003116 <USB_ActivateEndpoint+0x4c2>
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	b29c      	uxth	r4, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	441a      	add	r2, r3
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <USB_ActivateEndpoint+0x56c>)
 8003110:	4323      	orrs	r3, r4
 8003112:	b29b      	uxth	r3, r3
 8003114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29c      	uxth	r4, r3
 8003124:	4623      	mov	r3, r4
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d014      	beq.n	8003158 <USB_ActivateEndpoint+0x504>
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	b29c      	uxth	r4, r3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <USB_ActivateEndpoint+0x570>)
 8003152:	4323      	orrs	r3, r4
 8003154:	b29b      	uxth	r3, r3
 8003156:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	b29c      	uxth	r4, r3
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	441a      	add	r2, r3
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <USB_ActivateEndpoint+0x56c>)
 800317c:	4323      	orrs	r3, r4
 800317e:	b29b      	uxth	r3, r3
 8003180:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	78db      	ldrb	r3, [r3, #3]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d020      	beq.n	80031cc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a0:	b29c      	uxth	r4, r3
 80031a2:	f084 0320 	eor.w	r3, r4, #32
 80031a6:	b29c      	uxth	r4, r3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <USB_ActivateEndpoint+0x574>)
 80031b4:	4323      	orrs	r3, r4
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8013      	strh	r3, [r2, #0]
 80031ba:	e01c      	b.n	80031f6 <USB_ActivateEndpoint+0x5a2>
 80031bc:	ffff8180 	.word	0xffff8180
 80031c0:	ffffc080 	.word	0xffffc080
 80031c4:	ffff80c0 	.word	0xffff80c0
 80031c8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e2:	b29c      	uxth	r4, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <USB_ActivateEndpoint+0x5d8>)
 80031f0:	4323      	orrs	r3, r4
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	b29c      	uxth	r4, r3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	441a      	add	r2, r3
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <USB_ActivateEndpoint+0x5d8>)
 800321a:	4323      	orrs	r3, r4
 800321c:	b29b      	uxth	r3, r3
 800321e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bc90      	pop	{r4, r7}
 800322a:	4770      	bx	lr
 800322c:	ffff8080 	.word	0xffff8080

08003230 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003230:	b490      	push	{r4, r7}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7b1b      	ldrb	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d171      	bne.n	8003326 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d036      	beq.n	80032b8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29c      	uxth	r4, r3
 8003258:	4623      	mov	r3, r4
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d014      	beq.n	800328c <USB_DeactivateEndpoint+0x5c>
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003278:	b29c      	uxth	r4, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	441a      	add	r2, r3
 8003284:	4b6b      	ldr	r3, [pc, #428]	; (8003434 <USB_DeactivateEndpoint+0x204>)
 8003286:	4323      	orrs	r3, r4
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a2:	b29c      	uxth	r4, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	4b62      	ldr	r3, [pc, #392]	; (8003438 <USB_DeactivateEndpoint+0x208>)
 80032b0:	4323      	orrs	r3, r4
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
 80032b6:	e144      	b.n	8003542 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29c      	uxth	r4, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d014      	beq.n	80032fa <USB_DeactivateEndpoint+0xca>
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	b29c      	uxth	r4, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	4b52      	ldr	r3, [pc, #328]	; (800343c <USB_DeactivateEndpoint+0x20c>)
 80032f4:	4323      	orrs	r3, r4
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	b29c      	uxth	r4, r3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	4b46      	ldr	r3, [pc, #280]	; (8003438 <USB_DeactivateEndpoint+0x208>)
 800331e:	4323      	orrs	r3, r4
 8003320:	b29b      	uxth	r3, r3
 8003322:	8013      	strh	r3, [r2, #0]
 8003324:	e10d      	b.n	8003542 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 8088 	bne.w	8003440 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29c      	uxth	r4, r3
 800333e:	4623      	mov	r3, r4
 8003340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d014      	beq.n	8003372 <USB_DeactivateEndpoint+0x142>
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	b29c      	uxth	r4, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <USB_DeactivateEndpoint+0x20c>)
 800336c:	4323      	orrs	r3, r4
 800336e:	b29b      	uxth	r3, r3
 8003370:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29c      	uxth	r4, r3
 8003380:	4623      	mov	r3, r4
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d014      	beq.n	80033b4 <USB_DeactivateEndpoint+0x184>
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	b29c      	uxth	r4, r3
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <USB_DeactivateEndpoint+0x204>)
 80033ae:	4323      	orrs	r3, r4
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	b29c      	uxth	r4, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <USB_DeactivateEndpoint+0x204>)
 80033d8:	4323      	orrs	r3, r4
 80033da:	b29b      	uxth	r3, r3
 80033dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f4:	b29c      	uxth	r4, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <USB_DeactivateEndpoint+0x208>)
 8003402:	4323      	orrs	r3, r4
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341e:	b29c      	uxth	r4, r3
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	441a      	add	r2, r3
 800342a:	4b03      	ldr	r3, [pc, #12]	; (8003438 <USB_DeactivateEndpoint+0x208>)
 800342c:	4323      	orrs	r3, r4
 800342e:	b29b      	uxth	r3, r3
 8003430:	8013      	strh	r3, [r2, #0]
 8003432:	e086      	b.n	8003542 <USB_DeactivateEndpoint+0x312>
 8003434:	ffff80c0 	.word	0xffff80c0
 8003438:	ffff8080 	.word	0xffff8080
 800343c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29c      	uxth	r4, r3
 800344e:	4623      	mov	r3, r4
 8003450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d014      	beq.n	8003482 <USB_DeactivateEndpoint+0x252>
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	b29c      	uxth	r4, r3
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	4b35      	ldr	r3, [pc, #212]	; (8003550 <USB_DeactivateEndpoint+0x320>)
 800347c:	4323      	orrs	r3, r4
 800347e:	b29b      	uxth	r3, r3
 8003480:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29c      	uxth	r4, r3
 8003490:	4623      	mov	r3, r4
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <USB_DeactivateEndpoint+0x294>
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b0:	b29c      	uxth	r4, r3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	441a      	add	r2, r3
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <USB_DeactivateEndpoint+0x324>)
 80034be:	4323      	orrs	r3, r4
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	b29c      	uxth	r4, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	441a      	add	r2, r3
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <USB_DeactivateEndpoint+0x320>)
 80034e8:	4323      	orrs	r3, r4
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	b29c      	uxth	r4, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	441a      	add	r2, r3
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <USB_DeactivateEndpoint+0x328>)
 8003512:	4323      	orrs	r3, r4
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	b29c      	uxth	r4, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <USB_DeactivateEndpoint+0x328>)
 800353c:	4323      	orrs	r3, r4
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bc90      	pop	{r4, r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	ffffc080 	.word	0xffffc080
 8003554:	ffff80c0 	.word	0xffff80c0
 8003558:	ffff8080 	.word	0xffff8080

0800355c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b08d      	sub	sp, #52	; 0x34
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 8160 	bne.w	8003830 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d909      	bls.n	8003590 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	619a      	str	r2, [r3, #24]
 800358e:	e005      	b.n	800359c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	7b1b      	ldrb	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d119      	bne.n	80035d8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6959      	ldr	r1, [r3, #20]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	88da      	ldrh	r2, [r3, #6]
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fba2 	bl	8003cfa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035b6:	687c      	ldr	r4, [r7, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035be:	b29b      	uxth	r3, r3
 80035c0:	441c      	add	r4, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4423      	add	r3, r4
 80035ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035ce:	461c      	mov	r4, r3
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8023      	strh	r3, [r4, #0]
 80035d6:	e10f      	b.n	80037f8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d065      	beq.n	80036ba <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80035ee:	687c      	ldr	r4, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d148      	bne.n	800368a <USB_EPStartXfer+0x12e>
 80035f8:	687c      	ldr	r4, [r7, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003600:	b29b      	uxth	r3, r3
 8003602:	441c      	add	r4, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4423      	add	r3, r4
 800360c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003610:	461c      	mov	r4, r3
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10e      	bne.n	8003636 <USB_EPStartXfer+0xda>
 8003618:	8823      	ldrh	r3, [r4, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003620:	b29b      	uxth	r3, r3
 8003622:	8023      	strh	r3, [r4, #0]
 8003624:	8823      	ldrh	r3, [r4, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003630:	b29b      	uxth	r3, r3
 8003632:	8023      	strh	r3, [r4, #0]
 8003634:	e03d      	b.n	80036b2 <USB_EPStartXfer+0x156>
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	2b3e      	cmp	r3, #62	; 0x3e
 800363a:	d810      	bhi.n	800365e <USB_EPStartXfer+0x102>
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <USB_EPStartXfer+0xf6>
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	3301      	adds	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	b29b      	uxth	r3, r3
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	b29b      	uxth	r3, r3
 800365a:	8023      	strh	r3, [r4, #0]
 800365c:	e029      	b.n	80036b2 <USB_EPStartXfer+0x156>
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <USB_EPStartXfer+0x118>
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	3b01      	subs	r3, #1
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	b29b      	uxth	r3, r3
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	b29b      	uxth	r3, r3
 800367c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003684:	b29b      	uxth	r3, r3
 8003686:	8023      	strh	r3, [r4, #0]
 8003688:	e013      	b.n	80036b2 <USB_EPStartXfer+0x156>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10f      	bne.n	80036b2 <USB_EPStartXfer+0x156>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003698:	b29b      	uxth	r3, r3
 800369a:	441c      	add	r4, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	4423      	add	r3, r4
 80036a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	895b      	ldrh	r3, [r3, #10]
 80036b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036b8:	e063      	b.n	8003782 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d148      	bne.n	8003754 <USB_EPStartXfer+0x1f8>
 80036c2:	687c      	ldr	r4, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	441c      	add	r4, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	4423      	add	r3, r4
 80036d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036da:	461c      	mov	r4, r3
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <USB_EPStartXfer+0x1a4>
 80036e2:	8823      	ldrh	r3, [r4, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	8023      	strh	r3, [r4, #0]
 80036ee:	8823      	ldrh	r3, [r4, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8023      	strh	r3, [r4, #0]
 80036fe:	e03d      	b.n	800377c <USB_EPStartXfer+0x220>
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	2b3e      	cmp	r3, #62	; 0x3e
 8003704:	d810      	bhi.n	8003728 <USB_EPStartXfer+0x1cc>
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <USB_EPStartXfer+0x1c0>
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	b29b      	uxth	r3, r3
 8003720:	029b      	lsls	r3, r3, #10
 8003722:	b29b      	uxth	r3, r3
 8003724:	8023      	strh	r3, [r4, #0]
 8003726:	e029      	b.n	800377c <USB_EPStartXfer+0x220>
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <USB_EPStartXfer+0x1e2>
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	3b01      	subs	r3, #1
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	b29b      	uxth	r3, r3
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	b29b      	uxth	r3, r3
 8003746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800374e:	b29b      	uxth	r3, r3
 8003750:	8023      	strh	r3, [r4, #0]
 8003752:	e013      	b.n	800377c <USB_EPStartXfer+0x220>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10f      	bne.n	800377c <USB_EPStartXfer+0x220>
 800375c:	687c      	ldr	r4, [r7, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003764:	b29b      	uxth	r3, r3
 8003766:	441c      	add	r4, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4423      	add	r3, r4
 8003770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003774:	461c      	mov	r4, r3
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	b29b      	uxth	r3, r3
 800377a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	891b      	ldrh	r3, [r3, #8]
 8003780:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	b29b      	uxth	r3, r3
 800378a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fab4 	bl	8003cfa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <USB_EPStartXfer+0x26a>
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	b29c      	uxth	r4, r3
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	4b9a      	ldr	r3, [pc, #616]	; (8003a28 <USB_EPStartXfer+0x4cc>)
 80037be:	4323      	orrs	r3, r4
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
 80037c4:	e018      	b.n	80037f8 <USB_EPStartXfer+0x29c>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d114      	bne.n	80037f8 <USB_EPStartXfer+0x29c>
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e4:	b29c      	uxth	r4, r3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	441a      	add	r2, r3
 80037f0:	4b8e      	ldr	r3, [pc, #568]	; (8003a2c <USB_EPStartXfer+0x4d0>)
 80037f2:	4323      	orrs	r3, r4
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380e:	b29c      	uxth	r4, r3
 8003810:	f084 0310 	eor.w	r3, r4, #16
 8003814:	b29c      	uxth	r4, r3
 8003816:	f084 0320 	eor.w	r3, r4, #32
 800381a:	b29c      	uxth	r4, r3
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <USB_EPStartXfer+0x4d4>)
 8003828:	4323      	orrs	r3, r4
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]
 800382e:	e146      	b.n	8003abe <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d909      	bls.n	8003850 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	1ad2      	subs	r2, r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	619a      	str	r2, [r3, #24]
 800384e:	e005      	b.n	800385c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	7b1b      	ldrb	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d148      	bne.n	80038f6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003864:	687c      	ldr	r4, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386c:	b29b      	uxth	r3, r3
 800386e:	441c      	add	r4, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4423      	add	r3, r4
 8003878:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800387c:	461c      	mov	r4, r3
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10e      	bne.n	80038a2 <USB_EPStartXfer+0x346>
 8003884:	8823      	ldrh	r3, [r4, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800388c:	b29b      	uxth	r3, r3
 800388e:	8023      	strh	r3, [r4, #0]
 8003890:	8823      	ldrh	r3, [r4, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389c:	b29b      	uxth	r3, r3
 800389e:	8023      	strh	r3, [r4, #0]
 80038a0:	e0f2      	b.n	8003a88 <USB_EPStartXfer+0x52c>
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b3e      	cmp	r3, #62	; 0x3e
 80038a6:	d810      	bhi.n	80038ca <USB_EPStartXfer+0x36e>
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <USB_EPStartXfer+0x362>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	029b      	lsls	r3, r3, #10
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8023      	strh	r3, [r4, #0]
 80038c8:	e0de      	b.n	8003a88 <USB_EPStartXfer+0x52c>
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <USB_EPStartXfer+0x384>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3b01      	subs	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8023      	strh	r3, [r4, #0]
 80038f4:	e0c8      	b.n	8003a88 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d148      	bne.n	8003990 <USB_EPStartXfer+0x434>
 80038fe:	687c      	ldr	r4, [r7, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	441c      	add	r4, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4423      	add	r3, r4
 8003912:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003916:	461c      	mov	r4, r3
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10e      	bne.n	800393c <USB_EPStartXfer+0x3e0>
 800391e:	8823      	ldrh	r3, [r4, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003926:	b29b      	uxth	r3, r3
 8003928:	8023      	strh	r3, [r4, #0]
 800392a:	8823      	ldrh	r3, [r4, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003936:	b29b      	uxth	r3, r3
 8003938:	8023      	strh	r3, [r4, #0]
 800393a:	e03d      	b.n	80039b8 <USB_EPStartXfer+0x45c>
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	2b3e      	cmp	r3, #62	; 0x3e
 8003940:	d810      	bhi.n	8003964 <USB_EPStartXfer+0x408>
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <USB_EPStartXfer+0x3fc>
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3301      	adds	r3, #1
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	b29b      	uxth	r3, r3
 800395c:	029b      	lsls	r3, r3, #10
 800395e:	b29b      	uxth	r3, r3
 8003960:	8023      	strh	r3, [r4, #0]
 8003962:	e029      	b.n	80039b8 <USB_EPStartXfer+0x45c>
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <USB_EPStartXfer+0x41e>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	3b01      	subs	r3, #1
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	b29b      	uxth	r3, r3
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	b29b      	uxth	r3, r3
 8003982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398a:	b29b      	uxth	r3, r3
 800398c:	8023      	strh	r3, [r4, #0]
 800398e:	e013      	b.n	80039b8 <USB_EPStartXfer+0x45c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10f      	bne.n	80039b8 <USB_EPStartXfer+0x45c>
 8003998:	687c      	ldr	r4, [r7, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	441c      	add	r4, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	4423      	add	r3, r4
 80039ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b0:	461c      	mov	r4, r3
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8023      	strh	r3, [r4, #0]
 80039b8:	687c      	ldr	r4, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d14e      	bne.n	8003a60 <USB_EPStartXfer+0x504>
 80039c2:	687c      	ldr	r4, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	441c      	add	r4, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	4423      	add	r3, r4
 80039d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039da:	461c      	mov	r4, r3
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <USB_EPStartXfer+0x4a4>
 80039e2:	8823      	ldrh	r3, [r4, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	8023      	strh	r3, [r4, #0]
 80039ee:	8823      	ldrh	r3, [r4, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	8023      	strh	r3, [r4, #0]
 80039fe:	e043      	b.n	8003a88 <USB_EPStartXfer+0x52c>
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b3e      	cmp	r3, #62	; 0x3e
 8003a04:	d816      	bhi.n	8003a34 <USB_EPStartXfer+0x4d8>
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <USB_EPStartXfer+0x4c0>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	029b      	lsls	r3, r3, #10
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8023      	strh	r3, [r4, #0]
 8003a26:	e02f      	b.n	8003a88 <USB_EPStartXfer+0x52c>
 8003a28:	ffff80c0 	.word	0xffff80c0
 8003a2c:	ffffc080 	.word	0xffffc080
 8003a30:	ffff8080 	.word	0xffff8080
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <USB_EPStartXfer+0x4ee>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	029b      	lsls	r3, r3, #10
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8023      	strh	r3, [r4, #0]
 8003a5e:	e013      	b.n	8003a88 <USB_EPStartXfer+0x52c>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10f      	bne.n	8003a88 <USB_EPStartXfer+0x52c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	441c      	add	r4, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4423      	add	r3, r4
 8003a7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	b29c      	uxth	r4, r3
 8003aa0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003aa4:	b29c      	uxth	r4, r3
 8003aa6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003aaa:	b29c      	uxth	r4, r3
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	441a      	add	r2, r3
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <USB_EPStartXfer+0x56c>)
 8003ab8:	4323      	orrs	r3, r4
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3734      	adds	r7, #52	; 0x34
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}
 8003ac8:	ffff8080 	.word	0xffff8080

08003acc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003acc:	b490      	push	{r4, r7}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af4:	b29c      	uxth	r4, r3
 8003af6:	f084 0310 	eor.w	r3, r4, #16
 8003afa:	b29c      	uxth	r4, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <USB_EPSetStall+0x80>)
 8003b08:	4323      	orrs	r3, r4
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]
 8003b0e:	e017      	b.n	8003b40 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	b29c      	uxth	r4, r3
 8003b28:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b2c:	b29c      	uxth	r4, r3
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <USB_EPSetStall+0x80>)
 8003b3a:	4323      	orrs	r3, r4
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc90      	pop	{r4, r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	ffff8080 	.word	0xffff8080

08003b50 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b50:	b490      	push	{r4, r7}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	7b1b      	ldrb	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d17d      	bne.n	8003c5e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d03d      	beq.n	8003be6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29c      	uxth	r4, r3
 8003b78:	4623      	mov	r3, r4
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d014      	beq.n	8003bac <USB_EPClearStall+0x5c>
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	b29c      	uxth	r4, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <USB_EPClearStall+0x11c>)
 8003ba6:	4323      	orrs	r3, r4
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	78db      	ldrb	r3, [r3, #3]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d054      	beq.n	8003c5e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	f084 0320 	eor.w	r3, r4, #32
 8003bd0:	b29c      	uxth	r4, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <USB_EPClearStall+0x120>)
 8003bde:	4323      	orrs	r3, r4
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]
 8003be4:	e03b      	b.n	8003c5e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29c      	uxth	r4, r3
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d014      	beq.n	8003c28 <USB_EPClearStall+0xd8>
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	b29c      	uxth	r4, r3
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <USB_EPClearStall+0x124>)
 8003c22:	4323      	orrs	r3, r4
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	b29c      	uxth	r4, r3
 8003c40:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c44:	b29c      	uxth	r4, r3
 8003c46:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c4a:	b29c      	uxth	r4, r3
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <USB_EPClearStall+0x120>)
 8003c58:	4323      	orrs	r3, r4
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc90      	pop	{r4, r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	ffff80c0 	.word	0xffff80c0
 8003c70:	ffff8080 	.word	0xffff8080
 8003c74:	ffffc080 	.word	0xffffc080

08003c78 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b08d      	sub	sp, #52	; 0x34
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	4611      	mov	r1, r2
 8003d06:	461a      	mov	r2, r3
 8003d08:	460b      	mov	r3, r1
 8003d0a:	80fb      	strh	r3, [r7, #6]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003d10:	88bb      	ldrh	r3, [r7, #4]
 8003d12:	3301      	adds	r3, #1
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	005a      	lsls	r2, r3, #1
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d32:	e01e      	b.n	8003d72 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	3302      	adds	r3, #2
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	3301      	adds	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1dd      	bne.n	8003d34 <USB_WritePMA+0x3a>
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3734      	adds	r7, #52	; 0x34
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b08b      	sub	sp, #44	; 0x2c
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	460b      	mov	r3, r1
 8003d92:	80fb      	strh	r3, [r7, #6]
 8003d94:	4613      	mov	r3, r2
 8003d96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	005a      	lsls	r2, r3, #1
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	e01b      	b.n	8003df4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	3302      	adds	r3, #2
 8003dec:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3b01      	subs	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e0      	bne.n	8003dbc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	701a      	strb	r2, [r3, #0]
  }
}
 8003e16:	bf00      	nop
 8003e18:	372c      	adds	r7, #44	; 0x2c
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	2203      	movs	r2, #3
 8003e30:	2181      	movs	r1, #129	; 0x81
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f001 fe39 	bl	8005aaa <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8003e3e:	2010      	movs	r0, #16
 8003e40:	f001 ff40 	bl	8005cc4 <USBD_static_malloc>
 8003e44:	4602      	mov	r2, r0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8003e56:	2302      	movs	r3, #2
 8003e58:	e005      	b.n	8003e66 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e60:	2200      	movs	r2, #0
 8003e62:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8003e7a:	2181      	movs	r1, #129	; 0x81
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f001 fe3a 	bl	8005af6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 ff1f 	bl	8005cdc <USBD_static_free>
    pdev->pClassData = NULL;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ec0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d045      	beq.n	8003f6a <USBD_HID_Setup+0xba>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	f040 80d3 	bne.w	800408a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	785b      	ldrb	r3, [r3, #1]
 8003ee8:	3b02      	subs	r3, #2
 8003eea:	2b09      	cmp	r3, #9
 8003eec:	d835      	bhi.n	8003f5a <USBD_HID_Setup+0xaa>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <USBD_HID_Setup+0x44>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f4b 	.word	0x08003f4b
 8003ef8:	08003f2b 	.word	0x08003f2b
 8003efc:	08003f5b 	.word	0x08003f5b
 8003f00:	08003f5b 	.word	0x08003f5b
 8003f04:	08003f5b 	.word	0x08003f5b
 8003f08:	08003f5b 	.word	0x08003f5b
 8003f0c:	08003f5b 	.word	0x08003f5b
 8003f10:	08003f5b 	.word	0x08003f5b
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f1d 	.word	0x08003f1d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	885b      	ldrh	r3, [r3, #2]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	601a      	str	r2, [r3, #0]
          break;
 8003f28:	e01e      	b.n	8003f68 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f001 f915 	bl	8005160 <USBD_CtlSendData>
          break;
 8003f36:	e017      	b.n	8003f68 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	885b      	ldrh	r3, [r3, #2]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]
          break;
 8003f48:	e00e      	b.n	8003f68 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2201      	movs	r2, #1
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f001 f904 	bl	8005160 <USBD_CtlSendData>
          break;
 8003f58:	e006      	b.n	8003f68 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 f895 	bl	800508c <USBD_CtlError>
          ret = USBD_FAIL;
 8003f62:	2302      	movs	r3, #2
 8003f64:	75fb      	strb	r3, [r7, #23]
          break;
 8003f66:	bf00      	nop
      }
      break;
 8003f68:	e096      	b.n	8004098 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	2b0b      	cmp	r3, #11
 8003f70:	f200 8083 	bhi.w	800407a <USBD_HID_Setup+0x1ca>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <USBD_HID_Setup+0xcc>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fad 	.word	0x08003fad
 8003f80:	0800407b 	.word	0x0800407b
 8003f84:	0800407b 	.word	0x0800407b
 8003f88:	0800407b 	.word	0x0800407b
 8003f8c:	0800407b 	.word	0x0800407b
 8003f90:	0800407b 	.word	0x0800407b
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	0800407b 	.word	0x0800407b
 8003f9c:	0800407b 	.word	0x0800407b
 8003fa0:	0800407b 	.word	0x0800407b
 8003fa4:	0800402d 	.word	0x0800402d
 8003fa8:	08004055 	.word	0x08004055
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d107      	bne.n	8003fc6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003fb6:	f107 030e 	add.w	r3, r7, #14
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f8ce 	bl	8005160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003fc4:	e060      	b.n	8004088 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f001 f85f 	bl	800508c <USBD_CtlError>
            ret = USBD_FAIL;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8003fd2:	e059      	b.n	8004088 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	885b      	ldrh	r3, [r3, #2]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b22      	cmp	r3, #34	; 0x22
 8003fde:	d108      	bne.n	8003ff2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	88db      	ldrh	r3, [r3, #6]
 8003fe4:	2b4a      	cmp	r3, #74	; 0x4a
 8003fe6:	bf28      	it	cs
 8003fe8:	234a      	movcs	r3, #74	; 0x4a
 8003fea:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <USBD_HID_Setup+0x1f4>)
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e015      	b.n	800401e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	885b      	ldrh	r3, [r3, #2]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b21      	cmp	r3, #33	; 0x21
 8003ffc:	d108      	bne.n	8004010 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <USBD_HID_Setup+0x1f8>)
 8004000:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	88db      	ldrh	r3, [r3, #6]
 8004006:	2b09      	cmp	r3, #9
 8004008:	bf28      	it	cs
 800400a:	2309      	movcs	r3, #9
 800400c:	83fb      	strh	r3, [r7, #30]
 800400e:	e006      	b.n	800401e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 f83a 	bl	800508c <USBD_CtlError>
            ret = USBD_FAIL;
 8004018:	2302      	movs	r3, #2
 800401a:	75fb      	strb	r3, [r7, #23]
            break;
 800401c:	e034      	b.n	8004088 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800401e:	8bfb      	ldrh	r3, [r7, #30]
 8004020:	461a      	mov	r2, r3
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 f89b 	bl	8005160 <USBD_CtlSendData>
          break;
 800402a:	e02d      	b.n	8004088 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3308      	adds	r3, #8
 800403a:	2201      	movs	r2, #1
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f001 f88e 	bl	8005160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004044:	e020      	b.n	8004088 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f001 f81f 	bl	800508c <USBD_CtlError>
            ret = USBD_FAIL;
 800404e:	2302      	movs	r3, #2
 8004050:	75fb      	strb	r3, [r7, #23]
          break;
 8004052:	e019      	b.n	8004088 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800405a:	2b03      	cmp	r3, #3
 800405c:	d106      	bne.n	800406c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	885b      	ldrh	r3, [r3, #2]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800406a:	e00d      	b.n	8004088 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 f80c 	bl	800508c <USBD_CtlError>
            ret = USBD_FAIL;
 8004074:	2302      	movs	r3, #2
 8004076:	75fb      	strb	r3, [r7, #23]
          break;
 8004078:	e006      	b.n	8004088 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 f805 	bl	800508c <USBD_CtlError>
          ret = USBD_FAIL;
 8004082:	2302      	movs	r3, #2
 8004084:	75fb      	strb	r3, [r7, #23]
          break;
 8004086:	bf00      	nop
      }
      break;
 8004088:	e006      	b.n	8004098 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800408a:	6839      	ldr	r1, [r7, #0]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fffd 	bl	800508c <USBD_CtlError>
      ret = USBD_FAIL;
 8004092:	2302      	movs	r3, #2
 8004094:	75fb      	strb	r3, [r7, #23]
      break;
 8004096:	bf00      	nop
  }

  return ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200000c4 	.word	0x200000c4
 80040a8:	200000ac 	.word	0x200000ac

080040ac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2222      	movs	r2, #34	; 0x22
 80040b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80040ba:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000040 	.word	0x20000040

080040cc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80040da:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000064 	.word	0x20000064

080040ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2222      	movs	r2, #34	; 0x22
 80040f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80040fa:	4b03      	ldr	r3, [pc, #12]	; (8004108 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000088 	.word	0x20000088

0800410c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800411e:	2200      	movs	r2, #0
 8004120:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
	...

08004130 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	220a      	movs	r2, #10
 800413c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	200000b8 	.word	0x200000b8

08004150 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004164:	2302      	movs	r3, #2
 8004166:	e01a      	b.n	800419e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	79fa      	ldrb	r2, [r7, #7]
 8004194:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f001 fc24 	bl	80059e4 <USBD_LL_Init>

  return USBD_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e001      	b.n	80041cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80041c8:	2302      	movs	r3, #2
 80041ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f001 fc47 	bl	8005a74 <USBD_LL_Start>

  return USBD_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004210:	2302      	movs	r3, #2
 8004212:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	4611      	mov	r1, r2
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	4611      	mov	r1, r2
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3

  return USBD_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 feca 	bl	8005014 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800428e:	461a      	mov	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d00c      	beq.n	80042be <USBD_LL_SetupStage+0x56>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d302      	bcc.n	80042ae <USBD_LL_SetupStage+0x46>
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d010      	beq.n	80042ce <USBD_LL_SetupStage+0x66>
 80042ac:	e017      	b.n	80042de <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9ca 	bl	8004650 <USBD_StdDevReq>
      break;
 80042bc:	e01a      	b.n	80042f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa2c 	bl	8004724 <USBD_StdItfReq>
      break;
 80042cc:	e012      	b.n	80042f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa6a 	bl	80047b0 <USBD_StdEPReq>
      break;
 80042dc:	e00a      	b.n	80042f4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 fc21 	bl	8005b34 <USBD_LL_StallEP>
      break;
 80042f2:	bf00      	nop
  }

  return USBD_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	460b      	mov	r3, r1
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d14b      	bne.n	80043aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004318:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004320:	2b03      	cmp	r3, #3
 8004322:	d134      	bne.n	800438e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	d919      	bls.n	8004364 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004346:	429a      	cmp	r2, r3
 8004348:	d203      	bcs.n	8004352 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800434e:	b29b      	uxth	r3, r3
 8004350:	e002      	b.n	8004358 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 ff2d 	bl	80051bc <USBD_CtlContinueRx>
 8004362:	e038      	b.n	80043d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004376:	2b03      	cmp	r3, #3
 8004378:	d105      	bne.n	8004386 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 ff2a 	bl	80051e0 <USBD_CtlSendStatus>
 800438c:	e023      	b.n	80043d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004394:	2b05      	cmp	r3, #5
 8004396:	d11e      	bne.n	80043d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80043a0:	2100      	movs	r1, #0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f001 fbc6 	bl	8005b34 <USBD_LL_StallEP>
 80043a8:	e015      	b.n	80043d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d108      	bne.n	80043d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	7afa      	ldrb	r2, [r7, #11]
 80043ca:	4611      	mov	r1, r2
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	4798      	blx	r3
 80043d0:	e001      	b.n	80043d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e000      	b.n	80043d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	460b      	mov	r3, r1
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d17f      	bne.n	80044f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3314      	adds	r3, #20
 80043f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004400:	2b02      	cmp	r3, #2
 8004402:	d15c      	bne.n	80044be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d915      	bls.n	800443c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 feb5 	bl	8005198 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800442e:	2300      	movs	r3, #0
 8004430:	2200      	movs	r2, #0
 8004432:	2100      	movs	r1, #0
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f001 fc22 	bl	8005c7e <USBD_LL_PrepareReceive>
 800443a:	e04e      	b.n	80044da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	6912      	ldr	r2, [r2, #16]
 8004444:	fbb3 f1f2 	udiv	r1, r3, r2
 8004448:	fb02 f201 	mul.w	r2, r2, r1
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d11c      	bne.n	800448c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800445a:	429a      	cmp	r2, r3
 800445c:	d316      	bcc.n	800448c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004468:	429a      	cmp	r2, r3
 800446a:	d20f      	bcs.n	800448c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800446c:	2200      	movs	r2, #0
 800446e:	2100      	movs	r1, #0
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fe91 	bl	8005198 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800447e:	2300      	movs	r3, #0
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f001 fbfa 	bl	8005c7e <USBD_LL_PrepareReceive>
 800448a:	e026      	b.n	80044da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d105      	bne.n	80044ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f001 fb3f 	bl	8005b34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fea5 	bl	8005206 <USBD_CtlReceiveStatus>
 80044bc:	e00d      	b.n	80044da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d004      	beq.n	80044d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f001 fb2d 	bl	8005b34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d11d      	bne.n	8004520 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fe83 	bl	80041f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80044f2:	e015      	b.n	8004520 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004506:	2b03      	cmp	r3, #3
 8004508:	d108      	bne.n	800451c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	7afa      	ldrb	r2, [r7, #11]
 8004514:	4611      	mov	r1, r2
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	4798      	blx	r3
 800451a:	e001      	b.n	8004520 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800451c:	2302      	movs	r3, #2
 800451e:	e000      	b.n	8004522 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 fab6 	bl	8005aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800454e:	2340      	movs	r3, #64	; 0x40
 8004550:	2200      	movs	r2, #0
 8004552:	2180      	movs	r1, #128	; 0x80
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 faa8 	bl	8005aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6852      	ldr	r2, [r2, #4]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	4611      	mov	r1, r2
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
  }

  return USBD_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2204      	movs	r2, #4
 80045e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004600:	2b04      	cmp	r3, #4
 8004602:	d105      	bne.n	8004610 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800462a:	2b03      	cmp	r3, #3
 800462c:	d10b      	bne.n	8004646 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004666:	2b20      	cmp	r3, #32
 8004668:	d004      	beq.n	8004674 <USBD_StdDevReq+0x24>
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d002      	beq.n	8004674 <USBD_StdDevReq+0x24>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <USBD_StdDevReq+0x34>
 8004672:	e04c      	b.n	800470e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
      break;
 8004682:	e049      	b.n	8004718 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b09      	cmp	r3, #9
 800468a:	d83a      	bhi.n	8004702 <USBD_StdDevReq+0xb2>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <USBD_StdDevReq+0x44>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046e5 	.word	0x080046e5
 8004698:	080046f9 	.word	0x080046f9
 800469c:	08004703 	.word	0x08004703
 80046a0:	080046ef 	.word	0x080046ef
 80046a4:	08004703 	.word	0x08004703
 80046a8:	080046c7 	.word	0x080046c7
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	08004703 	.word	0x08004703
 80046b4:	080046db 	.word	0x080046db
 80046b8:	080046d1 	.word	0x080046d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9d4 	bl	8004a6c <USBD_GetDescriptor>
          break;
 80046c4:	e022      	b.n	800470c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fb37 	bl	8004d3c <USBD_SetAddress>
          break;
 80046ce:	e01d      	b.n	800470c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb74 	bl	8004dc0 <USBD_SetConfig>
          break;
 80046d8:	e018      	b.n	800470c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fbfd 	bl	8004edc <USBD_GetConfig>
          break;
 80046e2:	e013      	b.n	800470c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fc2c 	bl	8004f44 <USBD_GetStatus>
          break;
 80046ec:	e00e      	b.n	800470c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fc5a 	bl	8004faa <USBD_SetFeature>
          break;
 80046f6:	e009      	b.n	800470c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fc69 	bl	8004fd2 <USBD_ClrFeature>
          break;
 8004700:	e004      	b.n	800470c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fcc1 	bl	800508c <USBD_CtlError>
          break;
 800470a:	bf00      	nop
      }
      break;
 800470c:	e004      	b.n	8004718 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fcbb 	bl	800508c <USBD_CtlError>
      break;
 8004716:	bf00      	nop
  }

  return ret;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop

08004724 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800473a:	2b20      	cmp	r3, #32
 800473c:	d003      	beq.n	8004746 <USBD_StdItfReq+0x22>
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d001      	beq.n	8004746 <USBD_StdItfReq+0x22>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d12a      	bne.n	800479c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800474c:	3b01      	subs	r3, #1
 800474e:	2b02      	cmp	r3, #2
 8004750:	d81d      	bhi.n	800478e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	889b      	ldrh	r3, [r3, #4]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d813      	bhi.n	8004784 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	88db      	ldrh	r3, [r3, #6]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d110      	bne.n	8004798 <USBD_StdItfReq+0x74>
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fd2f 	bl	80051e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004782:	e009      	b.n	8004798 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fc80 	bl	800508c <USBD_CtlError>
          break;
 800478c:	e004      	b.n	8004798 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fc7b 	bl	800508c <USBD_CtlError>
          break;
 8004796:	e000      	b.n	800479a <USBD_StdItfReq+0x76>
          break;
 8004798:	bf00      	nop
      }
      break;
 800479a:	e004      	b.n	80047a6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fc74 	bl	800508c <USBD_CtlError>
      break;
 80047a4:	bf00      	nop
  }

  return USBD_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	889b      	ldrh	r3, [r3, #4]
 80047c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d004      	beq.n	80047da <USBD_StdEPReq+0x2a>
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d002      	beq.n	80047da <USBD_StdEPReq+0x2a>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <USBD_StdEPReq+0x3a>
 80047d8:	e13d      	b.n	8004a56 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      break;
 80047e8:	e13a      	b.n	8004a60 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d10a      	bne.n	800480c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	e12a      	b.n	8004a62 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d03e      	beq.n	8004892 <USBD_StdEPReq+0xe2>
 8004814:	2b03      	cmp	r3, #3
 8004816:	d002      	beq.n	800481e <USBD_StdEPReq+0x6e>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d070      	beq.n	80048fe <USBD_StdEPReq+0x14e>
 800481c:	e115      	b.n	8004a4a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004824:	2b02      	cmp	r3, #2
 8004826:	d002      	beq.n	800482e <USBD_StdEPReq+0x7e>
 8004828:	2b03      	cmp	r3, #3
 800482a:	d015      	beq.n	8004858 <USBD_StdEPReq+0xa8>
 800482c:	e02b      	b.n	8004886 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800482e:	7bbb      	ldrb	r3, [r7, #14]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00c      	beq.n	800484e <USBD_StdEPReq+0x9e>
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d009      	beq.n	800484e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800483a:	7bbb      	ldrb	r3, [r7, #14]
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f001 f978 	bl	8005b34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 f974 	bl	8005b34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800484c:	e020      	b.n	8004890 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fc1b 	bl	800508c <USBD_CtlError>
              break;
 8004856:	e01b      	b.n	8004890 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	885b      	ldrh	r3, [r3, #2]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10e      	bne.n	800487e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <USBD_StdEPReq+0xce>
 8004866:	7bbb      	ldrb	r3, [r7, #14]
 8004868:	2b80      	cmp	r3, #128	; 0x80
 800486a:	d008      	beq.n	800487e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	88db      	ldrh	r3, [r3, #6]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 f95b 	bl	8005b34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fcae 	bl	80051e0 <USBD_CtlSendStatus>

              break;
 8004884:	e004      	b.n	8004890 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fbff 	bl	800508c <USBD_CtlError>
              break;
 800488e:	bf00      	nop
          }
          break;
 8004890:	e0e0      	b.n	8004a54 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004898:	2b02      	cmp	r3, #2
 800489a:	d002      	beq.n	80048a2 <USBD_StdEPReq+0xf2>
 800489c:	2b03      	cmp	r3, #3
 800489e:	d015      	beq.n	80048cc <USBD_StdEPReq+0x11c>
 80048a0:	e026      	b.n	80048f0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <USBD_StdEPReq+0x112>
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d009      	beq.n	80048c2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80048ae:	7bbb      	ldrb	r3, [r7, #14]
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 f93e 	bl	8005b34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f001 f93a 	bl	8005b34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80048c0:	e01c      	b.n	80048fc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fbe1 	bl	800508c <USBD_CtlError>
              break;
 80048ca:	e017      	b.n	80048fc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	885b      	ldrh	r3, [r3, #2]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d112      	bne.n	80048fa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80048d4:	7bbb      	ldrb	r3, [r7, #14]
 80048d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f001 f945 	bl	8005b72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fc79 	bl	80051e0 <USBD_CtlSendStatus>
              }
              break;
 80048ee:	e004      	b.n	80048fa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fbca 	bl	800508c <USBD_CtlError>
              break;
 80048f8:	e000      	b.n	80048fc <USBD_StdEPReq+0x14c>
              break;
 80048fa:	bf00      	nop
          }
          break;
 80048fc:	e0aa      	b.n	8004a54 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004904:	2b02      	cmp	r3, #2
 8004906:	d002      	beq.n	800490e <USBD_StdEPReq+0x15e>
 8004908:	2b03      	cmp	r3, #3
 800490a:	d032      	beq.n	8004972 <USBD_StdEPReq+0x1c2>
 800490c:	e097      	b.n	8004a3e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800490e:	7bbb      	ldrb	r3, [r7, #14]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <USBD_StdEPReq+0x174>
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	d004      	beq.n	8004924 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fbb5 	bl	800508c <USBD_CtlError>
                break;
 8004922:	e091      	b.n	8004a48 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004928:	2b00      	cmp	r3, #0
 800492a:	da0b      	bge.n	8004944 <USBD_StdEPReq+0x194>
 800492c:	7bbb      	ldrb	r3, [r7, #14]
 800492e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	3310      	adds	r3, #16
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	e00b      	b.n	800495c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004944:	7bbb      	ldrb	r3, [r7, #14]
 8004946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	3304      	adds	r3, #4
 800495c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2202      	movs	r2, #2
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fbf8 	bl	8005160 <USBD_CtlSendData>
              break;
 8004970:	e06a      	b.n	8004a48 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004976:	2b00      	cmp	r3, #0
 8004978:	da11      	bge.n	800499e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3318      	adds	r3, #24
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d117      	bne.n	80049c4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fb78 	bl	800508c <USBD_CtlError>
                  break;
 800499c:	e054      	b.n	8004a48 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	f003 020f 	and.w	r2, r3, #15
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fb65 	bl	800508c <USBD_CtlError>
                  break;
 80049c2:	e041      	b.n	8004a48 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	da0b      	bge.n	80049e4 <USBD_StdEPReq+0x234>
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	3310      	adds	r3, #16
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	e00b      	b.n	80049fc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80049fe:	7bbb      	ldrb	r3, [r7, #14]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <USBD_StdEPReq+0x25a>
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d103      	bne.n	8004a12 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e00e      	b.n	8004a30 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004a12:	7bbb      	ldrb	r3, [r7, #14]
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 f8ca 	bl	8005bb0 <USBD_LL_IsStallEP>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e002      	b.n	8004a30 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2202      	movs	r2, #2
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fb92 	bl	8005160 <USBD_CtlSendData>
              break;
 8004a3c:	e004      	b.n	8004a48 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb23 	bl	800508c <USBD_CtlError>
              break;
 8004a46:	bf00      	nop
          }
          break;
 8004a48:	e004      	b.n	8004a54 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fb1d 	bl	800508c <USBD_CtlError>
          break;
 8004a52:	bf00      	nop
      }
      break;
 8004a54:	e004      	b.n	8004a60 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb17 	bl	800508c <USBD_CtlError>
      break;
 8004a5e:	bf00      	nop
  }

  return ret;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	885b      	ldrh	r3, [r3, #2]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	f200 8128 	bhi.w	8004ce2 <USBD_GetDescriptor+0x276>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <USBD_GetDescriptor+0x2c>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004ab5 	.word	0x08004ab5
 8004a9c:	08004acd 	.word	0x08004acd
 8004aa0:	08004b0d 	.word	0x08004b0d
 8004aa4:	08004ce3 	.word	0x08004ce3
 8004aa8:	08004ce3 	.word	0x08004ce3
 8004aac:	08004c83 	.word	0x08004c83
 8004ab0:	08004caf 	.word	0x08004caf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	7c12      	ldrb	r2, [r2, #16]
 8004ac0:	f107 0108 	add.w	r1, r7, #8
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
 8004ac8:	60f8      	str	r0, [r7, #12]
      break;
 8004aca:	e112      	b.n	8004cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7c1b      	ldrb	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10d      	bne.n	8004af0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f107 0208 	add.w	r2, r7, #8
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4798      	blx	r3
 8004ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	2202      	movs	r2, #2
 8004aec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004aee:	e100      	b.n	8004cf2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f107 0208 	add.w	r2, r7, #8
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	2202      	movs	r2, #2
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e0f2      	b.n	8004cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	885b      	ldrh	r3, [r3, #2]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	f200 80ac 	bhi.w	8004c70 <USBD_GetDescriptor+0x204>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <USBD_GetDescriptor+0xb4>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b6d 	.word	0x08004b6d
 8004b28:	08004ba1 	.word	0x08004ba1
 8004b2c:	08004bd5 	.word	0x08004bd5
 8004b30:	08004c09 	.word	0x08004c09
 8004b34:	08004c3d 	.word	0x08004c3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	7c12      	ldrb	r2, [r2, #16]
 8004b50:	f107 0108 	add.w	r1, r7, #8
 8004b54:	4610      	mov	r0, r2
 8004b56:	4798      	blx	r3
 8004b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b5a:	e091      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa94 	bl	800508c <USBD_CtlError>
            err++;
 8004b64:	7afb      	ldrb	r3, [r7, #11]
 8004b66:	3301      	adds	r3, #1
 8004b68:	72fb      	strb	r3, [r7, #11]
          break;
 8004b6a:	e089      	b.n	8004c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	7c12      	ldrb	r2, [r2, #16]
 8004b84:	f107 0108 	add.w	r1, r7, #8
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4798      	blx	r3
 8004b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b8e:	e077      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa7a 	bl	800508c <USBD_CtlError>
            err++;
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8004b9e:	e06f      	b.n	8004c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	7c12      	ldrb	r2, [r2, #16]
 8004bb8:	f107 0108 	add.w	r1, r7, #8
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4798      	blx	r3
 8004bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bc2:	e05d      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa60 	bl	800508c <USBD_CtlError>
            err++;
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8004bd2:	e055      	b.n	8004c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	7c12      	ldrb	r2, [r2, #16]
 8004bec:	f107 0108 	add.w	r1, r7, #8
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
 8004bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bf6:	e043      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa46 	bl	800508c <USBD_CtlError>
            err++;
 8004c00:	7afb      	ldrb	r3, [r7, #11]
 8004c02:	3301      	adds	r3, #1
 8004c04:	72fb      	strb	r3, [r7, #11]
          break;
 8004c06:	e03b      	b.n	8004c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	7c12      	ldrb	r2, [r2, #16]
 8004c20:	f107 0108 	add.w	r1, r7, #8
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
 8004c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c2a:	e029      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa2c 	bl	800508c <USBD_CtlError>
            err++;
 8004c34:	7afb      	ldrb	r3, [r7, #11]
 8004c36:	3301      	adds	r3, #1
 8004c38:	72fb      	strb	r3, [r7, #11]
          break;
 8004c3a:	e021      	b.n	8004c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	7c12      	ldrb	r2, [r2, #16]
 8004c54:	f107 0108 	add.w	r1, r7, #8
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
 8004c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c5e:	e00f      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa12 	bl	800508c <USBD_CtlError>
            err++;
 8004c68:	7afb      	ldrb	r3, [r7, #11]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8004c6e:	e007      	b.n	8004c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa0a 	bl	800508c <USBD_CtlError>
          err++;
 8004c78:	7afb      	ldrb	r3, [r7, #11]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004c7e:	e038      	b.n	8004cf2 <USBD_GetDescriptor+0x286>
 8004c80:	e037      	b.n	8004cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7c1b      	ldrb	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	f107 0208 	add.w	r2, r7, #8
 8004c96:	4610      	mov	r0, r2
 8004c98:	4798      	blx	r3
 8004c9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004c9c:	e029      	b.n	8004cf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f9f3 	bl	800508c <USBD_CtlError>
        err++;
 8004ca6:	7afb      	ldrb	r3, [r7, #11]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	72fb      	strb	r3, [r7, #11]
      break;
 8004cac:	e021      	b.n	8004cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7c1b      	ldrb	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f107 0208 	add.w	r2, r7, #8
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4798      	blx	r3
 8004cc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	2207      	movs	r2, #7
 8004cce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004cd0:	e00f      	b.n	8004cf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f9d9 	bl	800508c <USBD_CtlError>
        err++;
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	72fb      	strb	r3, [r7, #11]
      break;
 8004ce0:	e007      	b.n	8004cf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f9d1 	bl	800508c <USBD_CtlError>
      err++;
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	3301      	adds	r3, #1
 8004cee:	72fb      	strb	r3, [r7, #11]
      break;
 8004cf0:	bf00      	nop
  }

  if (err != 0U)
 8004cf2:	7afb      	ldrb	r3, [r7, #11]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11c      	bne.n	8004d32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004cf8:	893b      	ldrh	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d011      	beq.n	8004d22 <USBD_GetDescriptor+0x2b6>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	88db      	ldrh	r3, [r3, #6]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	88da      	ldrh	r2, [r3, #6]
 8004d0a:	893b      	ldrh	r3, [r7, #8]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bf28      	it	cs
 8004d10:	4613      	movcs	r3, r2
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa1f 	bl	8005160 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	88db      	ldrh	r3, [r3, #6]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa58 	bl	80051e0 <USBD_CtlSendStatus>
 8004d30:	e000      	b.n	8004d34 <USBD_GetDescriptor+0x2c8>
    return;
 8004d32:	bf00      	nop
    }
  }
}
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	889b      	ldrh	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d130      	bne.n	8004db0 <USBD_SetAddress+0x74>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	88db      	ldrh	r3, [r3, #6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d12c      	bne.n	8004db0 <USBD_SetAddress+0x74>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	885b      	ldrh	r3, [r3, #2]
 8004d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5c:	d828      	bhi.n	8004db0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	885b      	ldrh	r3, [r3, #2]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d104      	bne.n	8004d7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f988 	bl	800508c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d7c:	e01c      	b.n	8004db8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7bfa      	ldrb	r2, [r7, #15]
 8004d82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 ff35 	bl	8005bfa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fa25 	bl	80051e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da4:	e008      	b.n	8004db8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dae:	e003      	b.n	8004db8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f96a 	bl	800508c <USBD_CtlError>
  }
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	885b      	ldrh	r3, [r3, #2]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004dd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d904      	bls.n	8004de6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f954 	bl	800508c <USBD_CtlError>
 8004de4:	e075      	b.n	8004ed2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d002      	beq.n	8004df6 <USBD_SetConfig+0x36>
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d023      	beq.n	8004e3c <USBD_SetConfig+0x7c>
 8004df4:	e062      	b.n	8004ebc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004df6:	4b38      	ldr	r3, [pc, #224]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01a      	beq.n	8004e34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e10:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff f9f4 	bl	8004204 <USBD_SetClassConfig>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d104      	bne.n	8004e2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f931 	bl	800508c <USBD_CtlError>
            return;
 8004e2a:	e052      	b.n	8004ed2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9d7 	bl	80051e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e32:	e04e      	b.n	8004ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9d3 	bl	80051e0 <USBD_CtlSendStatus>
        break;
 8004e3a:	e04a      	b.n	8004ed2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d112      	bne.n	8004e6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff f9f0 	bl	8004242 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9bc 	bl	80051e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e68:	e033      	b.n	8004ed2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d01d      	beq.n	8004eb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff f9de 	bl	8004242 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff f9b4 	bl	8004204 <USBD_SetClassConfig>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d104      	bne.n	8004eac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8f1 	bl	800508c <USBD_CtlError>
            return;
 8004eaa:	e012      	b.n	8004ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f997 	bl	80051e0 <USBD_CtlSendStatus>
        break;
 8004eb2:	e00e      	b.n	8004ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f993 	bl	80051e0 <USBD_CtlSendStatus>
        break;
 8004eba:	e00a      	b.n	8004ed2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8e4 	bl	800508c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ec4:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <USBD_SetConfig+0x118>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff f9b9 	bl	8004242 <USBD_ClrClassConfig>
        break;
 8004ed0:	bf00      	nop
    }
  }
}
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000180 	.word	0x20000180

08004edc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	88db      	ldrh	r3, [r3, #6]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d004      	beq.n	8004ef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f8cb 	bl	800508c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004ef6:	e021      	b.n	8004f3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	db17      	blt.n	8004f32 <USBD_GetConfig+0x56>
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	dd02      	ble.n	8004f0c <USBD_GetConfig+0x30>
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d00b      	beq.n	8004f22 <USBD_GetConfig+0x46>
 8004f0a:	e012      	b.n	8004f32 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3308      	adds	r3, #8
 8004f16:	2201      	movs	r2, #1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f920 	bl	8005160 <USBD_CtlSendData>
        break;
 8004f20:	e00c      	b.n	8004f3c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	2201      	movs	r2, #1
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f918 	bl	8005160 <USBD_CtlSendData>
        break;
 8004f30:	e004      	b.n	8004f3c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8a9 	bl	800508c <USBD_CtlError>
        break;
 8004f3a:	bf00      	nop
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f54:	3b01      	subs	r3, #1
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d81e      	bhi.n	8004f98 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	88db      	ldrh	r3, [r3, #6]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d004      	beq.n	8004f6c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f891 	bl	800508c <USBD_CtlError>
        break;
 8004f6a:	e01a      	b.n	8004fa2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f043 0202 	orr.w	r2, r3, #2
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8e5 	bl	8005160 <USBD_CtlSendData>
      break;
 8004f96:	e004      	b.n	8004fa2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f876 	bl	800508c <USBD_CtlError>
      break;
 8004fa0:	bf00      	nop
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	885b      	ldrh	r3, [r3, #2]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f90b 	bl	80051e0 <USBD_CtlSendStatus>
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d80b      	bhi.n	8005000 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	885b      	ldrh	r3, [r3, #2]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10c      	bne.n	800500a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8f1 	bl	80051e0 <USBD_CtlSendStatus>
      }
      break;
 8004ffe:	e004      	b.n	800500a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f842 	bl	800508c <USBD_CtlError>
      break;
 8005008:	e000      	b.n	800500c <USBD_ClrFeature+0x3a>
      break;
 800500a:	bf00      	nop
  }
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	785a      	ldrb	r2, [r3, #1]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	3302      	adds	r3, #2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b29a      	uxth	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	3303      	adds	r3, #3
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	b29b      	uxth	r3, r3
 8005042:	4413      	add	r3, r2
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	3304      	adds	r3, #4
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b29a      	uxth	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	3305      	adds	r3, #5
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	b29b      	uxth	r3, r3
 800505e:	4413      	add	r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	3306      	adds	r3, #6
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b29a      	uxth	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3307      	adds	r3, #7
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	80da      	strh	r2, [r3, #6]

}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fd4b 	bl	8005b34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800509e:	2100      	movs	r1, #0
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fd47 	bl	8005b34 <USBD_LL_StallEP>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d032      	beq.n	800512a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f834 	bl	8005132 <USBD_GetLen>
 80050ca:	4603      	mov	r3, r0
 80050cc:	3301      	adds	r3, #1
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	75fa      	strb	r2, [r7, #23]
 80050de:	461a      	mov	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4413      	add	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	7812      	ldrb	r2, [r2, #0]
 80050e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	75fa      	strb	r2, [r7, #23]
 80050f0:	461a      	mov	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4413      	add	r3, r2
 80050f6:	2203      	movs	r2, #3
 80050f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80050fa:	e012      	b.n	8005122 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	60fa      	str	r2, [r7, #12]
 8005102:	7dfa      	ldrb	r2, [r7, #23]
 8005104:	1c51      	adds	r1, r2, #1
 8005106:	75f9      	strb	r1, [r7, #23]
 8005108:	4611      	mov	r1, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	440a      	add	r2, r1
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	75fa      	strb	r2, [r7, #23]
 8005118:	461a      	mov	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e8      	bne.n	80050fc <USBD_GetString+0x4e>
    }
  }
}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800513e:	e005      	b.n	800514c <USBD_GetLen+0x1a>
  {
    len++;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	3301      	adds	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3301      	adds	r3, #1
 800514a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f5      	bne.n	8005140 <USBD_GetLen+0xe>
  }

  return len;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2202      	movs	r2, #2
 8005172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	2100      	movs	r1, #0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fd55 	bl	8005c38 <USBD_LL_Transmit>

  return USBD_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	2100      	movs	r1, #0
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fd43 	bl	8005c38 <USBD_LL_Transmit>

  return USBD_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	2100      	movs	r1, #0
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fd54 	bl	8005c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80051f0:	2300      	movs	r3, #0
 80051f2:	2200      	movs	r2, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fd1e 	bl	8005c38 <USBD_LL_Transmit>

  return USBD_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2205      	movs	r2, #5
 8005212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005216:	2300      	movs	r3, #0
 8005218:	2200      	movs	r2, #0
 800521a:	2100      	movs	r1, #0
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fd2e 	bl	8005c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int8_t click_report[CLICK_REPORT_SIZE] = {0};
 8005232:	f107 0310 	add.w	r3, r7, #16
 8005236:	2100      	movs	r1, #0
 8005238:	460a      	mov	r2, r1
 800523a:	801a      	strh	r2, [r3, #0]
 800523c:	460a      	mov	r2, r1
 800523e:	709a      	strb	r2, [r3, #2]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005240:	f7fa ff84 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005244:	f000 f82e 	bl	80052a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005248:	f000 f920 	bl	800548c <MX_GPIO_Init>
  MX_DMA_Init();
 800524c:	f000 f900 	bl	8005450 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005250:	f000 fae6 	bl	8005820 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8005254:	f000 f884 	bl	8005360 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8005258:	f000 f8d0 	bl	80053fc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800525c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005260:	480d      	ldr	r0, [pc, #52]	; (8005298 <main+0x6c>)
 8005262:	f7fb fec1 	bl	8000fe8 <HAL_GPIO_TogglePin>
//      click_report[0] = 0;
//      click_report[1] = (adcBuffer[0]/2);  // send button press
//      click_report[2] = (adcBuffer[1]/2);  // send button press
//      itoa(adcBuffer[0],temp, 10);
//      strcat(temp," ");
    HAL_UART_Transmit(&huart1,'0',1,100);
 8005266:	2364      	movs	r3, #100	; 0x64
 8005268:	2201      	movs	r2, #1
 800526a:	2130      	movs	r1, #48	; 0x30
 800526c:	480b      	ldr	r0, [pc, #44]	; (800529c <main+0x70>)
 800526e:	f7fd fac0 	bl	80027f2 <HAL_UART_Transmit>
    for(int i = 0; i < 100; i++){
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e00b      	b.n	8005290 <main+0x64>
      HAL_UART_Transmit(&huart1,"a",1,100);
 8005278:	2364      	movs	r3, #100	; 0x64
 800527a:	2201      	movs	r2, #1
 800527c:	4908      	ldr	r1, [pc, #32]	; (80052a0 <main+0x74>)
 800527e:	4807      	ldr	r0, [pc, #28]	; (800529c <main+0x70>)
 8005280:	f7fd fab7 	bl	80027f2 <HAL_UART_Transmit>
      HAL_Delay(50);
 8005284:	2032      	movs	r0, #50	; 0x32
 8005286:	f7fa ffc3 	bl	8000210 <HAL_Delay>
    for(int i = 0; i < 100; i++){
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b63      	cmp	r3, #99	; 0x63
 8005294:	ddf0      	ble.n	8005278 <main+0x4c>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005296:	e7e1      	b.n	800525c <main+0x30>
 8005298:	40011000 	.word	0x40011000
 800529c:	200001d0 	.word	0x200001d0
 80052a0:	08006048 	.word	0x08006048

080052a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b094      	sub	sp, #80	; 0x50
 80052a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ae:	2228      	movs	r2, #40	; 0x28
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 feaa 	bl	800600c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052b8:	f107 0314 	add.w	r3, r7, #20
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	60da      	str	r2, [r3, #12]
 80052c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052c8:	1d3b      	adds	r3, r7, #4
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	605a      	str	r2, [r3, #4]
 80052d0:	609a      	str	r2, [r3, #8]
 80052d2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80052d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80052de:	2300      	movs	r3, #0
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052e2:	2301      	movs	r3, #1
 80052e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052e6:	2302      	movs	r3, #2
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80052ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80052f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80052f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fc fd5a 	bl	8001db4 <HAL_RCC_OscConfig>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005306:	f000 f91b 	bl	8005540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800530a:	230f      	movs	r3, #15
 800530c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800530e:	2302      	movs	r3, #2
 8005310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800531c:	2300      	movs	r3, #0
 800531e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005320:	f107 0314 	add.w	r3, r7, #20
 8005324:	2102      	movs	r1, #2
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc ffc4 	bl	80022b4 <HAL_RCC_ClockConfig>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005332:	f000 f905 	bl	8005540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8005336:	2312      	movs	r3, #18
 8005338:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800533a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	4618      	mov	r0, r3
 8005348:	f7fd f950 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005352:	f000 f8f5 	bl	8005540 <Error_Handler>
  }
}
 8005356:	bf00      	nop
 8005358:	3750      	adds	r7, #80	; 0x50
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <MX_ADC1_Init+0x94>)
 8005372:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <MX_ADC1_Init+0x98>)
 8005374:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <MX_ADC1_Init+0x94>)
 8005378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <MX_ADC1_Init+0x94>)
 8005380:	2201      	movs	r2, #1
 8005382:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <MX_ADC1_Init+0x94>)
 8005386:	2200      	movs	r2, #0
 8005388:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800538a:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <MX_ADC1_Init+0x94>)
 800538c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005390:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005392:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <MX_ADC1_Init+0x94>)
 8005394:	2200      	movs	r2, #0
 8005396:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <MX_ADC1_Init+0x94>)
 800539a:	2202      	movs	r2, #2
 800539c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800539e:	4815      	ldr	r0, [pc, #84]	; (80053f4 <MX_ADC1_Init+0x94>)
 80053a0:	f7fa ff58 	bl	8000254 <HAL_ADC_Init>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80053aa:	f000 f8c9 	bl	8005540 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80053ae:	2302      	movs	r3, #2
 80053b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80053b6:	2306      	movs	r3, #6
 80053b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	480d      	ldr	r0, [pc, #52]	; (80053f4 <MX_ADC1_Init+0x94>)
 80053c0:	f7fb f8f6 	bl	80005b0 <HAL_ADC_ConfigChannel>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80053ca:	f000 f8b9 	bl	8005540 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80053d2:	2302      	movs	r3, #2
 80053d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4806      	ldr	r0, [pc, #24]	; (80053f4 <MX_ADC1_Init+0x94>)
 80053dc:	f7fb f8e8 	bl	80005b0 <HAL_ADC_ConfigChannel>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80053e6:	f000 f8ab 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	200001a0 	.word	0x200001a0
 80053f8:	40012400 	.word	0x40012400

080053fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <MX_USART1_UART_Init+0x50>)
 8005404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800540c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800540e:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005416:	2200      	movs	r2, #0
 8005418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005422:	220c      	movs	r2, #12
 8005424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005432:	4805      	ldr	r0, [pc, #20]	; (8005448 <MX_USART1_UART_Init+0x4c>)
 8005434:	f7fd f990 	bl	8002758 <HAL_UART_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800543e:	f000 f87f 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200001d0 	.word	0x200001d0
 800544c:	40013800 	.word	0x40013800

08005450 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <MX_DMA_Init+0x38>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <MX_DMA_Init+0x38>)
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	6153      	str	r3, [r2, #20]
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <MX_DMA_Init+0x38>)
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800546e:	2200      	movs	r2, #0
 8005470:	2100      	movs	r1, #0
 8005472:	200b      	movs	r0, #11
 8005474:	f7fb faaf 	bl	80009d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005478:	200b      	movs	r0, #11
 800547a:	f7fb fac8 	bl	8000a0e <HAL_NVIC_EnableIRQ>

}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000

0800548c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005492:	f107 0310 	add.w	r3, r7, #16
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4a23      	ldr	r2, [pc, #140]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054a6:	f043 0310 	orr.w	r3, r3, #16
 80054aa:	6193      	str	r3, [r2, #24]
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054be:	f043 0320 	orr.w	r3, r3, #32
 80054c2:	6193      	str	r3, [r2, #24]
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d0:	4b18      	ldr	r3, [pc, #96]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4a17      	ldr	r2, [pc, #92]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054d6:	f043 0304 	orr.w	r3, r3, #4
 80054da:	6193      	str	r3, [r2, #24]
 80054dc:	4b15      	ldr	r3, [pc, #84]	; (8005534 <MX_GPIO_Init+0xa8>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054ee:	4812      	ldr	r0, [pc, #72]	; (8005538 <MX_GPIO_Init+0xac>)
 80054f0:	f7fb fd62 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80054f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054fa:	2301      	movs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005502:	2302      	movs	r3, #2
 8005504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	4619      	mov	r1, r3
 800550c:	480a      	ldr	r0, [pc, #40]	; (8005538 <MX_GPIO_Init+0xac>)
 800550e:	f7fb fbf9 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005512:	2301      	movs	r3, #1
 8005514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800551a:	2301      	movs	r3, #1
 800551c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551e:	f107 0310 	add.w	r3, r7, #16
 8005522:	4619      	mov	r1, r3
 8005524:	4805      	ldr	r0, [pc, #20]	; (800553c <MX_GPIO_Init+0xb0>)
 8005526:	f7fb fbed 	bl	8000d04 <HAL_GPIO_Init>

}
 800552a:	bf00      	nop
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	40011000 	.word	0x40011000
 800553c:	40010800 	.word	0x40010800

08005540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <HAL_MspInit+0x5c>)
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <HAL_MspInit+0x5c>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6193      	str	r3, [r2, #24]
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <HAL_MspInit+0x5c>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <HAL_MspInit+0x5c>)
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <HAL_MspInit+0x5c>)
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005574:	61d3      	str	r3, [r2, #28]
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_MspInit+0x5c>)
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_MspInit+0x60>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	4a04      	ldr	r2, [pc, #16]	; (80055ac <HAL_MspInit+0x60>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40010000 	.word	0x40010000

080055b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b8:	f107 0310 	add.w	r3, r7, #16
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2c      	ldr	r2, [pc, #176]	; (800567c <HAL_ADC_MspInit+0xcc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d151      	bne.n	8005674 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055d0:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <HAL_ADC_MspInit+0xd0>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <HAL_ADC_MspInit+0xd0>)
 80055d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055da:	6193      	str	r3, [r2, #24]
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <HAL_ADC_MspInit+0xd0>)
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <HAL_ADC_MspInit+0xd0>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	4a24      	ldr	r2, [pc, #144]	; (8005680 <HAL_ADC_MspInit+0xd0>)
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	6193      	str	r3, [r2, #24]
 80055f4:	4b22      	ldr	r3, [pc, #136]	; (8005680 <HAL_ADC_MspInit+0xd0>)
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8005600:	2306      	movs	r3, #6
 8005602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005604:	2303      	movs	r3, #3
 8005606:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	4619      	mov	r1, r3
 800560e:	481d      	ldr	r0, [pc, #116]	; (8005684 <HAL_ADC_MspInit+0xd4>)
 8005610:	f7fb fb78 	bl	8000d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 8005616:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_ADC_MspInit+0xdc>)
 8005618:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005626:	4b18      	ldr	r3, [pc, #96]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 800562e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005632:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 8005636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800563a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800563c:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 800563e:	2220      	movs	r2, #32
 8005640:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 8005644:	2200      	movs	r2, #0
 8005646:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005648:	480f      	ldr	r0, [pc, #60]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 800564a:	f7fb f9fb 	bl	8000a44 <HAL_DMA_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8005654:	f7ff ff74 	bl	8005540 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 800565c:	621a      	str	r2, [r3, #32]
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_ADC_MspInit+0xd8>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005664:	2200      	movs	r2, #0
 8005666:	2100      	movs	r1, #0
 8005668:	2012      	movs	r0, #18
 800566a:	f7fb f9b4 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800566e:	2012      	movs	r0, #18
 8005670:	f7fb f9cd 	bl	8000a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005674:	bf00      	nop
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40012400 	.word	0x40012400
 8005680:	40021000 	.word	0x40021000
 8005684:	40010800 	.word	0x40010800
 8005688:	20000210 	.word	0x20000210
 800568c:	40020008 	.word	0x40020008

08005690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_UART_MspInit+0x8c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d131      	bne.n	8005714 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_UART_MspInit+0x90>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_UART_MspInit+0x90>)
 80056b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ba:	6193      	str	r3, [r2, #24]
 80056bc:	4b18      	ldr	r3, [pc, #96]	; (8005720 <HAL_UART_MspInit+0x90>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056c8:	4b15      	ldr	r3, [pc, #84]	; (8005720 <HAL_UART_MspInit+0x90>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <HAL_UART_MspInit+0x90>)
 80056ce:	f043 0304 	orr.w	r3, r3, #4
 80056d2:	6193      	str	r3, [r2, #24]
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <HAL_UART_MspInit+0x90>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e6:	2302      	movs	r3, #2
 80056e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ea:	2303      	movs	r3, #3
 80056ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ee:	f107 0310 	add.w	r3, r7, #16
 80056f2:	4619      	mov	r1, r3
 80056f4:	480b      	ldr	r0, [pc, #44]	; (8005724 <HAL_UART_MspInit+0x94>)
 80056f6:	f7fb fb05 	bl	8000d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005708:	f107 0310 	add.w	r3, r7, #16
 800570c:	4619      	mov	r1, r3
 800570e:	4805      	ldr	r0, [pc, #20]	; (8005724 <HAL_UART_MspInit+0x94>)
 8005710:	f7fb faf8 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005714:	bf00      	nop
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40013800 	.word	0x40013800
 8005720:	40021000 	.word	0x40021000
 8005724:	40010800 	.word	0x40010800

08005728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800572c:	bf00      	nop
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005738:	e7fe      	b.n	8005738 <HardFault_Handler+0x4>

0800573a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800573e:	e7fe      	b.n	800573e <MemManage_Handler+0x4>

08005740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005744:	e7fe      	b.n	8005744 <BusFault_Handler+0x4>

08005746 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005746:	b480      	push	{r7}
 8005748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800574a:	e7fe      	b.n	800574a <UsageFault_Handler+0x4>

0800574c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005774:	f7fa fd30 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}

0800577c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005780:	4802      	ldr	r0, [pc, #8]	; (800578c <DMA1_Channel1_IRQHandler+0x10>)
 8005782:	f7fb f9b9 	bl	8000af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000210 	.word	0x20000210

08005790 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005794:	4802      	ldr	r0, [pc, #8]	; (80057a0 <ADC1_2_IRQHandler+0x10>)
 8005796:	f7fa fe35 	bl	8000404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800579a:	bf00      	nop
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200001a0 	.word	0x200001a0

080057a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80057a8:	4802      	ldr	r0, [pc, #8]	; (80057b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80057aa:	f7fb fd3c 	bl	8001226 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000518 	.word	0x20000518

080057b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80057bc:	4b15      	ldr	r3, [pc, #84]	; (8005814 <SystemInit+0x5c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <SystemInit+0x5c>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <SystemInit+0x5c>)
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4911      	ldr	r1, [pc, #68]	; (8005814 <SystemInit+0x5c>)
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <SystemInit+0x60>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <SystemInit+0x5c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <SystemInit+0x5c>)
 80057da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80057de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <SystemInit+0x5c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <SystemInit+0x5c>)
 80057ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <SystemInit+0x5c>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a07      	ldr	r2, [pc, #28]	; (8005814 <SystemInit+0x5c>)
 80057f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80057fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <SystemInit+0x5c>)
 80057fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005802:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <SystemInit+0x64>)
 8005806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800580a:	609a      	str	r2, [r3, #8]
#endif 
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	40021000 	.word	0x40021000
 8005818:	f8ff0000 	.word	0xf8ff0000
 800581c:	e000ed00 	.word	0xe000ed00

08005820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005824:	2200      	movs	r2, #0
 8005826:	490e      	ldr	r1, [pc, #56]	; (8005860 <MX_USB_DEVICE_Init+0x40>)
 8005828:	480e      	ldr	r0, [pc, #56]	; (8005864 <MX_USB_DEVICE_Init+0x44>)
 800582a:	f7fe fc91 	bl	8004150 <USBD_Init>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005834:	f7ff fe84 	bl	8005540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005838:	490b      	ldr	r1, [pc, #44]	; (8005868 <MX_USB_DEVICE_Init+0x48>)
 800583a:	480a      	ldr	r0, [pc, #40]	; (8005864 <MX_USB_DEVICE_Init+0x44>)
 800583c:	f7fe fcb3 	bl	80041a6 <USBD_RegisterClass>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005846:	f7ff fe7b 	bl	8005540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800584a:	4806      	ldr	r0, [pc, #24]	; (8005864 <MX_USB_DEVICE_Init+0x44>)
 800584c:	f7fe fcc4 	bl	80041d8 <USBD_Start>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005856:	f7ff fe73 	bl	8005540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000114 	.word	0x20000114
 8005864:	20000254 	.word	0x20000254
 8005868:	20000008 	.word	0x20000008

0800586c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <HAL_PCD_MspInit+0x44>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d113      	bne.n	80058a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <HAL_PCD_MspInit+0x48>)
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <HAL_PCD_MspInit+0x48>)
 8005884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005888:	61d3      	str	r3, [r2, #28]
 800588a:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <HAL_PCD_MspInit+0x48>)
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8005896:	2200      	movs	r2, #0
 8005898:	2102      	movs	r1, #2
 800589a:	2014      	movs	r0, #20
 800589c:	f7fb f89b 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80058a0:	2014      	movs	r0, #20
 80058a2:	f7fb f8b4 	bl	8000a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40005c00 	.word	0x40005c00
 80058b4:	40021000 	.word	0x40021000

080058b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe fcca 	bl	8004268 <USBD_LL_SetupStage>
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	015b      	lsls	r3, r3, #5
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	4619      	mov	r1, r3
 8005900:	f7fe fcfd 	bl	80042fe <USBD_LL_DataOutStage>
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	4413      	add	r3, r2
 8005926:	333c      	adds	r3, #60	; 0x3c
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	4619      	mov	r1, r3
 800592e:	f7fe fd57 	bl	80043e0 <USBD_LL_DataInStage>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fe67 	bl	800461c <USBD_LL_SOF>
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d001      	beq.n	800596e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800596a:	f7ff fde9 	bl	8005540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fe17 	bl	80045ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe fdd0 	bl	800452a <USBD_LL_Reset>
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fe11 	bl	80045ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <HAL_PCD_SuspendCallback+0x30>)
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	4a03      	ldr	r2, [pc, #12]	; (80059c4 <HAL_PCD_SuspendCallback+0x30>)
 80059b6:	f043 0306 	orr.w	r3, r3, #6
 80059ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fe0b 	bl	80045f2 <USBD_LL_Resume>
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80059ec:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <USBD_LL_Init+0x88>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <USBD_LL_Init+0x88>)
 80059f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80059fc:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <USBD_LL_Init+0x88>)
 80059fe:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <USBD_LL_Init+0x8c>)
 8005a00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005a02:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <USBD_LL_Init+0x88>)
 8005a04:	2208      	movs	r2, #8
 8005a06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005a08:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <USBD_LL_Init+0x88>)
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005a0e:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <USBD_LL_Init+0x88>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005a14:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <USBD_LL_Init+0x88>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <USBD_LL_Init+0x88>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005a20:	4812      	ldr	r0, [pc, #72]	; (8005a6c <USBD_LL_Init+0x88>)
 8005a22:	f7fb faf9 	bl	8001018 <HAL_PCD_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005a2c:	f7ff fd88 	bl	8005540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a36:	2318      	movs	r3, #24
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	f7fc f97e 	bl	8001d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a46:	2358      	movs	r3, #88	; 0x58
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	f7fc f976 	bl	8001d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2181      	movs	r1, #129	; 0x81
 8005a5e:	f7fc f96d 	bl	8001d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000518 	.word	0x20000518
 8005a70:	40005c00 	.word	0x40005c00

08005a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fb fba5 	bl	80011da <HAL_PCD_Start>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f934 	bl	8005d04 <USBD_Get_USB_Status>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	4603      	mov	r3, r0
 8005aba:	70fb      	strb	r3, [r7, #3]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70bb      	strb	r3, [r7, #2]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005ad2:	78bb      	ldrb	r3, [r7, #2]
 8005ad4:	883a      	ldrh	r2, [r7, #0]
 8005ad6:	78f9      	ldrb	r1, [r7, #3]
 8005ad8:	f7fb fcd8 	bl	800148c <HAL_PCD_EP_Open>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f90e 	bl	8005d04 <USBD_Get_USB_Status>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb fd19 	bl	800154c <HAL_PCD_EP_Close>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f8ef 	bl	8005d04 <USBD_Get_USB_Status>
 8005b26:	4603      	mov	r3, r0
 8005b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	4611      	mov	r1, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fb fdaf 	bl	80016b6 <HAL_PCD_EP_SetStall>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f8d0 	bl	8005d04 <USBD_Get_USB_Status>
 8005b64:	4603      	mov	r3, r0
 8005b66:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fb fdea 	bl	800176a <HAL_PCD_EP_ClrStall>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f8b1 	bl	8005d04 <USBD_Get_USB_Status>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bc2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da08      	bge.n	8005bde <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	015b      	lsls	r3, r3, #5
 8005bd6:	4413      	add	r3, r2
 8005bd8:	332a      	adds	r3, #42	; 0x2a
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	e008      	b.n	8005bf0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	015b      	lsls	r3, r3, #5
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005bee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fb fc12 	bl	8001442 <HAL_PCD_SetAddress>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 f86d 	bl	8005d04 <USBD_Get_USB_Status>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	461a      	mov	r2, r3
 8005c44:	460b      	mov	r3, r1
 8005c46:	72fb      	strb	r3, [r7, #11]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	7af9      	ldrb	r1, [r7, #11]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	f7fb fcf0 	bl	8001644 <HAL_PCD_EP_Transmit>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f84a 	bl	8005d04 <USBD_Get_USB_Status>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c74:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	72fb      	strb	r3, [r7, #11]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005ca0:	893b      	ldrh	r3, [r7, #8]
 8005ca2:	7af9      	ldrb	r1, [r7, #11]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	f7fb fc93 	bl	80015d0 <HAL_PCD_EP_Receive>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f827 	bl	8005d04 <USBD_Get_USB_Status>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005cba:	7dbb      	ldrb	r3, [r7, #22]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005ccc:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <USBD_static_malloc+0x14>)
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	20000184 	.word	0x20000184

08005cdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d817      	bhi.n	8005d48 <USBD_Get_USB_Status+0x44>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <USBD_Get_USB_Status+0x1c>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d37 	.word	0x08005d37
 8005d28:	08005d3d 	.word	0x08005d3d
 8005d2c:	08005d43 	.word	0x08005d43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	73fb      	strb	r3, [r7, #15]
    break;
 8005d34:	e00b      	b.n	8005d4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005d36:	2302      	movs	r3, #2
 8005d38:	73fb      	strb	r3, [r7, #15]
    break;
 8005d3a:	e008      	b.n	8005d4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d40:	e005      	b.n	8005d4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d42:	2302      	movs	r3, #2
 8005d44:	73fb      	strb	r3, [r7, #15]
    break;
 8005d46:	e002      	b.n	8005d4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d4c:	bf00      	nop
  }
  return usb_status;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop

08005d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	6039      	str	r1, [r7, #0]
 8005d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2212      	movs	r2, #18
 8005d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000130 	.word	0x20000130

08005d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d92:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000144 	.word	0x20000144

08005da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4907      	ldr	r1, [pc, #28]	; (8005dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dba:	4808      	ldr	r0, [pc, #32]	; (8005ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8005dbc:	f7ff f977 	bl	80050ae <USBD_GetString>
 8005dc0:	e004      	b.n	8005dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dc6:	4805      	ldr	r0, [pc, #20]	; (8005ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8005dc8:	f7ff f971 	bl	80050ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000784 	.word	0x20000784
 8005ddc:	0800604c 	.word	0x0800604c

08005de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	4904      	ldr	r1, [pc, #16]	; (8005e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005df0:	4804      	ldr	r0, [pc, #16]	; (8005e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005df2:	f7ff f95c 	bl	80050ae <USBD_GetString>
  return USBD_StrDesc;
 8005df6:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000784 	.word	0x20000784
 8005e04:	08006064 	.word	0x08006064

08005e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	6039      	str	r1, [r7, #0]
 8005e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	221a      	movs	r2, #26
 8005e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e1a:	f000 f843 	bl	8005ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e1e:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000148 	.word	0x20000148

08005e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d105      	bne.n	8005e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4907      	ldr	r1, [pc, #28]	; (8005e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e42:	4808      	ldr	r0, [pc, #32]	; (8005e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e44:	f7ff f933 	bl	80050ae <USBD_GetString>
 8005e48:	e004      	b.n	8005e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4904      	ldr	r1, [pc, #16]	; (8005e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e4e:	4805      	ldr	r0, [pc, #20]	; (8005e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e50:	f7ff f92d 	bl	80050ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000784 	.word	0x20000784
 8005e64:	08006078 	.word	0x08006078

08005e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4907      	ldr	r1, [pc, #28]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e7e:	4808      	ldr	r0, [pc, #32]	; (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e80:	f7ff f915 	bl	80050ae <USBD_GetString>
 8005e84:	e004      	b.n	8005e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	4904      	ldr	r1, [pc, #16]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e8a:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e8c:	f7ff f90f 	bl	80050ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000784 	.word	0x20000784
 8005ea0:	08006084 	.word	0x08006084

08005ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <Get_SerialNum+0x44>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005eb0:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <Get_SerialNum+0x48>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <Get_SerialNum+0x4c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4909      	ldr	r1, [pc, #36]	; (8005ef4 <Get_SerialNum+0x50>)
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f814 	bl	8005efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <Get_SerialNum+0x54>)
 8005ed8:	68b8      	ldr	r0, [r7, #8]
 8005eda:	f000 f80f 	bl	8005efc <IntToUnicode>
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	1ffff7e8 	.word	0x1ffff7e8
 8005eec:	1ffff7ec 	.word	0x1ffff7ec
 8005ef0:	1ffff7f0 	.word	0x1ffff7f0
 8005ef4:	2000014a 	.word	0x2000014a
 8005ef8:	2000015a 	.word	0x2000015a

08005efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75fb      	strb	r3, [r7, #23]
 8005f12:	e027      	b.n	8005f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	0f1b      	lsrs	r3, r3, #28
 8005f18:	2b09      	cmp	r3, #9
 8005f1a:	d80b      	bhi.n	8005f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	0f1b      	lsrs	r3, r3, #28
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	4619      	mov	r1, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3230      	adds	r2, #48	; 0x30
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e00a      	b.n	8005f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0f1b      	lsrs	r3, r3, #28
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	440b      	add	r3, r1
 8005f44:	3237      	adds	r2, #55	; 0x37
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	3301      	adds	r3, #1
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	4413      	add	r3, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	3301      	adds	r3, #1
 8005f62:	75fb      	strb	r3, [r7, #23]
 8005f64:	7dfa      	ldrb	r2, [r7, #23]
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3d3      	bcc.n	8005f14 <IntToUnicode+0x18>
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
	...

08005f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005f78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005f7a:	e003      	b.n	8005f84 <LoopCopyDataInit>

08005f7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005f7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005f80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005f82:	3104      	adds	r1, #4

08005f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005f84:	480a      	ldr	r0, [pc, #40]	; (8005fb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005f88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005f8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005f8c:	d3f6      	bcc.n	8005f7c <CopyDataInit>
  ldr r2, =_sbss
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005f90:	e002      	b.n	8005f98 <LoopFillZerobss>

08005f92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005f92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005f94:	f842 3b04 	str.w	r3, [r2], #4

08005f98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005f9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005f9c:	d3f9      	bcc.n	8005f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f9e:	f7ff fc0b 	bl	80057b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fa2:	f000 f80f 	bl	8005fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fa6:	f7ff f941 	bl	800522c <main>
  bx lr
 8005faa:	4770      	bx	lr
  ldr r3, =_sidata
 8005fac:	080060b4 	.word	0x080060b4
  ldr r0, =_sdata
 8005fb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005fb4:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 8005fb8:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 8005fbc:	20000984 	.word	0x20000984

08005fc0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fc0:	e7fe      	b.n	8005fc0 <CAN1_RX1_IRQHandler>
	...

08005fc4 <__libc_init_array>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	2500      	movs	r5, #0
 8005fc8:	4e0c      	ldr	r6, [pc, #48]	; (8005ffc <__libc_init_array+0x38>)
 8005fca:	4c0d      	ldr	r4, [pc, #52]	; (8006000 <__libc_init_array+0x3c>)
 8005fcc:	1ba4      	subs	r4, r4, r6
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	42a5      	cmp	r5, r4
 8005fd2:	d109      	bne.n	8005fe8 <__libc_init_array+0x24>
 8005fd4:	f000 f822 	bl	800601c <_init>
 8005fd8:	2500      	movs	r5, #0
 8005fda:	4e0a      	ldr	r6, [pc, #40]	; (8006004 <__libc_init_array+0x40>)
 8005fdc:	4c0a      	ldr	r4, [pc, #40]	; (8006008 <__libc_init_array+0x44>)
 8005fde:	1ba4      	subs	r4, r4, r6
 8005fe0:	10a4      	asrs	r4, r4, #2
 8005fe2:	42a5      	cmp	r5, r4
 8005fe4:	d105      	bne.n	8005ff2 <__libc_init_array+0x2e>
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fec:	4798      	blx	r3
 8005fee:	3501      	adds	r5, #1
 8005ff0:	e7ee      	b.n	8005fd0 <__libc_init_array+0xc>
 8005ff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ff6:	4798      	blx	r3
 8005ff8:	3501      	adds	r5, #1
 8005ffa:	e7f2      	b.n	8005fe2 <__libc_init_array+0x1e>
 8005ffc:	080060ac 	.word	0x080060ac
 8006000:	080060ac 	.word	0x080060ac
 8006004:	080060ac 	.word	0x080060ac
 8006008:	080060b0 	.word	0x080060b0

0800600c <memset>:
 800600c:	4603      	mov	r3, r0
 800600e:	4402      	add	r2, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	d100      	bne.n	8006016 <memset+0xa>
 8006014:	4770      	bx	lr
 8006016:	f803 1b01 	strb.w	r1, [r3], #1
 800601a:	e7f9      	b.n	8006010 <memset+0x4>

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
