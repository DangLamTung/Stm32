
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002c28  08002c28  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c28  08002c28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08002c44  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08002c44  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be65  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c3  00000000  00000000  0002bea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  0002d868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014895  00000000  00000000  0002e508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000716f  00000000  00000000  00042d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006afe6  00000000  00000000  00049f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4ef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d8  00000000  00000000  000b4f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e80 	.word	0x08001e80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001e80 	.word	0x08001e80

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fd6a 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000010 	.word	0x20000010
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000438 	.word	0x20000438

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000438 	.word	0x20000438

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	3b04      	subs	r3, #4
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <NVIC_SetPriority+0x50>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295
 8000394:	f7ff ff90 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xb4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x6a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0xaa>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x60>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xec>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0xa0>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000486:	4a87      	ldr	r2, [pc, #540]	; (80006a4 <HAL_GPIO_Init+0x288>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 800048c:	4a85      	ldr	r2, [pc, #532]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x84>
 8000492:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <HAL_GPIO_Init+0x290>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004a0:	4a83      	ldr	r2, [pc, #524]	; (80006b0 <HAL_GPIO_Init+0x294>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004a6:	4a83      	ldr	r2, [pc, #524]	; (80006b4 <HAL_GPIO_Init+0x298>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004ac:	4a82      	ldr	r2, [pc, #520]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xfc>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0x100>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0x10e>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x114>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b57      	ldr	r3, [pc, #348]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a56      	ldr	r2, [pc, #344]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b54      	ldr	r3, [pc, #336]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	4013      	ands	r3, r2
 8000598:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x1ae>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x1aa>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a47      	ldr	r2, [pc, #284]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x1a6>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <HAL_GPIO_Init+0x2b4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x1a2>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4313      	orrs	r3, r2
 80005da:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005dc:	4938      	ldr	r1, [pc, #224]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4936      	ldr	r1, [pc, #216]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4931      	ldr	r1, [pc, #196]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492c      	ldr	r1, [pc, #176]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4927      	ldr	r1, [pc, #156]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4922      	ldr	r1, [pc, #136]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491d      	ldr	r1, [pc, #116]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4918      	ldr	r1, [pc, #96]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4913      	ldr	r1, [pc, #76]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	2b0f      	cmp	r3, #15
 8000694:	f67f aed4 	bls.w	8000440 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000698:	bf00      	nop
 800069a:	372c      	adds	r7, #44	; 0x2c
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	10210000 	.word	0x10210000
 80006a8:	10110000 	.word	0x10110000
 80006ac:	10120000 	.word	0x10120000
 80006b0:	10310000 	.word	0x10310000
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10220000 	.word	0x10220000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40011400 	.word	0x40011400
 80006d4:	40010400 	.word	0x40010400

080006d8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e0e7      	b.n	80008c2 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d106      	bne.n	800070c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f001 facc 	bl	8001ca4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0201 	bic.w	r2, r2, #1
 8000722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000724:	f000 ffb6 	bl	8001694 <HAL_RCC_GetPCLK1Freq>
 8000728:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	4a67      	ldr	r2, [pc, #412]	; (80008cc <HAL_I2C_Init+0x1f4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d807      	bhi.n	8000744 <HAL_I2C_Init+0x6c>
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4a66      	ldr	r2, [pc, #408]	; (80008d0 <HAL_I2C_Init+0x1f8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	bf94      	ite	ls
 800073c:	2301      	movls	r3, #1
 800073e:	2300      	movhi	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	e006      	b.n	8000752 <HAL_I2C_Init+0x7a>
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <HAL_I2C_Init+0x1fc>)
 8000748:	4293      	cmp	r3, r2
 800074a:	bf94      	ite	ls
 800074c:	2301      	movls	r3, #1
 800074e:	2300      	movhi	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e0b3      	b.n	80008c2 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	4a5e      	ldr	r2, [pc, #376]	; (80008d8 <HAL_I2C_Init+0x200>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	0c9b      	lsrs	r3, r3, #18
 8000764:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4a56      	ldr	r2, [pc, #344]	; (80008cc <HAL_I2C_Init+0x1f4>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d802      	bhi.n	800077e <HAL_I2C_Init+0xa6>
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	e009      	b.n	8000792 <HAL_I2C_Init+0xba>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	4a54      	ldr	r2, [pc, #336]	; (80008dc <HAL_I2C_Init+0x204>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	099b      	lsrs	r3, r3, #6
 8000790:	3301      	adds	r3, #1
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <HAL_I2C_Init+0x1f4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d80d      	bhi.n	80007be <HAL_I2C_Init+0xe6>
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b0:	3301      	adds	r3, #1
 80007b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf38      	it	cc
 80007ba:	2304      	movcc	r3, #4
 80007bc:	e04f      	b.n	800085e <HAL_I2C_Init+0x186>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d111      	bne.n	80007ea <HAL_I2C_Init+0x112>
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1e59      	subs	r1, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	e012      	b.n	8000810 <HAL_I2C_Init+0x138>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1e59      	subs	r1, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	009a      	lsls	r2, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000800:	3301      	adds	r3, #1
 8000802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_I2C_Init+0x140>
 8000814:	2301      	movs	r3, #1
 8000816:	e022      	b.n	800085e <HAL_I2C_Init+0x186>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10e      	bne.n	800083e <HAL_I2C_Init+0x166>
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1e59      	subs	r1, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000832:	3301      	adds	r3, #1
 8000834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083c:	e00f      	b.n	800085e <HAL_I2C_Init+0x186>
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1e59      	subs	r1, r3, #1
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	009a      	lsls	r2, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	fbb1 f3f3 	udiv	r3, r1, r3
 8000854:	3301      	adds	r3, #1
 8000856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800085a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69d9      	ldr	r1, [r3, #28]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a1a      	ldr	r2, [r3, #32]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	430a      	orrs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6919      	ldr	r1, [r3, #16]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	430a      	orrs	r2, r1
 8000882:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6959      	ldr	r1, [r3, #20]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	430a      	orrs	r2, r1
 8000892:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f042 0201 	orr.w	r2, r2, #1
 80008a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2220      	movs	r2, #32
 80008ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	000186a0 	.word	0x000186a0
 80008d0:	001e847f 	.word	0x001e847f
 80008d4:	003d08ff 	.word	0x003d08ff
 80008d8:	431bde83 	.word	0x431bde83
 80008dc:	10624dd3 	.word	0x10624dd3

080008e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	4608      	mov	r0, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	4603      	mov	r3, r0
 80008f0:	817b      	strh	r3, [r7, #10]
 80008f2:	460b      	mov	r3, r1
 80008f4:	813b      	strh	r3, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80008fe:	f7ff fc7d 	bl	80001fc <HAL_GetTick>
 8000902:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b20      	cmp	r3, #32
 800090e:	f040 80e7 	bne.w	8000ae0 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2319      	movs	r3, #25
 8000918:	2201      	movs	r2, #1
 800091a:	4974      	ldr	r1, [pc, #464]	; (8000aec <HAL_I2C_Mem_Write+0x20c>)
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f000 f97d 	bl	8000c1c <I2C_WaitOnFlagUntilTimeout>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8000928:	2302      	movs	r3, #2
 800092a:	e0da      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000932:	2b01      	cmp	r3, #1
 8000934:	d101      	bne.n	800093a <HAL_I2C_Mem_Write+0x5a>
 8000936:	2302      	movs	r3, #2
 8000938:	e0d3      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2201      	movs	r2, #1
 800093e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b01      	cmp	r3, #1
 800094e:	d007      	beq.n	8000960 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800096e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2221      	movs	r2, #33	; 0x21
 8000974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6a3a      	ldr	r2, [r7, #32]
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4a56      	ldr	r2, [pc, #344]	; (8000af0 <HAL_I2C_Mem_Write+0x210>)
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800099c:	b29a      	uxth	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80009a2:	88f8      	ldrh	r0, [r7, #6]
 80009a4:	893a      	ldrh	r2, [r7, #8]
 80009a6:	8979      	ldrh	r1, [r7, #10]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	4603      	mov	r3, r0
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f89e 	bl	8000af4 <I2C_RequestMemoryWrite>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d05e      	beq.n	8000a7c <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d105      	bne.n	80009d2 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e087      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80009da:	2303      	movs	r3, #3
 80009dc:	e081      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 f9d9 	bl	8000d9a <I2C_WaitOnTXEFlagUntilTimeout>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00f      	beq.n	8000a0e <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d109      	bne.n	8000a0a <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a04:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e06b      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e069      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	1c59      	adds	r1, r3, #1
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	6251      	str	r1, [r2, #36]	; 0x24
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d119      	bne.n	8000a7c <HAL_I2C_Mem_Write+0x19c>
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	1c59      	adds	r1, r3, #1
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	6251      	str	r1, [r2, #36]	; 0x24
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3b01      	subs	r3, #1
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1ac      	bne.n	80009de <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f000 f9c3 	bl	8000e14 <I2C_WaitOnBTFFlagUntilTimeout>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00f      	beq.n	8000ab4 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d109      	bne.n	8000ab0 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aaa:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e018      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e016      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e000      	b.n	8000ae2 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8000ae0:	2302      	movs	r3, #2
  }
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	00100002 	.word	0x00100002
 8000af0:	ffff0000 	.word	0xffff0000

08000af4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	4608      	mov	r0, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	4603      	mov	r3, r0
 8000b04:	817b      	strh	r3, [r7, #10]
 8000b06:	460b      	mov	r3, r1
 8000b08:	813b      	strh	r3, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f000 f876 	bl	8000c1c <I2C_WaitOnFlagUntilTimeout>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e069      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b3a:	897b      	ldrh	r3, [r7, #10]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	4932      	ldr	r1, [pc, #200]	; (8000c18 <I2C_RequestMemoryWrite+0x124>)
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f8b4 	bl	8000cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d007      	beq.n	8000b6c <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d101      	bne.n	8000b68 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e052      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e050      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b84:	6a39      	ldr	r1, [r7, #32]
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f000 f907 	bl	8000d9a <I2C_WaitOnTXEFlagUntilTimeout>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00f      	beq.n	8000bb2 <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d109      	bne.n	8000bae <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e02f      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e02d      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d105      	bne.n	8000bc4 <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000bb8:	893b      	ldrh	r3, [r7, #8]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	e023      	b.n	8000c0c <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000bc4:	893b      	ldrh	r3, [r7, #8]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd4:	6a39      	ldr	r1, [r7, #32]
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f000 f8df 	bl	8000d9a <I2C_WaitOnTXEFlagUntilTimeout>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00f      	beq.n	8000c02 <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d109      	bne.n	8000bfe <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bf8:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e007      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e005      	b.n	8000c0e <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c02:	893b      	ldrh	r3, [r7, #8]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	00010002 	.word	0x00010002

08000c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000c2c:	e01f      	b.n	8000c6e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d01b      	beq.n	8000c6e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000c3c:	f7ff fade 	bl	80001fc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d210      	bcs.n	8000c6e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2220      	movs	r2, #32
 8000c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e023      	b.n	8000cb6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	0c1b      	lsrs	r3, r3, #16
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d10d      	bne.n	8000c94 <I2C_WaitOnFlagUntilTimeout+0x78>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4013      	ands	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	e00c      	b.n	8000cae <I2C_WaitOnFlagUntilTimeout+0x92>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2301      	moveq	r3, #1
 8000ca8:	2300      	movne	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d0bc      	beq.n	8000c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ccc:	e040      	b.n	8000d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cdc:	d11c      	bne.n	8000d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000cf6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2200      	movs	r2, #0
 8000d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2220      	movs	r2, #32
 8000d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e03c      	b.n	8000d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1e:	d017      	beq.n	8000d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d007      	beq.n	8000d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8000d26:	f7ff fa69 	bl	80001fc <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d20c      	bcs.n	8000d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2220      	movs	r2, #32
 8000d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e020      	b.n	8000d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0c1b      	lsrs	r3, r3, #16
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d10c      	bne.n	8000d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	43da      	mvns	r2, r3
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	4013      	ands	r3, r2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf14      	ite	ne
 8000d6c:	2301      	movne	r3, #1
 8000d6e:	2300      	moveq	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	e00b      	b.n	8000d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bf14      	ite	ne
 8000d86:	2301      	movne	r3, #1
 8000d88:	2300      	moveq	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d19e      	bne.n	8000cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000da6:	e029      	b.n	8000dfc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 f870 	bl	8000e8e <I2C_IsAcknowledgeFailed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e029      	b.n	8000e0c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbe:	d01d      	beq.n	8000dfc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000dc6:	f7ff fa19 	bl	80001fc <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d212      	bcs.n	8000dfc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f043 0220 	orr.w	r2, r3, #32
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2220      	movs	r2, #32
 8000dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e007      	b.n	8000e0c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e06:	2b80      	cmp	r3, #128	; 0x80
 8000e08:	d1ce      	bne.n	8000da8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000e20:	e029      	b.n	8000e76 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f000 f833 	bl	8000e8e <I2C_IsAcknowledgeFailed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e029      	b.n	8000e86 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d01d      	beq.n	8000e76 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000e40:	f7ff f9dc 	bl	80001fc <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d212      	bcs.n	8000e76 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f043 0220 	orr.w	r2, r3, #32
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2220      	movs	r2, #32
 8000e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e007      	b.n	8000e86 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d1ce      	bne.n	8000e22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea4:	d114      	bne.n	8000ed0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000eae:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 8087 	beq.w	8001004 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ef6:	4b92      	ldr	r3, [pc, #584]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d00c      	beq.n	8000f1c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f02:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d112      	bne.n	8000f34 <HAL_RCC_OscConfig+0x58>
 8000f0e:	4b8c      	ldr	r3, [pc, #560]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1a:	d10b      	bne.n	8000f34 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d06c      	beq.n	8001002 <HAL_RCC_OscConfig+0x126>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d168      	bne.n	8001002 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e22d      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d106      	bne.n	8000f4c <HAL_RCC_OscConfig+0x70>
 8000f3e:	4b80      	ldr	r3, [pc, #512]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7f      	ldr	r2, [pc, #508]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e02e      	b.n	8000faa <HAL_RCC_OscConfig+0xce>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x92>
 8000f54:	4b7a      	ldr	r3, [pc, #488]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a79      	ldr	r2, [pc, #484]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b77      	ldr	r3, [pc, #476]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a76      	ldr	r2, [pc, #472]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e01d      	b.n	8000faa <HAL_RCC_OscConfig+0xce>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0xb6>
 8000f78:	4b71      	ldr	r3, [pc, #452]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a70      	ldr	r2, [pc, #448]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b6e      	ldr	r3, [pc, #440]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6d      	ldr	r2, [pc, #436]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e00b      	b.n	8000faa <HAL_RCC_OscConfig+0xce>
 8000f92:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6a      	ldr	r2, [pc, #424]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b68      	ldr	r3, [pc, #416]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a67      	ldr	r2, [pc, #412]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d013      	beq.n	8000fda <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff f923 	bl	80001fc <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fba:	f7ff f91f 	bl	80001fc <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e1e1      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fcc:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0xde>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff f90f 	bl	80001fc <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff f90b 	bl	80001fc <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e1cd      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x106>
 8001000:	e000      	b.n	8001004 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001002:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d063      	beq.n	80010d8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800101c:	4b48      	ldr	r3, [pc, #288]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d11c      	bne.n	8001062 <HAL_RCC_OscConfig+0x186>
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d116      	bne.n	8001062 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001034:	4b42      	ldr	r3, [pc, #264]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_RCC_OscConfig+0x170>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d001      	beq.n	800104c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e1a1      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4939      	ldr	r1, [pc, #228]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001060:	e03a      	b.n	80010d8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d020      	beq.n	80010ac <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_RCC_OscConfig+0x268>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff f8c4 	bl	80001fc <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001078:	f7ff f8c0 	bl	80001fc <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e182      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4926      	ldr	r1, [pc, #152]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
 80010aa:	e015      	b.n	80010d8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_RCC_OscConfig+0x268>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff f8a3 	bl	80001fc <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff f89f 	bl	80001fc <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e161      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d039      	beq.n	8001158 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d019      	beq.n	8001120 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff f883 	bl	80001fc <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010fa:	f7ff f87f 	bl	80001fc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e141      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_RCC_OscConfig+0x264>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f000 facf 	bl	80016bc <RCC_Delay>
 800111e:	e01b      	b.n	8001158 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff f869 	bl	80001fc <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	e00e      	b.n	800114c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff f865 	bl	80001fc <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d907      	bls.n	800114c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e127      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
 8001140:	40021000 	.word	0x40021000
 8001144:	42420000 	.word	0x42420000
 8001148:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114c:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1ea      	bne.n	800112e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80a6 	beq.w	80012b2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116a:	4b8b      	ldr	r3, [pc, #556]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a87      	ldr	r2, [pc, #540]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800118e:	2301      	movs	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001192:	4b82      	ldr	r3, [pc, #520]	; (800139c <HAL_RCC_OscConfig+0x4c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d118      	bne.n	80011d0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800119e:	4b7f      	ldr	r3, [pc, #508]	; (800139c <HAL_RCC_OscConfig+0x4c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a7e      	ldr	r2, [pc, #504]	; (800139c <HAL_RCC_OscConfig+0x4c0>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011aa:	f7ff f827 	bl	80001fc <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b2:	f7ff f823 	bl	80001fc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b64      	cmp	r3, #100	; 0x64
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e0e5      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c4:	4b75      	ldr	r3, [pc, #468]	; (800139c <HAL_RCC_OscConfig+0x4c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x30a>
 80011d8:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6213      	str	r3, [r2, #32]
 80011e4:	e02d      	b.n	8001242 <HAL_RCC_OscConfig+0x366>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x32c>
 80011ee:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a69      	ldr	r2, [pc, #420]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a66      	ldr	r2, [pc, #408]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6213      	str	r3, [r2, #32]
 8001206:	e01c      	b.n	8001242 <HAL_RCC_OscConfig+0x366>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x34e>
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a60      	ldr	r2, [pc, #384]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a5d      	ldr	r2, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6213      	str	r3, [r2, #32]
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0x366>
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	4b58      	ldr	r3, [pc, #352]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a57      	ldr	r2, [pc, #348]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7fe ffd7 	bl	80001fc <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7fe ffd3 	bl	80001fc <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e093      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ee      	beq.n	8001252 <HAL_RCC_OscConfig+0x376>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7fe ffc1 	bl	80001fc <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7fe ffbd 	bl	80001fc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e07d      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	4b40      	ldr	r3, [pc, #256]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ee      	bne.n	800127e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d105      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a3b      	ldr	r2, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d069      	beq.n	800138e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d061      	beq.n	800138a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d146      	bne.n	800135c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7fe ff92 	bl	80001fc <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7fe ff8e 	bl	80001fc <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e050      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d108      	bne.n	8001316 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4921      	ldr	r1, [pc, #132]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a19      	ldr	r1, [r3, #32]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	430b      	orrs	r3, r1
 8001328:	491b      	ldr	r1, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7fe ff62 	bl	80001fc <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7fe ff5e 	bl	80001fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e020      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x460>
 800135a:	e018      	b.n	800138e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7fe ff4b 	bl	80001fc <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136a:	f7fe ff47 	bl	80001fc <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e009      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_RCC_OscConfig+0x4bc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x48e>
 8001388:	e001      	b.n	800138e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	40007000 	.word	0x40007000
 80013a0:	42420060 	.word	0x42420060

080013a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013b2:	4b7e      	ldr	r3, [pc, #504]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d910      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c0:	4b7a      	ldr	r3, [pc, #488]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 0207 	bic.w	r2, r3, #7
 80013c8:	4978      	ldr	r1, [pc, #480]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0e0      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d020      	beq.n	8001430 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013fa:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a6c      	ldr	r2, [pc, #432]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001400:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001404:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a66      	ldr	r2, [pc, #408]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001418:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800141c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4961      	ldr	r1, [pc, #388]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d06a      	beq.n	8001512 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001444:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d115      	bne.n	800147c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0a7      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d107      	bne.n	800146c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145c:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e09b      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e093      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 0203 	bic.w	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4949      	ldr	r1, [pc, #292]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148e:	f7fe feb5 	bl	80001fc <HAL_GetTick>
 8001492:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d112      	bne.n	80014c2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149e:	f7fe fead 	bl	80001fc <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e077      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d1ee      	bne.n	800149e <HAL_RCC_ClockConfig+0xfa>
 80014c0:	e027      	b.n	8001512 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d11d      	bne.n	8001506 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7fe fe96 	bl	80001fc <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e060      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d1ee      	bne.n	80014cc <HAL_RCC_ClockConfig+0x128>
 80014ee:	e010      	b.n	8001512 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7fe fe84 	bl	80001fc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e04e      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d210      	bcs.n	8001542 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 0207 	bic.w	r2, r3, #7
 8001528:	4920      	ldr	r1, [pc, #128]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_RCC_ClockConfig+0x208>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e030      	b.n	80015a4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001580:	f000 f81c 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 8001584:	4601      	mov	r1, r0
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_RCC_ClockConfig+0x20c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_RCC_ClockConfig+0x210>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	fa21 f303 	lsr.w	r3, r1, r3
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_RCC_ClockConfig+0x214>)
 800159a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800159c:	2000      	movs	r0, #0
 800159e:	f7fe fdeb 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	08002c10 	.word	0x08002c10
 80015b8:	20000010 	.word	0x20000010

080015bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	b490      	push	{r4, r7}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c4:	1d3c      	adds	r4, r7, #4
 80015c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x40>
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x46>
 80015fa:	e02d      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015fe:	623b      	str	r3, [r7, #32]
      break;
 8001600:	e02d      	b.n	800165e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800160e:	4413      	add	r3, r2
 8001610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001614:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	0c5b      	lsrs	r3, r3, #17
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800162e:	4413      	add	r3, r2
 8001630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001634:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800163a:	fb02 f203 	mul.w	r2, r2, r3
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	fbb2 f3f3 	udiv	r3, r2, r3
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	e004      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <HAL_RCC_GetSysClockFreq+0xc0>)
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	623b      	str	r3, [r7, #32]
      break;
 8001656:	e002      	b.n	800165e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800165a:	623b      	str	r3, [r7, #32]
      break;
 800165c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165e:	6a3b      	ldr	r3, [r7, #32]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bc90      	pop	{r4, r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	08001e98 	.word	0x08001e98
 8001670:	08001ea8 	.word	0x08001ea8
 8001674:	40021000 	.word	0x40021000
 8001678:	007a1200 	.word	0x007a1200
 800167c:	003d0900 	.word	0x003d0900

08001680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_RCC_GetHCLKFreq+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000010 	.word	0x20000010

08001694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001698:	f7ff fff2 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 800169c:	4601      	mov	r1, r0
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08002c20 	.word	0x08002c20

080016bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <RCC_Delay+0x34>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <RCC_Delay+0x38>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0a5b      	lsrs	r3, r3, #9
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80016d8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f9      	bne.n	80016d8 <RCC_Delay+0x1c>
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000010 	.word	0x20000010
 80016f4:	10624dd3 	.word	0x10624dd3

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   *
   */
	HAL_Init();
 80016fc:	f7fe fd26 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001700:	f000 f824 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001704:	f000 f88c 	bl	8001820 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001708:	f000 f85c 	bl	80017c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800170c:	f000 f8bc 	bl	8001888 <ssd1306_Init>
  HAL_Delay(1000);
 8001710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001714:	f7fe fd7c 	bl	8000210 <HAL_Delay>
  ssd1306_Fill(White);
 8001718:	2001      	movs	r0, #1
 800171a:	f000 f921 	bl	8001960 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800171e:	f000 f941 	bl	80019a4 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8001722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001726:	f7fe fd73 	bl	8000210 <HAL_Delay>

  ssd1306_SetCursor(23,23);
 800172a:	2117      	movs	r1, #23
 800172c:	2017      	movs	r0, #23
 800172e:	f000 fa6f 	bl	8001c10 <ssd1306_SetCursor>
  ssd1306_WriteString("4ilo",Font_11x18,Black);
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <main+0x4c>)
 8001734:	2300      	movs	r3, #0
 8001736:	ca06      	ldmia	r2, {r1, r2}
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <main+0x50>)
 800173a:	f000 fa43 	bl	8001bc4 <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 800173e:	f000 f931 	bl	80019a4 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001742:	e7fe      	b.n	8001742 <main+0x4a>
 8001744:	20000008 	.word	0x20000008
 8001748:	08001eac 	.word	0x08001eac

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b090      	sub	sp, #64	; 0x40
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	2228      	movs	r2, #40	; 0x28
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fb88 	bl	8001e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001772:	2301      	movs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001776:	2310      	movs	r3, #16
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fbaa 	bl	8000edc <HAL_RCC_OscConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800178e:	f000 f85d 	bl	800184c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	230f      	movs	r3, #15
 8001794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fdfa 	bl	80013a4 <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017b6:	f000 f849 	bl	800184c <Error_Handler>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3740      	adds	r7, #64	; 0x40
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_I2C1_Init+0x50>)
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <MX_I2C1_Init+0x54>)
 80017cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_I2C1_Init+0x50>)
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <MX_I2C1_Init+0x58>)
 80017d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_I2C1_Init+0x50>)
 80017e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_I2C1_Init+0x50>)
 8001802:	f7fe ff69 	bl	80006d8 <HAL_I2C_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800180c:	f000 f81e 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000043c 	.word	0x2000043c
 8001818:	40005400 	.word	0x40005400
 800181c:	000186a0 	.word	0x000186a0

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_GPIO_Init+0x28>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <MX_GPIO_Init+0x28>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <MX_GPIO_Init+0x28>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af04      	add	r7, sp, #16
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001862:	230a      	movs	r3, #10
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2200      	movs	r2, #0
 8001872:	213c      	movs	r1, #60	; 0x3c
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <ssd1306_WriteCommand+0x2c>)
 8001876:	f7ff f833 	bl	80008e0 <HAL_I2C_Mem_Write>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000043c 	.word	0x2000043c

08001888 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f7fe fcbf 	bl	8000210 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001892:	20ae      	movs	r0, #174	; 0xae
 8001894:	f7ff ffe0 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001898:	2020      	movs	r0, #32
 800189a:	f7ff ffdd 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800189e:	2010      	movs	r0, #16
 80018a0:	f7ff ffda 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018a4:	20b0      	movs	r0, #176	; 0xb0
 80018a6:	f7ff ffd7 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018aa:	20c8      	movs	r0, #200	; 0xc8
 80018ac:	f7ff ffd4 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff ffd1 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80018b6:	2010      	movs	r0, #16
 80018b8:	f7ff ffce 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80018bc:	2040      	movs	r0, #64	; 0x40
 80018be:	f7ff ffcb 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80018c2:	2081      	movs	r0, #129	; 0x81
 80018c4:	f7ff ffc8 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80018c8:	20ff      	movs	r0, #255	; 0xff
 80018ca:	f7ff ffc5 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80018ce:	20a1      	movs	r0, #161	; 0xa1
 80018d0:	f7ff ffc2 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80018d4:	20a6      	movs	r0, #166	; 0xa6
 80018d6:	f7ff ffbf 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80018da:	20a8      	movs	r0, #168	; 0xa8
 80018dc:	f7ff ffbc 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80018e0:	203f      	movs	r0, #63	; 0x3f
 80018e2:	f7ff ffb9 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018e6:	20a4      	movs	r0, #164	; 0xa4
 80018e8:	f7ff ffb6 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80018ec:	20d3      	movs	r0, #211	; 0xd3
 80018ee:	f7ff ffb3 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff ffb0 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018f8:	20d5      	movs	r0, #213	; 0xd5
 80018fa:	f7ff ffad 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80018fe:	20f0      	movs	r0, #240	; 0xf0
 8001900:	f7ff ffaa 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001904:	20d9      	movs	r0, #217	; 0xd9
 8001906:	f7ff ffa7 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800190a:	2022      	movs	r0, #34	; 0x22
 800190c:	f7ff ffa4 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001910:	20da      	movs	r0, #218	; 0xda
 8001912:	f7ff ffa1 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001916:	2012      	movs	r0, #18
 8001918:	f7ff ff9e 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800191c:	20db      	movs	r0, #219	; 0xdb
 800191e:	f7ff ff9b 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001922:	2020      	movs	r0, #32
 8001924:	f7ff ff98 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001928:	208d      	movs	r0, #141	; 0x8d
 800192a:	f7ff ff95 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800192e:	2014      	movs	r0, #20
 8001930:	f7ff ff92 	bl	8001858 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001934:	20af      	movs	r0, #175	; 0xaf
 8001936:	f7ff ff8f 	bl	8001858 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f810 	bl	8001960 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001940:	f000 f830 	bl	80019a4 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <ssd1306_Init+0xd4>)
 8001946:	2200      	movs	r2, #0
 8001948:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <ssd1306_Init+0xd4>)
 800194c:	2200      	movs	r2, #0
 800194e:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <ssd1306_Init+0xd4>)
 8001952:	2201      	movs	r2, #1
 8001954:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000430 	.word	0x20000430

08001960 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e00d      	b.n	800198c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <ssd1306_Fill+0x1a>
 8001976:	2100      	movs	r1, #0
 8001978:	e000      	b.n	800197c <ssd1306_Fill+0x1c>
 800197a:	21ff      	movs	r1, #255	; 0xff
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <ssd1306_Fill+0x40>)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	460a      	mov	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d3ed      	bcc.n	8001970 <ssd1306_Fill+0x10>
	}
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000030 	.word	0x20000030

080019a4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	e01d      	b.n	80019ec <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	3b50      	subs	r3, #80	; 0x50
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff4e 	bl	8001858 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff ff4b 	bl	8001858 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80019c2:	2010      	movs	r0, #16
 80019c4:	f7ff ff48 	bl	8001858 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <ssd1306_UpdateScreen+0x58>)
 80019ce:	4413      	add	r3, r2
 80019d0:	2264      	movs	r2, #100	; 0x64
 80019d2:	9202      	str	r2, [sp, #8]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	9201      	str	r2, [sp, #4]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	2240      	movs	r2, #64	; 0x40
 80019de:	213c      	movs	r1, #60	; 0x3c
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <ssd1306_UpdateScreen+0x5c>)
 80019e2:	f7fe ff7d 	bl	80008e0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	3301      	adds	r3, #1
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	d9de      	bls.n	80019b0 <ssd1306_UpdateScreen+0xc>
	}
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000030 	.word	0x20000030
 8001a00:	2000043c 	.word	0x2000043c

08001a04 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	71bb      	strb	r3, [r7, #6]
 8001a12:	4613      	mov	r3, r2
 8001a14:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db48      	blt.n	8001ab0 <ssd1306_DrawPixel+0xac>
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	2b3f      	cmp	r3, #63	; 0x3f
 8001a22:	d845      	bhi.n	8001ab0 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <ssd1306_DrawPixel+0xb8>)
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf0c      	ite	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	2300      	movne	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8001a3a:	797b      	ldrb	r3, [r7, #5]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d11a      	bne.n	8001a76 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a40:	79fa      	ldrb	r2, [r7, #7]
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	b2d8      	uxtb	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <ssd1306_DrawPixel+0xbc>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	b25a      	sxtb	r2, r3
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b259      	sxtb	r1, r3
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	4603      	mov	r3, r0
 8001a6a:	01db      	lsls	r3, r3, #7
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b2c9      	uxtb	r1, r1
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <ssd1306_DrawPixel+0xbc>)
 8001a72:	54d1      	strb	r1, [r2, r3]
 8001a74:	e01d      	b.n	8001ab2 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	b2d8      	uxtb	r0, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	4413      	add	r3, r2
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <ssd1306_DrawPixel+0xbc>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	b25a      	sxtb	r2, r3
 8001a8a:	79bb      	ldrb	r3, [r7, #6]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	79fa      	ldrb	r2, [r7, #7]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <ssd1306_DrawPixel+0xbc>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e000      	b.n	8001ab2 <ssd1306_DrawPixel+0xae>
		return;
 8001ab0:	bf00      	nop
	}
}
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000430 	.word	0x20000430
 8001ac0:	20000030 	.word	0x20000030

08001ac4 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4604      	mov	r4, r0
 8001acc:	1d38      	adds	r0, r7, #4
 8001ace:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	793b      	ldrb	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae8:	dc06      	bgt.n	8001af8 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001aea:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001aec:	885b      	ldrh	r3, [r3, #2]
 8001aee:	461a      	mov	r2, r3
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001af4:	2b3f      	cmp	r3, #63	; 0x3f
 8001af6:	dd01      	ble.n	8001afc <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e05d      	b.n	8001bb8 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	e04c      	b.n	8001b9c <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	3b20      	subs	r3, #32
 8001b08:	7979      	ldrb	r1, [r7, #5]
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	440b      	add	r3, r1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	e034      	b.n	8001b8c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2d8      	uxtb	r0, r3
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001b42:	885b      	ldrh	r3, [r3, #2]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	7bba      	ldrb	r2, [r7, #14]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff ff57 	bl	8001a04 <ssd1306_DrawPixel>
 8001b56:	e016      	b.n	8001b86 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b2d8      	uxtb	r0, r3
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001b68:	885b      	ldrh	r3, [r3, #2]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	b2d9      	uxtb	r1, r3
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	f7ff ff3f 	bl	8001a04 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	793b      	ldrb	r3, [r7, #4]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d3c5      	bcc.n	8001b22 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d3ad      	bcc.n	8001b02 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	793b      	ldrb	r3, [r7, #4]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <ssd1306_WriteChar+0xfc>)
 8001bb4:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3724      	adds	r7, #36	; 0x24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	20000430 	.word	0x20000430

08001bc4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	1d38      	adds	r0, r7, #4
 8001bce:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bd2:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8001bd4:	e012      	b.n	8001bfc <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	7818      	ldrb	r0, [r3, #0]
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	1d3a      	adds	r2, r7, #4
 8001bde:	ca06      	ldmia	r2, {r1, r2}
 8001be0:	f7ff ff70 	bl	8001ac4 <ssd1306_WriteChar>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d002      	beq.n	8001bf6 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	e008      	b.n	8001c08 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e8      	bne.n	8001bd6 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	781b      	ldrb	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	460a      	mov	r2, r1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <ssd1306_SetCursor+0x2c>)
 8001c26:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <ssd1306_SetCursor+0x2c>)
 8001c2e:	805a      	strh	r2, [r3, #2]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000430 	.word	0x20000430

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_MspInit+0x5c>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_MspInit+0x5c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6193      	str	r3, [r2, #24]
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_MspInit+0x5c>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_MspInit+0x5c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_MspInit+0x5c>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_MspInit+0x5c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_MspInit+0x60>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_MspInit+0x60>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000

08001ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_I2C_MspInit+0x70>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d123      	bne.n	8001d0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_I2C_MspInit+0x74>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <HAL_I2C_MspInit+0x74>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_I2C_MspInit+0x74>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <HAL_I2C_MspInit+0x78>)
 8001cf0:	f7fe fb94 	bl	800041c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_I2C_MspInit+0x74>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_I2C_MspInit+0x74>)
 8001cfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_I2C_MspInit+0x74>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40005400 	.word	0x40005400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010c00 	.word	0x40010c00

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <HardFault_Handler+0x4>

08001d32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <BusFault_Handler+0x4>

08001d3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <UsageFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f7fe fa34 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <SystemInit+0x5c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <SystemInit+0x5c>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <SystemInit+0x5c>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4911      	ldr	r1, [pc, #68]	; (8001dd0 <SystemInit+0x5c>)
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <SystemInit+0x60>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <SystemInit+0x5c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <SystemInit+0x5c>)
 8001d96:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <SystemInit+0x5c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SystemInit+0x5c>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <SystemInit+0x5c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <SystemInit+0x5c>)
 8001db2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001db6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SystemInit+0x5c>)
 8001dba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dbe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SystemInit+0x64>)
 8001dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	f8ff0000 	.word	0xf8ff0000
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ddc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dde:	e003      	b.n	8001de8 <LoopCopyDataInit>

08001de0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001de2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001de4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001de6:	3104      	adds	r1, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001df0:	d3f6      	bcc.n	8001de0 <CopyDataInit>
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001df4:	e002      	b.n	8001dfc <LoopFillZerobss>

08001df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001df8:	f842 3b04 	str.w	r3, [r2], #4

08001dfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e00:	d3f9      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e02:	f7ff ffb7 	bl	8001d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f000 f80f 	bl	8001e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0a:	f7ff fc75 	bl	80016f8 <main>
  bx lr
 8001e0e:	4770      	bx	lr
  ldr r3, =_sidata
 8001e10:	08002c30 	.word	0x08002c30
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e18:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001e1c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001e20:	20000490 	.word	0x20000490

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <__libc_init_array>:
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	2500      	movs	r5, #0
 8001e2c:	4e0c      	ldr	r6, [pc, #48]	; (8001e60 <__libc_init_array+0x38>)
 8001e2e:	4c0d      	ldr	r4, [pc, #52]	; (8001e64 <__libc_init_array+0x3c>)
 8001e30:	1ba4      	subs	r4, r4, r6
 8001e32:	10a4      	asrs	r4, r4, #2
 8001e34:	42a5      	cmp	r5, r4
 8001e36:	d109      	bne.n	8001e4c <__libc_init_array+0x24>
 8001e38:	f000 f822 	bl	8001e80 <_init>
 8001e3c:	2500      	movs	r5, #0
 8001e3e:	4e0a      	ldr	r6, [pc, #40]	; (8001e68 <__libc_init_array+0x40>)
 8001e40:	4c0a      	ldr	r4, [pc, #40]	; (8001e6c <__libc_init_array+0x44>)
 8001e42:	1ba4      	subs	r4, r4, r6
 8001e44:	10a4      	asrs	r4, r4, #2
 8001e46:	42a5      	cmp	r5, r4
 8001e48:	d105      	bne.n	8001e56 <__libc_init_array+0x2e>
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
 8001e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e50:	4798      	blx	r3
 8001e52:	3501      	adds	r5, #1
 8001e54:	e7ee      	b.n	8001e34 <__libc_init_array+0xc>
 8001e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e5a:	4798      	blx	r3
 8001e5c:	3501      	adds	r5, #1
 8001e5e:	e7f2      	b.n	8001e46 <__libc_init_array+0x1e>
 8001e60:	08002c28 	.word	0x08002c28
 8001e64:	08002c28 	.word	0x08002c28
 8001e68:	08002c28 	.word	0x08002c28
 8001e6c:	08002c2c 	.word	0x08002c2c

08001e70 <memset>:
 8001e70:	4603      	mov	r3, r0
 8001e72:	4402      	add	r2, r0
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d100      	bne.n	8001e7a <memset+0xa>
 8001e78:	4770      	bx	lr
 8001e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e7e:	e7f9      	b.n	8001e74 <memset+0x4>

08001e80 <_init>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	bf00      	nop
 8001e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	469e      	mov	lr, r3
 8001e8a:	4770      	bx	lr

08001e8c <_fini>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	bf00      	nop
 8001e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e92:	bc08      	pop	{r3}
 8001e94:	469e      	mov	lr, r3
 8001e96:	4770      	bx	lr
