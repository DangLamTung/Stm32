
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080059f8  080059f8  000159f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005ae8  08005ae8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ae8  08005ae8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000078  08005b68  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005b68  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001299f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a8  00000000  00000000  00032a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00034be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  00035968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c61  00000000  00000000  00036610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a464  00000000  00000000  0004c271  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074208  00000000  00000000  000566d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca8dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  000ca958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080059dc 	.word	0x080059dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080059dc 	.word	0x080059dc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	d1ed      	bne.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f91f 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f003 ff12 	bl	8004ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f937 	bl	800131e <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f8ff 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20000000 	.word	0x20000000

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000004 	.word	0x20000004
 800110c:	20000094 	.word	0x20000094

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000094 	.word	0x20000094

08001124 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	; (80011b4 <NVIC_EnableIRQ+0x2c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da0b      	bge.n	80011e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <NVIC_SetPriority+0x4c>)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	3b04      	subs	r3, #4
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e2:	e009      	b.n	80011f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <NVIC_SetPriority+0x50>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000e100 	.word	0xe000e100

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff31 	bl	8001124 <NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff46 	bl	800116c <NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b08b      	sub	sp, #44	; 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 800135a:	e127      	b.n	80015ac <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8116 	bne.w	80015a6 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b12      	cmp	r3, #18
 8001380:	d034      	beq.n	80013ec <HAL_GPIO_Init+0xb4>
 8001382:	2b12      	cmp	r3, #18
 8001384:	d80d      	bhi.n	80013a2 <HAL_GPIO_Init+0x6a>
 8001386:	2b02      	cmp	r3, #2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0xaa>
 800138a:	2b02      	cmp	r3, #2
 800138c:	d804      	bhi.n	8001398 <HAL_GPIO_Init+0x60>
 800138e:	2b00      	cmp	r3, #0
 8001390:	d031      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
 8001392:	2b01      	cmp	r3, #1
 8001394:	d01c      	beq.n	80013d0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001396:	e048      	b.n	800142a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001398:	2b03      	cmp	r3, #3
 800139a:	d043      	beq.n	8001424 <HAL_GPIO_Init+0xec>
 800139c:	2b11      	cmp	r3, #17
 800139e:	d01b      	beq.n	80013d8 <HAL_GPIO_Init+0xa0>
          break;
 80013a0:	e043      	b.n	800142a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <HAL_GPIO_Init+0x288>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d026      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
 80013a8:	4a85      	ldr	r2, [pc, #532]	; (80015c0 <HAL_GPIO_Init+0x288>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d806      	bhi.n	80013bc <HAL_GPIO_Init+0x84>
 80013ae:	4a85      	ldr	r2, [pc, #532]	; (80015c4 <HAL_GPIO_Init+0x28c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d020      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
 80013b4:	4a84      	ldr	r2, [pc, #528]	; (80015c8 <HAL_GPIO_Init+0x290>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01d      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
          break;
 80013ba:	e036      	b.n	800142a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80013bc:	4a83      	ldr	r2, [pc, #524]	; (80015cc <HAL_GPIO_Init+0x294>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
 80013c2:	4a83      	ldr	r2, [pc, #524]	; (80015d0 <HAL_GPIO_Init+0x298>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d016      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
 80013c8:	4a82      	ldr	r2, [pc, #520]	; (80015d4 <HAL_GPIO_Init+0x29c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0xbe>
          break;
 80013ce:	e02c      	b.n	800142a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e028      	b.n	800142a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	3304      	adds	r3, #4
 80013de:	623b      	str	r3, [r7, #32]
          break;
 80013e0:	e023      	b.n	800142a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	3308      	adds	r3, #8
 80013e8:	623b      	str	r3, [r7, #32]
          break;
 80013ea:	e01e      	b.n	800142a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	330c      	adds	r3, #12
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e019      	b.n	800142a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013fe:	2304      	movs	r3, #4
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e012      	b.n	800142a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800140c:	2308      	movs	r3, #8
 800140e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	611a      	str	r2, [r3, #16]
          break;
 8001416:	e008      	b.n	800142a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001418:	2308      	movs	r3, #8
 800141a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	615a      	str	r2, [r3, #20]
          break;
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2bff      	cmp	r3, #255	; 0xff
 800142e:	d801      	bhi.n	8001434 <HAL_GPIO_Init+0xfc>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	e001      	b.n	8001438 <HAL_GPIO_Init+0x100>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3304      	adds	r3, #4
 8001438:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d802      	bhi.n	8001446 <HAL_GPIO_Init+0x10e>
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x114>
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	3b08      	subs	r3, #8
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	210f      	movs	r1, #15
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	6a39      	ldr	r1, [r7, #32]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8096 	beq.w	80015a6 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a56      	ldr	r2, [pc, #344]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001492:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_GPIO_Init+0x2a4>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4013      	ands	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a49      	ldr	r2, [pc, #292]	; (80015e0 <HAL_GPIO_Init+0x2a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x1ae>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <HAL_GPIO_Init+0x2ac>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x1aa>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a47      	ldr	r2, [pc, #284]	; (80015e8 <HAL_GPIO_Init+0x2b0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x1a6>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a46      	ldr	r2, [pc, #280]	; (80015ec <HAL_GPIO_Init+0x2b4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x1a2>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x1b0>
 80014da:	2304      	movs	r3, #4
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x1b0>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x1b0>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x1b0>
 80014e6:	2300      	movs	r3, #0
 80014e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80014f8:	4938      	ldr	r1, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x2a4>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
 800151e:	e006      	b.n	800152e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	43db      	mvns	r3, r3
 8001528:	4931      	ldr	r1, [pc, #196]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800152a:	4013      	ands	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	492c      	ldr	r1, [pc, #176]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
 8001546:	e006      	b.n	8001556 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	43db      	mvns	r3, r3
 8001550:	4927      	ldr	r1, [pc, #156]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001552:	4013      	ands	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	4922      	ldr	r1, [pc, #136]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	43db      	mvns	r3, r3
 8001578:	491d      	ldr	r1, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800157a:	4013      	ands	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4918      	ldr	r1, [pc, #96]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4913      	ldr	r1, [pc, #76]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	3301      	adds	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f67f aed4 	bls.w	800135c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	372c      	adds	r7, #44	; 0x2c
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	10210000 	.word	0x10210000
 80015c4:	10110000 	.word	0x10110000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10310000 	.word	0x10310000
 80015d0:	10320000 	.word	0x10320000
 80015d4:	10220000 	.word	0x10220000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40010800 	.word	0x40010800
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40011400 	.word	0x40011400
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	611a      	str	r2, [r3, #16]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0e7      	b.n	800180e <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f003 fc58 	bl	8004f08 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2224      	movs	r2, #36	; 0x24
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001670:	f001 fc24 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8001674:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a67      	ldr	r2, [pc, #412]	; (8001818 <HAL_I2C_Init+0x1f4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d807      	bhi.n	8001690 <HAL_I2C_Init+0x6c>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4a66      	ldr	r2, [pc, #408]	; (800181c <HAL_I2C_Init+0x1f8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	bf94      	ite	ls
 8001688:	2301      	movls	r3, #1
 800168a:	2300      	movhi	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	e006      	b.n	800169e <HAL_I2C_Init+0x7a>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_I2C_Init+0x1fc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	bf94      	ite	ls
 8001698:	2301      	movls	r3, #1
 800169a:	2300      	movhi	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0b3      	b.n	800180e <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4a5e      	ldr	r2, [pc, #376]	; (8001824 <HAL_I2C_Init+0x200>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	0c9b      	lsrs	r3, r3, #18
 80016b0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a56      	ldr	r2, [pc, #344]	; (8001818 <HAL_I2C_Init+0x1f4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d802      	bhi.n	80016ca <HAL_I2C_Init+0xa6>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	e009      	b.n	80016de <HAL_I2C_Init+0xba>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	4a54      	ldr	r2, [pc, #336]	; (8001828 <HAL_I2C_Init+0x204>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	3301      	adds	r3, #1
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_I2C_Init+0x1f4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d80d      	bhi.n	800170a <HAL_I2C_Init+0xe6>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf38      	it	cc
 8001706:	2304      	movcc	r3, #4
 8001708:	e04f      	b.n	80017aa <HAL_I2C_Init+0x186>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d111      	bne.n	8001736 <HAL_I2C_Init+0x112>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1e59      	subs	r1, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	fbb1 f3f3 	udiv	r3, r1, r3
 8001724:	3301      	adds	r3, #1
 8001726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	e012      	b.n	800175c <HAL_I2C_Init+0x138>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1e59      	subs	r1, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	fbb1 f3f3 	udiv	r3, r1, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf0c      	ite	eq
 8001756:	2301      	moveq	r3, #1
 8001758:	2300      	movne	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_Init+0x140>
 8001760:	2301      	movs	r3, #1
 8001762:	e022      	b.n	80017aa <HAL_I2C_Init+0x186>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10e      	bne.n	800178a <HAL_I2C_Init+0x166>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1e59      	subs	r1, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	fbb1 f3f3 	udiv	r3, r1, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001788:	e00f      	b.n	80017aa <HAL_I2C_Init+0x186>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1e59      	subs	r1, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009a      	lsls	r2, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69d9      	ldr	r1, [r3, #28]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6919      	ldr	r1, [r3, #16]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6959      	ldr	r1, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	000186a0 	.word	0x000186a0
 800181c:	001e847f 	.word	0x001e847f
 8001820:	003d08ff 	.word	0x003d08ff
 8001824:	431bde83 	.word	0x431bde83
 8001828:	10624dd3 	.word	0x10624dd3

0800182c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
 800183c:	4613      	mov	r3, r2
 800183e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001844:	f7ff fc64 	bl	8001110 <HAL_GetTick>
 8001848:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b20      	cmp	r3, #32
 8001854:	f040 80ee 	bne.w	8001a34 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2319      	movs	r3, #25
 800185e:	2201      	movs	r2, #1
 8001860:	4977      	ldr	r1, [pc, #476]	; (8001a40 <HAL_I2C_Master_Transmit+0x214>)
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fda4 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	e0e1      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_I2C_Master_Transmit+0x54>
 800187c:	2302      	movs	r3, #2
 800187e:	e0da      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d007      	beq.n	80018a6 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2221      	movs	r2, #33	; 0x21
 80018ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2210      	movs	r2, #16
 80018c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	893a      	ldrh	r2, [r7, #8]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a5a      	ldr	r2, [pc, #360]	; (8001a44 <HAL_I2C_Master_Transmit+0x218>)
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018e8:	8979      	ldrh	r1, [r7, #10]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fc14 	bl	800211c <I2C_MasterRequestWrite>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00f      	beq.n	800191a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d105      	bne.n	800190e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e093      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e08d      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001930:	e066      	b.n	8001a00 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	6a39      	ldr	r1, [r7, #32]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fdf9 	bl	800252e <I2C_WaitOnTXEFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00f      	beq.n	8001962 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	2b04      	cmp	r3, #4
 8001948:	d109      	bne.n	800195e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001958:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06b      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e069      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	6251      	str	r1, [r2, #36]	; 0x24
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b04      	cmp	r3, #4
 800199a:	d119      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x1a4>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d015      	beq.n	80019d0 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	1c59      	adds	r1, r3, #1
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	6251      	str	r1, [r2, #36]	; 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	6a39      	ldr	r1, [r7, #32]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fde7 	bl	80025a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00f      	beq.n	8001a00 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d109      	bne.n	80019fc <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01c      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e01a      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d194      	bne.n	8001932 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001a34:	2302      	movs	r3, #2
  }
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	00100002 	.word	0x00100002
 8001a44:	ffff0000 	.word	0xffff0000

08001a48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	460b      	mov	r3, r1
 8001a56:	817b      	strh	r3, [r7, #10]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a60:	f7ff fb56 	bl	8001110 <HAL_GetTick>
 8001a64:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	f040 821d 	bne.w	8001eae <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4987      	ldr	r1, [pc, #540]	; (8001c9c <HAL_I2C_Master_Receive+0x254>)
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 fc96 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e210      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_I2C_Master_Receive+0x54>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e209      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d007      	beq.n	8001ac2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2222      	movs	r2, #34	; 0x22
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2210      	movs	r2, #16
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	893a      	ldrh	r2, [r7, #8]
 8001af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <HAL_I2C_Master_Receive+0x258>)
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fb88 	bl	8002220 <I2C_MasterRequestRead>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00f      	beq.n	8001b36 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d105      	bne.n	8001b2a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e1c2      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1bc      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d113      	bne.n	8001b66 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e190      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11d      	bne.n	8001baa <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba6:	b662      	cpsie	i
 8001ba8:	e16e      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d11d      	bne.n	8001bee <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bea:	b662      	cpsie	i
 8001bec:	e14c      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001c14:	e138      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	f200 80ef 	bhi.w	8001dfe <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d127      	bne.n	8001c78 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 fcf8 	bl	8002622 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e135      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e133      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6918      	ldr	r0, [r3, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	1c59      	adds	r1, r3, #1
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	6251      	str	r1, [r2, #36]	; 0x24
 8001c58:	b2c2      	uxtb	r2, r0
 8001c5a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c76:	e107      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d14c      	bne.n	8001d1a <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	2200      	movs	r2, #0
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <HAL_I2C_Master_Receive+0x25c>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fb90 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e10a      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
 8001c9a:	bf00      	nop
 8001c9c:	00100002 	.word	0x00100002
 8001ca0:	ffff0000 	.word	0xffff0000
 8001ca4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6918      	ldr	r0, [r3, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6251      	str	r1, [r2, #36]	; 0x24
 8001cca:	b2c2      	uxtb	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ce8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6918      	ldr	r0, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	1c59      	adds	r1, r3, #1
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	6251      	str	r1, [r2, #36]	; 0x24
 8001cfa:	b2c2      	uxtb	r2, r0
 8001cfc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d18:	e0b6      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	2200      	movs	r2, #0
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_I2C_Master_Receive+0x470>)
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fb43 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0bd      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6918      	ldr	r0, [r3, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c59      	adds	r1, r3, #1
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6251      	str	r1, [r2, #36]	; 0x24
 8001d56:	b2c2      	uxtb	r2, r0
 8001d58:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	494e      	ldr	r1, [pc, #312]	; (8001eb8 <HAL_I2C_Master_Receive+0x470>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fb16 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e090      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6918      	ldr	r0, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	6251      	str	r1, [r2, #36]	; 0x24
 8001dae:	b2c2      	uxtb	r2, r0
 8001db0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dcc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6918      	ldr	r0, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6251      	str	r1, [r2, #36]	; 0x24
 8001dde:	b2c2      	uxtb	r2, r0
 8001de0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dfc:	e044      	b.n	8001e88 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fc0d 	bl	8002622 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e04a      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e048      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6918      	ldr	r0, [r3, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	1c59      	adds	r1, r3, #1
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	6251      	str	r1, [r2, #36]	; 0x24
 8001e2e:	b2c2      	uxtb	r2, r0
 8001e30:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d116      	bne.n	8001e88 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6918      	ldr	r0, [r3, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c59      	adds	r1, r3, #1
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	6251      	str	r1, [r2, #36]	; 0x24
 8001e6a:	b2c2      	uxtb	r2, r0
 8001e6c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f47f aec2 	bne.w	8001c16 <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
  }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	00010004 	.word	0x00010004

08001ebc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee0:	f7ff f916 	bl	8001110 <HAL_GetTick>
 8001ee4:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	f040 810b 	bne.w	800210a <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2319      	movs	r3, #25
 8001efa:	2201      	movs	r2, #1
 8001efc:	4985      	ldr	r1, [pc, #532]	; (8002114 <HAL_I2C_IsDeviceReady+0x258>)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fa56 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0fe      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2C_IsDeviceReady+0x60>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e0f7      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d007      	beq.n	8001f42 <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2224      	movs	r2, #36	; 0x24
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a6d      	ldr	r2, [pc, #436]	; (8002118 <HAL_I2C_IsDeviceReady+0x25c>)
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa14 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0bc      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f8b5 	bl	8001110 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	bf0c      	ite	eq
 8001fb6:	2301      	moveq	r3, #1
 8001fb8:	2300      	movne	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001fe0:	e02a      	b.n	8002038 <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_I2C_IsDeviceReady+0x13c>
 8001fe8:	f7ff f892 	bl	8001110 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d203      	bcs.n	8002000 <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	22a0      	movs	r2, #160	; 0xa0
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_I2C_IsDeviceReady+0x18e>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_I2C_IsDeviceReady+0x18e>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2ba0      	cmp	r3, #160	; 0xa0
 8002048:	d1cb      	bne.n	8001fe2 <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d129      	bne.n	80020b4 <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2319      	movs	r3, #25
 800208c:	2201      	movs	r2, #1
 800208e:	4921      	ldr	r1, [pc, #132]	; (8002114 <HAL_I2C_IsDeviceReady+0x258>)
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f98d 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e035      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e02b      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020cc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2319      	movs	r3, #25
 80020d4:	2201      	movs	r2, #1
 80020d6:	490f      	ldr	r1, [pc, #60]	; (8002114 <HAL_I2C_IsDeviceReady+0x258>)
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f969 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e011      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	617a      	str	r2, [r7, #20]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f63f af38 	bhi.w	8001f66 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	00100002 	.word	0x00100002
 8002118:	ffff0000 	.word	0xffff0000

0800211c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d006      	beq.n	8002146 <I2C_MasterRequestWrite+0x2a>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d003      	beq.n	8002146 <I2C_MasterRequestWrite+0x2a>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002144:	d108      	bne.n	8002158 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e00b      	b.n	8002170 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	2b12      	cmp	r3, #18
 800215e:	d107      	bne.n	8002170 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f917 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e041      	b.n	8002210 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002194:	d108      	bne.n	80021a8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	e021      	b.n	80021ec <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	11db      	asrs	r3, r3, #7
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0306 	and.w	r3, r3, #6
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f063 030f 	orn	r3, r3, #15
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4914      	ldr	r1, [pc, #80]	; (8002218 <I2C_MasterRequestWrite+0xfc>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f943 	bl	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d101      	bne.n	80021de <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e018      	b.n	8002210 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e016      	b.n	8002210 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	490a      	ldr	r1, [pc, #40]	; (800221c <I2C_MasterRequestWrite+0x100>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f92d 	bl	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b04      	cmp	r3, #4
 8002204:	d101      	bne.n	800220a <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e002      	b.n	8002210 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e000      	b.n	8002210 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	00010008 	.word	0x00010008
 800221c:	00010002 	.word	0x00010002

08002220 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d006      	beq.n	800225a <I2C_MasterRequestRead+0x3a>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d003      	beq.n	800225a <I2C_MasterRequestRead+0x3a>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002258:	d108      	bne.n	800226c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e00b      	b.n	8002284 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	2b11      	cmp	r3, #17
 8002272:	d107      	bne.n	8002284 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f88d 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e07f      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022a8:	d108      	bne.n	80022bc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	e05f      	b.n	800237c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022bc:	897b      	ldrh	r3, [r7, #10]
 80022be:	11db      	asrs	r3, r3, #7
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 0306 	and.w	r3, r3, #6
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f063 030f 	orn	r3, r3, #15
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4933      	ldr	r1, [pc, #204]	; (80023a8 <I2C_MasterRequestRead+0x188>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8b9 	bl	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d101      	bne.n	80022f2 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e056      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e054      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4929      	ldr	r1, [pc, #164]	; (80023ac <I2C_MasterRequestRead+0x18c>)
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f8a3 	bl	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b04      	cmp	r3, #4
 8002318:	d101      	bne.n	800231e <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e040      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e03e      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002346:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f82b 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e01d      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	11db      	asrs	r3, r3, #7
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 0306 	and.w	r3, r3, #6
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f063 030e 	orn	r3, r3, #14
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	490a      	ldr	r1, [pc, #40]	; (80023ac <I2C_MasterRequestRead+0x18c>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f865 	bl	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d101      	bne.n	800239a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e002      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e000      	b.n	80023a0 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00010008 	.word	0x00010008
 80023ac:	00010002 	.word	0x00010002

080023b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80023c0:	e01f      	b.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d01b      	beq.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023d0:	f7fe fe9e 	bl	8001110 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d210      	bcs.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e023      	b.n	800244a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d10d      	bne.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x78>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	e00c      	b.n	8002442 <I2C_WaitOnFlagUntilTimeout+0x92>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	429a      	cmp	r2, r3
 8002446:	d0bc      	beq.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002460:	e040      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002470:	d11c      	bne.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800248a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2204      	movs	r2, #4
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e03c      	b.n	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d017      	beq.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80024ba:	f7fe fe29 	bl	8001110 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d20c      	bcs.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e020      	b.n	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10c      	bne.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e00b      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d19e      	bne.n	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253a:	e029      	b.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f8ba 	bl	80026b6 <I2C_IsAcknowledgeFailed>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e029      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d01d      	beq.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800255a:	f7fe fdd9 	bl	8001110 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d212      	bcs.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b80      	cmp	r3, #128	; 0x80
 800259c:	d1ce      	bne.n	800253c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b4:	e029      	b.n	800260a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f87d 	bl	80026b6 <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e029      	b.n	800261a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d01d      	beq.n	800260a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025d4:	f7fe fd9c 	bl	8001110 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d212      	bcs.n	800260a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e007      	b.n	800261a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d1ce      	bne.n	80025b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800262e:	e036      	b.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b10      	cmp	r3, #16
 800263c:	d114      	bne.n	8002668 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0210 	mvn.w	r2, #16
 8002646:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e022      	b.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800266e:	f7fe fd4f 	bl	8001110 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d20f      	bcs.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e007      	b.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d1c1      	bne.n	8002630 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d114      	bne.n	80026f8 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d6:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2204      	movs	r2, #4
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8087 	beq.w	800282c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800271e:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d00c      	beq.n	8002744 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800272a:	4b8f      	ldr	r3, [pc, #572]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d112      	bne.n	800275c <HAL_RCC_OscConfig+0x58>
 8002736:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d10b      	bne.n	800275c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d06c      	beq.n	800282a <HAL_RCC_OscConfig+0x126>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d168      	bne.n	800282a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e22d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x70>
 8002766:	4b80      	ldr	r3, [pc, #512]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7f      	ldr	r2, [pc, #508]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e02e      	b.n	80027d2 <HAL_RCC_OscConfig+0xce>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x92>
 800277c:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a79      	ldr	r2, [pc, #484]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b77      	ldr	r3, [pc, #476]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a76      	ldr	r2, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	e01d      	b.n	80027d2 <HAL_RCC_OscConfig+0xce>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0xb6>
 80027a0:	4b71      	ldr	r3, [pc, #452]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a70      	ldr	r2, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b6e      	ldr	r3, [pc, #440]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0xce>
 80027ba:	4b6b      	ldr	r3, [pc, #428]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a67      	ldr	r2, [pc, #412]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d013      	beq.n	8002802 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe fc99 	bl	8001110 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e2:	f7fe fc95 	bl	8001110 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1e1      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f4:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0xde>
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fc85 	bl	8001110 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280a:	f7fe fc81 	bl	8001110 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1cd      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281c:	4b52      	ldr	r3, [pc, #328]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x106>
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d063      	beq.n	8002900 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d11c      	bne.n	800288a <HAL_RCC_OscConfig+0x186>
 8002850:	4b45      	ldr	r3, [pc, #276]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285c:	4b42      	ldr	r3, [pc, #264]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_OscConfig+0x170>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e1a1      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	4b3c      	ldr	r3, [pc, #240]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4939      	ldr	r1, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002888:	e03a      	b.n	8002900 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d020      	beq.n	80028d4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x268>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fc3a 	bl	8001110 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe fc36 	bl	8001110 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e182      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4926      	ldr	r1, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
 80028d2:	e015      	b.n	8002900 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x268>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fc19 	bl	8001110 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fc15 	bl	8001110 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e161      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d039      	beq.n	8002980 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d019      	beq.n	8002948 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7fe fbf9 	bl	8001110 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fbf5 	bl	8001110 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e141      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x264>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f000 fae3 	bl	8002f0c <RCC_Delay>
 8002946:	e01b      	b.n	8002980 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe fbdf 	bl	8001110 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e00e      	b.n	8002974 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe fbdb 	bl	8001110 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d907      	bls.n	8002974 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e127      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
 8002968:	40021000 	.word	0x40021000
 800296c:	42420000 	.word	0x42420000
 8002970:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	4b92      	ldr	r3, [pc, #584]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ea      	bne.n	8002956 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a6 	beq.w	8002ada <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a87      	ldr	r2, [pc, #540]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	61d3      	str	r3, [r2, #28]
 80029aa:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCC_OscConfig+0x4c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x4c0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7e      	ldr	r2, [pc, #504]	; (8002bc4 <HAL_RCC_OscConfig+0x4c0>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fb9d 	bl	8001110 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7fe fb99 	bl	8001110 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0e5      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <HAL_RCC_OscConfig+0x4c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x30a>
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6213      	str	r3, [r2, #32]
 8002a0c:	e02d      	b.n	8002a6a <HAL_RCC_OscConfig+0x366>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x32c>
 8002a16:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a66      	ldr	r2, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	e01c      	b.n	8002a6a <HAL_RCC_OscConfig+0x366>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x34e>
 8002a38:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a60      	ldr	r2, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6213      	str	r3, [r2, #32]
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a5d      	ldr	r2, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x366>
 8002a52:	4b5b      	ldr	r3, [pc, #364]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4a5a      	ldr	r2, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6213      	str	r3, [r2, #32]
 8002a5e:	4b58      	ldr	r3, [pc, #352]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fb4d 	bl	8001110 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fb49 	bl	8001110 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e093      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ee      	beq.n	8002a7a <HAL_RCC_OscConfig+0x376>
 8002a9c:	e014      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fb37 	bl	8001110 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fb33 	bl	8001110 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e07d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d069      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d061      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d146      	bne.n	8002b84 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fb08 	bl	8001110 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fb04 	bl	8001110 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e050      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d108      	bne.n	8002b3e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4921      	ldr	r1, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a19      	ldr	r1, [r3, #32]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	491b      	ldr	r1, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fad8 	bl	8001110 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fad4 	bl	8001110 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e020      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x460>
 8002b82:	e018      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fac1 	bl	8001110 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fabd 	bl	8001110 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e009      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_OscConfig+0x4bc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x48e>
 8002bb0:	e001      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	42420060 	.word	0x42420060

08002bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002bda:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d910      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b7a      	ldr	r3, [pc, #488]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	4978      	ldr	r1, [pc, #480]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0e0      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d020      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a6c      	ldr	r2, [pc, #432]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c28:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c2c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c40:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c44:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4961      	ldr	r1, [pc, #388]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d06a      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6c:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d115      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0a7      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c84:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e09b      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e093      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4949      	ldr	r1, [pc, #292]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fa2b 	bl	8001110 <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	f7fe fa23 	bl	8001110 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e077      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xfa>
 8002ce8:	e027      	b.n	8002d3a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d11d      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7fe fa0c 	bl	8001110 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e060      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d1ee      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x128>
 8002d16:	e010      	b.n	8002d3a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fe f9fa 	bl	8001110 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04e      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ee      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d210      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0207 	bic.w	r2, r3, #7
 8002d50:	4920      	ldr	r1, [pc, #128]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e030      	b.n	8002dcc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4915      	ldr	r1, [pc, #84]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	490d      	ldr	r1, [pc, #52]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da8:	f000 f81c 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002dac:	4601      	mov	r1, r0
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_RCC_ClockConfig+0x210>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	fa21 f303 	lsr.w	r3, r1, r3
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_RCC_ClockConfig+0x214>)
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fe f961 	bl	800108c <HAL_InitTick>
  
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08005a88 	.word	0x08005a88
 8002de0:	2000000c 	.word	0x2000000c

08002de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b490      	push	{r4, r7}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dec:	1d3c      	adds	r4, r7, #4
 8002dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x40>
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x46>
 8002e22:	e02d      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e26:	623b      	str	r3, [r7, #32]
      break;
 8002e28:	e02d      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	0c9b      	lsrs	r3, r3, #18
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e36:	4413      	add	r3, r2
 8002e38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c5b      	lsrs	r3, r3, #17
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e56:	4413      	add	r3, r2
 8002e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e5c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e62:	fb02 f203 	mul.w	r2, r2, r3
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	e004      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	623b      	str	r3, [r7, #32]
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e82:	623b      	str	r3, [r7, #32]
      break;
 8002e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e86:	6a3b      	ldr	r3, [r7, #32]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc90      	pop	{r4, r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	080059f8 	.word	0x080059f8
 8002e98:	08005a08 	.word	0x08005a08
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	007a1200 	.word	0x007a1200
 8002ea4:	003d0900 	.word	0x003d0900

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	2000000c 	.word	0x2000000c

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec0:	f7ff fff2 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4601      	mov	r1, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4a03      	ldr	r2, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08005a98 	.word	0x08005a98

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002eec:	4601      	mov	r1, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0adb      	lsrs	r3, r3, #11
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08005a98 	.word	0x08005a98

08002f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <RCC_Delay+0x34>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <RCC_Delay+0x38>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0a5b      	lsrs	r3, r3, #9
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002f28:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	60fa      	str	r2, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <RCC_Delay+0x1c>
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	10624dd3 	.word	0x10624dd3

08002f48 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e01d      	b.n	8002f96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f002 f808 	bl	8004f84 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 fbda 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e01d      	b.n	8003020 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 ffe9 	bl	8004fd0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f000 fb95 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe2b 	bl	8003c96 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_TIM_PWM_Start+0x4c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d107      	bne.n	800305a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40012c00 	.word	0x40012c00

08003078 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e081      	b.n	800319c <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f001 ffab 	bl	8005008 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0207 	bic.w	r2, r2, #7
 80030c8:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 fb33 	bl	8003740 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4313      	orrs	r3, r2
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003120:	f023 030c 	bic.w	r3, r3, #12
 8003124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800312c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	4313      	orrs	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	011a      	lsls	r2, r3, #4
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	031b      	lsls	r3, r3, #12
 8003150:	4313      	orrs	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4313      	orrs	r3, r2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0202 	mvn.w	r2, #2
 80031d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa8e 	bl	8003708 <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa81 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fa90 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0204 	mvn.w	r2, #4
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa64 	bl	8003708 <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa57 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fa66 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b08      	cmp	r3, #8
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0208 	mvn.w	r2, #8
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2204      	movs	r2, #4
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa3a 	bl	8003708 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa2d 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa3c 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0210 	mvn.w	r2, #16
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2208      	movs	r2, #8
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa10 	bl	8003708 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa03 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa12 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0201 	mvn.w	r2, #1
 8003320:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 ffe4 	bl	80042f0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b80      	cmp	r3, #128	; 0x80
 8003342:	d107      	bne.n	8003354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800334c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fd10 	bl	8003d74 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d10e      	bne.n	8003380 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d107      	bne.n	8003380 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003378:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9d6 	bl	800372c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d10e      	bne.n	80033ac <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b20      	cmp	r3, #32
 800339a:	d107      	bne.n	80033ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0220 	mvn.w	r2, #32
 80033a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fcdb 	bl	8003d62 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0b4      	b.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	f200 809f 	bhi.w	8003524 <HAL_TIM_PWM_ConfigChannel+0x170>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003525 	.word	0x08003525
 80033f4:	08003525 	.word	0x08003525
 80033f8:	08003525 	.word	0x08003525
 80033fc:	08003461 	.word	0x08003461
 8003400:	08003525 	.word	0x08003525
 8003404:	08003525 	.word	0x08003525
 8003408:	08003525 	.word	0x08003525
 800340c:	080034a3 	.word	0x080034a3
 8003410:	08003525 	.word	0x08003525
 8003414:	08003525 	.word	0x08003525
 8003418:	08003525 	.word	0x08003525
 800341c:	080034e3 	.word	0x080034e3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f9f0 	bl	800380c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0208 	orr.w	r2, r2, #8
 800343a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6999      	ldr	r1, [r3, #24]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	619a      	str	r2, [r3, #24]
    }
    break;
 800345e:	e062      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fa3c 	bl	80038e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6999      	ldr	r1, [r3, #24]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	619a      	str	r2, [r3, #24]
    }
    break;
 80034a0:	e041      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fa8b 	bl	80039c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0208 	orr.w	r2, r2, #8
 80034bc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0204 	bic.w	r2, r2, #4
 80034cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69d9      	ldr	r1, [r3, #28]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
    }
    break;
 80034e0:	e021      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fadb 	bl	8003aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	61da      	str	r2, [r3, #28]
    }
    break;
 8003522:	e000      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8003524:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e0c8      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x1ae>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d077      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x144>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d80e      	bhi.n	80035b6 <HAL_TIM_ConfigClockSource+0x76>
 8003598:	2b10      	cmp	r3, #16
 800359a:	f000 808a 	beq.w	80036b2 <HAL_TIM_ConfigClockSource+0x172>
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d802      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x68>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d07e      	beq.n	80036a4 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80035a6:	e099      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	f000 8089 	beq.w	80036c0 <HAL_TIM_ConfigClockSource+0x180>
 80035ae:	2b30      	cmp	r3, #48	; 0x30
 80035b0:	f000 808d 	beq.w	80036ce <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80035b4:	e092      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80035b6:	2b70      	cmp	r3, #112	; 0x70
 80035b8:	d016      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0xa8>
 80035ba:	2b70      	cmp	r3, #112	; 0x70
 80035bc:	d804      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x88>
 80035be:	2b50      	cmp	r3, #80	; 0x50
 80035c0:	d040      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0x104>
 80035c2:	2b60      	cmp	r3, #96	; 0x60
 80035c4:	d04e      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80035c6:	e089      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x96>
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d024      	beq.n	800361e <HAL_TIM_ConfigClockSource+0xde>
    break;
 80035d4:	e082      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0207 	bic.w	r2, r2, #7
 80035e4:	609a      	str	r2, [r3, #8]
    break;
 80035e6:	e079      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f000 fb2c 	bl	8003c54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800360a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003612:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
    break;
 800361c:	e05e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f000 fb11 	bl	8003c54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003640:	609a      	str	r2, [r3, #8]
    break;
 8003642:	e04b      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	461a      	mov	r2, r3
 8003652:	f000 fa7b 	bl	8003b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2150      	movs	r1, #80	; 0x50
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fada 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 8003662:	e03b      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	461a      	mov	r2, r3
 8003672:	f000 fa9d 	bl	8003bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2160      	movs	r1, #96	; 0x60
 800367c:	4618      	mov	r0, r3
 800367e:	f000 faca 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 8003682:	e02b      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	461a      	mov	r2, r3
 8003692:	f000 fa5b 	bl	8003b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	4618      	mov	r0, r3
 800369e:	f000 faba 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 80036a2:	e01b      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fab3 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 80036b0:	e014      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2110      	movs	r1, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 faac 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 80036be:	e00d      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2120      	movs	r1, #32
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 faa5 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 80036cc:	e006      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2130      	movs	r1, #48	; 0x30
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa9e 	bl	8003c16 <TIM_ITRx_SetConfig>
    break;
 80036da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x34>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x34>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a27      	ldr	r2, [pc, #156]	; (8003804 <TIM_Base_SetConfig+0xc4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x34>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <TIM_Base_SetConfig+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0x66>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0x66>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1a      	ldr	r2, [pc, #104]	; (8003804 <TIM_Base_SetConfig+0xc4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0x66>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <TIM_Base_SetConfig+0xc8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037be:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a07      	ldr	r2, [pc, #28]	; (8003800 <TIM_Base_SetConfig+0xc0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	615a      	str	r2, [r3, #20]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800

0800380c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0201 	bic.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <TIM_OC1_SetConfig+0xd4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10c      	bne.n	800388e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0308 	bic.w	r3, r3, #8
 800387a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <TIM_OC1_SetConfig+0xd4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d111      	bne.n	80038ba <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	621a      	str	r2, [r3, #32]
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40012c00 	.word	0x40012c00

080038e4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f023 0210 	bic.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0320 	bic.w	r3, r3, #32
 800393a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <TIM_OC2_SetConfig+0xdc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10d      	bne.n	800396c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396a:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <TIM_OC2_SetConfig+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d113      	bne.n	800399c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	40012c00 	.word	0x40012c00

080039c4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <TIM_OC3_SetConfig+0xdc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <TIM_OC3_SetConfig+0xdc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <TIM_OC4_SetConfig+0xa4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d109      	bne.n	8003b24 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	019b      	lsls	r3, r3, #6
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00

08003b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f023 030a 	bic.w	r3, r3, #10
 8003b90:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 0210 	bic.w	r2, r3, #16
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	031b      	lsls	r3, r3, #12
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	621a      	str	r2, [r3, #32]
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	f043 0307 	orr.w	r3, r3, #7
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	609a      	str	r2, [r3, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	401a      	ands	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e032      	b.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d10:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d32:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e03f      	b.n	8003e18 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f001 f999 	bl	80050e4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2224      	movs	r2, #36	; 0x24
 8003db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc8:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f90c 	bl	8003fe8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dee:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfe:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 8083 	bne.w	8003f48 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_UART_Transmit+0x2e>
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07b      	b.n	8003f4a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Transmit+0x40>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e074      	b.n	8003f4a <HAL_UART_Transmit+0x12a>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2221      	movs	r2, #33	; 0x21
 8003e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e76:	f7fd f94b 	bl	8001110 <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003e88:	e042      	b.n	8003f10 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d122      	bne.n	8003ee8 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f850 	bl	8003f52 <UART_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e046      	b.n	8003f4a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ece:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3302      	adds	r3, #2
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	e017      	b.n	8003f10 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	e013      	b.n	8003f10 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f82d 	bl	8003f52 <UART_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e023      	b.n	8003f4a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	60ba      	str	r2, [r7, #8]
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1b7      	bne.n	8003e8a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f814 	bl	8003f52 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e00a      	b.n	8003f4a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003f62:	e02c      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d028      	beq.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f72:	f7fd f8cd 	bl	8001110 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d21d      	bcs.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e00f      	b.n	8003fde <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d0c3      	beq.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800402a:	f023 030c 	bic.w	r3, r3, #12
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	430b      	orrs	r3, r1
 8004036:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6f      	ldr	r2, [pc, #444]	; (8004210 <UART_SetConfig+0x228>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d16b      	bne.n	8004130 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004058:	f7fe ff44 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 800405c:	4602      	mov	r2, r0
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	4a68      	ldr	r2, [pc, #416]	; (8004214 <UART_SetConfig+0x22c>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	011c      	lsls	r4, r3, #4
 800407c:	f7fe ff32 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8004080:	4602      	mov	r2, r0
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	fbb2 f5f3 	udiv	r5, r2, r3
 8004096:	f7fe ff25 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 800409a:	4602      	mov	r2, r0
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	4a58      	ldr	r2, [pc, #352]	; (8004214 <UART_SetConfig+0x22c>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2264      	movs	r2, #100	; 0x64
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	1aeb      	subs	r3, r5, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a53      	ldr	r2, [pc, #332]	; (8004214 <UART_SetConfig+0x22c>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d0:	441c      	add	r4, r3
 80040d2:	f7fe ff07 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009a      	lsls	r2, r3, #2
 80040e0:	441a      	add	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80040ec:	f7fe fefa 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009a      	lsls	r2, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	4a43      	ldr	r2, [pc, #268]	; (8004214 <UART_SetConfig+0x22c>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2264      	movs	r2, #100	; 0x64
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	1aeb      	subs	r3, r5, r3
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a3e      	ldr	r2, [pc, #248]	; (8004214 <UART_SetConfig+0x22c>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 020f 	and.w	r2, r3, #15
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4422      	add	r2, r4
 800412c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800412e:	e06a      	b.n	8004206 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004130:	f7fe fec4 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004134:	4602      	mov	r2, r0
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009a      	lsls	r2, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	4a32      	ldr	r2, [pc, #200]	; (8004214 <UART_SetConfig+0x22c>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	011c      	lsls	r4, r3, #4
 8004154:	f7fe feb2 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004158:	4602      	mov	r2, r0
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	fbb2 f5f3 	udiv	r5, r2, r3
 800416e:	f7fe fea5 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004172:	4602      	mov	r2, r0
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009a      	lsls	r2, r3, #2
 800417c:	441a      	add	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <UART_SetConfig+0x22c>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2264      	movs	r2, #100	; 0x64
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	1aeb      	subs	r3, r5, r3
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	3332      	adds	r3, #50	; 0x32
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <UART_SetConfig+0x22c>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a8:	441c      	add	r4, r3
 80041aa:	f7fe fe87 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 80041ae:	4602      	mov	r2, r0
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009a      	lsls	r2, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80041c4:	f7fe fe7a 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <UART_SetConfig+0x22c>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	2264      	movs	r2, #100	; 0x64
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	1aeb      	subs	r3, r5, r3
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	3332      	adds	r3, #50	; 0x32
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <UART_SetConfig+0x22c>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4422      	add	r2, r4
 8004204:	609a      	str	r2, [r3, #8]
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bdb0      	pop	{r4, r5, r7, pc}
 800420e:	bf00      	nop
 8004210:	40013800 	.word	0x40013800
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <PWM_Control_1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

    volatile int duty = 360;
    int pwm = 0;
	void PWM_Control_1(int duty){
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

		if(duty > 0){
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	dd12      	ble.n	800424c <PWM_Control_1+0x34>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8004226:	2201      	movs	r2, #1
 8004228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800422c:	4814      	ldr	r0, [pc, #80]	; (8004280 <PWM_Control_1+0x68>)
 800422e:	f7fd f9e1 	bl	80015f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8004232:	2200      	movs	r2, #0
 8004234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004238:	4811      	ldr	r0, [pc, #68]	; (8004280 <PWM_Control_1+0x68>)
 800423a:	f7fd f9db 	bl	80015f4 <HAL_GPIO_WritePin>

//		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
//		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <PWM_Control_1+0x6c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3334      	adds	r3, #52	; 0x34
 8004244:	3308      	adds	r3, #8
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
		  duty = -duty;
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
		}
	}
 800424a:	e014      	b.n	8004276 <PWM_Control_1+0x5e>
		  duty = -duty;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	425b      	negs	r3, r3
 8004250:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8004252:	2200      	movs	r2, #0
 8004254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004258:	4809      	ldr	r0, [pc, #36]	; (8004280 <PWM_Control_1+0x68>)
 800425a:	f7fd f9cb 	bl	80015f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 800425e:	2201      	movs	r2, #1
 8004260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004264:	4806      	ldr	r0, [pc, #24]	; (8004280 <PWM_Control_1+0x68>)
 8004266:	f7fd f9c5 	bl	80015f4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <PWM_Control_1+0x6c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3334      	adds	r3, #52	; 0x34
 8004270:	3308      	adds	r3, #8
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
	}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40010c00 	.word	0x40010c00
 8004284:	200001c8 	.word	0x200001c8

08004288 <PWM_Control_2>:

	void PWM_Control_2(int duty){
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
		if(duty > 0){
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	dd10      	ble.n	80042b8 <PWM_Control_2+0x30>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8004296:	2200      	movs	r2, #0
 8004298:	2102      	movs	r1, #2
 800429a:	4813      	ldr	r0, [pc, #76]	; (80042e8 <PWM_Control_2+0x60>)
 800429c:	f7fd f9aa 	bl	80015f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80042a0:	2201      	movs	r2, #1
 80042a2:	2101      	movs	r1, #1
 80042a4:	4810      	ldr	r0, [pc, #64]	; (80042e8 <PWM_Control_2+0x60>)
 80042a6:	f7fd f9a5 	bl	80015f4 <HAL_GPIO_WritePin>

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty);
 80042aa:	4b10      	ldr	r3, [pc, #64]	; (80042ec <PWM_Control_2+0x64>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3334      	adds	r3, #52	; 0x34
 80042b0:	330c      	adds	r3, #12
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
	      duty = -duty;
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty);
		}
	}
 80042b6:	e012      	b.n	80042de <PWM_Control_2+0x56>
	      duty = -duty;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	425b      	negs	r3, r3
 80042bc:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80042be:	2201      	movs	r2, #1
 80042c0:	2102      	movs	r1, #2
 80042c2:	4809      	ldr	r0, [pc, #36]	; (80042e8 <PWM_Control_2+0x60>)
 80042c4:	f7fd f996 	bl	80015f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2101      	movs	r1, #1
 80042cc:	4806      	ldr	r0, [pc, #24]	; (80042e8 <PWM_Control_2+0x60>)
 80042ce:	f7fd f991 	bl	80015f4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty);
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <PWM_Control_2+0x64>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3334      	adds	r3, #52	; 0x34
 80042d8:	330c      	adds	r3, #12
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
	}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40010c00 	.word	0x40010c00
 80042ec:	200001c8 	.word	0x200001c8

080042f0 <HAL_TIM_PeriodElapsedCallback>:

	  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	  {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	      if (__HAL_TIM_GET_IT_SOURCE(&htim1,TIM_IT_UPDATE)) {
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10c      	bne.n	8004320 <HAL_TIM_PeriodElapsedCallback+0x30>
	    	  process_MPU();
 8004306:	f000 fc2f 	bl	8004b68 <process_MPU>
//	    	  if(com_angle > 40 || com_angle < -40)
//                  duty = 0;
//	    	  else
	    		  duty = (int) com_angle*50;
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fc fe80 	bl	8001014 <__aeabi_f2iz>
 8004314:	4602      	mov	r2, r0
 8004316:	2332      	movs	r3, #50	; 0x32
 8004318:	fb03 f302 	mul.w	r3, r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800431e:	6013      	str	r3, [r2, #0]
	      }
	  }
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000188 	.word	0x20000188
 800432c:	20000098 	.word	0x20000098
 8004330:	20000008 	.word	0x20000008

08004334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004338:	f7fc fe92 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800433c:	f000 f82a 	bl	8004394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004340:	f000 f9d2 	bl	80046e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8004344:	f000 f8ea 	bl	800451c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004348:	f000 f950 	bl	80045ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800434c:	f000 f9a2 	bl	8004694 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004350:	f000 f866 	bl	8004420 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004354:	f000 f892 	bl	800447c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8004358:	2108      	movs	r1, #8
 800435a:	480b      	ldr	r0, [pc, #44]	; (8004388 <main+0x54>)
 800435c:	f7fe fe64 	bl	8003028 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8004360:	210c      	movs	r1, #12
 8004362:	4809      	ldr	r0, [pc, #36]	; (8004388 <main+0x54>)
 8004364:	f7fe fe60 	bl	8003028 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8004368:	4808      	ldr	r0, [pc, #32]	; (800438c <main+0x58>)
 800436a:	f7fe fe18 	bl	8002f9e <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 init_MPU();
 800436e:	f000 fb63 	bl	8004a38 <init_MPU>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  PWM_Control_1(duty);
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <main+0x5c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff4e 	bl	8004218 <PWM_Control_1>
	  PWM_Control_2(duty);
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <main+0x5c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff81 	bl	8004288 <PWM_Control_2>
	  PWM_Control_1(duty);
 8004386:	e7f4      	b.n	8004372 <main+0x3e>
 8004388:	200001c8 	.word	0x200001c8
 800438c:	20000188 	.word	0x20000188
 8004390:	20000008 	.word	0x20000008

08004394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b090      	sub	sp, #64	; 0x40
 8004398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800439a:	f107 0318 	add.w	r3, r7, #24
 800439e:	2228      	movs	r2, #40	; 0x28
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 fb12 	bl	80059cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80043c0:	2300      	movs	r3, #0
 80043c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043c4:	2301      	movs	r3, #1
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043c8:	2302      	movs	r3, #2
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80043d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043d8:	f107 0318 	add.w	r3, r7, #24
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe f991 	bl	8002704 <HAL_RCC_OscConfig>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80043e8:	f000 f9ec 	bl	80047c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043ec:	230f      	movs	r3, #15
 80043ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043f0:	2302      	movs	r3, #2
 80043f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80043f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fbe0 	bl	8002bcc <HAL_RCC_ClockConfig>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004412:	f000 f9d7 	bl	80047c4 <Error_Handler>
  }
}
 8004416:	bf00      	nop
 8004418:	3740      	adds	r7, #64	; 0x40
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <MX_I2C1_Init+0x50>)
 8004426:	4a13      	ldr	r2, [pc, #76]	; (8004474 <MX_I2C1_Init+0x54>)
 8004428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <MX_I2C1_Init+0x50>)
 800442c:	4a12      	ldr	r2, [pc, #72]	; (8004478 <MX_I2C1_Init+0x58>)
 800442e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <MX_I2C1_Init+0x50>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <MX_I2C1_Init+0x50>)
 8004438:	2200      	movs	r2, #0
 800443a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <MX_I2C1_Init+0x50>)
 800443e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004444:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <MX_I2C1_Init+0x50>)
 8004446:	2200      	movs	r2, #0
 8004448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <MX_I2C1_Init+0x50>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <MX_I2C1_Init+0x50>)
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <MX_I2C1_Init+0x50>)
 8004458:	2200      	movs	r2, #0
 800445a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800445c:	4804      	ldr	r0, [pc, #16]	; (8004470 <MX_I2C1_Init+0x50>)
 800445e:	f7fd f8e1 	bl	8001624 <HAL_I2C_Init>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004468:	f000 f9ac 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}
 8004470:	2000009c 	.word	0x2000009c
 8004474:	40005400 	.word	0x40005400
 8004478:	00061a80 	.word	0x00061a80

0800447c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004482:	f107 0308 	add.w	r3, r7, #8
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004490:	463b      	mov	r3, r7
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <MX_TIM1_Init+0x98>)
 800449a:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <MX_TIM1_Init+0x9c>)
 800449c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800449e:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <MX_TIM1_Init+0x98>)
 80044a0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80044a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <MX_TIM1_Init+0x98>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <MX_TIM1_Init+0x98>)
 80044ae:	2264      	movs	r2, #100	; 0x64
 80044b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <MX_TIM1_Init+0x98>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <MX_TIM1_Init+0x98>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <MX_TIM1_Init+0x98>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044c4:	4813      	ldr	r0, [pc, #76]	; (8004514 <MX_TIM1_Init+0x98>)
 80044c6:	f7fe fd3f 	bl	8002f48 <HAL_TIM_Base_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80044d0:	f000 f978 	bl	80047c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4619      	mov	r1, r3
 80044e0:	480c      	ldr	r0, [pc, #48]	; (8004514 <MX_TIM1_Init+0x98>)
 80044e2:	f7ff f82d 	bl	8003540 <HAL_TIM_ConfigClockSource>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80044ec:	f000 f96a 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044f0:	2300      	movs	r3, #0
 80044f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044f8:	463b      	mov	r3, r7
 80044fa:	4619      	mov	r1, r3
 80044fc:	4805      	ldr	r0, [pc, #20]	; (8004514 <MX_TIM1_Init+0x98>)
 80044fe:	f7ff fbec 	bl	8003cda <HAL_TIMEx_MasterConfigSynchronization>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004508:	f000 f95c 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000188 	.word	0x20000188
 8004518:	40012c00 	.word	0x40012c00

0800451c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004522:	f107 0320 	add.w	r3, r7, #32
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	615a      	str	r2, [r3, #20]
 800453c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <MX_TIM2_Init+0xcc>)
 8004540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 8004546:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <MX_TIM2_Init+0xcc>)
 8004548:	2224      	movs	r2, #36	; 0x24
 800454a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <MX_TIM2_Init+0xcc>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <MX_TIM2_Init+0xcc>)
 8004554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <MX_TIM2_Init+0xcc>)
 800455c:	2200      	movs	r2, #0
 800455e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <MX_TIM2_Init+0xcc>)
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004566:	4820      	ldr	r0, [pc, #128]	; (80045e8 <MX_TIM2_Init+0xcc>)
 8004568:	f7fe fd33 	bl	8002fd2 <HAL_TIM_PWM_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004572:	f000 f927 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800457e:	f107 0320 	add.w	r3, r7, #32
 8004582:	4619      	mov	r1, r3
 8004584:	4818      	ldr	r0, [pc, #96]	; (80045e8 <MX_TIM2_Init+0xcc>)
 8004586:	f7ff fba8 	bl	8003cda <HAL_TIMEx_MasterConfigSynchronization>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004590:	f000 f918 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004594:	2360      	movs	r3, #96	; 0x60
 8004596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6000;
 8004598:	f241 7370 	movw	r3, #6000	; 0x1770
 800459c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80045a2:	2304      	movs	r3, #4
 80045a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045a6:	1d3b      	adds	r3, r7, #4
 80045a8:	2208      	movs	r2, #8
 80045aa:	4619      	mov	r1, r3
 80045ac:	480e      	ldr	r0, [pc, #56]	; (80045e8 <MX_TIM2_Init+0xcc>)
 80045ae:	f7fe ff01 	bl	80033b4 <HAL_TIM_PWM_ConfigChannel>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80045b8:	f000 f904 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.Pulse = 5999;
 80045bc:	f241 736f 	movw	r3, #5999	; 0x176f
 80045c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	220c      	movs	r2, #12
 80045c6:	4619      	mov	r1, r3
 80045c8:	4807      	ldr	r0, [pc, #28]	; (80045e8 <MX_TIM2_Init+0xcc>)
 80045ca:	f7fe fef3 	bl	80033b4 <HAL_TIM_PWM_ConfigChannel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80045d4:	f000 f8f6 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045d8:	4803      	ldr	r0, [pc, #12]	; (80045e8 <MX_TIM2_Init+0xcc>)
 80045da:	f000 fd53 	bl	8005084 <HAL_TIM_MspPostInit>

}
 80045de:	bf00      	nop
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	200001c8 	.word	0x200001c8

080045ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f9e6 	bl	80059cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004600:	1d3b      	adds	r3, r7, #4
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <MX_TIM3_Init+0xa0>)
 800460a:	4a21      	ldr	r2, [pc, #132]	; (8004690 <MX_TIM3_Init+0xa4>)
 800460c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800460e:	4b1f      	ldr	r3, [pc, #124]	; (800468c <MX_TIM3_Init+0xa0>)
 8004610:	2200      	movs	r2, #0
 8004612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <MX_TIM3_Init+0xa0>)
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800461a:	4b1c      	ldr	r3, [pc, #112]	; (800468c <MX_TIM3_Init+0xa0>)
 800461c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004622:	4b1a      	ldr	r3, [pc, #104]	; (800468c <MX_TIM3_Init+0xa0>)
 8004624:	2200      	movs	r2, #0
 8004626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <MX_TIM3_Init+0xa0>)
 800462a:	2200      	movs	r2, #0
 800462c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800462e:	2301      	movs	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004636:	2301      	movs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004646:	2301      	movs	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800464a:	2300      	movs	r3, #0
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004652:	f107 030c 	add.w	r3, r7, #12
 8004656:	4619      	mov	r1, r3
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <MX_TIM3_Init+0xa0>)
 800465a:	f7fe fd0d 	bl	8003078 <HAL_TIM_Encoder_Init>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004664:	f000 f8ae 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004668:	2300      	movs	r3, #0
 800466a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4805      	ldr	r0, [pc, #20]	; (800468c <MX_TIM3_Init+0xa0>)
 8004676:	f7ff fb30 	bl	8003cda <HAL_TIMEx_MasterConfigSynchronization>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004680:	f000 f8a0 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004684:	bf00      	nop
 8004686:	3730      	adds	r7, #48	; 0x30
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000104 	.word	0x20000104
 8004690:	40000400 	.word	0x40000400

08004694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <MX_USART1_UART_Init+0x50>)
 800469c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046ba:	220c      	movs	r2, #12
 80046bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046ca:	4805      	ldr	r0, [pc, #20]	; (80046e0 <MX_USART1_UART_Init+0x4c>)
 80046cc:	f7ff fb5b 	bl	8003d86 <HAL_UART_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80046d6:	f000 f875 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000144 	.word	0x20000144
 80046e4:	40013800 	.word	0x40013800

080046e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fc:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <MX_GPIO_Init+0xd0>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	4a2d      	ldr	r2, [pc, #180]	; (80047b8 <MX_GPIO_Init+0xd0>)
 8004702:	f043 0310 	orr.w	r3, r3, #16
 8004706:	6193      	str	r3, [r2, #24]
 8004708:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <MX_GPIO_Init+0xd0>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004714:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <MX_GPIO_Init+0xd0>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <MX_GPIO_Init+0xd0>)
 800471a:	f043 0320 	orr.w	r3, r3, #32
 800471e:	6193      	str	r3, [r2, #24]
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <MX_GPIO_Init+0xd0>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800472c:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <MX_GPIO_Init+0xd0>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <MX_GPIO_Init+0xd0>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6193      	str	r3, [r2, #24]
 8004738:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <MX_GPIO_Init+0xd0>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <MX_GPIO_Init+0xd0>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <MX_GPIO_Init+0xd0>)
 800474a:	f043 0308 	orr.w	r3, r3, #8
 800474e:	6193      	str	r3, [r2, #24]
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <MX_GPIO_Init+0xd0>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004762:	4816      	ldr	r0, [pc, #88]	; (80047bc <MX_GPIO_Init+0xd4>)
 8004764:	f7fc ff46 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8004768:	2200      	movs	r2, #0
 800476a:	f640 4103 	movw	r1, #3075	; 0xc03
 800476e:	4814      	ldr	r0, [pc, #80]	; (80047c0 <MX_GPIO_Init+0xd8>)
 8004770:	f7fc ff40 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004782:	2302      	movs	r3, #2
 8004784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004786:	f107 0310 	add.w	r3, r7, #16
 800478a:	4619      	mov	r1, r3
 800478c:	480b      	ldr	r0, [pc, #44]	; (80047bc <MX_GPIO_Init+0xd4>)
 800478e:	f7fc fdd3 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8004792:	f640 4303 	movw	r3, #3075	; 0xc03
 8004796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004798:	2301      	movs	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a0:	2302      	movs	r3, #2
 80047a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047a4:	f107 0310 	add.w	r3, r7, #16
 80047a8:	4619      	mov	r1, r3
 80047aa:	4805      	ldr	r0, [pc, #20]	; (80047c0 <MX_GPIO_Init+0xd8>)
 80047ac:	f7fc fdc4 	bl	8001338 <HAL_GPIO_Init>

}
 80047b0:	bf00      	nop
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40011000 	.word	0x40011000
 80047c0:	40010c00 	.word	0x40010c00

080047c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b08b      	sub	sp, #44	; 0x2c
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b0a      	cmp	r3, #10
 80047ea:	dd01      	ble.n	80047f0 <ftoa+0x20>
		precision = MAX_PRECISION;
 80047ec:	230a      	movs	r3, #10
 80047ee:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047fc:	f7fc f8d6 	bl	80009ac <__aeabi_dcmplt>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <ftoa+0x4c>
	{
		f = -f;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004810:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	627a      	str	r2, [r7, #36]	; 0x24
 8004818:	222d      	movs	r2, #45	; 0x2d
 800481a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da4f      	bge.n	80048c2 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b7e      	ldr	r3, [pc, #504]	; (8004a20 <ftoa+0x250>)
 8004828:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800482c:	f7fc f8be 	bl	80009ac <__aeabi_dcmplt>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <ftoa+0x6c>
 8004836:	2306      	movs	r3, #6
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	e042      	b.n	80048c2 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	4b78      	ldr	r3, [pc, #480]	; (8004a24 <ftoa+0x254>)
 8004842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004846:	f7fc f8b1 	bl	80009ac <__aeabi_dcmplt>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <ftoa+0x86>
 8004850:	2305      	movs	r3, #5
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	e035      	b.n	80048c2 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	4b73      	ldr	r3, [pc, #460]	; (8004a28 <ftoa+0x258>)
 800485c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004860:	f7fc f8a4 	bl	80009ac <__aeabi_dcmplt>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <ftoa+0xa0>
 800486a:	2304      	movs	r3, #4
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	e028      	b.n	80048c2 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	4b6d      	ldr	r3, [pc, #436]	; (8004a2c <ftoa+0x25c>)
 8004876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800487a:	f7fc f897 	bl	80009ac <__aeabi_dcmplt>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <ftoa+0xba>
 8004884:	2303      	movs	r3, #3
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	e01b      	b.n	80048c2 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800488a:	a361      	add	r3, pc, #388	; (adr r3, 8004a10 <ftoa+0x240>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004894:	f7fc f88a 	bl	80009ac <__aeabi_dcmplt>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <ftoa+0xd4>
 800489e:	2302      	movs	r3, #2
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	e00e      	b.n	80048c2 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 80048a4:	a35c      	add	r3, pc, #368	; (adr r3, 8004a18 <ftoa+0x248>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048ae:	f7fc f87d 	bl	80009ac <__aeabi_dcmplt>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <ftoa+0xee>
 80048b8:	2301      	movs	r3, #1
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	e001      	b.n	80048c2 <ftoa+0xf2>
		else precision = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <ftoa+0x116>
		f += rounders[precision];
 80048c8:	4a59      	ldr	r2, [pc, #356]	; (8004a30 <ftoa+0x260>)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	cb18      	ldmia	r3, {r3, r4}
 80048d2:	461a      	mov	r2, r3
 80048d4:	4623      	mov	r3, r4
 80048d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048da:	f7fb fc3f 	bl	800015c <__adddf3>
 80048de:	4603      	mov	r3, r0
 80048e0:	460c      	mov	r4, r1
 80048e2:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 80048e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048ea:	f7fc f89d 	bl	8000a28 <__aeabi_d2iz>
 80048ee:	4603      	mov	r3, r0
 80048f0:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80048f2:	69f8      	ldr	r0, [r7, #28]
 80048f4:	f7fb fd7e 	bl	80003f4 <__aeabi_i2d>
 80048f8:	4603      	mov	r3, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	461a      	mov	r2, r3
 80048fe:	4623      	mov	r3, r4
 8004900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004904:	f7fb fc28 	bl	8000158 <__aeabi_dsub>
 8004908:	4603      	mov	r3, r0
 800490a:	460c      	mov	r4, r1
 800490c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d105      	bne.n	8004922 <ftoa+0x152>
		*ptr++ = '0';
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	627a      	str	r2, [r7, #36]	; 0x24
 800491c:	2230      	movs	r2, #48	; 0x30
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e038      	b.n	8004994 <ftoa+0x1c4>
	else
	{
		// save start pointer
		p = ptr;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8004926:	e01a      	b.n	800495e <ftoa+0x18e>
		{
			*p++ = '0' + intPart % 10;
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <ftoa+0x264>)
 800492c:	fb83 1302 	smull	r1, r3, r3, r2
 8004930:	1099      	asrs	r1, r3, #2
 8004932:	17d3      	asrs	r3, r2, #31
 8004934:	1ac9      	subs	r1, r1, r3
 8004936:	460b      	mov	r3, r1
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	1ad1      	subs	r1, r2, r3
 8004940:	b2ca      	uxtb	r2, r1
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	1c59      	adds	r1, r3, #1
 8004946:	6239      	str	r1, [r7, #32]
 8004948:	3230      	adds	r2, #48	; 0x30
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4a38      	ldr	r2, [pc, #224]	; (8004a34 <ftoa+0x264>)
 8004952:	fb82 1203 	smull	r1, r2, r2, r3
 8004956:	1092      	asrs	r2, r2, #2
 8004958:	17db      	asrs	r3, r3, #31
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e1      	bne.n	8004928 <ftoa+0x158>
		}

		// save end pos
		p1 = p;
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8004968:	e00e      	b.n	8004988 <ftoa+0x1b8>
		{
			c = *--p;
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	3b01      	subs	r3, #1
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	627a      	str	r2, [r7, #36]	; 0x24
 8004984:	7dfa      	ldrb	r2, [r7, #23]
 8004986:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	429a      	cmp	r2, r3
 800498e:	d8ec      	bhi.n	800496a <ftoa+0x19a>
		}

		// restore end pos
		ptr = p1;
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d032      	beq.n	8004a00 <ftoa+0x230>
	{
		// place decimal point
		*ptr++ = '.';
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	627a      	str	r2, [r7, #36]	; 0x24
 80049a0:	222e      	movs	r2, #46	; 0x2e
 80049a2:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 80049a4:	e027      	b.n	80049f6 <ftoa+0x226>
		{
			f *= 10.0;
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <ftoa+0x254>)
 80049ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049b0:	f7fb fd8a 	bl	80004c8 <__aeabi_dmul>
 80049b4:	4603      	mov	r3, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 80049bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049c0:	f7fc f85a 	bl	8000a78 <__aeabi_d2uiz>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	627a      	str	r2, [r7, #36]	; 0x24
 80049ce:	7dfa      	ldrb	r2, [r7, #23]
 80049d0:	3230      	adds	r2, #48	; 0x30
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
			f -= c;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fb fd0b 	bl	80003f4 <__aeabi_i2d>
 80049de:	4603      	mov	r3, r0
 80049e0:	460c      	mov	r4, r1
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ea:	f7fb fbb5 	bl	8000158 <__aeabi_dsub>
 80049ee:	4603      	mov	r3, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	1e5a      	subs	r2, r3, #1
 80049fa:	603a      	str	r2, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1d2      	bne.n	80049a6 <ftoa+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]

	return buf;
 8004a06:	687b      	ldr	r3, [r7, #4]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	372c      	adds	r7, #44	; 0x2c
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}
 8004a10:	00000000 	.word	0x00000000
 8004a14:	40c38800 	.word	0x40c38800
 8004a18:	00000000 	.word	0x00000000
 8004a1c:	40f86a00 	.word	0x40f86a00
 8004a20:	3ff00000 	.word	0x3ff00000
 8004a24:	40240000 	.word	0x40240000
 8004a28:	40590000 	.word	0x40590000
 8004a2c:	408f4000 	.word	0x408f4000
 8004a30:	08005a30 	.word	0x08005a30
 8004a34:	66666667 	.word	0x66666667

08004a38 <init_MPU>:

char init_MPU(){
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af02      	add	r7, sp, #8
    char status = 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	77fb      	strb	r3, [r7, #31]
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8004a42:	23d0      	movs	r3, #208	; 0xd0
 8004a44:	77bb      	strb	r3, [r7, #30]

    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 8004a46:	7fbb      	ldrb	r3, [r7, #30]
 8004a48:	b299      	uxth	r1, r3
 8004a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4840      	ldr	r0, [pc, #256]	; (8004b54 <init_MPU+0x11c>)
 8004a52:	f7fd fa33 	bl	8001ebc <HAL_I2C_IsDeviceReady>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <init_MPU+0x34>
    	strcpy( rx_data, "No Device \r \n");
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	4a3e      	ldr	r2, [pc, #248]	; (8004b58 <init_MPU+0x120>)
 8004a60:	461c      	mov	r4, r3
 8004a62:	4613      	mov	r3, r2
 8004a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a66:	c407      	stmia	r4!, {r0, r1, r2}
 8004a68:	8023      	strh	r3, [r4, #0]
 8004a6a:	e007      	b.n	8004a7c <init_MPU+0x44>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	4a3b      	ldr	r2, [pc, #236]	; (8004b5c <init_MPU+0x124>)
 8004a70:	461c      	mov	r4, r3
 8004a72:	4615      	mov	r5, r2
 8004a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	7023      	strb	r3, [r4, #0]
      }
    HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	2364      	movs	r3, #100	; 0x64
 8004a80:	2219      	movs	r2, #25
 8004a82:	4837      	ldr	r0, [pc, #220]	; (8004b60 <init_MPU+0x128>)
 8004a84:	f7ff f9cc 	bl	8003e20 <HAL_UART_Transmit>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8004a88:	236b      	movs	r3, #107	; 0x6b
 8004a8a:	773b      	strb	r3, [r7, #28]
    d[1] = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8004a90:	7fbb      	ldrb	r3, [r7, #30]
 8004a92:	b299      	uxth	r1, r3
 8004a94:	f107 021c 	add.w	r2, r7, #28
 8004a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	482c      	ldr	r0, [pc, #176]	; (8004b54 <init_MPU+0x11c>)
 8004aa2:	f7fc fec3 	bl	800182c <HAL_I2C_Master_Transmit>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <init_MPU+0x78>
	{
		status = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	77fb      	strb	r3, [r7, #31]
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8004ab0:	2319      	movs	r3, #25
 8004ab2:	773b      	strb	r3, [r7, #28]
	d[1] = sample_1khz;
 8004ab4:	2307      	movs	r3, #7
 8004ab6:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004ab8:	bf00      	nop
 8004aba:	7fbb      	ldrb	r3, [r7, #30]
 8004abc:	b299      	uxth	r1, r3
 8004abe:	f107 021c 	add.w	r2, r7, #28
 8004ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2302      	movs	r3, #2
 8004aca:	4822      	ldr	r0, [pc, #136]	; (8004b54 <init_MPU+0x11c>)
 8004acc:	f7fc feae 	bl	800182c <HAL_I2C_Master_Transmit>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f1      	bne.n	8004aba <init_MPU+0x82>

	d[0] = GYRO_CONFIG;
 8004ad6:	231b      	movs	r3, #27
 8004ad8:	773b      	strb	r3, [r7, #28]
	d[1] = gyro_con;
 8004ada:	2318      	movs	r3, #24
 8004adc:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004ade:	bf00      	nop
 8004ae0:	7fbb      	ldrb	r3, [r7, #30]
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	f107 021c 	add.w	r2, r7, #28
 8004ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2302      	movs	r3, #2
 8004af0:	4818      	ldr	r0, [pc, #96]	; (8004b54 <init_MPU+0x11c>)
 8004af2:	f7fc fe9b 	bl	800182c <HAL_I2C_Master_Transmit>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f1      	bne.n	8004ae0 <init_MPU+0xa8>

	d[0] = ACCEL_CONFIG;
 8004afc:	231c      	movs	r3, #28
 8004afe:	773b      	strb	r3, [r7, #28]
	d[1] = 0x00;
 8004b00:	2300      	movs	r3, #0
 8004b02:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004b04:	bf00      	nop
 8004b06:	7fbb      	ldrb	r3, [r7, #30]
 8004b08:	b299      	uxth	r1, r3
 8004b0a:	f107 021c 	add.w	r2, r7, #28
 8004b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2302      	movs	r3, #2
 8004b16:	480f      	ldr	r0, [pc, #60]	; (8004b54 <init_MPU+0x11c>)
 8004b18:	f7fc fe88 	bl	800182c <HAL_I2C_Master_Transmit>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f1      	bne.n	8004b06 <init_MPU+0xce>

	d[0] = INIT_ENB;
 8004b22:	2338      	movs	r3, #56	; 0x38
 8004b24:	773b      	strb	r3, [r7, #28]
	d[1] = inter;
 8004b26:	2301      	movs	r3, #1
 8004b28:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004b2a:	bf00      	nop
 8004b2c:	7fbb      	ldrb	r3, [r7, #30]
 8004b2e:	b299      	uxth	r1, r3
 8004b30:	f107 021c 	add.w	r2, r7, #28
 8004b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	4805      	ldr	r0, [pc, #20]	; (8004b54 <init_MPU+0x11c>)
 8004b3e:	f7fc fe75 	bl	800182c <HAL_I2C_Master_Transmit>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f1      	bne.n	8004b2c <init_MPU+0xf4>

  return status;
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bdb0      	pop	{r4, r5, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	2000009c 	.word	0x2000009c
 8004b58:	08005a0c 	.word	0x08005a0c
 8004b5c:	08005a1c 	.word	0x08005a1c
 8004b60:	20000144 	.word	0x20000144
 8004b64:	00000000 	.word	0x00000000

08004b68 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	b09b      	sub	sp, #108	; 0x6c
 8004b6c:	af02      	add	r7, sp, #8
	mpu_data_processed data1;
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch,roll_com;

	uint8_t data[13];
	uint8_t reg = ACCEL_XOUT_H;
 8004b6e:	233b      	movs	r3, #59	; 0x3b
 8004b70:	73fb      	strb	r3, [r7, #15]
	uint8_t device_address = MPU_ADDRESS;
 8004b72:	23d0      	movs	r3, #208	; 0xd0
 8004b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8004b78:	bf00      	nop
 8004b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b7e:	b299      	uxth	r1, r3
 8004b80:	f107 020f 	add.w	r2, r7, #15
 8004b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	489c      	ldr	r0, [pc, #624]	; (8004e00 <process_MPU+0x298>)
 8004b8e:	f7fc fe4d 	bl	800182c <HAL_I2C_Master_Transmit>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <process_MPU+0x12>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8004b98:	bf00      	nop
 8004b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b9e:	b299      	uxth	r1, r3
 8004ba0:	f107 0210 	add.w	r2, r7, #16
 8004ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	230e      	movs	r3, #14
 8004bac:	4894      	ldr	r0, [pc, #592]	; (8004e00 <process_MPU+0x298>)
 8004bae:	f7fc ff4b 	bl	8001a48 <HAL_I2C_Master_Receive>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <process_MPU+0x32>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8004bb8:	7c3b      	ldrb	r3, [r7, #16]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	b21a      	sxth	r2, r3
 8004bbe:	7c7b      	ldrb	r3, [r7, #17]
 8004bc0:	b21b      	sxth	r3, r3
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	b21b      	sxth	r3, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc f880 	bl	8000ccc <__aeabi_i2f>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	65bb      	str	r3, [r7, #88]	; 0x58
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8004bd0:	7cbb      	ldrb	r3, [r7, #18]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	b21a      	sxth	r2, r3
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fc f874 	bl	8000ccc <__aeabi_i2f>
 8004be4:	4603      	mov	r3, r0
 8004be6:	657b      	str	r3, [r7, #84]	; 0x54
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8004be8:	7d3b      	ldrb	r3, [r7, #20]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	b21a      	sxth	r2, r3
 8004bee:	7d7b      	ldrb	r3, [r7, #21]
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	b21b      	sxth	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc f868 	bl	8000ccc <__aeabi_i2f>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50

    temp = (int16_t)(data[6] << 8 | data[7]);
 8004c00:	7dbb      	ldrb	r3, [r7, #22]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	b21a      	sxth	r2, r3
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
 8004c08:	b21b      	sxth	r3, r3
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b21b      	sxth	r3, r3
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fc f85c 	bl	8000ccc <__aeabi_i2f>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <process_MPU+0x29c>)
 8004c18:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8004c1a:	7e3b      	ldrb	r3, [r7, #24]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	b21a      	sxth	r2, r3
 8004c20:	7e7b      	ldrb	r3, [r7, #25]
 8004c22:	b21b      	sxth	r3, r3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	b21b      	sxth	r3, r3
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fc f84f 	bl	8000ccc <__aeabi_i2f>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	64fb      	str	r3, [r7, #76]	; 0x4c
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8004c32:	7ebb      	ldrb	r3, [r7, #26]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	b21a      	sxth	r2, r3
 8004c38:	7efb      	ldrb	r3, [r7, #27]
 8004c3a:	b21b      	sxth	r3, r3
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	b21b      	sxth	r3, r3
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc f843 	bl	8000ccc <__aeabi_i2f>
 8004c46:	4603      	mov	r3, r0
 8004c48:	64bb      	str	r3, [r7, #72]	; 0x48
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8004c4a:	7f3b      	ldrb	r3, [r7, #28]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	b21a      	sxth	r2, r3
 8004c50:	7f7b      	ldrb	r3, [r7, #29]
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fc f837 	bl	8000ccc <__aeabi_i2f>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	647b      	str	r3, [r7, #68]	; 0x44

	Acc_x = Acc_x/((float)accel_factor);
 8004c62:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8004c66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c68:	f7fc f938 	bl	8000edc <__aeabi_fdiv>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	65bb      	str	r3, [r7, #88]	; 0x58
	Acc_y = Acc_y/((float)accel_factor);
 8004c70:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8004c74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c76:	f7fc f931 	bl	8000edc <__aeabi_fdiv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	657b      	str	r3, [r7, #84]	; 0x54
	Acc_z = Acc_z/((float)accel_factor);
 8004c7e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8004c82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004c84:	f7fc f92a 	bl	8000edc <__aeabi_fdiv>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	653b      	str	r3, [r7, #80]	; 0x50

	Gyro_x = Gyro_x/gyro_factor;
 8004c8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004c8e:	f7fb fbc3 	bl	8000418 <__aeabi_f2d>
 8004c92:	a357      	add	r3, pc, #348	; (adr r3, 8004df0 <process_MPU+0x288>)
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f7fb fd40 	bl	800071c <__aeabi_ddiv>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	f7fb ff08 	bl	8000ab8 <__aeabi_d2f>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
	Gyro_y = Gyro_y/gyro_factor;
 8004cac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004cae:	f7fb fbb3 	bl	8000418 <__aeabi_f2d>
 8004cb2:	a34f      	add	r3, pc, #316	; (adr r3, 8004df0 <process_MPU+0x288>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f7fb fd30 	bl	800071c <__aeabi_ddiv>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	f7fb fef8 	bl	8000ab8 <__aeabi_d2f>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48
	Gyro_z = Gyro_z/gyro_factor;
 8004ccc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004cce:	f7fb fba3 	bl	8000418 <__aeabi_f2d>
 8004cd2:	a347      	add	r3, pc, #284	; (adr r3, 8004df0 <process_MPU+0x288>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f7fb fd20 	bl	800071c <__aeabi_ddiv>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	f7fb fee8 	bl	8000ab8 <__aeabi_d2f>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44


	char buffer[7];
	char n = ' ';
 8004cec:	2320      	movs	r3, #32
 8004cee:	71fb      	strb	r3, [r7, #7]
	char r = '\n';
 8004cf0:	230a      	movs	r3, #10
 8004cf2:	71bb      	strb	r3, [r7, #6]
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8004cf4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cf6:	f7fb fb8f 	bl	8000418 <__aeabi_f2d>
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004d00:	f7fb fb8a 	bl	8000418 <__aeabi_f2d>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f000 fc52 	bl	80055b4 <atan2>
 8004d10:	a339      	add	r3, pc, #228	; (adr r3, 8004df8 <process_MPU+0x290>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fbd7 	bl	80004c8 <__aeabi_dmul>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	4621      	mov	r1, r4
 8004d22:	f7fb fec9 	bl	8000ab8 <__aeabi_d2f>
 8004d26:	4603      	mov	r3, r0
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8004d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fb fb71 	bl	8000418 <__aeabi_f2d>
 8004d36:	4604      	mov	r4, r0
 8004d38:	460d      	mov	r5, r1
 8004d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d3e:	f7fc f819 	bl	8000d74 <__aeabi_fmul>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461e      	mov	r6, r3
 8004d46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004d4a:	f7fc f813 	bl	8000d74 <__aeabi_fmul>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4619      	mov	r1, r3
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7fb ff06 	bl	8000b64 <__addsf3>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fb5c 	bl	8000418 <__aeabi_f2d>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	f000 fc26 	bl	80055b8 <sqrt>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb fcd2 	bl	800071c <__aeabi_ddiv>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4621      	mov	r1, r4
 8004d80:	f000 fa8a 	bl	8005298 <atan>
 8004d84:	a31c      	add	r3, pc, #112	; (adr r3, 8004df8 <process_MPU+0x290>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fb9d 	bl	80004c8 <__aeabi_dmul>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	4618      	mov	r0, r3
 8004d94:	4621      	mov	r1, r4
 8004d96:	f7fb fe8f 	bl	8000ab8 <__aeabi_d2f>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c


	complementary_filter(pitch,Gyro_x,0.01);
 8004d9e:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <process_MPU+0x2a0>)
 8004da0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004da2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004da4:	f000 f838 	bl	8004e18 <complementary_filter>

    ftoa(com_angle, buffer, 2);
 8004da8:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <process_MPU+0x2a4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb fb33 	bl	8000418 <__aeabi_f2d>
 8004db2:	f107 0208 	add.w	r2, r7, #8
 8004db6:	2302      	movs	r3, #2
 8004db8:	f7ff fd0a 	bl	80047d0 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
 8004dbc:	f107 0108 	add.w	r1, r7, #8
 8004dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	4812      	ldr	r0, [pc, #72]	; (8004e10 <process_MPU+0x2a8>)
 8004dc8:	f7ff f82a 	bl	8003e20 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8004dcc:	1df9      	adds	r1, r7, #7
 8004dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	480e      	ldr	r0, [pc, #56]	; (8004e10 <process_MPU+0x2a8>)
 8004dd6:	f7ff f823 	bl	8003e20 <HAL_UART_Transmit>
//    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
//    HAL_UART_Transmit(&huart1, &n, 1, 1000);
//
//    ftoa(Gyro_z, buffer, 2);
//    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
 8004dda:	1db9      	adds	r1, r7, #6
 8004ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004de0:	2201      	movs	r2, #1
 8004de2:	480b      	ldr	r0, [pc, #44]	; (8004e10 <process_MPU+0x2a8>)
 8004de4:	f7ff f81c 	bl	8003e20 <HAL_UART_Transmit>
}
 8004de8:	bf00      	nop
 8004dea:	3764      	adds	r7, #100	; 0x64
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df0:	66666666 	.word	0x66666666
 8004df4:	40306666 	.word	0x40306666
 8004df8:	1a5d2372 	.word	0x1a5d2372
 8004dfc:	404ca5dc 	.word	0x404ca5dc
 8004e00:	2000009c 	.word	0x2000009c
 8004e04:	20000100 	.word	0x20000100
 8004e08:	3c23d70a 	.word	0x3c23d70a
 8004e0c:	20000098 	.word	0x20000098
 8004e10:	20000144 	.word	0x20000144
 8004e14:	00000000 	.word	0x00000000

08004e18 <complementary_filter>:
void complementary_filter(float angle_acc,float gyro_rate,float dt){
 8004e18:	b5b0      	push	{r4, r5, r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
	com_angle = alpha*(com_angle + dt*gyro_rate) + (1-alpha)*angle_acc;
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fb ffa4 	bl	8000d74 <__aeabi_fmul>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <complementary_filter+0x88>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fb fe94 	bl	8000b64 <__addsf3>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fb faea 	bl	8000418 <__aeabi_f2d>
 8004e44:	a312      	add	r3, pc, #72	; (adr r3, 8004e90 <complementary_filter+0x78>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f7fb fb3d 	bl	80004c8 <__aeabi_dmul>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	4625      	mov	r5, r4
 8004e54:	461c      	mov	r4, r3
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7fb fade 	bl	8000418 <__aeabi_f2d>
 8004e5c:	a30e      	add	r3, pc, #56	; (adr r3, 8004e98 <complementary_filter+0x80>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f7fb fb31 	bl	80004c8 <__aeabi_dmul>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7fb f975 	bl	800015c <__adddf3>
 8004e72:	4603      	mov	r3, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	4618      	mov	r0, r3
 8004e78:	4621      	mov	r1, r4
 8004e7a:	f7fb fe1d 	bl	8000ab8 <__aeabi_d2f>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <complementary_filter+0x88>)
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8c:	f3af 8000 	nop.w
 8004e90:	eb851eb8 	.word	0xeb851eb8
 8004e94:	3feeb851 	.word	0x3feeb851
 8004e98:	47ae1480 	.word	0x47ae1480
 8004e9c:	3fa47ae1 	.word	0x3fa47ae1
 8004ea0:	20000098 	.word	0x20000098

08004ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_MspInit+0x5c>)
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <HAL_MspInit+0x5c>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6193      	str	r3, [r2, #24]
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <HAL_MspInit+0x5c>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <HAL_MspInit+0x5c>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <HAL_MspInit+0x5c>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	61d3      	str	r3, [r2, #28]
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <HAL_MspInit+0x5c>)
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <HAL_MspInit+0x60>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <HAL_MspInit+0x60>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40010000 	.word	0x40010000

08004f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0310 	add.w	r3, r7, #16
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <HAL_I2C_MspInit+0x70>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d123      	bne.n	8004f70 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <HAL_I2C_MspInit+0x74>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <HAL_I2C_MspInit+0x74>)
 8004f2e:	f043 0308 	orr.w	r3, r3, #8
 8004f32:	6193      	str	r3, [r2, #24]
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_I2C_MspInit+0x74>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f40:	23c0      	movs	r3, #192	; 0xc0
 8004f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f44:	2312      	movs	r3, #18
 8004f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	4619      	mov	r1, r3
 8004f52:	480b      	ldr	r0, [pc, #44]	; (8004f80 <HAL_I2C_MspInit+0x78>)
 8004f54:	f7fc f9f0 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_I2C_MspInit+0x74>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <HAL_I2C_MspInit+0x74>)
 8004f5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f62:	61d3      	str	r3, [r2, #28]
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_I2C_MspInit+0x74>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f70:	bf00      	nop
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40005400 	.word	0x40005400
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40010c00 	.word	0x40010c00

08004f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0d      	ldr	r2, [pc, #52]	; (8004fc8 <HAL_TIM_Base_MspInit+0x44>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d113      	bne.n	8004fbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <HAL_TIM_Base_MspInit+0x48>)
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <HAL_TIM_Base_MspInit+0x48>)
 8004f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fa0:	6193      	str	r3, [r2, #24]
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_TIM_Base_MspInit+0x48>)
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2019      	movs	r0, #25
 8004fb4:	f7fc f989 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004fb8:	2019      	movs	r0, #25
 8004fba:	f7fc f9a2 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d10b      	bne.n	8004ffa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <HAL_TIM_PWM_MspInit+0x34>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4a07      	ldr	r2, [pc, #28]	; (8005004 <HAL_TIM_PWM_MspInit+0x34>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	61d3      	str	r3, [r2, #28]
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_TIM_PWM_MspInit+0x34>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005010:	f107 0310 	add.w	r3, r7, #16
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_TIM_Encoder_MspInit+0x70>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d123      	bne.n	8005070 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <HAL_TIM_Encoder_MspInit+0x74>)
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <HAL_TIM_Encoder_MspInit+0x74>)
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	61d3      	str	r3, [r2, #28]
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_TIM_Encoder_MspInit+0x74>)
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005040:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_TIM_Encoder_MspInit+0x74>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <HAL_TIM_Encoder_MspInit+0x74>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6193      	str	r3, [r2, #24]
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_TIM_Encoder_MspInit+0x74>)
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005058:	23c0      	movs	r3, #192	; 0xc0
 800505a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005064:	f107 0310 	add.w	r3, r7, #16
 8005068:	4619      	mov	r1, r3
 800506a:	4805      	ldr	r0, [pc, #20]	; (8005080 <HAL_TIM_Encoder_MspInit+0x78>)
 800506c:	f7fc f964 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005070:	bf00      	nop
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40000400 	.word	0x40000400
 800507c:	40021000 	.word	0x40021000
 8005080:	40010800 	.word	0x40010800

08005084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d117      	bne.n	80050d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <HAL_TIM_MspPostInit+0x58>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <HAL_TIM_MspPostInit+0x58>)
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	6193      	str	r3, [r2, #24]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <HAL_TIM_MspPostInit+0x58>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80050bc:	230c      	movs	r3, #12
 80050be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
 80050c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c4:	2302      	movs	r3, #2
 80050c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	4619      	mov	r1, r3
 80050ce:	4804      	ldr	r0, [pc, #16]	; (80050e0 <HAL_TIM_MspPostInit+0x5c>)
 80050d0:	f7fc f932 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80050d4:	bf00      	nop
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40010800 	.word	0x40010800

080050e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ec:	f107 0310 	add.w	r3, r7, #16
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_UART_MspInit+0x8c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d131      	bne.n	8005168 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_UART_MspInit+0x90>)
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <HAL_UART_MspInit+0x90>)
 800510a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510e:	6193      	str	r3, [r2, #24]
 8005110:	4b18      	ldr	r3, [pc, #96]	; (8005174 <HAL_UART_MspInit+0x90>)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511c:	4b15      	ldr	r3, [pc, #84]	; (8005174 <HAL_UART_MspInit+0x90>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4a14      	ldr	r2, [pc, #80]	; (8005174 <HAL_UART_MspInit+0x90>)
 8005122:	f043 0304 	orr.w	r3, r3, #4
 8005126:	6193      	str	r3, [r2, #24]
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_UART_MspInit+0x90>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513a:	2302      	movs	r3, #2
 800513c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800513e:	2303      	movs	r3, #3
 8005140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	4619      	mov	r1, r3
 8005148:	480b      	ldr	r0, [pc, #44]	; (8005178 <HAL_UART_MspInit+0x94>)
 800514a:	f7fc f8f5 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800514e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	4619      	mov	r1, r3
 8005162:	4805      	ldr	r0, [pc, #20]	; (8005178 <HAL_UART_MspInit+0x94>)
 8005164:	f7fc f8e8 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005168:	bf00      	nop
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40013800 	.word	0x40013800
 8005174:	40021000 	.word	0x40021000
 8005178:	40010800 	.word	0x40010800

0800517c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005180:	bf00      	nop
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800518c:	e7fe      	b.n	800518c <HardFault_Handler+0x4>

0800518e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005192:	e7fe      	b.n	8005192 <MemManage_Handler+0x4>

08005194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005198:	e7fe      	b.n	8005198 <BusFault_Handler+0x4>

0800519a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800519e:	e7fe      	b.n	800519e <UsageFault_Handler+0x4>

080051a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051c8:	f7fb ff90 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051cc:	bf00      	nop
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80051d4:	4802      	ldr	r0, [pc, #8]	; (80051e0 <TIM1_UP_IRQHandler+0x10>)
 80051d6:	f7fd ffe5 	bl	80031a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000188 	.word	0x20000188

080051e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <SystemInit+0x5c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <SystemInit+0x5c>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80051f4:	4b12      	ldr	r3, [pc, #72]	; (8005240 <SystemInit+0x5c>)
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4911      	ldr	r1, [pc, #68]	; (8005240 <SystemInit+0x5c>)
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <SystemInit+0x60>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <SystemInit+0x5c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0e      	ldr	r2, [pc, #56]	; (8005240 <SystemInit+0x5c>)
 8005206:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800520a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <SystemInit+0x5c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <SystemInit+0x5c>)
 8005216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <SystemInit+0x5c>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a07      	ldr	r2, [pc, #28]	; (8005240 <SystemInit+0x5c>)
 8005222:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005226:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <SystemInit+0x5c>)
 800522a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800522e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <SystemInit+0x64>)
 8005232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005236:	609a      	str	r2, [r3, #8]
#endif 
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	40021000 	.word	0x40021000
 8005244:	f8ff0000 	.word	0xf8ff0000
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800524c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800524e:	e003      	b.n	8005258 <LoopCopyDataInit>

08005250 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005252:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005254:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005256:	3104      	adds	r1, #4

08005258 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005258:	480a      	ldr	r0, [pc, #40]	; (8005284 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800525c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800525e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005260:	d3f6      	bcc.n	8005250 <CopyDataInit>
  ldr r2, =_sbss
 8005262:	4a0a      	ldr	r2, [pc, #40]	; (800528c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005264:	e002      	b.n	800526c <LoopFillZerobss>

08005266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005266:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005268:	f842 3b04 	str.w	r3, [r2], #4

0800526c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800526c:	4b08      	ldr	r3, [pc, #32]	; (8005290 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800526e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005270:	d3f9      	bcc.n	8005266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005272:	f7ff ffb7 	bl	80051e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005276:	f000 fb85 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800527a:	f7ff f85b 	bl	8004334 <main>
  bx lr
 800527e:	4770      	bx	lr
  ldr r3, =_sidata
 8005280:	08005af0 	.word	0x08005af0
  ldr r0, =_sdata
 8005284:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005288:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 800528c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8005290:	20000210 	.word	0x20000210

08005294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005294:	e7fe      	b.n	8005294 <ADC1_2_IRQHandler>
	...

08005298 <atan>:
 8005298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	4bb6      	ldr	r3, [pc, #728]	; (8005578 <atan+0x2e0>)
 800529e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80052a2:	429e      	cmp	r6, r3
 80052a4:	4604      	mov	r4, r0
 80052a6:	460d      	mov	r5, r1
 80052a8:	468b      	mov	fp, r1
 80052aa:	dd17      	ble.n	80052dc <atan+0x44>
 80052ac:	4bb3      	ldr	r3, [pc, #716]	; (800557c <atan+0x2e4>)
 80052ae:	429e      	cmp	r6, r3
 80052b0:	dc01      	bgt.n	80052b6 <atan+0x1e>
 80052b2:	d109      	bne.n	80052c8 <atan+0x30>
 80052b4:	b140      	cbz	r0, 80052c8 <atan+0x30>
 80052b6:	4622      	mov	r2, r4
 80052b8:	462b      	mov	r3, r5
 80052ba:	4620      	mov	r0, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	f7fa ff4d 	bl	800015c <__adddf3>
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	e005      	b.n	80052d4 <atan+0x3c>
 80052c8:	f1bb 0f00 	cmp.w	fp, #0
 80052cc:	4cac      	ldr	r4, [pc, #688]	; (8005580 <atan+0x2e8>)
 80052ce:	f340 8121 	ble.w	8005514 <atan+0x27c>
 80052d2:	4dac      	ldr	r5, [pc, #688]	; (8005584 <atan+0x2ec>)
 80052d4:	4620      	mov	r0, r4
 80052d6:	4629      	mov	r1, r5
 80052d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	4baa      	ldr	r3, [pc, #680]	; (8005588 <atan+0x2f0>)
 80052de:	429e      	cmp	r6, r3
 80052e0:	dc11      	bgt.n	8005306 <atan+0x6e>
 80052e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80052e6:	429e      	cmp	r6, r3
 80052e8:	dc0a      	bgt.n	8005300 <atan+0x68>
 80052ea:	a38b      	add	r3, pc, #556	; (adr r3, 8005518 <atan+0x280>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fa ff34 	bl	800015c <__adddf3>
 80052f4:	2200      	movs	r2, #0
 80052f6:	4ba5      	ldr	r3, [pc, #660]	; (800558c <atan+0x2f4>)
 80052f8:	f7fb fb76 	bl	80009e8 <__aeabi_dcmpgt>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d1e9      	bne.n	80052d4 <atan+0x3c>
 8005300:	f04f 3aff 	mov.w	sl, #4294967295
 8005304:	e027      	b.n	8005356 <atan+0xbe>
 8005306:	f000 f951 	bl	80055ac <fabs>
 800530a:	4ba1      	ldr	r3, [pc, #644]	; (8005590 <atan+0x2f8>)
 800530c:	4604      	mov	r4, r0
 800530e:	429e      	cmp	r6, r3
 8005310:	460d      	mov	r5, r1
 8005312:	f300 80b8 	bgt.w	8005486 <atan+0x1ee>
 8005316:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800531a:	429e      	cmp	r6, r3
 800531c:	f300 809c 	bgt.w	8005458 <atan+0x1c0>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	f7fa ff1a 	bl	800015c <__adddf3>
 8005328:	2200      	movs	r2, #0
 800532a:	4b98      	ldr	r3, [pc, #608]	; (800558c <atan+0x2f4>)
 800532c:	f7fa ff14 	bl	8000158 <__aeabi_dsub>
 8005330:	2200      	movs	r2, #0
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800533a:	4620      	mov	r0, r4
 800533c:	4629      	mov	r1, r5
 800533e:	f7fa ff0d 	bl	800015c <__adddf3>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fb f9e7 	bl	800071c <__aeabi_ddiv>
 800534e:	f04f 0a00 	mov.w	sl, #0
 8005352:	4604      	mov	r4, r0
 8005354:	460d      	mov	r5, r1
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fb f8b3 	bl	80004c8 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4680      	mov	r8, r0
 8005368:	4689      	mov	r9, r1
 800536a:	f7fb f8ad 	bl	80004c8 <__aeabi_dmul>
 800536e:	a36c      	add	r3, pc, #432	; (adr r3, 8005520 <atan+0x288>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	f7fb f8a6 	bl	80004c8 <__aeabi_dmul>
 800537c:	a36a      	add	r3, pc, #424	; (adr r3, 8005528 <atan+0x290>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fa feeb 	bl	800015c <__adddf3>
 8005386:	4632      	mov	r2, r6
 8005388:	463b      	mov	r3, r7
 800538a:	f7fb f89d 	bl	80004c8 <__aeabi_dmul>
 800538e:	a368      	add	r3, pc, #416	; (adr r3, 8005530 <atan+0x298>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fa fee2 	bl	800015c <__adddf3>
 8005398:	4632      	mov	r2, r6
 800539a:	463b      	mov	r3, r7
 800539c:	f7fb f894 	bl	80004c8 <__aeabi_dmul>
 80053a0:	a365      	add	r3, pc, #404	; (adr r3, 8005538 <atan+0x2a0>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fa fed9 	bl	800015c <__adddf3>
 80053aa:	4632      	mov	r2, r6
 80053ac:	463b      	mov	r3, r7
 80053ae:	f7fb f88b 	bl	80004c8 <__aeabi_dmul>
 80053b2:	a363      	add	r3, pc, #396	; (adr r3, 8005540 <atan+0x2a8>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fa fed0 	bl	800015c <__adddf3>
 80053bc:	4632      	mov	r2, r6
 80053be:	463b      	mov	r3, r7
 80053c0:	f7fb f882 	bl	80004c8 <__aeabi_dmul>
 80053c4:	a360      	add	r3, pc, #384	; (adr r3, 8005548 <atan+0x2b0>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fa fec7 	bl	800015c <__adddf3>
 80053ce:	4642      	mov	r2, r8
 80053d0:	464b      	mov	r3, r9
 80053d2:	f7fb f879 	bl	80004c8 <__aeabi_dmul>
 80053d6:	a35e      	add	r3, pc, #376	; (adr r3, 8005550 <atan+0x2b8>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	4680      	mov	r8, r0
 80053de:	4689      	mov	r9, r1
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb f870 	bl	80004c8 <__aeabi_dmul>
 80053e8:	a35b      	add	r3, pc, #364	; (adr r3, 8005558 <atan+0x2c0>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fa feb3 	bl	8000158 <__aeabi_dsub>
 80053f2:	4632      	mov	r2, r6
 80053f4:	463b      	mov	r3, r7
 80053f6:	f7fb f867 	bl	80004c8 <__aeabi_dmul>
 80053fa:	a359      	add	r3, pc, #356	; (adr r3, 8005560 <atan+0x2c8>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fa feaa 	bl	8000158 <__aeabi_dsub>
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	f7fb f85e 	bl	80004c8 <__aeabi_dmul>
 800540c:	a356      	add	r3, pc, #344	; (adr r3, 8005568 <atan+0x2d0>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f7fa fea1 	bl	8000158 <__aeabi_dsub>
 8005416:	4632      	mov	r2, r6
 8005418:	463b      	mov	r3, r7
 800541a:	f7fb f855 	bl	80004c8 <__aeabi_dmul>
 800541e:	a354      	add	r3, pc, #336	; (adr r3, 8005570 <atan+0x2d8>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fa fe98 	bl	8000158 <__aeabi_dsub>
 8005428:	4632      	mov	r2, r6
 800542a:	463b      	mov	r3, r7
 800542c:	f7fb f84c 	bl	80004c8 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fa fe90 	bl	800015c <__adddf3>
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	f7fb f842 	bl	80004c8 <__aeabi_dmul>
 8005444:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	d144      	bne.n	80054d8 <atan+0x240>
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fa fe81 	bl	8000158 <__aeabi_dsub>
 8005456:	e734      	b.n	80052c2 <atan+0x2a>
 8005458:	2200      	movs	r2, #0
 800545a:	4b4c      	ldr	r3, [pc, #304]	; (800558c <atan+0x2f4>)
 800545c:	f7fa fe7c 	bl	8000158 <__aeabi_dsub>
 8005460:	2200      	movs	r2, #0
 8005462:	4606      	mov	r6, r0
 8005464:	460f      	mov	r7, r1
 8005466:	4b49      	ldr	r3, [pc, #292]	; (800558c <atan+0x2f4>)
 8005468:	4620      	mov	r0, r4
 800546a:	4629      	mov	r1, r5
 800546c:	f7fa fe76 	bl	800015c <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f7fb f950 	bl	800071c <__aeabi_ddiv>
 800547c:	f04f 0a01 	mov.w	sl, #1
 8005480:	4604      	mov	r4, r0
 8005482:	460d      	mov	r5, r1
 8005484:	e767      	b.n	8005356 <atan+0xbe>
 8005486:	4b43      	ldr	r3, [pc, #268]	; (8005594 <atan+0x2fc>)
 8005488:	429e      	cmp	r6, r3
 800548a:	dc1a      	bgt.n	80054c2 <atan+0x22a>
 800548c:	2200      	movs	r2, #0
 800548e:	4b42      	ldr	r3, [pc, #264]	; (8005598 <atan+0x300>)
 8005490:	f7fa fe62 	bl	8000158 <__aeabi_dsub>
 8005494:	2200      	movs	r2, #0
 8005496:	4606      	mov	r6, r0
 8005498:	460f      	mov	r7, r1
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <atan+0x300>)
 800549c:	4620      	mov	r0, r4
 800549e:	4629      	mov	r1, r5
 80054a0:	f7fb f812 	bl	80004c8 <__aeabi_dmul>
 80054a4:	2200      	movs	r2, #0
 80054a6:	4b39      	ldr	r3, [pc, #228]	; (800558c <atan+0x2f4>)
 80054a8:	f7fa fe58 	bl	800015c <__adddf3>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fb f932 	bl	800071c <__aeabi_ddiv>
 80054b8:	f04f 0a02 	mov.w	sl, #2
 80054bc:	4604      	mov	r4, r0
 80054be:	460d      	mov	r5, r1
 80054c0:	e749      	b.n	8005356 <atan+0xbe>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	2000      	movs	r0, #0
 80054c8:	4934      	ldr	r1, [pc, #208]	; (800559c <atan+0x304>)
 80054ca:	f7fb f927 	bl	800071c <__aeabi_ddiv>
 80054ce:	f04f 0a03 	mov.w	sl, #3
 80054d2:	4604      	mov	r4, r0
 80054d4:	460d      	mov	r5, r1
 80054d6:	e73e      	b.n	8005356 <atan+0xbe>
 80054d8:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <atan+0x308>)
 80054da:	4e32      	ldr	r6, [pc, #200]	; (80055a4 <atan+0x30c>)
 80054dc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80054e0:	4456      	add	r6, sl
 80054e2:	449a      	add	sl, r3
 80054e4:	e9da 2300 	ldrd	r2, r3, [sl]
 80054e8:	f7fa fe36 	bl	8000158 <__aeabi_dsub>
 80054ec:	4622      	mov	r2, r4
 80054ee:	462b      	mov	r3, r5
 80054f0:	f7fa fe32 	bl	8000158 <__aeabi_dsub>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80054fc:	f7fa fe2c 	bl	8000158 <__aeabi_dsub>
 8005500:	f1bb 0f00 	cmp.w	fp, #0
 8005504:	4604      	mov	r4, r0
 8005506:	460d      	mov	r5, r1
 8005508:	f6bf aee4 	bge.w	80052d4 <atan+0x3c>
 800550c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005510:	461d      	mov	r5, r3
 8005512:	e6df      	b.n	80052d4 <atan+0x3c>
 8005514:	4d24      	ldr	r5, [pc, #144]	; (80055a8 <atan+0x310>)
 8005516:	e6dd      	b.n	80052d4 <atan+0x3c>
 8005518:	8800759c 	.word	0x8800759c
 800551c:	7e37e43c 	.word	0x7e37e43c
 8005520:	e322da11 	.word	0xe322da11
 8005524:	3f90ad3a 	.word	0x3f90ad3a
 8005528:	24760deb 	.word	0x24760deb
 800552c:	3fa97b4b 	.word	0x3fa97b4b
 8005530:	a0d03d51 	.word	0xa0d03d51
 8005534:	3fb10d66 	.word	0x3fb10d66
 8005538:	c54c206e 	.word	0xc54c206e
 800553c:	3fb745cd 	.word	0x3fb745cd
 8005540:	920083ff 	.word	0x920083ff
 8005544:	3fc24924 	.word	0x3fc24924
 8005548:	5555550d 	.word	0x5555550d
 800554c:	3fd55555 	.word	0x3fd55555
 8005550:	2c6a6c2f 	.word	0x2c6a6c2f
 8005554:	bfa2b444 	.word	0xbfa2b444
 8005558:	52defd9a 	.word	0x52defd9a
 800555c:	3fadde2d 	.word	0x3fadde2d
 8005560:	af749a6d 	.word	0xaf749a6d
 8005564:	3fb3b0f2 	.word	0x3fb3b0f2
 8005568:	fe231671 	.word	0xfe231671
 800556c:	3fbc71c6 	.word	0x3fbc71c6
 8005570:	9998ebc4 	.word	0x9998ebc4
 8005574:	3fc99999 	.word	0x3fc99999
 8005578:	440fffff 	.word	0x440fffff
 800557c:	7ff00000 	.word	0x7ff00000
 8005580:	54442d18 	.word	0x54442d18
 8005584:	3ff921fb 	.word	0x3ff921fb
 8005588:	3fdbffff 	.word	0x3fdbffff
 800558c:	3ff00000 	.word	0x3ff00000
 8005590:	3ff2ffff 	.word	0x3ff2ffff
 8005594:	40037fff 	.word	0x40037fff
 8005598:	3ff80000 	.word	0x3ff80000
 800559c:	bff00000 	.word	0xbff00000
 80055a0:	08005ac0 	.word	0x08005ac0
 80055a4:	08005aa0 	.word	0x08005aa0
 80055a8:	bff921fb 	.word	0xbff921fb

080055ac <fabs>:
 80055ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055b0:	4619      	mov	r1, r3
 80055b2:	4770      	bx	lr

080055b4 <atan2>:
 80055b4:	f000 b854 	b.w	8005660 <__ieee754_atan2>

080055b8 <sqrt>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	b08b      	sub	sp, #44	; 0x2c
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	f000 f92b 	bl	800581c <__ieee754_sqrt>
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <sqrt+0xa0>)
 80055c8:	4680      	mov	r8, r0
 80055ca:	f993 a000 	ldrsb.w	sl, [r3]
 80055ce:	4689      	mov	r9, r1
 80055d0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80055d4:	d02b      	beq.n	800562e <sqrt+0x76>
 80055d6:	4622      	mov	r2, r4
 80055d8:	462b      	mov	r3, r5
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fb fa0d 	bl	80009fc <__aeabi_dcmpun>
 80055e2:	4683      	mov	fp, r0
 80055e4:	bb18      	cbnz	r0, 800562e <sqrt+0x76>
 80055e6:	2600      	movs	r6, #0
 80055e8:	2700      	movs	r7, #0
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	4620      	mov	r0, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7fb f9db 	bl	80009ac <__aeabi_dcmplt>
 80055f6:	b1d0      	cbz	r0, 800562e <sqrt+0x76>
 80055f8:	2301      	movs	r3, #1
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4b17      	ldr	r3, [pc, #92]	; (800565c <sqrt+0xa4>)
 80055fe:	f8cd b020 	str.w	fp, [sp, #32]
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005608:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800560c:	f1ba 0f00 	cmp.w	sl, #0
 8005610:	d112      	bne.n	8005638 <sqrt+0x80>
 8005612:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005616:	4668      	mov	r0, sp
 8005618:	f000 f9ac 	bl	8005974 <matherr>
 800561c:	b1b8      	cbz	r0, 800564e <sqrt+0x96>
 800561e:	9b08      	ldr	r3, [sp, #32]
 8005620:	b11b      	cbz	r3, 800562a <sqrt+0x72>
 8005622:	f000 f9a9 	bl	8005978 <__errno>
 8005626:	9b08      	ldr	r3, [sp, #32]
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800562e:	4640      	mov	r0, r8
 8005630:	4649      	mov	r1, r9
 8005632:	b00b      	add	sp, #44	; 0x2c
 8005634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005638:	4632      	mov	r2, r6
 800563a:	463b      	mov	r3, r7
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f7fb f86c 	bl	800071c <__aeabi_ddiv>
 8005644:	f1ba 0f02 	cmp.w	sl, #2
 8005648:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800564c:	d1e3      	bne.n	8005616 <sqrt+0x5e>
 800564e:	f000 f993 	bl	8005978 <__errno>
 8005652:	2321      	movs	r3, #33	; 0x21
 8005654:	6003      	str	r3, [r0, #0]
 8005656:	e7e2      	b.n	800561e <sqrt+0x66>
 8005658:	20000010 	.word	0x20000010
 800565c:	08005ae0 	.word	0x08005ae0

08005660 <__ieee754_atan2>:
 8005660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	4256      	negs	r6, r2
 8005666:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800566a:	4316      	orrs	r6, r2
 800566c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8005818 <__ieee754_atan2+0x1b8>
 8005670:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8005674:	454e      	cmp	r6, r9
 8005676:	4604      	mov	r4, r0
 8005678:	460d      	mov	r5, r1
 800567a:	469e      	mov	lr, r3
 800567c:	d808      	bhi.n	8005690 <__ieee754_atan2+0x30>
 800567e:	4246      	negs	r6, r0
 8005680:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005684:	4306      	orrs	r6, r0
 8005686:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800568a:	454e      	cmp	r6, r9
 800568c:	4688      	mov	r8, r1
 800568e:	d906      	bls.n	800569e <__ieee754_atan2+0x3e>
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	f7fa fd62 	bl	800015c <__adddf3>
 8005698:	4604      	mov	r4, r0
 800569a:	460d      	mov	r5, r1
 800569c:	e030      	b.n	8005700 <__ieee754_atan2+0xa0>
 800569e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80056a2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80056a6:	4316      	orrs	r6, r2
 80056a8:	d103      	bne.n	80056b2 <__ieee754_atan2+0x52>
 80056aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ae:	f7ff bdf3 	b.w	8005298 <atan>
 80056b2:	179e      	asrs	r6, r3, #30
 80056b4:	f006 0602 	and.w	r6, r6, #2
 80056b8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80056bc:	ea57 0100 	orrs.w	r1, r7, r0
 80056c0:	d107      	bne.n	80056d2 <__ieee754_atan2+0x72>
 80056c2:	2e02      	cmp	r6, #2
 80056c4:	d079      	beq.n	80057ba <__ieee754_atan2+0x15a>
 80056c6:	2e03      	cmp	r6, #3
 80056c8:	d11a      	bne.n	8005700 <__ieee754_atan2+0xa0>
 80056ca:	a541      	add	r5, pc, #260	; (adr r5, 80057d0 <__ieee754_atan2+0x170>)
 80056cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80056d0:	e016      	b.n	8005700 <__ieee754_atan2+0xa0>
 80056d2:	ea5c 0102 	orrs.w	r1, ip, r2
 80056d6:	d106      	bne.n	80056e6 <__ieee754_atan2+0x86>
 80056d8:	f1b8 0f00 	cmp.w	r8, #0
 80056dc:	da71      	bge.n	80057c2 <__ieee754_atan2+0x162>
 80056de:	a53e      	add	r5, pc, #248	; (adr r5, 80057d8 <__ieee754_atan2+0x178>)
 80056e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80056e4:	e00c      	b.n	8005700 <__ieee754_atan2+0xa0>
 80056e6:	45cc      	cmp	ip, r9
 80056e8:	d123      	bne.n	8005732 <__ieee754_atan2+0xd2>
 80056ea:	4567      	cmp	r7, ip
 80056ec:	d114      	bne.n	8005718 <__ieee754_atan2+0xb8>
 80056ee:	2e02      	cmp	r6, #2
 80056f0:	d00a      	beq.n	8005708 <__ieee754_atan2+0xa8>
 80056f2:	2e03      	cmp	r6, #3
 80056f4:	d00c      	beq.n	8005710 <__ieee754_atan2+0xb0>
 80056f6:	2e01      	cmp	r6, #1
 80056f8:	d15b      	bne.n	80057b2 <__ieee754_atan2+0x152>
 80056fa:	a539      	add	r5, pc, #228	; (adr r5, 80057e0 <__ieee754_atan2+0x180>)
 80056fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005708:	a537      	add	r5, pc, #220	; (adr r5, 80057e8 <__ieee754_atan2+0x188>)
 800570a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800570e:	e7f7      	b.n	8005700 <__ieee754_atan2+0xa0>
 8005710:	a537      	add	r5, pc, #220	; (adr r5, 80057f0 <__ieee754_atan2+0x190>)
 8005712:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005716:	e7f3      	b.n	8005700 <__ieee754_atan2+0xa0>
 8005718:	2e02      	cmp	r6, #2
 800571a:	d04e      	beq.n	80057ba <__ieee754_atan2+0x15a>
 800571c:	2e03      	cmp	r6, #3
 800571e:	d0d4      	beq.n	80056ca <__ieee754_atan2+0x6a>
 8005720:	2e01      	cmp	r6, #1
 8005722:	f04f 0400 	mov.w	r4, #0
 8005726:	d102      	bne.n	800572e <__ieee754_atan2+0xce>
 8005728:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800572c:	e7e8      	b.n	8005700 <__ieee754_atan2+0xa0>
 800572e:	2500      	movs	r5, #0
 8005730:	e7e6      	b.n	8005700 <__ieee754_atan2+0xa0>
 8005732:	454f      	cmp	r7, r9
 8005734:	d0d0      	beq.n	80056d8 <__ieee754_atan2+0x78>
 8005736:	eba7 070c 	sub.w	r7, r7, ip
 800573a:	153f      	asrs	r7, r7, #20
 800573c:	2f3c      	cmp	r7, #60	; 0x3c
 800573e:	dc1e      	bgt.n	800577e <__ieee754_atan2+0x11e>
 8005740:	2b00      	cmp	r3, #0
 8005742:	da01      	bge.n	8005748 <__ieee754_atan2+0xe8>
 8005744:	373c      	adds	r7, #60	; 0x3c
 8005746:	db1e      	blt.n	8005786 <__ieee754_atan2+0x126>
 8005748:	4620      	mov	r0, r4
 800574a:	4629      	mov	r1, r5
 800574c:	f7fa ffe6 	bl	800071c <__aeabi_ddiv>
 8005750:	f7ff ff2c 	bl	80055ac <fabs>
 8005754:	f7ff fda0 	bl	8005298 <atan>
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	2e01      	cmp	r6, #1
 800575e:	d015      	beq.n	800578c <__ieee754_atan2+0x12c>
 8005760:	2e02      	cmp	r6, #2
 8005762:	d017      	beq.n	8005794 <__ieee754_atan2+0x134>
 8005764:	2e00      	cmp	r6, #0
 8005766:	d0cb      	beq.n	8005700 <__ieee754_atan2+0xa0>
 8005768:	a323      	add	r3, pc, #140	; (adr r3, 80057f8 <__ieee754_atan2+0x198>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fa fcf1 	bl	8000158 <__aeabi_dsub>
 8005776:	a322      	add	r3, pc, #136	; (adr r3, 8005800 <__ieee754_atan2+0x1a0>)
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	e016      	b.n	80057ac <__ieee754_atan2+0x14c>
 800577e:	a522      	add	r5, pc, #136	; (adr r5, 8005808 <__ieee754_atan2+0x1a8>)
 8005780:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005784:	e7ea      	b.n	800575c <__ieee754_atan2+0xfc>
 8005786:	2400      	movs	r4, #0
 8005788:	2500      	movs	r5, #0
 800578a:	e7e7      	b.n	800575c <__ieee754_atan2+0xfc>
 800578c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005790:	461d      	mov	r5, r3
 8005792:	e7b5      	b.n	8005700 <__ieee754_atan2+0xa0>
 8005794:	a318      	add	r3, pc, #96	; (adr r3, 80057f8 <__ieee754_atan2+0x198>)
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fa fcdb 	bl	8000158 <__aeabi_dsub>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	a116      	add	r1, pc, #88	; (adr r1, 8005800 <__ieee754_atan2+0x1a0>)
 80057a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ac:	f7fa fcd4 	bl	8000158 <__aeabi_dsub>
 80057b0:	e772      	b.n	8005698 <__ieee754_atan2+0x38>
 80057b2:	a517      	add	r5, pc, #92	; (adr r5, 8005810 <__ieee754_atan2+0x1b0>)
 80057b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057b8:	e7a2      	b.n	8005700 <__ieee754_atan2+0xa0>
 80057ba:	a511      	add	r5, pc, #68	; (adr r5, 8005800 <__ieee754_atan2+0x1a0>)
 80057bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057c0:	e79e      	b.n	8005700 <__ieee754_atan2+0xa0>
 80057c2:	a511      	add	r5, pc, #68	; (adr r5, 8005808 <__ieee754_atan2+0x1a8>)
 80057c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057c8:	e79a      	b.n	8005700 <__ieee754_atan2+0xa0>
 80057ca:	bf00      	nop
 80057cc:	f3af 8000 	nop.w
 80057d0:	54442d18 	.word	0x54442d18
 80057d4:	c00921fb 	.word	0xc00921fb
 80057d8:	54442d18 	.word	0x54442d18
 80057dc:	bff921fb 	.word	0xbff921fb
 80057e0:	54442d18 	.word	0x54442d18
 80057e4:	bfe921fb 	.word	0xbfe921fb
 80057e8:	7f3321d2 	.word	0x7f3321d2
 80057ec:	4002d97c 	.word	0x4002d97c
 80057f0:	7f3321d2 	.word	0x7f3321d2
 80057f4:	c002d97c 	.word	0xc002d97c
 80057f8:	33145c07 	.word	0x33145c07
 80057fc:	3ca1a626 	.word	0x3ca1a626
 8005800:	54442d18 	.word	0x54442d18
 8005804:	400921fb 	.word	0x400921fb
 8005808:	54442d18 	.word	0x54442d18
 800580c:	3ff921fb 	.word	0x3ff921fb
 8005810:	54442d18 	.word	0x54442d18
 8005814:	3fe921fb 	.word	0x3fe921fb
 8005818:	7ff00000 	.word	0x7ff00000

0800581c <__ieee754_sqrt>:
 800581c:	4b54      	ldr	r3, [pc, #336]	; (8005970 <__ieee754_sqrt+0x154>)
 800581e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	438b      	bics	r3, r1
 8005824:	4606      	mov	r6, r0
 8005826:	460d      	mov	r5, r1
 8005828:	460a      	mov	r2, r1
 800582a:	460c      	mov	r4, r1
 800582c:	d10f      	bne.n	800584e <__ieee754_sqrt+0x32>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	f7fa fe49 	bl	80004c8 <__aeabi_dmul>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4630      	mov	r0, r6
 800583c:	4629      	mov	r1, r5
 800583e:	f7fa fc8d 	bl	800015c <__adddf3>
 8005842:	4606      	mov	r6, r0
 8005844:	460d      	mov	r5, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4629      	mov	r1, r5
 800584a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584e:	2900      	cmp	r1, #0
 8005850:	4607      	mov	r7, r0
 8005852:	4603      	mov	r3, r0
 8005854:	dc0e      	bgt.n	8005874 <__ieee754_sqrt+0x58>
 8005856:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800585a:	ea5c 0707 	orrs.w	r7, ip, r7
 800585e:	d0f2      	beq.n	8005846 <__ieee754_sqrt+0x2a>
 8005860:	b141      	cbz	r1, 8005874 <__ieee754_sqrt+0x58>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	f7fa fc77 	bl	8000158 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	f7fa ff55 	bl	800071c <__aeabi_ddiv>
 8005872:	e7e6      	b.n	8005842 <__ieee754_sqrt+0x26>
 8005874:	1512      	asrs	r2, r2, #20
 8005876:	d074      	beq.n	8005962 <__ieee754_sqrt+0x146>
 8005878:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800587c:	07d5      	lsls	r5, r2, #31
 800587e:	f04f 0500 	mov.w	r5, #0
 8005882:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005886:	bf48      	it	mi
 8005888:	0fd9      	lsrmi	r1, r3, #31
 800588a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800588e:	bf44      	itt	mi
 8005890:	005b      	lslmi	r3, r3, #1
 8005892:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005896:	1051      	asrs	r1, r2, #1
 8005898:	0fda      	lsrs	r2, r3, #31
 800589a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800589e:	4628      	mov	r0, r5
 80058a0:	2216      	movs	r2, #22
 80058a2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	1987      	adds	r7, r0, r6
 80058aa:	42a7      	cmp	r7, r4
 80058ac:	bfde      	ittt	le
 80058ae:	19b8      	addle	r0, r7, r6
 80058b0:	1be4      	suble	r4, r4, r7
 80058b2:	19ad      	addle	r5, r5, r6
 80058b4:	0fdf      	lsrs	r7, r3, #31
 80058b6:	3a01      	subs	r2, #1
 80058b8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80058bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80058c4:	d1f0      	bne.n	80058a8 <__ieee754_sqrt+0x8c>
 80058c6:	f04f 0c20 	mov.w	ip, #32
 80058ca:	4696      	mov	lr, r2
 80058cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80058d0:	4284      	cmp	r4, r0
 80058d2:	eb06 070e 	add.w	r7, r6, lr
 80058d6:	dc02      	bgt.n	80058de <__ieee754_sqrt+0xc2>
 80058d8:	d112      	bne.n	8005900 <__ieee754_sqrt+0xe4>
 80058da:	429f      	cmp	r7, r3
 80058dc:	d810      	bhi.n	8005900 <__ieee754_sqrt+0xe4>
 80058de:	2f00      	cmp	r7, #0
 80058e0:	eb07 0e06 	add.w	lr, r7, r6
 80058e4:	da42      	bge.n	800596c <__ieee754_sqrt+0x150>
 80058e6:	f1be 0f00 	cmp.w	lr, #0
 80058ea:	db3f      	blt.n	800596c <__ieee754_sqrt+0x150>
 80058ec:	f100 0801 	add.w	r8, r0, #1
 80058f0:	1a24      	subs	r4, r4, r0
 80058f2:	4640      	mov	r0, r8
 80058f4:	429f      	cmp	r7, r3
 80058f6:	bf88      	it	hi
 80058f8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80058fc:	1bdb      	subs	r3, r3, r7
 80058fe:	4432      	add	r2, r6
 8005900:	0064      	lsls	r4, r4, #1
 8005902:	f1bc 0c01 	subs.w	ip, ip, #1
 8005906:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800590a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800590e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005912:	d1dd      	bne.n	80058d0 <__ieee754_sqrt+0xb4>
 8005914:	4323      	orrs	r3, r4
 8005916:	d006      	beq.n	8005926 <__ieee754_sqrt+0x10a>
 8005918:	1c54      	adds	r4, r2, #1
 800591a:	bf0b      	itete	eq
 800591c:	4662      	moveq	r2, ip
 800591e:	3201      	addne	r2, #1
 8005920:	3501      	addeq	r5, #1
 8005922:	f022 0201 	bicne.w	r2, r2, #1
 8005926:	106b      	asrs	r3, r5, #1
 8005928:	0852      	lsrs	r2, r2, #1
 800592a:	07e8      	lsls	r0, r5, #31
 800592c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005930:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005934:	bf48      	it	mi
 8005936:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800593a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800593e:	4616      	mov	r6, r2
 8005940:	e781      	b.n	8005846 <__ieee754_sqrt+0x2a>
 8005942:	0adc      	lsrs	r4, r3, #11
 8005944:	3915      	subs	r1, #21
 8005946:	055b      	lsls	r3, r3, #21
 8005948:	2c00      	cmp	r4, #0
 800594a:	d0fa      	beq.n	8005942 <__ieee754_sqrt+0x126>
 800594c:	02e6      	lsls	r6, r4, #11
 800594e:	d50a      	bpl.n	8005966 <__ieee754_sqrt+0x14a>
 8005950:	f1c2 0020 	rsb	r0, r2, #32
 8005954:	fa23 f000 	lsr.w	r0, r3, r0
 8005958:	1e55      	subs	r5, r2, #1
 800595a:	4093      	lsls	r3, r2
 800595c:	4304      	orrs	r4, r0
 800595e:	1b4a      	subs	r2, r1, r5
 8005960:	e78a      	b.n	8005878 <__ieee754_sqrt+0x5c>
 8005962:	4611      	mov	r1, r2
 8005964:	e7f0      	b.n	8005948 <__ieee754_sqrt+0x12c>
 8005966:	0064      	lsls	r4, r4, #1
 8005968:	3201      	adds	r2, #1
 800596a:	e7ef      	b.n	800594c <__ieee754_sqrt+0x130>
 800596c:	4680      	mov	r8, r0
 800596e:	e7bf      	b.n	80058f0 <__ieee754_sqrt+0xd4>
 8005970:	7ff00000 	.word	0x7ff00000

08005974 <matherr>:
 8005974:	2000      	movs	r0, #0
 8005976:	4770      	bx	lr

08005978 <__errno>:
 8005978:	4b01      	ldr	r3, [pc, #4]	; (8005980 <__errno+0x8>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000014 	.word	0x20000014

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	2500      	movs	r5, #0
 8005988:	4e0c      	ldr	r6, [pc, #48]	; (80059bc <__libc_init_array+0x38>)
 800598a:	4c0d      	ldr	r4, [pc, #52]	; (80059c0 <__libc_init_array+0x3c>)
 800598c:	1ba4      	subs	r4, r4, r6
 800598e:	10a4      	asrs	r4, r4, #2
 8005990:	42a5      	cmp	r5, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	f000 f822 	bl	80059dc <_init>
 8005998:	2500      	movs	r5, #0
 800599a:	4e0a      	ldr	r6, [pc, #40]	; (80059c4 <__libc_init_array+0x40>)
 800599c:	4c0a      	ldr	r4, [pc, #40]	; (80059c8 <__libc_init_array+0x44>)
 800599e:	1ba4      	subs	r4, r4, r6
 80059a0:	10a4      	asrs	r4, r4, #2
 80059a2:	42a5      	cmp	r5, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ac:	4798      	blx	r3
 80059ae:	3501      	adds	r5, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059b6:	4798      	blx	r3
 80059b8:	3501      	adds	r5, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005ae8 	.word	0x08005ae8
 80059c0:	08005ae8 	.word	0x08005ae8
 80059c4:	08005ae8 	.word	0x08005ae8
 80059c8:	08005aec 	.word	0x08005aec

080059cc <memset>:
 80059cc:	4603      	mov	r3, r0
 80059ce:	4402      	add	r2, r0
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d100      	bne.n	80059d6 <memset+0xa>
 80059d4:	4770      	bx	lr
 80059d6:	f803 1b01 	strb.w	r1, [r3], #1
 80059da:	e7f9      	b.n	80059d0 <memset+0x4>

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
