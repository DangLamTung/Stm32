
rtos_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005ae0  08005ae0  00015ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bfc  08005bfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005bfc  08005bfc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bfc  08005bfc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000074  08005c78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005c78  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df1d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f08  00000000  00000000  0002dfba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  0002fec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014cd5  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4b2  00000000  00000000  000467d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074606  00000000  00000000  00050c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c528d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  000c5308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ac4 	.word	0x08005ac4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005ac4 	.word	0x08005ac4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x28>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8d1 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f004 f83a 	bl	8005100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f003 ff26 	bl	8004edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000004 	.word	0x20000004
 80010bc:	20000090 	.word	0x20000090

080010c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000090 	.word	0x20000090

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <__NVIC_EnableIRQ+0x34>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff4f 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff64 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ffb2 	bl	80011c4 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff81 	bl	8001170 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff57 	bl	8001138 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e043      	b.n	8001332 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_DMA_Init+0xa8>)
 80012b2:	4413      	add	r3, r2
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_DMA_Init+0xac>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_DMA_Init+0xb0>)
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	bffdfff8 	.word	0xbffdfff8
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2204      	movs	r2, #4
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d04f      	beq.n	8001410 <HAL_DMA_IRQHandler+0xc8>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d04a      	beq.n	8001410 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a66      	ldr	r2, [pc, #408]	; (8001538 <HAL_DMA_IRQHandler+0x1f0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d029      	beq.n	80013f6 <HAL_DMA_IRQHandler+0xae>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a65      	ldr	r2, [pc, #404]	; (800153c <HAL_DMA_IRQHandler+0x1f4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d022      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xaa>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a63      	ldr	r2, [pc, #396]	; (8001540 <HAL_DMA_IRQHandler+0x1f8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01a      	beq.n	80013ec <HAL_DMA_IRQHandler+0xa4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a62      	ldr	r2, [pc, #392]	; (8001544 <HAL_DMA_IRQHandler+0x1fc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d012      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x9e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a60      	ldr	r2, [pc, #384]	; (8001548 <HAL_DMA_IRQHandler+0x200>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00a      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x98>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a5f      	ldr	r2, [pc, #380]	; (800154c <HAL_DMA_IRQHandler+0x204>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d102      	bne.n	80013da <HAL_DMA_IRQHandler+0x92>
 80013d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d8:	e00e      	b.n	80013f8 <HAL_DMA_IRQHandler+0xb0>
 80013da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013de:	e00b      	b.n	80013f8 <HAL_DMA_IRQHandler+0xb0>
 80013e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013e4:	e008      	b.n	80013f8 <HAL_DMA_IRQHandler+0xb0>
 80013e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ea:	e005      	b.n	80013f8 <HAL_DMA_IRQHandler+0xb0>
 80013ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f0:	e002      	b.n	80013f8 <HAL_DMA_IRQHandler+0xb0>
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	e000      	b.n	80013f8 <HAL_DMA_IRQHandler+0xb0>
 80013f6:	2304      	movs	r3, #4
 80013f8:	4a55      	ldr	r2, [pc, #340]	; (8001550 <HAL_DMA_IRQHandler+0x208>)
 80013fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8094 	beq.w	800152e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800140e:	e08e      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	2202      	movs	r2, #2
 8001416:	409a      	lsls	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d056      	beq.n	80014ce <HAL_DMA_IRQHandler+0x186>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d051      	beq.n	80014ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10b      	bne.n	8001450 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 020a 	bic.w	r2, r2, #10
 8001446:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a38      	ldr	r2, [pc, #224]	; (8001538 <HAL_DMA_IRQHandler+0x1f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d029      	beq.n	80014ae <HAL_DMA_IRQHandler+0x166>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a37      	ldr	r2, [pc, #220]	; (800153c <HAL_DMA_IRQHandler+0x1f4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d022      	beq.n	80014aa <HAL_DMA_IRQHandler+0x162>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a35      	ldr	r2, [pc, #212]	; (8001540 <HAL_DMA_IRQHandler+0x1f8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01a      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x15c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_DMA_IRQHandler+0x1fc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d012      	beq.n	800149e <HAL_DMA_IRQHandler+0x156>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a32      	ldr	r2, [pc, #200]	; (8001548 <HAL_DMA_IRQHandler+0x200>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00a      	beq.n	8001498 <HAL_DMA_IRQHandler+0x150>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a31      	ldr	r2, [pc, #196]	; (800154c <HAL_DMA_IRQHandler+0x204>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d102      	bne.n	8001492 <HAL_DMA_IRQHandler+0x14a>
 800148c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001490:	e00e      	b.n	80014b0 <HAL_DMA_IRQHandler+0x168>
 8001492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001496:	e00b      	b.n	80014b0 <HAL_DMA_IRQHandler+0x168>
 8001498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149c:	e008      	b.n	80014b0 <HAL_DMA_IRQHandler+0x168>
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	e005      	b.n	80014b0 <HAL_DMA_IRQHandler+0x168>
 80014a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a8:	e002      	b.n	80014b0 <HAL_DMA_IRQHandler+0x168>
 80014aa:	2320      	movs	r3, #32
 80014ac:	e000      	b.n	80014b0 <HAL_DMA_IRQHandler+0x168>
 80014ae:	2302      	movs	r3, #2
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_DMA_IRQHandler+0x208>)
 80014b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d034      	beq.n	800152e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014cc:	e02f      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2208      	movs	r2, #8
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d028      	beq.n	8001530 <HAL_DMA_IRQHandler+0x1e8>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 020e 	bic.w	r2, r2, #14
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
    }
  }
  return;
 800152e:	bf00      	nop
 8001530:	bf00      	nop
}
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020008 	.word	0x40020008
 800153c:	4002001c 	.word	0x4002001c
 8001540:	40020030 	.word	0x40020030
 8001544:	40020044 	.word	0x40020044
 8001548:	40020058 	.word	0x40020058
 800154c:	4002006c 	.word	0x4002006c
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e127      	b.n	80017b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001568:	2201      	movs	r2, #1
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8116 	bne.w	80017b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b12      	cmp	r3, #18
 800158c:	d034      	beq.n	80015f8 <HAL_GPIO_Init+0xa4>
 800158e:	2b12      	cmp	r3, #18
 8001590:	d80d      	bhi.n	80015ae <HAL_GPIO_Init+0x5a>
 8001592:	2b02      	cmp	r3, #2
 8001594:	d02b      	beq.n	80015ee <HAL_GPIO_Init+0x9a>
 8001596:	2b02      	cmp	r3, #2
 8001598:	d804      	bhi.n	80015a4 <HAL_GPIO_Init+0x50>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d031      	beq.n	8001602 <HAL_GPIO_Init+0xae>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d01c      	beq.n	80015dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a2:	e048      	b.n	8001636 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d043      	beq.n	8001630 <HAL_GPIO_Init+0xdc>
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d01b      	beq.n	80015e4 <HAL_GPIO_Init+0x90>
          break;
 80015ac:	e043      	b.n	8001636 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015ae:	4a89      	ldr	r2, [pc, #548]	; (80017d4 <HAL_GPIO_Init+0x280>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d026      	beq.n	8001602 <HAL_GPIO_Init+0xae>
 80015b4:	4a87      	ldr	r2, [pc, #540]	; (80017d4 <HAL_GPIO_Init+0x280>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d806      	bhi.n	80015c8 <HAL_GPIO_Init+0x74>
 80015ba:	4a87      	ldr	r2, [pc, #540]	; (80017d8 <HAL_GPIO_Init+0x284>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d020      	beq.n	8001602 <HAL_GPIO_Init+0xae>
 80015c0:	4a86      	ldr	r2, [pc, #536]	; (80017dc <HAL_GPIO_Init+0x288>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_GPIO_Init+0xae>
          break;
 80015c6:	e036      	b.n	8001636 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015c8:	4a85      	ldr	r2, [pc, #532]	; (80017e0 <HAL_GPIO_Init+0x28c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0xae>
 80015ce:	4a85      	ldr	r2, [pc, #532]	; (80017e4 <HAL_GPIO_Init+0x290>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d016      	beq.n	8001602 <HAL_GPIO_Init+0xae>
 80015d4:	4a84      	ldr	r2, [pc, #528]	; (80017e8 <HAL_GPIO_Init+0x294>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0xae>
          break;
 80015da:	e02c      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e028      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e023      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	3308      	adds	r3, #8
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e01e      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	330c      	adds	r3, #12
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e019      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e012      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e008      	b.n	8001636 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e002      	b.n	8001636 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d801      	bhi.n	8001640 <HAL_GPIO_Init+0xec>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e001      	b.n	8001644 <HAL_GPIO_Init+0xf0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d802      	bhi.n	8001652 <HAL_GPIO_Init+0xfe>
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x104>
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3b08      	subs	r3, #8
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	210f      	movs	r1, #15
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	401a      	ands	r2, r3
 800166a:	6a39      	ldr	r1, [r7, #32]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8096 	beq.w	80017b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_GPIO_Init+0x298>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_GPIO_Init+0x298>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b56      	ldr	r3, [pc, #344]	; (80017ec <HAL_GPIO_Init+0x298>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169e:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x29c>)
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <HAL_GPIO_Init+0x2a0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0x19e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_GPIO_Init+0x2a4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00d      	beq.n	80016ee <HAL_GPIO_Init+0x19a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a49      	ldr	r2, [pc, #292]	; (80017fc <HAL_GPIO_Init+0x2a8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x196>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a48      	ldr	r2, [pc, #288]	; (8001800 <HAL_GPIO_Init+0x2ac>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_GPIO_Init+0x192>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x1a0>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x1a0>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x1a0>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x1a0>
 80016f2:	2300      	movs	r3, #0
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001704:	493a      	ldr	r1, [pc, #232]	; (80017f0 <HAL_GPIO_Init+0x29c>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4938      	ldr	r1, [pc, #224]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
 800172a:	e006      	b.n	800173a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	43db      	mvns	r3, r3
 8001734:	4933      	ldr	r1, [pc, #204]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001736:	4013      	ands	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001746:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	492e      	ldr	r1, [pc, #184]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
 8001752:	e006      	b.n	8001762 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	43db      	mvns	r3, r3
 800175c:	4929      	ldr	r1, [pc, #164]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 800175e:	4013      	ands	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	4924      	ldr	r1, [pc, #144]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
 800177a:	e006      	b.n	800178a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	43db      	mvns	r3, r3
 8001784:	491f      	ldr	r1, [pc, #124]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001786:	4013      	ands	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	491a      	ldr	r1, [pc, #104]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60cb      	str	r3, [r1, #12]
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4915      	ldr	r1, [pc, #84]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f aed0 	bne.w	8001568 <HAL_GPIO_Init+0x14>
  }
}
 80017c8:	bf00      	nop
 80017ca:	372c      	adds	r7, #44	; 0x2c
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	10210000 	.word	0x10210000
 80017d8:	10110000 	.word	0x10110000
 80017dc:	10120000 	.word	0x10120000
 80017e0:	10310000 	.word	0x10310000
 80017e4:	10320000 	.word	0x10320000
 80017e8:	10220000 	.word	0x10220000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40010800 	.word	0x40010800
 80017f8:	40010c00 	.word	0x40010c00
 80017fc:	40011000 	.word	0x40011000
 8001800:	40011400 	.word	0x40011400
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e10f      	b.n	8001a6a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f003 fb6e 	bl	8004f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800187c:	f001 fc30 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8001880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4a7b      	ldr	r2, [pc, #492]	; (8001a74 <HAL_I2C_Init+0x23c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d807      	bhi.n	800189c <HAL_I2C_Init+0x64>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a7a      	ldr	r2, [pc, #488]	; (8001a78 <HAL_I2C_Init+0x240>)
 8001890:	4293      	cmp	r3, r2
 8001892:	bf94      	ite	ls
 8001894:	2301      	movls	r3, #1
 8001896:	2300      	movhi	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e006      	b.n	80018aa <HAL_I2C_Init+0x72>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a77      	ldr	r2, [pc, #476]	; (8001a7c <HAL_I2C_Init+0x244>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	bf94      	ite	ls
 80018a4:	2301      	movls	r3, #1
 80018a6:	2300      	movhi	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0db      	b.n	8001a6a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4a72      	ldr	r2, [pc, #456]	; (8001a80 <HAL_I2C_Init+0x248>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0c9b      	lsrs	r3, r3, #18
 80018bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a64      	ldr	r2, [pc, #400]	; (8001a74 <HAL_I2C_Init+0x23c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d802      	bhi.n	80018ec <HAL_I2C_Init+0xb4>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	3301      	adds	r3, #1
 80018ea:	e009      	b.n	8001900 <HAL_I2C_Init+0xc8>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_I2C_Init+0x24c>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	3301      	adds	r3, #1
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	430b      	orrs	r3, r1
 8001906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4956      	ldr	r1, [pc, #344]	; (8001a74 <HAL_I2C_Init+0x23c>)
 800191c:	428b      	cmp	r3, r1
 800191e:	d80d      	bhi.n	800193c <HAL_I2C_Init+0x104>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1e59      	subs	r1, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fbb1 f3f3 	udiv	r3, r1, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	bf38      	it	cc
 8001938:	2304      	movcc	r3, #4
 800193a:	e04f      	b.n	80019dc <HAL_I2C_Init+0x1a4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <HAL_I2C_Init+0x130>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1e58      	subs	r0, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	440b      	add	r3, r1
 8001952:	fbb0 f3f3 	udiv	r3, r0, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	e012      	b.n	800198e <HAL_I2C_Init+0x156>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Init+0x15e>
 8001992:	2301      	movs	r3, #1
 8001994:	e022      	b.n	80019dc <HAL_I2C_Init+0x1a4>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10e      	bne.n	80019bc <HAL_I2C_Init+0x184>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e58      	subs	r0, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ba:	e00f      	b.n	80019dc <HAL_I2C_Init+0x1a4>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	0099      	lsls	r1, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	6809      	ldr	r1, [r1, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6911      	ldr	r1, [r2, #16]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68d2      	ldr	r2, [r2, #12]
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	000186a0 	.word	0x000186a0
 8001a78:	001e847f 	.word	0x001e847f
 8001a7c:	003d08ff 	.word	0x003d08ff
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	10624dd3 	.word	0x10624dd3

08001a88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	460b      	mov	r3, r1
 8001a96:	817b      	strh	r3, [r7, #10]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fb10 	bl	80010c0 <HAL_GetTick>
 8001aa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	f040 80e0 	bne.w	8001c70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2319      	movs	r3, #25
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4970      	ldr	r1, [pc, #448]	; (8001c7c <HAL_I2C_Master_Transmit+0x1f4>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fd5e 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e0d3      	b.n	8001c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_I2C_Master_Transmit+0x50>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e0cc      	b.n	8001c72 <HAL_I2C_Master_Transmit+0x1ea>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d007      	beq.n	8001afe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2221      	movs	r2, #33	; 0x21
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	893a      	ldrh	r2, [r7, #8]
 8001b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	; (8001c80 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b40:	8979      	ldrh	r1, [r7, #10]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	6a3a      	ldr	r2, [r7, #32]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fbec 	bl	8002324 <I2C_MasterRequestWrite>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e08d      	b.n	8001c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b6c:	e066      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	6a39      	ldr	r1, [r7, #32]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fdd8 	bl	8002728 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00d      	beq.n	8001b9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d107      	bne.n	8001b96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06b      	b.n	8001c72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d11b      	bne.n	8001c10 <HAL_I2C_Master_Transmit+0x188>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d017      	beq.n	8001c10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	6a39      	ldr	r1, [r7, #32]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fdc8 	bl	80027aa <I2C_WaitOnBTFFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00d      	beq.n	8001c3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d107      	bne.n	8001c38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e01a      	b.n	8001c72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d194      	bne.n	8001b6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	00100002 	.word	0x00100002
 8001c80:	ffff0000 	.word	0xffff0000

08001c84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	460b      	mov	r3, r1
 8001c92:	817b      	strh	r3, [r7, #10]
 8001c94:	4613      	mov	r3, r2
 8001c96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fa12 	bl	80010c0 <HAL_GetTick>
 8001c9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	f040 8213 	bne.w	80020d2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2319      	movs	r3, #25
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	497e      	ldr	r1, [pc, #504]	; (8001eb0 <HAL_I2C_Master_Receive+0x22c>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fc60 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e206      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2C_Master_Receive+0x50>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e1ff      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d007      	beq.n	8001cfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2222      	movs	r2, #34	; 0x22
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2210      	movs	r2, #16
 8001d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	893a      	ldrh	r2, [r7, #8]
 8001d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a5e      	ldr	r2, [pc, #376]	; (8001eb4 <HAL_I2C_Master_Receive+0x230>)
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d3c:	8979      	ldrh	r1, [r7, #10]
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fb64 	bl	8002410 <I2C_MasterRequestRead>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1c0      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d113      	bne.n	8001d82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e194      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d11d      	bne.n	8001dc6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d98:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc2:	b662      	cpsie	i
 8001dc4:	e172      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d11d      	bne.n	8001e0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dde:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e06:	b662      	cpsie	i
 8001e08:	e150      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e30:	e13c      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	f200 80f5 	bhi.w	8002026 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d123      	bne.n	8001e8c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fcef 	bl	800282c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e13d      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e8a:	e10f      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d150      	bne.n	8001f36 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <HAL_I2C_Master_Receive+0x234>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fb6c 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e112      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
 8001eae:	bf00      	nop
 8001eb0:	00100002 	.word	0x00100002
 8001eb4:	ffff0000 	.word	0xffff0000
 8001eb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ecc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f00:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f34:	e0ba      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4967      	ldr	r1, [pc, #412]	; (80020dc <HAL_I2C_Master_Receive+0x458>)
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fb1b 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0c1      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	494f      	ldr	r1, [pc, #316]	; (80020dc <HAL_I2C_Master_Receive+0x458>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 faec 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e092      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002024:	e042      	b.n	80020ac <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fbfe 	bl	800282c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e04c      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b04      	cmp	r3, #4
 8002078:	d118      	bne.n	80020ac <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f aebe 	bne.w	8001e32 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	00010004 	.word	0x00010004

080020e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	460b      	mov	r3, r1
 80020ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7fe ffe6 	bl	80010c0 <HAL_GetTick>
 80020f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b20      	cmp	r3, #32
 8002104:	f040 8105 	bne.w	8002312 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2319      	movs	r3, #25
 800210e:	2201      	movs	r2, #1
 8002110:	4982      	ldr	r1, [pc, #520]	; (800231c <HAL_I2C_IsDeviceReady+0x23c>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa32 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800211e:	2302      	movs	r3, #2
 8002120:	e0f8      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_I2C_IsDeviceReady+0x50>
 800212c:	2302      	movs	r3, #2
 800212e:	e0f1      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d007      	beq.n	8002156 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2224      	movs	r2, #36	; 0x24
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <HAL_I2C_IsDeviceReady+0x240>)
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002188:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f9f0 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0b6      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff83 	bl	80010c0 <HAL_GetTick>
 80021ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ea:	e025      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ec:	f7fe ff68 	bl	80010c0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <HAL_I2C_IsDeviceReady+0x122>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22a0      	movs	r2, #160	; 0xa0
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2ba0      	cmp	r3, #160	; 0xa0
 8002242:	d005      	beq.n	8002250 <HAL_I2C_IsDeviceReady+0x170>
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_I2C_IsDeviceReady+0x170>
 800224a:	7dbb      	ldrb	r3, [r7, #22]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0cd      	beq.n	80021ec <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d129      	bne.n	80022ba <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002274:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	4921      	ldr	r1, [pc, #132]	; (800231c <HAL_I2C_IsDeviceReady+0x23c>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f970 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e036      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e02c      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2319      	movs	r3, #25
 80022da:	2201      	movs	r2, #1
 80022dc:	490f      	ldr	r1, [pc, #60]	; (800231c <HAL_I2C_IsDeviceReady+0x23c>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f94c 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e012      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f4ff af3e 	bcc.w	800217a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	00100002 	.word	0x00100002
 8002320:	ffff0000 	.word	0xffff0000

08002324 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	460b      	mov	r3, r1
 8002332:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d006      	beq.n	800234e <I2C_MasterRequestWrite+0x2a>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d003      	beq.n	800234e <I2C_MasterRequestWrite+0x2a>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800234c:	d108      	bne.n	8002360 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e00b      	b.n	8002378 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	2b12      	cmp	r3, #18
 8002366:	d107      	bne.n	8002378 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002376:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f8f9 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e035      	b.n	8002400 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800239c:	d108      	bne.n	80023b0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	e01b      	b.n	80023e8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023b0:	897b      	ldrh	r3, [r7, #10]
 80023b2:	11db      	asrs	r3, r3, #7
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0306 	and.w	r3, r3, #6
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f063 030f 	orn	r3, r3, #15
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	490e      	ldr	r1, [pc, #56]	; (8002408 <I2C_MasterRequestWrite+0xe4>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f92b 	bl	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e010      	b.n	8002400 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <I2C_MasterRequestWrite+0xe8>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f91b 	bl	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	00010008 	.word	0x00010008
 800240c:	00010002 	.word	0x00010002

08002410 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	460b      	mov	r3, r1
 800241e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002434:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d006      	beq.n	800244a <I2C_MasterRequestRead+0x3a>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d003      	beq.n	800244a <I2C_MasterRequestRead+0x3a>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002448:	d108      	bne.n	800245c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00b      	b.n	8002474 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	2b11      	cmp	r3, #17
 8002462:	d107      	bne.n	8002474 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f87b 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e06d      	b.n	800256c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002498:	d108      	bne.n	80024ac <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	611a      	str	r2, [r3, #16]
 80024aa:	e053      	b.n	8002554 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024ac:	897b      	ldrh	r3, [r7, #10]
 80024ae:	11db      	asrs	r3, r3, #7
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 0306 	and.w	r3, r3, #6
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f063 030f 	orn	r3, r3, #15
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	492a      	ldr	r1, [pc, #168]	; (8002574 <I2C_MasterRequestRead+0x164>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f8ad 	bl	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e048      	b.n	800256c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	4923      	ldr	r1, [pc, #140]	; (8002578 <I2C_MasterRequestRead+0x168>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f89d 	bl	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e038      	b.n	800256c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f825 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e017      	b.n	800256c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800253c:	897b      	ldrh	r3, [r7, #10]
 800253e:	11db      	asrs	r3, r3, #7
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 0306 	and.w	r3, r3, #6
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f063 030e 	orn	r3, r3, #14
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <I2C_MasterRequestRead+0x168>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f865 	bl	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	00010008 	.word	0x00010008
 8002578:	00010002 	.word	0x00010002

0800257c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258c:	e025      	b.n	80025da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002594:	d021      	beq.n	80025da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7fe fd93 	bl	80010c0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d116      	bne.n	80025da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e023      	b.n	8002622 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10d      	bne.n	8002600 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4013      	ands	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	e00c      	b.n	800261a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4013      	ands	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	429a      	cmp	r2, r3
 800261e:	d0b6      	beq.n	800258e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002638:	e051      	b.n	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002648:	d123      	bne.n	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002658:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002662:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0204 	orr.w	r2, r3, #4
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e046      	b.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002698:	d021      	beq.n	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7fe fd11 	bl	80010c0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e020      	b.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10c      	bne.n	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf14      	ite	ne
 80026fa:	2301      	movne	r3, #1
 80026fc:	2300      	moveq	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e00b      	b.n	800271a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	43da      	mvns	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d18d      	bne.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002734:	e02d      	b.n	8002792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8ce 	bl	80028d8 <I2C_IsAcknowledgeFailed>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e02d      	b.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274c:	d021      	beq.n	8002792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7fe fcb7 	bl	80010c0 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e007      	b.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d1ca      	bne.n	8002736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b6:	e02d      	b.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f88d 	bl	80028d8 <I2C_IsAcknowledgeFailed>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e02d      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ce:	d021      	beq.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d0:	f7fe fc76 	bl	80010c0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d302      	bcc.n	80027e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e007      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d1ca      	bne.n	80027b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002838:	e042      	b.n	80028c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b10      	cmp	r3, #16
 8002846:	d119      	bne.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0210 	mvn.w	r2, #16
 8002850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e029      	b.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7fe fc20 	bl	80010c0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e007      	b.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d1b5      	bne.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d11b      	bne.n	8002928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e26c      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8087 	beq.w	8002a62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002954:	4b92      	ldr	r3, [pc, #584]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b04      	cmp	r3, #4
 800295e:	d00c      	beq.n	800297a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002960:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d112      	bne.n	8002992 <HAL_RCC_OscConfig+0x5e>
 800296c:	4b8c      	ldr	r3, [pc, #560]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d10b      	bne.n	8002992 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297a:	4b89      	ldr	r3, [pc, #548]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x12c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d168      	bne.n	8002a60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e246      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x76>
 800299c:	4b80      	ldr	r3, [pc, #512]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a7f      	ldr	r2, [pc, #508]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e02e      	b.n	8002a08 <HAL_RCC_OscConfig+0xd4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a77      	ldr	r2, [pc, #476]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xd4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0xbc>
 80029d6:	4b72      	ldr	r3, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a71      	ldr	r2, [pc, #452]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6e      	ldr	r2, [pc, #440]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xd4>
 80029f0:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6a      	ldr	r2, [pc, #424]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a67      	ldr	r2, [pc, #412]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb56 	bl	80010c0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fb52 	bl	80010c0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1fa      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe4>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fb42 	bl	80010c0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fb3e 	bl	80010c0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1e6      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x10c>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a7a:	4b49      	ldr	r3, [pc, #292]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x18c>
 8002a86:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x176>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e1ba      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4939      	ldr	r1, [pc, #228]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	e03a      	b.n	8002b36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe faf7 	bl	80010c0 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fe faf3 	bl	80010c0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e19b      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4927      	ldr	r1, [pc, #156]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fad6 	bl	80010c0 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fad2 	bl	80010c0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e17a      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03a      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d019      	beq.n	8002b7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fab6 	bl	80010c0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fab2 	bl	80010c0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e15a      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b76:	2001      	movs	r0, #1
 8002b78:	f000 fb0a 	bl	8003190 <RCC_Delay>
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_OscConfig+0x274>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fa9c 	bl	80010c0 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8a:	e00f      	b.n	8002bac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fa98 	bl	80010c0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d908      	bls.n	8002bac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e140      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	42420000 	.word	0x42420000
 8002ba8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b9e      	ldr	r3, [pc, #632]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e9      	bne.n	8002b8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a6 	beq.w	8002d12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b97      	ldr	r3, [pc, #604]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4a93      	ldr	r2, [pc, #588]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	61d3      	str	r3, [r2, #28]
 8002be2:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b8e      	ldr	r3, [pc, #568]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a8a      	ldr	r2, [pc, #552]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fa59 	bl	80010c0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe fa55 	bl	80010c0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	; 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0fd      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x312>
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	e02d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x36e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x334>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6213      	str	r3, [r2, #32]
 8002c66:	e01c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x36e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCC_OscConfig+0x356>
 8002c70:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a6c      	ldr	r2, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a69      	ldr	r2, [pc, #420]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	e00b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x36e>
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a66      	ldr	r2, [pc, #408]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6213      	str	r3, [r2, #32]
 8002c96:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a63      	ldr	r2, [pc, #396]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d015      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7fe fa09 	bl	80010c0 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7fe fa05 	bl	80010c0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0ab      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ee      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x37e>
 8002cd4:	e014      	b.n	8002d00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe f9f3 	bl	80010c0 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe f9ef 	bl	80010c0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e095      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ee      	bne.n	8002cde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d105      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8081 	beq.w	8002e1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1c:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d061      	beq.n	8002dec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d146      	bne.n	8002dbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d30:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_RCC_OscConfig+0x4fc>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe f9c3 	bl	80010c0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe f9bf 	bl	80010c0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e067      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d108      	bne.n	8002d78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	492d      	ldr	r1, [pc, #180]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a19      	ldr	r1, [r3, #32]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	4927      	ldr	r1, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_RCC_OscConfig+0x4fc>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe f993 	bl	80010c0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe f98f 	bl	80010c0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e037      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x46a>
 8002dbc:	e02f      	b.n	8002e1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_RCC_OscConfig+0x4fc>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f97c 	bl	80010c0 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe f978 	bl	80010c0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e020      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x498>
 8002dea:	e018      	b.n	8002e1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	42420060 	.word	0x42420060

08002e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0d0      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4965      	ldr	r1, [pc, #404]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d040      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d115      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e073      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4936      	ldr	r1, [pc, #216]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7fe f8cc 	bl	80010c0 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fe f8c8 	bl	80010c0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e053      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d210      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1cc>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 f88c 	bl	8005100 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08005b78 	.word	0x08005b78
 8003000:	20000008 	.word	0x20000008
 8003004:	20000000 	.word	0x20000000

08003008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b490      	push	{r4, r7}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003010:	1d3c      	adds	r4, r7, #4
 8003012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x46>
 8003046:	e02d      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e02d      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	0c9b      	lsrs	r3, r3, #18
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800305a:	4413      	add	r3, r2
 800305c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003060:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0c5b      	lsrs	r3, r3, #17
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800307a:	4413      	add	r3, r2
 800307c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003080:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003086:	fb02 f203 	mul.w	r2, r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e004      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	623b      	str	r3, [r7, #32]
      break;
 80030a2:	e002      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030a6:	623b      	str	r3, [r7, #32]
      break;
 80030a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030aa:	6a3b      	ldr	r3, [r7, #32]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc90      	pop	{r4, r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	08005ae0 	.word	0x08005ae0
 80030bc:	08005af0 	.word	0x08005af0
 80030c0:	40021000 	.word	0x40021000
 80030c4:	007a1200 	.word	0x007a1200
 80030c8:	003d0900 	.word	0x003d0900

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <HAL_RCC_GetHCLKFreq+0x10>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000008 	.word	0x20000008

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e4:	f7ff fff2 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030e8:	4601      	mov	r1, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	08005b88 	.word	0x08005b88

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff ffde 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003110:	4601      	mov	r1, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	0adb      	lsrs	r3, r3, #11
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4a03      	ldr	r2, [pc, #12]	; (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	08005b88 	.word	0x08005b88

08003130 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	220f      	movs	r2, #15
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_RCC_GetClockConfig+0x58>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_RCC_GetClockConfig+0x58>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_GetClockConfig+0x58>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_GetClockConfig+0x58>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40021000 	.word	0x40021000
 800318c:	40022000 	.word	0x40022000

08003190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <RCC_Delay+0x34>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <RCC_Delay+0x38>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0a5b      	lsrs	r3, r3, #9
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031ac:	bf00      	nop
  }
  while (Delay --);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e5a      	subs	r2, r3, #1
 80031b2:	60fa      	str	r2, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f9      	bne.n	80031ac <RCC_Delay+0x1c>
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000008 	.word	0x20000008
 80031c8:	10624dd3 	.word	0x10624dd3

080031cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e01d      	b.n	800321a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 ff1e 	bl	8005034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fa32 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b06      	cmp	r3, #6
 8003242:	d007      	beq.n	8003254 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b06      	cmp	r3, #6
 8003290:	d007      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d122      	bne.n	800330a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d11b      	bne.n	800330a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f06f 0202 	mvn.w	r2, #2
 80032da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f9a4 	bl	800363e <HAL_TIM_IC_CaptureCallback>
 80032f6:	e005      	b.n	8003304 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f997 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f9a6 	bl	8003650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d122      	bne.n	800335e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d11b      	bne.n	800335e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0204 	mvn.w	r2, #4
 800332e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f97a 	bl	800363e <HAL_TIM_IC_CaptureCallback>
 800334a:	e005      	b.n	8003358 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f96d 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f97c 	bl	8003650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d122      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b08      	cmp	r3, #8
 8003378:	d11b      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0208 	mvn.w	r2, #8
 8003382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2204      	movs	r2, #4
 8003388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f950 	bl	800363e <HAL_TIM_IC_CaptureCallback>
 800339e:	e005      	b.n	80033ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f943 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f952 	bl	8003650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d122      	bne.n	8003406 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d11b      	bne.n	8003406 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0210 	mvn.w	r2, #16
 80033d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2208      	movs	r2, #8
 80033dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f926 	bl	800363e <HAL_TIM_IC_CaptureCallback>
 80033f2:	e005      	b.n	8003400 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f919 	bl	800362c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f928 	bl	8003650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10e      	bne.n	8003432 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0201 	mvn.w	r2, #1
 800342a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fdf5 	bl	800401c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d10e      	bne.n	800345e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d107      	bne.n	800345e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa50 	bl	80038fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d10e      	bne.n	800348a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d107      	bne.n	800348a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8ec 	bl	8003662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d10e      	bne.n	80034b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d107      	bne.n	80034b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f06f 0220 	mvn.w	r2, #32
 80034ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa1b 	bl	80038ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_ConfigClockSource+0x18>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0a6      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x166>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d067      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x120>
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d80b      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x6c>
 8003512:	2b10      	cmp	r3, #16
 8003514:	d073      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x140>
 8003516:	2b10      	cmp	r3, #16
 8003518:	d802      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x62>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d06f      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800351e:	e078      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003520:	2b20      	cmp	r3, #32
 8003522:	d06c      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x140>
 8003524:	2b30      	cmp	r3, #48	; 0x30
 8003526:	d06a      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003528:	e073      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800352a:	2b70      	cmp	r3, #112	; 0x70
 800352c:	d00d      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x8c>
 800352e:	2b70      	cmp	r3, #112	; 0x70
 8003530:	d804      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x7e>
 8003532:	2b50      	cmp	r3, #80	; 0x50
 8003534:	d033      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xe0>
 8003536:	2b60      	cmp	r3, #96	; 0x60
 8003538:	d041      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800353a:	e06a      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d066      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0x152>
 8003542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003546:	d017      	beq.n	8003578 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003548:	e063      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f000 f964 	bl	8003826 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800356c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	609a      	str	r2, [r3, #8]
      break;
 8003576:	e04c      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f000 f94d 	bl	8003826 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e039      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 f8c4 	bl	8003738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2150      	movs	r1, #80	; 0x50
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f91b 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80035bc:	e029      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 f8e2 	bl	8003794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2160      	movs	r1, #96	; 0x60
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f90b 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80035dc:	e019      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 f8a4 	bl	8003738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f8fb 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80035fc:	e009      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f000 f8f2 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 800360e:	e000      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003610:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a29      	ldr	r2, [pc, #164]	; (800372c <TIM_Base_SetConfig+0xb8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00b      	beq.n	80036a4 <TIM_Base_SetConfig+0x30>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0x30>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a26      	ldr	r2, [pc, #152]	; (8003730 <TIM_Base_SetConfig+0xbc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x30>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a25      	ldr	r2, [pc, #148]	; (8003734 <TIM_Base_SetConfig+0xc0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1c      	ldr	r2, [pc, #112]	; (800372c <TIM_Base_SetConfig+0xb8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <TIM_Base_SetConfig+0xbc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <TIM_Base_SetConfig+0xc0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d108      	bne.n	80036e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a07      	ldr	r2, [pc, #28]	; (800372c <TIM_Base_SetConfig+0xb8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	615a      	str	r2, [r3, #20]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800

08003738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f023 0201 	bic.w	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 030a 	bic.w	r3, r3, #10
 8003774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0210 	bic.w	r2, r3, #16
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	f043 0307 	orr.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b087      	sub	sp, #28
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003840:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	021a      	lsls	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	431a      	orrs	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4313      	orrs	r3, r2
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	609a      	str	r2, [r3, #8]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e032      	b.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e03f      	b.n	80039a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f001 fb98 	bl	800506c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f90b 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b088      	sub	sp, #32
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	f040 8083 	bne.w	8003ad2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Transmit+0x2e>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e07b      	b.n	8003ad4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit+0x40>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e074      	b.n	8003ad4 <HAL_UART_Transmit+0x12a>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2221      	movs	r2, #33	; 0x21
 80039fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fb5e 	bl	80010c0 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a12:	e042      	b.n	8003a9a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d122      	bne.n	8003a72 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f850 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e046      	b.n	8003ad4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3302      	adds	r3, #2
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	e017      	b.n	8003a9a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	e013      	b.n	8003a9a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	; 0x80
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f82d 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e023      	b.n	8003ad4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	60ba      	str	r2, [r7, #8]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1b7      	bne.n	8003a14 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f814 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e00a      	b.n	8003ad4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	e02c      	b.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d028      	beq.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003afc:	f7fd fae0 	bl	80010c0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d21d      	bcs.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e00f      	b.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d0c3      	beq.n	8003aee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003baa:	f023 030c 	bic.w	r3, r3, #12
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <UART_SetConfig+0x1ac>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d14e      	bne.n	8003c76 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff fa96 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	0119      	lsls	r1, r3, #4
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c16:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2064      	movs	r0, #100	; 0x64
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	4419      	add	r1, r3
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2064      	movs	r0, #100	; 0x64
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	3332      	adds	r3, #50	; 0x32
 8003c60:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	440a      	add	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003c74:	e04d      	b.n	8003d12 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c76:	f7ff fa33 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8003c7a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009a      	lsls	r2, r3, #2
 8003c86:	441a      	add	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	0119      	lsls	r1, r3, #4
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009a      	lsls	r2, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003cb4:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2064      	movs	r0, #100	; 0x64
 8003cbc:	fb00 f303 	mul.w	r3, r0, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	3332      	adds	r3, #50	; 0x32
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd2:	4419      	add	r1, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009a      	lsls	r2, r3, #2
 8003cde:	441a      	add	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003cec:	fba3 0302 	umull	r0, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2064      	movs	r0, #100	; 0x64
 8003cf4:	fb00 f303 	mul.w	r3, r0, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	3332      	adds	r3, #50	; 0x32
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	440a      	add	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	51eb851f 	.word	0x51eb851f

08003d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d28:	f7fd f9a2 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d2c:	f000 f814 	bl	8003d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d30:	f000 f91c 	bl	8003f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8003d34:	f000 f8fc 	bl	8003f30 <MX_DMA_Init>
  MX_I2C1_Init();
 8003d38:	f000 f854 	bl	8003de4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003d3c:	f000 f880 	bl	8003e40 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003d40:	f000 f8cc 	bl	8003edc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 8003d44:	f000 fab8 	bl	80042b8 <init_MPU>
  HAL_TIM_Base_Start(&htim2);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <main+0x30>)
 8003d4a:	f7ff fa6a 	bl	8003222 <HAL_TIM_Base_Start>

    /* USER CODE BEGIN 3 */
//	  char buffer[3];
//	  int tem;
//	  int start = read_TIM2();
	  process_MPU();
 8003d4e:	f000 fcab 	bl	80046a8 <process_MPU>
 8003d52:	e7fc      	b.n	8003d4e <main+0x2a>
 8003d54:	20000150 	.word	0x20000150

08003d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b090      	sub	sp, #64	; 0x40
 8003d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d5e:	f107 0318 	add.w	r3, r7, #24
 8003d62:	2228      	movs	r2, #40	; 0x28
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fe66 	bl	8005a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d6c:	1d3b      	adds	r3, r7, #4
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003d96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d9c:	f107 0318 	add.w	r3, r7, #24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fdc7 	bl	8002934 <HAL_RCC_OscConfig>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003dac:	f000 f948 	bl	8004040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003db0:	230f      	movs	r3, #15
 8003db2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db4:	2302      	movs	r3, #2
 8003db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f832 	bl	8002e34 <HAL_RCC_ClockConfig>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003dd6:	f000 f933 	bl	8004040 <Error_Handler>
  }
}
 8003dda:	bf00      	nop
 8003ddc:	3740      	adds	r7, #64	; 0x40
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003de8:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <MX_I2C1_Init+0x54>)
 8003dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <MX_I2C1_Init+0x58>)
 8003df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e20:	4804      	ldr	r0, [pc, #16]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e22:	f7fd fd09 	bl	8001838 <HAL_I2C_Init>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e2c:	f000 f908 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000098 	.word	0x20000098
 8003e38:	40005400 	.word	0x40005400
 8003e3c:	00061a80 	.word	0x00061a80

08003e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e54:	463b      	mov	r3, r7
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8003e64:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e66:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e86:	4814      	ldr	r0, [pc, #80]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003e88:	f7ff f9a0 	bl	80031cc <HAL_TIM_Base_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003e92:	f000 f8d5 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003ea4:	f7ff fb0b 	bl	80034be <HAL_TIM_ConfigClockSource>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003eae:	f000 f8c7 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003eba:	463b      	mov	r3, r7
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <MX_TIM2_Init+0x98>)
 8003ec0:	f7ff fcd0 	bl	8003864 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003eca:	f000 f8b9 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000150 	.word	0x20000150

08003edc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <MX_USART2_UART_Init+0x50>)
 8003ee4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003eec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003f02:	220c      	movs	r2, #12
 8003f04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f12:	4805      	ldr	r0, [pc, #20]	; (8003f28 <MX_USART2_UART_Init+0x4c>)
 8003f14:	f7ff fcfc 	bl	8003910 <HAL_UART_Init>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f1e:	f000 f88f 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000194 	.word	0x20000194
 8003f2c:	40004400 	.word	0x40004400

08003f30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <MX_DMA_Init+0x38>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <MX_DMA_Init+0x38>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6153      	str	r3, [r2, #20]
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <MX_DMA_Init+0x38>)
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	2011      	movs	r0, #17
 8003f54:	f7fd f973 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003f58:	2011      	movs	r0, #17
 8003f5a:	f7fd f98c 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	4a23      	ldr	r2, [pc, #140]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	6193      	str	r3, [r2, #24]
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f98:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	6193      	str	r3, [r2, #24]
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6193      	str	r3, [r2, #24]
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fce:	f043 0308 	orr.w	r3, r3, #8
 8003fd2:	6193      	str	r3, [r2, #24]
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <MX_GPIO_Init+0xa8>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fe6:	480c      	ldr	r0, [pc, #48]	; (8004018 <MX_GPIO_Init+0xac>)
 8003fe8:	f7fd fc0e 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4619      	mov	r1, r3
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_GPIO_Init+0xac>)
 8004006:	f7fd faa5 	bl	8001554 <HAL_GPIO_Init>

}
 800400a:	bf00      	nop
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	40011000 	.word	0x40011000

0800401c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800402e:	f7fd f835 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00

08004040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	0000      	movs	r0, r0
	...

08004050 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b08b      	sub	sp, #44	; 0x2c
 8004054:	af00      	add	r7, sp, #0
 8004056:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b0a      	cmp	r3, #10
 800406a:	dd01      	ble.n	8004070 <ftoa+0x20>
		precision = MAX_PRECISION;
 800406c:	230a      	movs	r3, #10
 800406e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800407c:	f7fc fc9e 	bl	80009bc <__aeabi_dcmplt>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <ftoa+0x4c>
	{
		f = -f;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004090:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	627a      	str	r2, [r7, #36]	; 0x24
 8004098:	222d      	movs	r2, #45	; 0x2d
 800409a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da4f      	bge.n	8004142 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <ftoa+0x250>)
 80040a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040ac:	f7fc fc86 	bl	80009bc <__aeabi_dcmplt>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <ftoa+0x6c>
 80040b6:	2306      	movs	r3, #6
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	e042      	b.n	8004142 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <ftoa+0x254>)
 80040c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040c6:	f7fc fc79 	bl	80009bc <__aeabi_dcmplt>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <ftoa+0x86>
 80040d0:	2305      	movs	r3, #5
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	e035      	b.n	8004142 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	4b73      	ldr	r3, [pc, #460]	; (80042a8 <ftoa+0x258>)
 80040dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040e0:	f7fc fc6c 	bl	80009bc <__aeabi_dcmplt>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <ftoa+0xa0>
 80040ea:	2304      	movs	r3, #4
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	e028      	b.n	8004142 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <ftoa+0x25c>)
 80040f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040fa:	f7fc fc5f 	bl	80009bc <__aeabi_dcmplt>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <ftoa+0xba>
 8004104:	2303      	movs	r3, #3
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	e01b      	b.n	8004142 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800410a:	a361      	add	r3, pc, #388	; (adr r3, 8004290 <ftoa+0x240>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004114:	f7fc fc52 	bl	80009bc <__aeabi_dcmplt>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <ftoa+0xd4>
 800411e:	2302      	movs	r3, #2
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	e00e      	b.n	8004142 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8004124:	a35c      	add	r3, pc, #368	; (adr r3, 8004298 <ftoa+0x248>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800412e:	f7fc fc45 	bl	80009bc <__aeabi_dcmplt>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <ftoa+0xee>
 8004138:	2301      	movs	r3, #1
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	e001      	b.n	8004142 <ftoa+0xf2>
		else precision = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <ftoa+0x116>
		f += rounders[precision];
 8004148:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <ftoa+0x260>)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	cb18      	ldmia	r3, {r3, r4}
 8004152:	461a      	mov	r2, r3
 8004154:	4623      	mov	r3, r4
 8004156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800415a:	f7fc f807 	bl	800016c <__adddf3>
 800415e:	4603      	mov	r3, r0
 8004160:	460c      	mov	r4, r1
 8004162:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8004166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800416a:	f7fc fc65 	bl	8000a38 <__aeabi_d2iz>
 800416e:	4603      	mov	r3, r0
 8004170:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8004172:	69f8      	ldr	r0, [r7, #28]
 8004174:	f7fc f946 	bl	8000404 <__aeabi_i2d>
 8004178:	4603      	mov	r3, r0
 800417a:	460c      	mov	r4, r1
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004184:	f7fb fff0 	bl	8000168 <__aeabi_dsub>
 8004188:	4603      	mov	r3, r0
 800418a:	460c      	mov	r4, r1
 800418c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <ftoa+0x152>
		*ptr++ = '0';
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	627a      	str	r2, [r7, #36]	; 0x24
 800419c:	2230      	movs	r2, #48	; 0x30
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e038      	b.n	8004214 <ftoa+0x1c4>
	else
	{
		// save start pointer
		p = ptr;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80041a6:	e01a      	b.n	80041de <ftoa+0x18e>
		{
			*p++ = '0' + intPart % 10;
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <ftoa+0x264>)
 80041ac:	fb83 1302 	smull	r1, r3, r3, r2
 80041b0:	1099      	asrs	r1, r3, #2
 80041b2:	17d3      	asrs	r3, r2, #31
 80041b4:	1ac9      	subs	r1, r1, r3
 80041b6:	460b      	mov	r3, r1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	1ad1      	subs	r1, r2, r3
 80041c0:	b2ca      	uxtb	r2, r1
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	1c59      	adds	r1, r3, #1
 80041c6:	6239      	str	r1, [r7, #32]
 80041c8:	3230      	adds	r2, #48	; 0x30
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4a38      	ldr	r2, [pc, #224]	; (80042b4 <ftoa+0x264>)
 80041d2:	fb82 1203 	smull	r1, r2, r2, r3
 80041d6:	1092      	asrs	r2, r2, #2
 80041d8:	17db      	asrs	r3, r3, #31
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]
		while (intPart)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <ftoa+0x158>
		}

		// save end pos
		p1 = p;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 80041e8:	e00e      	b.n	8004208 <ftoa+0x1b8>
		{
			c = *--p;
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	627a      	str	r2, [r7, #36]	; 0x24
 8004204:	7dfa      	ldrb	r2, [r7, #23]
 8004206:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	429a      	cmp	r2, r3
 800420e:	d8ec      	bhi.n	80041ea <ftoa+0x19a>
		}

		// restore end pos
		ptr = p1;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d032      	beq.n	8004280 <ftoa+0x230>
	{
		// place decimal point
		*ptr++ = '.';
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	627a      	str	r2, [r7, #36]	; 0x24
 8004220:	222e      	movs	r2, #46	; 0x2e
 8004222:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8004224:	e027      	b.n	8004276 <ftoa+0x226>
		{
			f *= 10.0;
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <ftoa+0x254>)
 800422c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004230:	f7fc f952 	bl	80004d8 <__aeabi_dmul>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 800423c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004240:	f7fc fc22 	bl	8000a88 <__aeabi_d2uiz>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	627a      	str	r2, [r7, #36]	; 0x24
 800424e:	7dfa      	ldrb	r2, [r7, #23]
 8004250:	3230      	adds	r2, #48	; 0x30
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
			f -= c;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f8d3 	bl	8000404 <__aeabi_i2d>
 800425e:	4603      	mov	r3, r0
 8004260:	460c      	mov	r4, r1
 8004262:	461a      	mov	r2, r3
 8004264:	4623      	mov	r3, r4
 8004266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800426a:	f7fb ff7d 	bl	8000168 <__aeabi_dsub>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	603a      	str	r2, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1d2      	bne.n	8004226 <ftoa+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]

	return buf;
 8004286:	687b      	ldr	r3, [r7, #4]
}
 8004288:	4618      	mov	r0, r3
 800428a:	372c      	adds	r7, #44	; 0x2c
 800428c:	46bd      	mov	sp, r7
 800428e:	bd90      	pop	{r4, r7, pc}
 8004290:	00000000 	.word	0x00000000
 8004294:	40c38800 	.word	0x40c38800
 8004298:	00000000 	.word	0x00000000
 800429c:	40f86a00 	.word	0x40f86a00
 80042a0:	3ff00000 	.word	0x3ff00000
 80042a4:	40240000 	.word	0x40240000
 80042a8:	40590000 	.word	0x40590000
 80042ac:	408f4000 	.word	0x408f4000
 80042b0:	08005b20 	.word	0x08005b20
 80042b4:	66666667 	.word	0x66666667

080042b8 <init_MPU>:





char init_MPU(){
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b090      	sub	sp, #64	; 0x40
 80042bc:	af02      	add	r7, sp, #8
    char status = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80042c4:	23d0      	movs	r3, #208	; 0xd0
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t magnet_address = MAG_ADRRESS;
 80042ca:	2318      	movs	r3, #24
 80042cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    mag_ava = 0;
 80042d0:	4b7a      	ldr	r3, [pc, #488]	; (80044bc <init_MPU+0x204>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
  	char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 80042d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042da:	b299      	uxth	r1, r3
 80042dc:	2302      	movs	r3, #2
 80042de:	2203      	movs	r2, #3
 80042e0:	4877      	ldr	r0, [pc, #476]	; (80044c0 <init_MPU+0x208>)
 80042e2:	f7fd fefd 	bl	80020e0 <HAL_I2C_IsDeviceReady>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <init_MPU+0x46>
    	strcpy( rx_data, "No Device \r \n");
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	4a74      	ldr	r2, [pc, #464]	; (80044c4 <init_MPU+0x20c>)
 80042f2:	461c      	mov	r4, r3
 80042f4:	4613      	mov	r3, r2
 80042f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042f8:	c407      	stmia	r4!, {r0, r1, r2}
 80042fa:	8023      	strh	r3, [r4, #0]
 80042fc:	e008      	b.n	8004310 <init_MPU+0x58>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	4a71      	ldr	r2, [pc, #452]	; (80044c8 <init_MPU+0x210>)
 8004304:	461c      	mov	r4, r3
 8004306:	4615      	mov	r5, r2
 8004308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800430a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	7023      	strb	r3, [r4, #0]
      }
    //CDC_Transmit_FS((uint8_t *)&rx_data, sizeof(rx_data));
    HAL_UART_Transmit(&huart2,rx_data, strlen(rx_data),1000);
 8004310:	f107 0308 	add.w	r3, r7, #8
 8004314:	4618      	mov	r0, r3
 8004316:	f7fb ff1b 	bl	8000150 <strlen>
 800431a:	4603      	mov	r3, r0
 800431c:	b29a      	uxth	r2, r3
 800431e:	f107 0108 	add.w	r1, r7, #8
 8004322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004326:	4869      	ldr	r0, [pc, #420]	; (80044cc <init_MPU+0x214>)
 8004328:	f7ff fb3f 	bl	80039aa <HAL_UART_Transmit>

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 800432c:	236b      	movs	r3, #107	; 0x6b
 800432e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800433c:	b299      	uxth	r1, r3
 800433e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2302      	movs	r3, #2
 800434a:	485d      	ldr	r0, [pc, #372]	; (80044c0 <init_MPU+0x208>)
 800434c:	f7fd fb9c 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <init_MPU+0xa4>
	{
		status = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 800435c:	2319      	movs	r3, #25
 800435e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 8004362:	2307      	movs	r3, #7
 8004364:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004368:	bf00      	nop
 800436a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800436e:	b299      	uxth	r1, r3
 8004370:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2302      	movs	r3, #2
 800437c:	4850      	ldr	r0, [pc, #320]	; (80044c0 <init_MPU+0x208>)
 800437e:	f7fd fb83 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <init_MPU+0xb2>

	d[0] = GYRO_CONFIG;
 8004388:	231b      	movs	r3, #27
 800438a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 800438e:	2318      	movs	r3, #24
 8004390:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004394:	bf00      	nop
 8004396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800439a:	b299      	uxth	r1, r3
 800439c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80043a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2302      	movs	r3, #2
 80043a8:	4845      	ldr	r0, [pc, #276]	; (80044c0 <init_MPU+0x208>)
 80043aa:	f7fd fb6d 	bl	8001a88 <HAL_I2C_Master_Transmit>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <init_MPU+0xde>

	d[0] = ACCEL_CONFIG;
 80043b4:	231c      	movs	r3, #28
 80043b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80043c0:	bf00      	nop
 80043c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c6:	b299      	uxth	r1, r3
 80043c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80043cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	2302      	movs	r3, #2
 80043d4:	483a      	ldr	r0, [pc, #232]	; (80044c0 <init_MPU+0x208>)
 80043d6:	f7fd fb57 	bl	8001a88 <HAL_I2C_Master_Transmit>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f0      	bne.n	80043c2 <init_MPU+0x10a>

	d[0] = INIT_ENB;
 80043e0:	2338      	movs	r3, #56	; 0x38
 80043e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80043ec:	bf00      	nop
 80043ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f2:	b299      	uxth	r1, r3
 80043f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80043f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	2302      	movs	r3, #2
 8004400:	482f      	ldr	r0, [pc, #188]	; (80044c0 <init_MPU+0x208>)
 8004402:	f7fd fb41 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <init_MPU+0x136>

	d[0] = USER_CTRL;
 800440c:	236a      	movs	r3, #106	; 0x6a
 800440e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004418:	bf00      	nop
 800441a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800441e:	b299      	uxth	r1, r3
 8004420:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2302      	movs	r3, #2
 800442c:	4824      	ldr	r0, [pc, #144]	; (80044c0 <init_MPU+0x208>)
 800442e:	f7fd fb2b 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <init_MPU+0x162>

	d[0] = INT_BYPASS;
 8004438:	2337      	movs	r3, #55	; 0x37
 800443a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 800443e:	2322      	movs	r3, #34	; 0x22
 8004440:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004444:	bf00      	nop
 8004446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800444a:	b299      	uxth	r1, r3
 800444c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2302      	movs	r3, #2
 8004458:	4819      	ldr	r0, [pc, #100]	; (80044c0 <init_MPU+0x208>)
 800445a:	f7fd fb15 	bl	8001a88 <HAL_I2C_Master_Transmit>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <init_MPU+0x18e>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8004464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004468:	b299      	uxth	r1, r3
 800446a:	23c8      	movs	r3, #200	; 0xc8
 800446c:	2203      	movs	r2, #3
 800446e:	4814      	ldr	r0, [pc, #80]	; (80044c0 <init_MPU+0x208>)
 8004470:	f7fd fe36 	bl	80020e0 <HAL_I2C_IsDeviceReady>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <init_MPU+0x1d4>
	    	strcpy( rx_data, "No Device \r \n");
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <init_MPU+0x20c>)
 8004480:	461c      	mov	r4, r3
 8004482:	4613      	mov	r3, r2
 8004484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004486:	c407      	stmia	r4!, {r0, r1, r2}
 8004488:	8023      	strh	r3, [r4, #0]
 800448a:	e0f6      	b.n	800467a <init_MPU+0x3c2>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 800448c:	230a      	movs	r3, #10
 800448e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 8004492:	231f      	movs	r3, #31
 8004494:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8004498:	bf00      	nop
 800449a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800449e:	b299      	uxth	r1, r3
 80044a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80044a4:	2302      	movs	r3, #2
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2302      	movs	r3, #2
 80044aa:	4805      	ldr	r0, [pc, #20]	; (80044c0 <init_MPU+0x208>)
 80044ac:	f7fd faec 	bl	8001a88 <HAL_I2C_Master_Transmit>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f1      	bne.n	800449a <init_MPU+0x1e2>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <init_MPU+0x218>)
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ba:	e00e      	b.n	80044da <init_MPU+0x222>
 80044bc:	20000100 	.word	0x20000100
 80044c0:	20000098 	.word	0x20000098
 80044c4:	08005af4 	.word	0x08005af4
 80044c8:	08005b04 	.word	0x08005b04
 80044cc:	20000194 	.word	0x20000194
 80044d0:	000f4240 	.word	0x000f4240
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	3b01      	subs	r3, #1
 80044d8:	633b      	str	r3, [r7, #48]	; 0x30
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dcf9      	bgt.n	80044d4 <init_MPU+0x21c>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 80044e0:	2310      	movs	r3, #16
 80044e2:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 80044e4:	bf00      	nop
 80044e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044ea:	b299      	uxth	r1, r3
 80044ec:	1dfa      	adds	r2, r7, #7
 80044ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2301      	movs	r3, #1
 80044f6:	4864      	ldr	r0, [pc, #400]	; (8004688 <init_MPU+0x3d0>)
 80044f8:	f7fd fac6 	bl	8001a88 <HAL_I2C_Master_Transmit>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f1      	bne.n	80044e6 <init_MPU+0x22e>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &asa,3, 1000) != HAL_OK);
 8004502:	bf00      	nop
 8004504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004508:	b299      	uxth	r1, r3
 800450a:	1d3a      	adds	r2, r7, #4
 800450c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2303      	movs	r3, #3
 8004514:	485c      	ldr	r0, [pc, #368]	; (8004688 <init_MPU+0x3d0>)
 8004516:	f7fd fbb5 	bl	8001c84 <HAL_I2C_Master_Receive>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f1      	bne.n	8004504 <init_MPU+0x24c>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8004520:	793b      	ldrb	r3, [r7, #4]
 8004522:	3b80      	subs	r3, #128	; 0x80
 8004524:	4618      	mov	r0, r3
 8004526:	f7fb ff6d 	bl	8000404 <__aeabi_i2d>
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	4b57      	ldr	r3, [pc, #348]	; (800468c <init_MPU+0x3d4>)
 8004530:	f7fb ffd2 	bl	80004d8 <__aeabi_dmul>
 8004534:	4603      	mov	r3, r0
 8004536:	460c      	mov	r4, r1
 8004538:	4618      	mov	r0, r3
 800453a:	4621      	mov	r1, r4
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	4b53      	ldr	r3, [pc, #332]	; (8004690 <init_MPU+0x3d8>)
 8004542:	f7fc f8f3 	bl	800072c <__aeabi_ddiv>
 8004546:	4603      	mov	r3, r0
 8004548:	460c      	mov	r4, r1
 800454a:	4618      	mov	r0, r3
 800454c:	4621      	mov	r1, r4
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	4b50      	ldr	r3, [pc, #320]	; (8004694 <init_MPU+0x3dc>)
 8004554:	f7fb fe0a 	bl	800016c <__adddf3>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	4618      	mov	r0, r3
 800455e:	4621      	mov	r1, r4
 8004560:	f7fc fab2 	bl	8000ac8 <__aeabi_d2f>
 8004564:	4602      	mov	r2, r0
 8004566:	4b4c      	ldr	r3, [pc, #304]	; (8004698 <init_MPU+0x3e0>)
 8004568:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 800456a:	797b      	ldrb	r3, [r7, #5]
 800456c:	3b80      	subs	r3, #128	; 0x80
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ff48 	bl	8000404 <__aeabi_i2d>
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	4b44      	ldr	r3, [pc, #272]	; (800468c <init_MPU+0x3d4>)
 800457a:	f7fb ffad 	bl	80004d8 <__aeabi_dmul>
 800457e:	4603      	mov	r3, r0
 8004580:	460c      	mov	r4, r1
 8004582:	4618      	mov	r0, r3
 8004584:	4621      	mov	r1, r4
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <init_MPU+0x3d8>)
 800458c:	f7fc f8ce 	bl	800072c <__aeabi_ddiv>
 8004590:	4603      	mov	r3, r0
 8004592:	460c      	mov	r4, r1
 8004594:	4618      	mov	r0, r3
 8004596:	4621      	mov	r1, r4
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <init_MPU+0x3dc>)
 800459e:	f7fb fde5 	bl	800016c <__adddf3>
 80045a2:	4603      	mov	r3, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	4618      	mov	r0, r3
 80045a8:	4621      	mov	r1, r4
 80045aa:	f7fc fa8d 	bl	8000ac8 <__aeabi_d2f>
 80045ae:	4602      	mov	r2, r0
 80045b0:	4b3a      	ldr	r3, [pc, #232]	; (800469c <init_MPU+0x3e4>)
 80045b2:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80045b4:	79bb      	ldrb	r3, [r7, #6]
 80045b6:	3b80      	subs	r3, #128	; 0x80
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb ff23 	bl	8000404 <__aeabi_i2d>
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	4b32      	ldr	r3, [pc, #200]	; (800468c <init_MPU+0x3d4>)
 80045c4:	f7fb ff88 	bl	80004d8 <__aeabi_dmul>
 80045c8:	4603      	mov	r3, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	4618      	mov	r0, r3
 80045ce:	4621      	mov	r1, r4
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <init_MPU+0x3d8>)
 80045d6:	f7fc f8a9 	bl	800072c <__aeabi_ddiv>
 80045da:	4603      	mov	r3, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	4618      	mov	r0, r3
 80045e0:	4621      	mov	r1, r4
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <init_MPU+0x3dc>)
 80045e8:	f7fb fdc0 	bl	800016c <__adddf3>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	4618      	mov	r0, r3
 80045f2:	4621      	mov	r1, r4
 80045f4:	f7fc fa68 	bl	8000ac8 <__aeabi_d2f>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <init_MPU+0x3e8>)
 80045fc:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 80045fe:	230a      	movs	r3, #10
 8004600:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800460a:	bf00      	nop
 800460c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004610:	b299      	uxth	r1, r3
 8004612:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2302      	movs	r3, #2
 800461e:	481a      	ldr	r0, [pc, #104]	; (8004688 <init_MPU+0x3d0>)
 8004620:	f7fd fa32 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <init_MPU+0x354>

	    	      for(long i = 1000000; i>0 ;i--){
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <init_MPU+0x3ec>)
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462e:	e002      	b.n	8004636 <init_MPU+0x37e>
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	3b01      	subs	r3, #1
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	2b00      	cmp	r3, #0
 800463a:	dcf9      	bgt.n	8004630 <init_MPU+0x378>

	    	      }

	    	      d[0] = CNTL1_AD;
 800463c:	230a      	movs	r3, #10
 800463e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 8004642:	2316      	movs	r3, #22
 8004644:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004648:	bf00      	nop
 800464a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800464e:	b299      	uxth	r1, r3
 8004650:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2302      	movs	r3, #2
 800465c:	480a      	ldr	r0, [pc, #40]	; (8004688 <init_MPU+0x3d0>)
 800465e:	f7fd fa13 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <init_MPU+0x392>
	    	      for(long i = 1000000; i>0 ;i--){
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <init_MPU+0x3ec>)
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
 800466c:	e002      	b.n	8004674 <init_MPU+0x3bc>
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	3b01      	subs	r3, #1
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	dcf9      	bgt.n	800466e <init_MPU+0x3b6>
	    	      //HAL_Delay(100);
	      }
	   // CDC_Transmit_FS((uint8_t *)&rx_data, strlen(rx_data));


  return status;
 800467a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800467e:	4618      	mov	r0, r3
 8004680:	3738      	adds	r7, #56	; 0x38
 8004682:	46bd      	mov	sp, r7
 8004684:	bdb0      	pop	{r4, r5, r7, pc}
 8004686:	bf00      	nop
 8004688:	20000098 	.word	0x20000098
 800468c:	3fe00000 	.word	0x3fe00000
 8004690:	40600000 	.word	0x40600000
 8004694:	3ff00000 	.word	0x3ff00000
 8004698:	200001e0 	.word	0x200001e0
 800469c:	20000104 	.word	0x20000104
 80046a0:	200001dc 	.word	0x200001dc
 80046a4:	000f4240 	.word	0x000f4240

080046a8 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	b09b      	sub	sp, #108	; 0x6c
 80046ac:	af02      	add	r7, sp, #8

	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,Mag_x,Mag_y,Mag_z,roll,pitch,yaw,roll_com;
	char buffer[7];
	char n[1] = "\n";
 80046ae:	230a      	movs	r3, #10
 80046b0:	f887 3020 	strb.w	r3, [r7, #32]

	mag_ava = 0;
 80046b4:	4bbc      	ldr	r3, [pc, #752]	; (80049a8 <process_MPU+0x300>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]

	uint8_t data[13];
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 80046ba:	233b      	movs	r3, #59	; 0x3b
 80046bc:	71bb      	strb	r3, [r7, #6]
	uint8_t device_address = MPU_ADDRESS;
 80046be:	23d0      	movs	r3, #208	; 0xd0
 80046c0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t magnet_address = MAG_ADRRESS;
 80046c4:	2318      	movs	r3, #24
 80046c6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 80046ca:	bf00      	nop
 80046cc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80046d0:	b299      	uxth	r1, r3
 80046d2:	1dba      	adds	r2, r7, #6
 80046d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2301      	movs	r3, #1
 80046dc:	48b3      	ldr	r0, [pc, #716]	; (80049ac <process_MPU+0x304>)
 80046de:	f7fd f9d3 	bl	8001a88 <HAL_I2C_Master_Transmit>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f1      	bne.n	80046cc <process_MPU+0x24>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 80046e8:	bf00      	nop
 80046ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80046ee:	b299      	uxth	r1, r3
 80046f0:	f107 0210 	add.w	r2, r7, #16
 80046f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	230e      	movs	r3, #14
 80046fc:	48ab      	ldr	r0, [pc, #684]	; (80049ac <process_MPU+0x304>)
 80046fe:	f7fd fac1 	bl	8001c84 <HAL_I2C_Master_Receive>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <process_MPU+0x42>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8004708:	7c3b      	ldrb	r3, [r7, #16]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	b21a      	sxth	r2, r3
 800470e:	7c7b      	ldrb	r3, [r7, #17]
 8004710:	b21b      	sxth	r3, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	b21b      	sxth	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc fae0 	bl	8000cdc <__aeabi_i2f>
 800471c:	4603      	mov	r3, r0
 800471e:	64fb      	str	r3, [r7, #76]	; 0x4c
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8004720:	7cbb      	ldrb	r3, [r7, #18]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b21a      	sxth	r2, r3
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	b21b      	sxth	r3, r3
 800472a:	4313      	orrs	r3, r2
 800472c:	b21b      	sxth	r3, r3
 800472e:	4618      	mov	r0, r3
 8004730:	f7fc fad4 	bl	8000cdc <__aeabi_i2f>
 8004734:	4603      	mov	r3, r0
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8004738:	7d3b      	ldrb	r3, [r7, #20]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	b21a      	sxth	r2, r3
 800473e:	7d7b      	ldrb	r3, [r7, #21]
 8004740:	b21b      	sxth	r3, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	b21b      	sxth	r3, r3
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc fac8 	bl	8000cdc <__aeabi_i2f>
 800474c:	4603      	mov	r3, r0
 800474e:	647b      	str	r3, [r7, #68]	; 0x44

    temp = (int16_t)(data[6] << 8 | data[7]);
 8004750:	7dbb      	ldrb	r3, [r7, #22]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	b21a      	sxth	r2, r3
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	b21b      	sxth	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b21b      	sxth	r3, r3
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc fabc 	bl	8000cdc <__aeabi_i2f>
 8004764:	4602      	mov	r2, r0
 8004766:	4b92      	ldr	r3, [pc, #584]	; (80049b0 <process_MPU+0x308>)
 8004768:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 800476a:	7e3b      	ldrb	r3, [r7, #24]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	b21a      	sxth	r2, r3
 8004770:	7e7b      	ldrb	r3, [r7, #25]
 8004772:	b21b      	sxth	r3, r3
 8004774:	4313      	orrs	r3, r2
 8004776:	b21b      	sxth	r3, r3
 8004778:	4618      	mov	r0, r3
 800477a:	f7fc faaf 	bl	8000cdc <__aeabi_i2f>
 800477e:	4603      	mov	r3, r0
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8004782:	7ebb      	ldrb	r3, [r7, #26]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	b21a      	sxth	r2, r3
 8004788:	7efb      	ldrb	r3, [r7, #27]
 800478a:	b21b      	sxth	r3, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc faa3 	bl	8000cdc <__aeabi_i2f>
 8004796:	4603      	mov	r3, r0
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 800479a:	7f3b      	ldrb	r3, [r7, #28]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	b21a      	sxth	r2, r3
 80047a0:	7f7b      	ldrb	r3, [r7, #29]
 80047a2:	b21b      	sxth	r3, r3
 80047a4:	4313      	orrs	r3, r2
 80047a6:	b21b      	sxth	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fc fa97 	bl	8000cdc <__aeabi_i2f>
 80047ae:	4603      	mov	r3, r0
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
//
//	Gyro_x = (Gyro_x + 75)/gyro_factor;
//	Gyro_y = (Gyro_y + 10)/gyro_factor;
//	Gyro_z = (Gyro_z + 22)/gyro_factor;

    reg = 0x02;
 80047b2:	2302      	movs	r3, #2
 80047b4:	71bb      	strb	r3, [r7, #6]
//
//    ftoa(Acc_z, buffer, 2);
//    strcat(buffer,"\n");
//    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 80047b6:	bf00      	nop
 80047b8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80047bc:	b299      	uxth	r1, r3
 80047be:	1dba      	adds	r2, r7, #6
 80047c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	2301      	movs	r3, #1
 80047c8:	4878      	ldr	r0, [pc, #480]	; (80049ac <process_MPU+0x304>)
 80047ca:	f7fd f95d 	bl	8001a88 <HAL_I2C_Master_Transmit>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f1      	bne.n	80047b8 <process_MPU+0x110>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 80047d4:	bf00      	nop
 80047d6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80047da:	b299      	uxth	r1, r3
 80047dc:	1dfa      	adds	r2, r7, #7
 80047de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2301      	movs	r3, #1
 80047e6:	4871      	ldr	r0, [pc, #452]	; (80049ac <process_MPU+0x304>)
 80047e8:	f7fd fa4c 	bl	8001c84 <HAL_I2C_Master_Receive>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f1      	bne.n	80047d6 <process_MPU+0x12e>
    if(status == 3){
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	f040 82c3 	bne.w	8004d80 <process_MPU+0x6d8>
    	mag_ava = 1;
 80047fa:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <process_MPU+0x300>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
    	reg = 0x03;
 8004800:	2303      	movs	r3, #3
 8004802:	71bb      	strb	r3, [r7, #6]
    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8004804:	bf00      	nop
 8004806:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800480a:	b299      	uxth	r1, r3
 800480c:	1dba      	adds	r2, r7, #6
 800480e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	4865      	ldr	r0, [pc, #404]	; (80049ac <process_MPU+0x304>)
 8004818:	f7fd f936 	bl	8001a88 <HAL_I2C_Master_Transmit>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f1      	bne.n	8004806 <process_MPU+0x15e>
    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &mag_data,7, 1000) != HAL_OK);
 8004822:	bf00      	nop
 8004824:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004828:	b299      	uxth	r1, r3
 800482a:	f107 0208 	add.w	r2, r7, #8
 800482e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2307      	movs	r3, #7
 8004836:	485d      	ldr	r0, [pc, #372]	; (80049ac <process_MPU+0x304>)
 8004838:	f7fd fa24 	bl	8001c84 <HAL_I2C_Master_Receive>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <process_MPU+0x17c>
    	//if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 8004842:	7a3b      	ldrb	r3, [r7, #8]
 8004844:	b21a      	sxth	r2, r3
 8004846:	7a7b      	ldrb	r3, [r7, #9]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	b21b      	sxth	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	b21b      	sxth	r3, r3
 8004850:	4618      	mov	r0, r3
 8004852:	f7fc fa43 	bl	8000cdc <__aeabi_i2f>
 8004856:	4603      	mov	r3, r0
 8004858:	65fb      	str	r3, [r7, #92]	; 0x5c
    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 800485a:	7abb      	ldrb	r3, [r7, #10]
 800485c:	b21a      	sxth	r2, r3
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	b21b      	sxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b21b      	sxth	r3, r3
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc fa37 	bl	8000cdc <__aeabi_i2f>
 800486e:	4603      	mov	r3, r0
 8004870:	65bb      	str	r3, [r7, #88]	; 0x58
    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 8004872:	7b3b      	ldrb	r3, [r7, #12]
 8004874:	b21a      	sxth	r2, r3
 8004876:	7b7b      	ldrb	r3, [r7, #13]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	b21b      	sxth	r3, r3
 800487c:	4313      	orrs	r3, r2
 800487e:	b21b      	sxth	r3, r3
 8004880:	4618      	mov	r0, r3
 8004882:	f7fc fa2b 	bl	8000cdc <__aeabi_i2f>
 8004886:	4603      	mov	r3, r0
 8004888:	657b      	str	r3, [r7, #84]	; 0x54
            if(magX_min < Mag_x && Mag_x < magX_max )
 800488a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800488c:	f7fb fdcc 	bl	8000428 <__aeabi_f2d>
 8004890:	a335      	add	r3, pc, #212	; (adr r3, 8004968 <process_MPU+0x2c0>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fc f8af 	bl	80009f8 <__aeabi_dcmpgt>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d033      	beq.n	8004908 <process_MPU+0x260>
 80048a0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80048a2:	f7fb fdc1 	bl	8000428 <__aeabi_f2d>
 80048a6:	a332      	add	r3, pc, #200	; (adr r3, 8004970 <process_MPU+0x2c8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fc f886 	bl	80009bc <__aeabi_dcmplt>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d028      	beq.n	8004908 <process_MPU+0x260>
    		Mag_x = (Mag_x*asax*mRes  - mag_offet_x)*scale_x;
 80048b6:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <process_MPU+0x30c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fc fa61 	bl	8000d84 <__aeabi_fmul>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fdaf 	bl	8000428 <__aeabi_f2d>
 80048ca:	a32b      	add	r3, pc, #172	; (adr r3, 8004978 <process_MPU+0x2d0>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fe02 	bl	80004d8 <__aeabi_dmul>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4618      	mov	r0, r3
 80048da:	4621      	mov	r1, r4
 80048dc:	a328      	add	r3, pc, #160	; (adr r3, 8004980 <process_MPU+0x2d8>)
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f7fb fc41 	bl	8000168 <__aeabi_dsub>
 80048e6:	4603      	mov	r3, r0
 80048e8:	460c      	mov	r4, r1
 80048ea:	4618      	mov	r0, r3
 80048ec:	4621      	mov	r1, r4
 80048ee:	a326      	add	r3, pc, #152	; (adr r3, 8004988 <process_MPU+0x2e0>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7fb fdf0 	bl	80004d8 <__aeabi_dmul>
 80048f8:	4603      	mov	r3, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4618      	mov	r0, r3
 80048fe:	4621      	mov	r1, r4
 8004900:	f7fc f8e2 	bl	8000ac8 <__aeabi_d2f>
 8004904:	4603      	mov	r3, r0
 8004906:	65fb      	str	r3, [r7, #92]	; 0x5c
            if(magY_min < Mag_y && Mag_y < magY_max )
 8004908:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800490a:	f7fb fd8d 	bl	8000428 <__aeabi_f2d>
 800490e:	a320      	add	r3, pc, #128	; (adr r3, 8004990 <process_MPU+0x2e8>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fc f870 	bl	80009f8 <__aeabi_dcmpgt>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d05e      	beq.n	80049dc <process_MPU+0x334>
 800491e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004920:	f7fb fd82 	bl	8000428 <__aeabi_f2d>
 8004924:	a31c      	add	r3, pc, #112	; (adr r3, 8004998 <process_MPU+0x2f0>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f7fc f847 	bl	80009bc <__aeabi_dcmplt>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d053      	beq.n	80049dc <process_MPU+0x334>
    		Mag_y = (Mag_y*asay*mRes  - mag_offet_y)*scale_y;
 8004934:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <process_MPU+0x310>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc fa22 	bl	8000d84 <__aeabi_fmul>
 8004940:	4603      	mov	r3, r0
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fd70 	bl	8000428 <__aeabi_f2d>
 8004948:	a30b      	add	r3, pc, #44	; (adr r3, 8004978 <process_MPU+0x2d0>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fdc3 	bl	80004d8 <__aeabi_dmul>
 8004952:	4603      	mov	r3, r0
 8004954:	460c      	mov	r4, r1
 8004956:	4618      	mov	r0, r3
 8004958:	4621      	mov	r1, r4
 800495a:	a311      	add	r3, pc, #68	; (adr r3, 80049a0 <process_MPU+0x2f8>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fc02 	bl	8000168 <__aeabi_dsub>
 8004964:	4603      	mov	r3, r0
 8004966:	e029      	b.n	80049bc <process_MPU+0x314>
 8004968:	cccccccd 	.word	0xcccccccd
 800496c:	c06bfccc 	.word	0xc06bfccc
 8004970:	70a3d70a 	.word	0x70a3d70a
 8004974:	4084543d 	.word	0x4084543d
 8004978:	d7fd88a7 	.word	0xd7fd88a7
 800497c:	3ff7fd7f 	.word	0x3ff7fd7f
 8004980:	7ae147ae 	.word	0x7ae147ae
 8004984:	406aaa14 	.word	0x406aaa14
 8004988:	ca341083 	.word	0xca341083
 800498c:	3fd42acf 	.word	0x3fd42acf
 8004990:	ae147ae1 	.word	0xae147ae1
 8004994:	c059d147 	.word	0xc059d147
 8004998:	28f5c28f 	.word	0x28f5c28f
 800499c:	40845d5c 	.word	0x40845d5c
 80049a0:	cccccccd 	.word	0xcccccccd
 80049a4:	4072dccc 	.word	0x4072dccc
 80049a8:	20000100 	.word	0x20000100
 80049ac:	20000098 	.word	0x20000098
 80049b0:	200000fc 	.word	0x200000fc
 80049b4:	200001e0 	.word	0x200001e0
 80049b8:	20000104 	.word	0x20000104
 80049bc:	460c      	mov	r4, r1
 80049be:	4618      	mov	r0, r3
 80049c0:	4621      	mov	r1, r4
 80049c2:	a3dd      	add	r3, pc, #884	; (adr r3, 8004d38 <process_MPU+0x690>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fd86 	bl	80004d8 <__aeabi_dmul>
 80049cc:	4603      	mov	r3, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	4618      	mov	r0, r3
 80049d2:	4621      	mov	r1, r4
 80049d4:	f7fc f878 	bl	8000ac8 <__aeabi_d2f>
 80049d8:	4603      	mov	r3, r0
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58
            if(magZ_min < Mag_z && Mag_z < magZ_max )
 80049dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80049de:	f7fb fd23 	bl	8000428 <__aeabi_f2d>
 80049e2:	a3d7      	add	r3, pc, #860	; (adr r3, 8004d40 <process_MPU+0x698>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fc f806 	bl	80009f8 <__aeabi_dcmpgt>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d033      	beq.n	8004a5a <process_MPU+0x3b2>
 80049f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80049f4:	f7fb fd18 	bl	8000428 <__aeabi_f2d>
 80049f8:	a3d3      	add	r3, pc, #844	; (adr r3, 8004d48 <process_MPU+0x6a0>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb ffdd 	bl	80009bc <__aeabi_dcmplt>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d028      	beq.n	8004a5a <process_MPU+0x3b2>
    		Mag_z = (Mag_z*asaz*mRes  - mag_offet_z)*scale_z;
 8004a08:	4bd9      	ldr	r3, [pc, #868]	; (8004d70 <process_MPU+0x6c8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc f9b8 	bl	8000d84 <__aeabi_fmul>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fd06 	bl	8000428 <__aeabi_f2d>
 8004a1c:	a3cc      	add	r3, pc, #816	; (adr r3, 8004d50 <process_MPU+0x6a8>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fd59 	bl	80004d8 <__aeabi_dmul>
 8004a26:	4603      	mov	r3, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	a3ca      	add	r3, pc, #808	; (adr r3, 8004d58 <process_MPU+0x6b0>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fb9a 	bl	800016c <__adddf3>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	4621      	mov	r1, r4
 8004a40:	a3c7      	add	r3, pc, #796	; (adr r3, 8004d60 <process_MPU+0x6b8>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fd47 	bl	80004d8 <__aeabi_dmul>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7fc f839 	bl	8000ac8 <__aeabi_d2f>
 8004a56:	4603      	mov	r3, r0
 8004a58:	657b      	str	r3, [r7, #84]	; 0x54

            yaw = atan2(Mag_y,Mag_x)*RAD2DEC;
 8004a5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004a5c:	f7fb fce4 	bl	8000428 <__aeabi_f2d>
 8004a60:	4604      	mov	r4, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004a66:	f7fb fcdf 	bl	8000428 <__aeabi_f2d>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f000 fdbb 	bl	80055ec <atan2>
 8004a76:	a3bc      	add	r3, pc, #752	; (adr r3, 8004d68 <process_MPU+0x6c0>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fd2c 	bl	80004d8 <__aeabi_dmul>
 8004a80:	4603      	mov	r3, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	4618      	mov	r0, r3
 8004a86:	4621      	mov	r1, r4
 8004a88:	f7fc f81e 	bl	8000ac8 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34


            itoa(Gyro_x, buffer, 10);
 8004a90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a92:	f7fc fac7 	bl	8001024 <__aeabi_f2iz>
 8004a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f000 ffc9 	bl	8005a34 <itoa>
            strcat(buffer," ");
 8004aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fb52 	bl	8000150 <strlen>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab4:	4413      	add	r3, r2
 8004ab6:	49af      	ldr	r1, [pc, #700]	; (8004d74 <process_MPU+0x6cc>)
 8004ab8:	461a      	mov	r2, r3
 8004aba:	460b      	mov	r3, r1
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fb43 	bl	8000150 <strlen>
 8004aca:	4603      	mov	r3, r0
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ad6:	48a8      	ldr	r0, [pc, #672]	; (8004d78 <process_MPU+0x6d0>)
 8004ad8:	f7fe ff67 	bl	80039aa <HAL_UART_Transmit>

            itoa(Gyro_y, buffer, 10);
 8004adc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ade:	f7fc faa1 	bl	8001024 <__aeabi_f2iz>
 8004ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae6:	220a      	movs	r2, #10
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f000 ffa3 	bl	8005a34 <itoa>
            strcat(buffer," ");
 8004aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fb2c 	bl	8000150 <strlen>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b00:	4413      	add	r3, r2
 8004b02:	499c      	ldr	r1, [pc, #624]	; (8004d74 <process_MPU+0x6cc>)
 8004b04:	461a      	mov	r2, r3
 8004b06:	460b      	mov	r3, r1
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fb fb1d 	bl	8000150 <strlen>
 8004b16:	4603      	mov	r3, r0
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b22:	4895      	ldr	r0, [pc, #596]	; (8004d78 <process_MPU+0x6d0>)
 8004b24:	f7fe ff41 	bl	80039aa <HAL_UART_Transmit>

            itoa(Gyro_z, buffer, 10);
 8004b28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b2a:	f7fc fa7b 	bl	8001024 <__aeabi_f2iz>
 8004b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b32:	220a      	movs	r2, #10
 8004b34:	4619      	mov	r1, r3
 8004b36:	f000 ff7d 	bl	8005a34 <itoa>
            strcat(buffer," ");
 8004b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fb fb06 	bl	8000150 <strlen>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b4c:	4413      	add	r3, r2
 8004b4e:	4989      	ldr	r1, [pc, #548]	; (8004d74 <process_MPU+0x6cc>)
 8004b50:	461a      	mov	r2, r3
 8004b52:	460b      	mov	r3, r1
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fb faf7 	bl	8000150 <strlen>
 8004b62:	4603      	mov	r3, r0
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b6e:	4882      	ldr	r0, [pc, #520]	; (8004d78 <process_MPU+0x6d0>)
 8004b70:	f7fe ff1b 	bl	80039aa <HAL_UART_Transmit>

            itoa(Acc_x, buffer, 10);
 8004b74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b76:	f7fc fa55 	bl	8001024 <__aeabi_f2iz>
 8004b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7e:	220a      	movs	r2, #10
 8004b80:	4619      	mov	r1, r3
 8004b82:	f000 ff57 	bl	8005a34 <itoa>
            strcat(buffer," ");
 8004b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fae0 	bl	8000150 <strlen>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b98:	4413      	add	r3, r2
 8004b9a:	4976      	ldr	r1, [pc, #472]	; (8004d74 <process_MPU+0x6cc>)
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fb fad1 	bl	8000150 <strlen>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bba:	486f      	ldr	r0, [pc, #444]	; (8004d78 <process_MPU+0x6d0>)
 8004bbc:	f7fe fef5 	bl	80039aa <HAL_UART_Transmit>

            itoa(Acc_y, buffer, 10);
 8004bc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004bc2:	f7fc fa2f 	bl	8001024 <__aeabi_f2iz>
 8004bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bca:	220a      	movs	r2, #10
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f000 ff31 	bl	8005a34 <itoa>
            strcat(buffer," ");
 8004bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb faba 	bl	8000150 <strlen>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be4:	4413      	add	r3, r2
 8004be6:	4963      	ldr	r1, [pc, #396]	; (8004d74 <process_MPU+0x6cc>)
 8004be8:	461a      	mov	r2, r3
 8004bea:	460b      	mov	r3, r1
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fb faab 	bl	8000150 <strlen>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c06:	485c      	ldr	r0, [pc, #368]	; (8004d78 <process_MPU+0x6d0>)
 8004c08:	f7fe fecf 	bl	80039aa <HAL_UART_Transmit>

            itoa(Acc_z, buffer, 10);
 8004c0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c0e:	f7fc fa09 	bl	8001024 <__aeabi_f2iz>
 8004c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c16:	220a      	movs	r2, #10
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f000 ff0b 	bl	8005a34 <itoa>
            strcat(buffer," ");
 8004c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fb fa94 	bl	8000150 <strlen>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c30:	4413      	add	r3, r2
 8004c32:	4950      	ldr	r1, [pc, #320]	; (8004d74 <process_MPU+0x6cc>)
 8004c34:	461a      	mov	r2, r3
 8004c36:	460b      	mov	r3, r1
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb fa85 	bl	8000150 <strlen>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c52:	4849      	ldr	r0, [pc, #292]	; (8004d78 <process_MPU+0x6d0>)
 8004c54:	f7fe fea9 	bl	80039aa <HAL_UART_Transmit>

    	    ftoa(Mag_x, buffer, 4);
 8004c58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c5a:	f7fb fbe5 	bl	8000428 <__aeabi_f2d>
 8004c5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c62:	2304      	movs	r3, #4
 8004c64:	f7ff f9f4 	bl	8004050 <ftoa>
    	    strcat(buffer," ");
 8004c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fa6f 	bl	8000150 <strlen>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c7a:	4413      	add	r3, r2
 8004c7c:	493d      	ldr	r1, [pc, #244]	; (8004d74 <process_MPU+0x6cc>)
 8004c7e:	461a      	mov	r2, r3
 8004c80:	460b      	mov	r3, r1
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fb fa60 	bl	8000150 <strlen>
 8004c90:	4603      	mov	r3, r0
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c9c:	4836      	ldr	r0, [pc, #216]	; (8004d78 <process_MPU+0x6d0>)
 8004c9e:	f7fe fe84 	bl	80039aa <HAL_UART_Transmit>

    	    ftoa(Mag_y, buffer, 4);
 8004ca2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004ca4:	f7fb fbc0 	bl	8000428 <__aeabi_f2d>
 8004ca8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004cac:	2304      	movs	r3, #4
 8004cae:	f7ff f9cf 	bl	8004050 <ftoa>
    	    strcat(buffer," ");
 8004cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fa4a 	bl	8000150 <strlen>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc4:	4413      	add	r3, r2
 8004cc6:	492b      	ldr	r1, [pc, #172]	; (8004d74 <process_MPU+0x6cc>)
 8004cc8:	461a      	mov	r2, r3
 8004cca:	460b      	mov	r3, r1
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb fa3b 	bl	8000150 <strlen>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ce6:	4824      	ldr	r0, [pc, #144]	; (8004d78 <process_MPU+0x6d0>)
 8004ce8:	f7fe fe5f 	bl	80039aa <HAL_UART_Transmit>

    	    ftoa(Mag_z, buffer, 4);
 8004cec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cee:	f7fb fb9b 	bl	8000428 <__aeabi_f2d>
 8004cf2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	f7ff f9aa 	bl	8004050 <ftoa>
    	    strcat(buffer,"\n");
 8004cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb fa25 	bl	8000150 <strlen>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d0e:	4413      	add	r3, r2
 8004d10:	491a      	ldr	r1, [pc, #104]	; (8004d7c <process_MPU+0x6d4>)
 8004d12:	461a      	mov	r2, r3
 8004d14:	460b      	mov	r3, r1
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	8013      	strh	r3, [r2, #0]
    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8004d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fa16 	bl	8000150 <strlen>
 8004d24:	4603      	mov	r3, r0
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d30:	4811      	ldr	r0, [pc, #68]	; (8004d78 <process_MPU+0x6d0>)
 8004d32:	f7fe fe3a 	bl	80039aa <HAL_UART_Transmit>
 8004d36:	e023      	b.n	8004d80 <process_MPU+0x6d8>
 8004d38:	503dbf48 	.word	0x503dbf48
 8004d3c:	3fd37c22 	.word	0x3fd37c22
 8004d40:	28f5c28f 	.word	0x28f5c28f
 8004d44:	c0814f5c 	.word	0xc0814f5c
 8004d48:	1eb851ec 	.word	0x1eb851ec
 8004d4c:	40410b85 	.word	0x40410b85
 8004d50:	d7fd88a7 	.word	0xd7fd88a7
 8004d54:	3ff7fd7f 	.word	0x3ff7fd7f
 8004d58:	cccccccd 	.word	0xcccccccd
 8004d5c:	4074b4cc 	.word	0x4074b4cc
 8004d60:	d0605c0c 	.word	0xd0605c0c
 8004d64:	bfd281ea 	.word	0xbfd281ea
 8004d68:	1a5d2372 	.word	0x1a5d2372
 8004d6c:	404ca5dc 	.word	0x404ca5dc
 8004d70:	200001dc 	.word	0x200001dc
 8004d74:	08005b18 	.word	0x08005b18
 8004d78:	20000194 	.word	0x20000194
 8004d7c:	08005b1c 	.word	0x08005b1c
    	//reg = 0x02;
//    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
//    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
    }

	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8004d80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004d82:	f7fb fb51 	bl	8000428 <__aeabi_f2d>
 8004d86:	4604      	mov	r4, r0
 8004d88:	460d      	mov	r5, r1
 8004d8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d8c:	f7fb fb4c 	bl	8000428 <__aeabi_f2d>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	f000 fc28 	bl	80055ec <atan2>
 8004d9c:	a328      	add	r3, pc, #160	; (adr r3, 8004e40 <process_MPU+0x798>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fb99 	bl	80004d8 <__aeabi_dmul>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	4618      	mov	r0, r3
 8004dac:	4621      	mov	r1, r4
 8004dae:	f7fb fe8b 	bl	8000ac8 <__aeabi_d2f>
 8004db2:	4603      	mov	r3, r0
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8004db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fb fb33 	bl	8000428 <__aeabi_f2d>
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dc8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004dca:	f7fb ffdb 	bl	8000d84 <__aeabi_fmul>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	461e      	mov	r6, r3
 8004dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004dd6:	f7fb ffd5 	bl	8000d84 <__aeabi_fmul>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7fb fec8 	bl	8000b74 <__addsf3>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fb fb1e 	bl	8000428 <__aeabi_f2d>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	f000 fbfc 	bl	80055f0 <sqrt>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fc94 	bl	800072c <__aeabi_ddiv>
 8004e04:	4603      	mov	r3, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	f000 fa60 	bl	80052d0 <atan>
 8004e10:	a30b      	add	r3, pc, #44	; (adr r3, 8004e40 <process_MPU+0x798>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fb5f 	bl	80004d8 <__aeabi_dmul>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	4621      	mov	r1, r4
 8004e22:	f7fb fe51 	bl	8000ac8 <__aeabi_d2f>
 8004e26:	4603      	mov	r3, r0
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c


	complementary_filter(pitch,Gyro_x,0.0116);
 8004e2a:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <process_MPU+0x7a0>)
 8004e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e30:	f000 f80e 	bl	8004e50 <complementary_filter>
//	 strcat(buffer,"\n");
	// HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);

    //CDC_Transmit_FS((uint8_t *)buffer, sizeof(buffer));

}
 8004e34:	bf00      	nop
 8004e36:	3764      	adds	r7, #100	; 0x64
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	f3af 8000 	nop.w
 8004e40:	1a5d2372 	.word	0x1a5d2372
 8004e44:	404ca5dc 	.word	0x404ca5dc
 8004e48:	3c3e0ded 	.word	0x3c3e0ded
 8004e4c:	00000000 	.word	0x00000000

08004e50 <complementary_filter>:
void complementary_filter(float angle_acc,float gyro_rate,float dt){
 8004e50:	b5b0      	push	{r4, r5, r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
	com_angle = alpha*(com_angle + dt*gyro_rate) + (1-alpha)*angle_acc;
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fb ff90 	bl	8000d84 <__aeabi_fmul>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <complementary_filter+0x88>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f7fb fe80 	bl	8000b74 <__addsf3>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fb fad6 	bl	8000428 <__aeabi_f2d>
 8004e7c:	a312      	add	r3, pc, #72	; (adr r3, 8004ec8 <complementary_filter+0x78>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fb29 	bl	80004d8 <__aeabi_dmul>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	4625      	mov	r5, r4
 8004e8c:	461c      	mov	r4, r3
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7fb faca 	bl	8000428 <__aeabi_f2d>
 8004e94:	a30e      	add	r3, pc, #56	; (adr r3, 8004ed0 <complementary_filter+0x80>)
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f7fb fb1d 	bl	80004d8 <__aeabi_dmul>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f7fb f961 	bl	800016c <__adddf3>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	f7fb fe09 	bl	8000ac8 <__aeabi_d2f>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <complementary_filter+0x88>)
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	9999999a 	.word	0x9999999a
 8004ecc:	3fe99999 	.word	0x3fe99999
 8004ed0:	99999998 	.word	0x99999998
 8004ed4:	3fc99999 	.word	0x3fc99999
 8004ed8:	20000094 	.word	0x20000094

08004edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <HAL_MspInit+0x5c>)
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <HAL_MspInit+0x5c>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6193      	str	r3, [r2, #24]
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_MspInit+0x5c>)
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <HAL_MspInit+0x5c>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4a0e      	ldr	r2, [pc, #56]	; (8004f38 <HAL_MspInit+0x5c>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f04:	61d3      	str	r3, [r2, #28]
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <HAL_MspInit+0x5c>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <HAL_MspInit+0x60>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <HAL_MspInit+0x60>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40010000 	.word	0x40010000

08004f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	f107 0314 	add.w	r3, r7, #20
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_I2C_MspInit+0xdc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d159      	bne.n	8005014 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f60:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <HAL_I2C_MspInit+0xe0>)
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <HAL_I2C_MspInit+0xe0>)
 8004f66:	f043 0308 	orr.w	r3, r3, #8
 8004f6a:	6193      	str	r3, [r2, #24]
 8004f6c:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <HAL_I2C_MspInit+0xe0>)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f7e:	2312      	movs	r3, #18
 8004f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4825      	ldr	r0, [pc, #148]	; (8005024 <HAL_I2C_MspInit+0xe4>)
 8004f8e:	f7fc fae1 	bl	8001554 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004f92:	4b25      	ldr	r3, [pc, #148]	; (8005028 <HAL_I2C_MspInit+0xe8>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <HAL_I2C_MspInit+0xe8>)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_I2C_MspInit+0xe0>)
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <HAL_I2C_MspInit+0xe0>)
 8004fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fb8:	61d3      	str	r3, [r2, #28]
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_I2C_MspInit+0xe0>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8004fc6:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fc8:	4a19      	ldr	r2, [pc, #100]	; (8005030 <HAL_I2C_MspInit+0xf0>)
 8004fca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fcc:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fd2:	4b16      	ldr	r3, [pc, #88]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ff6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004ff8:	480c      	ldr	r0, [pc, #48]	; (800502c <HAL_I2C_MspInit+0xec>)
 8004ffa:	f7fc f94b 	bl	8001294 <HAL_DMA_Init>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8005004:	f7ff f81c 	bl	8004040 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a08      	ldr	r2, [pc, #32]	; (800502c <HAL_I2C_MspInit+0xec>)
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
 800500e:	4a07      	ldr	r2, [pc, #28]	; (800502c <HAL_I2C_MspInit+0xec>)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005014:	bf00      	nop
 8005016:	3728      	adds	r7, #40	; 0x28
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40005400 	.word	0x40005400
 8005020:	40021000 	.word	0x40021000
 8005024:	40010c00 	.word	0x40010c00
 8005028:	40010000 	.word	0x40010000
 800502c:	2000010c 	.word	0x2000010c
 8005030:	40020080 	.word	0x40020080

08005034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d10b      	bne.n	800505e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <HAL_TIM_Base_MspInit+0x34>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4a07      	ldr	r2, [pc, #28]	; (8005068 <HAL_TIM_Base_MspInit+0x34>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	61d3      	str	r3, [r2, #28]
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_TIM_Base_MspInit+0x34>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	40021000 	.word	0x40021000

0800506c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005074:	f107 0310 	add.w	r3, r7, #16
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_UART_MspInit+0x88>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d12f      	bne.n	80050ec <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <HAL_UART_MspInit+0x8c>)
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_UART_MspInit+0x8c>)
 8005092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005096:	61d3      	str	r3, [r2, #28]
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <HAL_UART_MspInit+0x8c>)
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a4:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_UART_MspInit+0x8c>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <HAL_UART_MspInit+0x8c>)
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	6193      	str	r3, [r2, #24]
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <HAL_UART_MspInit+0x8c>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050bc:	2304      	movs	r3, #4
 80050be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
 80050c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050c4:	2303      	movs	r3, #3
 80050c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	4619      	mov	r1, r3
 80050ce:	480b      	ldr	r0, [pc, #44]	; (80050fc <HAL_UART_MspInit+0x90>)
 80050d0:	f7fc fa40 	bl	8001554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80050d4:	2308      	movs	r3, #8
 80050d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e0:	f107 0310 	add.w	r3, r7, #16
 80050e4:	4619      	mov	r1, r3
 80050e6:	4805      	ldr	r0, [pc, #20]	; (80050fc <HAL_UART_MspInit+0x90>)
 80050e8:	f7fc fa34 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050ec:	bf00      	nop
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40004400 	.word	0x40004400
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40010800 	.word	0x40010800

08005100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08c      	sub	sp, #48	; 0x30
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8005110:	2200      	movs	r2, #0
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	2019      	movs	r0, #25
 8005116:	f7fc f892 	bl	800123e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800511a:	2019      	movs	r0, #25
 800511c:	f7fc f8ab 	bl	8001276 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <HAL_InitTick+0x9c>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <HAL_InitTick+0x9c>)
 8005126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800512a:	6193      	str	r3, [r2, #24]
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_InitTick+0x9c>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005138:	f107 0210 	add.w	r2, r7, #16
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f7fd fff4 	bl	8003130 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fd ffde 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 800514c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <HAL_InitTick+0xa0>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0c9b      	lsrs	r3, r3, #18
 8005158:	3b01      	subs	r3, #1
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_InitTick+0xa4>)
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_InitTick+0xa8>)
 8005160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_InitTick+0xa4>)
 8005164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005168:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800516a:	4a0e      	ldr	r2, [pc, #56]	; (80051a4 <HAL_InitTick+0xa4>)
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_InitTick+0xa4>)
 8005172:	2200      	movs	r2, #0
 8005174:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_InitTick+0xa4>)
 8005178:	2200      	movs	r2, #0
 800517a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800517c:	4809      	ldr	r0, [pc, #36]	; (80051a4 <HAL_InitTick+0xa4>)
 800517e:	f7fe f825 	bl	80031cc <HAL_TIM_Base_Init>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005188:	4806      	ldr	r0, [pc, #24]	; (80051a4 <HAL_InitTick+0xa4>)
 800518a:	f7fe f86d 	bl	8003268 <HAL_TIM_Base_Start_IT>
 800518e:	4603      	mov	r3, r0
 8005190:	e000      	b.n	8005194 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
}
 8005194:	4618      	mov	r0, r3
 8005196:	3730      	adds	r7, #48	; 0x30
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000
 80051a0:	431bde83 	.word	0x431bde83
 80051a4:	200001e4 	.word	0x200001e4
 80051a8:	40012c00 	.word	0x40012c00

080051ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051bc:	e7fe      	b.n	80051bc <HardFault_Handler+0x4>

080051be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051be:	b480      	push	{r7}
 80051c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051c2:	e7fe      	b.n	80051c2 <MemManage_Handler+0x4>

080051c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051c8:	e7fe      	b.n	80051c8 <BusFault_Handler+0x4>

080051ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ce:	e7fe      	b.n	80051ce <UsageFault_Handler+0x4>

080051d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80051f8:	4802      	ldr	r0, [pc, #8]	; (8005204 <DMA1_Channel7_IRQHandler+0x10>)
 80051fa:	f7fc f8a5 	bl	8001348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	2000010c 	.word	0x2000010c

08005208 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <TIM1_UP_IRQHandler+0x10>)
 800520e:	f7fe f84e 	bl	80032ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200001e4 	.word	0x200001e4

0800521c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005220:	4b15      	ldr	r3, [pc, #84]	; (8005278 <SystemInit+0x5c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <SystemInit+0x5c>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <SystemInit+0x5c>)
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	4911      	ldr	r1, [pc, #68]	; (8005278 <SystemInit+0x5c>)
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <SystemInit+0x60>)
 8005234:	4013      	ands	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <SystemInit+0x5c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <SystemInit+0x5c>)
 800523e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005246:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <SystemInit+0x5c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <SystemInit+0x5c>)
 800524e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005252:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <SystemInit+0x5c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a07      	ldr	r2, [pc, #28]	; (8005278 <SystemInit+0x5c>)
 800525a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800525e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <SystemInit+0x5c>)
 8005262:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005266:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <SystemInit+0x64>)
 800526a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800526e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	40021000 	.word	0x40021000
 800527c:	f8ff0000 	.word	0xf8ff0000
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005284:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005286:	e003      	b.n	8005290 <LoopCopyDataInit>

08005288 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800528a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800528c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800528e:	3104      	adds	r1, #4

08005290 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005290:	480a      	ldr	r0, [pc, #40]	; (80052bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005294:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005296:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005298:	d3f6      	bcc.n	8005288 <CopyDataInit>
  ldr r2, =_sbss
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800529c:	e002      	b.n	80052a4 <LoopFillZerobss>

0800529e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800529e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80052a0:	f842 3b04 	str.w	r3, [r2], #4

080052a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80052a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80052a8:	d3f9      	bcc.n	800529e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052aa:	f7ff ffb7 	bl	800521c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ae:	f000 fb85 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052b2:	f7fe fd37 	bl	8003d24 <main>
  bx lr
 80052b6:	4770      	bx	lr
  ldr r3, =_sidata
 80052b8:	08005c04 	.word	0x08005c04
  ldr r0, =_sdata
 80052bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80052c0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80052c4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80052c8:	20000224 	.word	0x20000224

080052cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052cc:	e7fe      	b.n	80052cc <ADC1_2_IRQHandler>
	...

080052d0 <atan>:
 80052d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	4bb6      	ldr	r3, [pc, #728]	; (80055b0 <atan+0x2e0>)
 80052d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80052da:	429e      	cmp	r6, r3
 80052dc:	4604      	mov	r4, r0
 80052de:	460d      	mov	r5, r1
 80052e0:	468b      	mov	fp, r1
 80052e2:	dd17      	ble.n	8005314 <atan+0x44>
 80052e4:	4bb3      	ldr	r3, [pc, #716]	; (80055b4 <atan+0x2e4>)
 80052e6:	429e      	cmp	r6, r3
 80052e8:	dc01      	bgt.n	80052ee <atan+0x1e>
 80052ea:	d109      	bne.n	8005300 <atan+0x30>
 80052ec:	b140      	cbz	r0, 8005300 <atan+0x30>
 80052ee:	4622      	mov	r2, r4
 80052f0:	462b      	mov	r3, r5
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7fa ff39 	bl	800016c <__adddf3>
 80052fa:	4604      	mov	r4, r0
 80052fc:	460d      	mov	r5, r1
 80052fe:	e005      	b.n	800530c <atan+0x3c>
 8005300:	f1bb 0f00 	cmp.w	fp, #0
 8005304:	4cac      	ldr	r4, [pc, #688]	; (80055b8 <atan+0x2e8>)
 8005306:	f340 8121 	ble.w	800554c <atan+0x27c>
 800530a:	4dac      	ldr	r5, [pc, #688]	; (80055bc <atan+0x2ec>)
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	4baa      	ldr	r3, [pc, #680]	; (80055c0 <atan+0x2f0>)
 8005316:	429e      	cmp	r6, r3
 8005318:	dc11      	bgt.n	800533e <atan+0x6e>
 800531a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800531e:	429e      	cmp	r6, r3
 8005320:	dc0a      	bgt.n	8005338 <atan+0x68>
 8005322:	a38b      	add	r3, pc, #556	; (adr r3, 8005550 <atan+0x280>)
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fa ff20 	bl	800016c <__adddf3>
 800532c:	2200      	movs	r2, #0
 800532e:	4ba5      	ldr	r3, [pc, #660]	; (80055c4 <atan+0x2f4>)
 8005330:	f7fb fb62 	bl	80009f8 <__aeabi_dcmpgt>
 8005334:	2800      	cmp	r0, #0
 8005336:	d1e9      	bne.n	800530c <atan+0x3c>
 8005338:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800533c:	e027      	b.n	800538e <atan+0xbe>
 800533e:	f000 f951 	bl	80055e4 <fabs>
 8005342:	4ba1      	ldr	r3, [pc, #644]	; (80055c8 <atan+0x2f8>)
 8005344:	4604      	mov	r4, r0
 8005346:	429e      	cmp	r6, r3
 8005348:	460d      	mov	r5, r1
 800534a:	f300 80b8 	bgt.w	80054be <atan+0x1ee>
 800534e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005352:	429e      	cmp	r6, r3
 8005354:	f300 809c 	bgt.w	8005490 <atan+0x1c0>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	f7fa ff06 	bl	800016c <__adddf3>
 8005360:	2200      	movs	r2, #0
 8005362:	4b98      	ldr	r3, [pc, #608]	; (80055c4 <atan+0x2f4>)
 8005364:	f7fa ff00 	bl	8000168 <__aeabi_dsub>
 8005368:	2200      	movs	r2, #0
 800536a:	4606      	mov	r6, r0
 800536c:	460f      	mov	r7, r1
 800536e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005372:	4620      	mov	r0, r4
 8005374:	4629      	mov	r1, r5
 8005376:	f7fa fef9 	bl	800016c <__adddf3>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fb f9d3 	bl	800072c <__aeabi_ddiv>
 8005386:	f04f 0a00 	mov.w	sl, #0
 800538a:	4604      	mov	r4, r0
 800538c:	460d      	mov	r5, r1
 800538e:	4622      	mov	r2, r4
 8005390:	462b      	mov	r3, r5
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fb f89f 	bl	80004d8 <__aeabi_dmul>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4680      	mov	r8, r0
 80053a0:	4689      	mov	r9, r1
 80053a2:	f7fb f899 	bl	80004d8 <__aeabi_dmul>
 80053a6:	a36c      	add	r3, pc, #432	; (adr r3, 8005558 <atan+0x288>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	4606      	mov	r6, r0
 80053ae:	460f      	mov	r7, r1
 80053b0:	f7fb f892 	bl	80004d8 <__aeabi_dmul>
 80053b4:	a36a      	add	r3, pc, #424	; (adr r3, 8005560 <atan+0x290>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fa fed7 	bl	800016c <__adddf3>
 80053be:	4632      	mov	r2, r6
 80053c0:	463b      	mov	r3, r7
 80053c2:	f7fb f889 	bl	80004d8 <__aeabi_dmul>
 80053c6:	a368      	add	r3, pc, #416	; (adr r3, 8005568 <atan+0x298>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fa fece 	bl	800016c <__adddf3>
 80053d0:	4632      	mov	r2, r6
 80053d2:	463b      	mov	r3, r7
 80053d4:	f7fb f880 	bl	80004d8 <__aeabi_dmul>
 80053d8:	a365      	add	r3, pc, #404	; (adr r3, 8005570 <atan+0x2a0>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fa fec5 	bl	800016c <__adddf3>
 80053e2:	4632      	mov	r2, r6
 80053e4:	463b      	mov	r3, r7
 80053e6:	f7fb f877 	bl	80004d8 <__aeabi_dmul>
 80053ea:	a363      	add	r3, pc, #396	; (adr r3, 8005578 <atan+0x2a8>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fa febc 	bl	800016c <__adddf3>
 80053f4:	4632      	mov	r2, r6
 80053f6:	463b      	mov	r3, r7
 80053f8:	f7fb f86e 	bl	80004d8 <__aeabi_dmul>
 80053fc:	a360      	add	r3, pc, #384	; (adr r3, 8005580 <atan+0x2b0>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fa feb3 	bl	800016c <__adddf3>
 8005406:	4642      	mov	r2, r8
 8005408:	464b      	mov	r3, r9
 800540a:	f7fb f865 	bl	80004d8 <__aeabi_dmul>
 800540e:	a35e      	add	r3, pc, #376	; (adr r3, 8005588 <atan+0x2b8>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	4680      	mov	r8, r0
 8005416:	4689      	mov	r9, r1
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fb f85c 	bl	80004d8 <__aeabi_dmul>
 8005420:	a35b      	add	r3, pc, #364	; (adr r3, 8005590 <atan+0x2c0>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fa fe9f 	bl	8000168 <__aeabi_dsub>
 800542a:	4632      	mov	r2, r6
 800542c:	463b      	mov	r3, r7
 800542e:	f7fb f853 	bl	80004d8 <__aeabi_dmul>
 8005432:	a359      	add	r3, pc, #356	; (adr r3, 8005598 <atan+0x2c8>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	f7fb f84a 	bl	80004d8 <__aeabi_dmul>
 8005444:	a356      	add	r3, pc, #344	; (adr r3, 80055a0 <atan+0x2d0>)
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fa fe8d 	bl	8000168 <__aeabi_dsub>
 800544e:	4632      	mov	r2, r6
 8005450:	463b      	mov	r3, r7
 8005452:	f7fb f841 	bl	80004d8 <__aeabi_dmul>
 8005456:	a354      	add	r3, pc, #336	; (adr r3, 80055a8 <atan+0x2d8>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fa fe84 	bl	8000168 <__aeabi_dsub>
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	f7fb f838 	bl	80004d8 <__aeabi_dmul>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fa fe7c 	bl	800016c <__adddf3>
 8005474:	4622      	mov	r2, r4
 8005476:	462b      	mov	r3, r5
 8005478:	f7fb f82e 	bl	80004d8 <__aeabi_dmul>
 800547c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	d144      	bne.n	8005510 <atan+0x240>
 8005486:	4620      	mov	r0, r4
 8005488:	4629      	mov	r1, r5
 800548a:	f7fa fe6d 	bl	8000168 <__aeabi_dsub>
 800548e:	e734      	b.n	80052fa <atan+0x2a>
 8005490:	2200      	movs	r2, #0
 8005492:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <atan+0x2f4>)
 8005494:	f7fa fe68 	bl	8000168 <__aeabi_dsub>
 8005498:	2200      	movs	r2, #0
 800549a:	4606      	mov	r6, r0
 800549c:	460f      	mov	r7, r1
 800549e:	4b49      	ldr	r3, [pc, #292]	; (80055c4 <atan+0x2f4>)
 80054a0:	4620      	mov	r0, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	f7fa fe62 	bl	800016c <__adddf3>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb f93c 	bl	800072c <__aeabi_ddiv>
 80054b4:	f04f 0a01 	mov.w	sl, #1
 80054b8:	4604      	mov	r4, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	e767      	b.n	800538e <atan+0xbe>
 80054be:	4b43      	ldr	r3, [pc, #268]	; (80055cc <atan+0x2fc>)
 80054c0:	429e      	cmp	r6, r3
 80054c2:	dc1a      	bgt.n	80054fa <atan+0x22a>
 80054c4:	2200      	movs	r2, #0
 80054c6:	4b42      	ldr	r3, [pc, #264]	; (80055d0 <atan+0x300>)
 80054c8:	f7fa fe4e 	bl	8000168 <__aeabi_dsub>
 80054cc:	2200      	movs	r2, #0
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <atan+0x300>)
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fa fffe 	bl	80004d8 <__aeabi_dmul>
 80054dc:	2200      	movs	r2, #0
 80054de:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <atan+0x2f4>)
 80054e0:	f7fa fe44 	bl	800016c <__adddf3>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4630      	mov	r0, r6
 80054ea:	4639      	mov	r1, r7
 80054ec:	f7fb f91e 	bl	800072c <__aeabi_ddiv>
 80054f0:	f04f 0a02 	mov.w	sl, #2
 80054f4:	4604      	mov	r4, r0
 80054f6:	460d      	mov	r5, r1
 80054f8:	e749      	b.n	800538e <atan+0xbe>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	2000      	movs	r0, #0
 8005500:	4934      	ldr	r1, [pc, #208]	; (80055d4 <atan+0x304>)
 8005502:	f7fb f913 	bl	800072c <__aeabi_ddiv>
 8005506:	f04f 0a03 	mov.w	sl, #3
 800550a:	4604      	mov	r4, r0
 800550c:	460d      	mov	r5, r1
 800550e:	e73e      	b.n	800538e <atan+0xbe>
 8005510:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <atan+0x308>)
 8005512:	4e32      	ldr	r6, [pc, #200]	; (80055dc <atan+0x30c>)
 8005514:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005518:	4456      	add	r6, sl
 800551a:	449a      	add	sl, r3
 800551c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005520:	f7fa fe22 	bl	8000168 <__aeabi_dsub>
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	f7fa fe1e 	bl	8000168 <__aeabi_dsub>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005534:	f7fa fe18 	bl	8000168 <__aeabi_dsub>
 8005538:	f1bb 0f00 	cmp.w	fp, #0
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	f6bf aee4 	bge.w	800530c <atan+0x3c>
 8005544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005548:	461d      	mov	r5, r3
 800554a:	e6df      	b.n	800530c <atan+0x3c>
 800554c:	4d24      	ldr	r5, [pc, #144]	; (80055e0 <atan+0x310>)
 800554e:	e6dd      	b.n	800530c <atan+0x3c>
 8005550:	8800759c 	.word	0x8800759c
 8005554:	7e37e43c 	.word	0x7e37e43c
 8005558:	e322da11 	.word	0xe322da11
 800555c:	3f90ad3a 	.word	0x3f90ad3a
 8005560:	24760deb 	.word	0x24760deb
 8005564:	3fa97b4b 	.word	0x3fa97b4b
 8005568:	a0d03d51 	.word	0xa0d03d51
 800556c:	3fb10d66 	.word	0x3fb10d66
 8005570:	c54c206e 	.word	0xc54c206e
 8005574:	3fb745cd 	.word	0x3fb745cd
 8005578:	920083ff 	.word	0x920083ff
 800557c:	3fc24924 	.word	0x3fc24924
 8005580:	5555550d 	.word	0x5555550d
 8005584:	3fd55555 	.word	0x3fd55555
 8005588:	2c6a6c2f 	.word	0x2c6a6c2f
 800558c:	bfa2b444 	.word	0xbfa2b444
 8005590:	52defd9a 	.word	0x52defd9a
 8005594:	3fadde2d 	.word	0x3fadde2d
 8005598:	af749a6d 	.word	0xaf749a6d
 800559c:	3fb3b0f2 	.word	0x3fb3b0f2
 80055a0:	fe231671 	.word	0xfe231671
 80055a4:	3fbc71c6 	.word	0x3fbc71c6
 80055a8:	9998ebc4 	.word	0x9998ebc4
 80055ac:	3fc99999 	.word	0x3fc99999
 80055b0:	440fffff 	.word	0x440fffff
 80055b4:	7ff00000 	.word	0x7ff00000
 80055b8:	54442d18 	.word	0x54442d18
 80055bc:	3ff921fb 	.word	0x3ff921fb
 80055c0:	3fdbffff 	.word	0x3fdbffff
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	3ff2ffff 	.word	0x3ff2ffff
 80055cc:	40037fff 	.word	0x40037fff
 80055d0:	3ff80000 	.word	0x3ff80000
 80055d4:	bff00000 	.word	0xbff00000
 80055d8:	08005bb0 	.word	0x08005bb0
 80055dc:	08005b90 	.word	0x08005b90
 80055e0:	bff921fb 	.word	0xbff921fb

080055e4 <fabs>:
 80055e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055e8:	4619      	mov	r1, r3
 80055ea:	4770      	bx	lr

080055ec <atan2>:
 80055ec:	f000 b854 	b.w	8005698 <__ieee754_atan2>

080055f0 <sqrt>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	b08b      	sub	sp, #44	; 0x2c
 80055f6:	4604      	mov	r4, r0
 80055f8:	460d      	mov	r5, r1
 80055fa:	f000 f92b 	bl	8005854 <__ieee754_sqrt>
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <sqrt+0xa0>)
 8005600:	4680      	mov	r8, r0
 8005602:	f993 a000 	ldrsb.w	sl, [r3]
 8005606:	4689      	mov	r9, r1
 8005608:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800560c:	d02b      	beq.n	8005666 <sqrt+0x76>
 800560e:	4622      	mov	r2, r4
 8005610:	462b      	mov	r3, r5
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	f7fb f9f9 	bl	8000a0c <__aeabi_dcmpun>
 800561a:	4683      	mov	fp, r0
 800561c:	bb18      	cbnz	r0, 8005666 <sqrt+0x76>
 800561e:	2600      	movs	r6, #0
 8005620:	2700      	movs	r7, #0
 8005622:	4632      	mov	r2, r6
 8005624:	463b      	mov	r3, r7
 8005626:	4620      	mov	r0, r4
 8005628:	4629      	mov	r1, r5
 800562a:	f7fb f9c7 	bl	80009bc <__aeabi_dcmplt>
 800562e:	b1d0      	cbz	r0, 8005666 <sqrt+0x76>
 8005630:	2301      	movs	r3, #1
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <sqrt+0xa4>)
 8005636:	f8cd b020 	str.w	fp, [sp, #32]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005640:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005644:	f1ba 0f00 	cmp.w	sl, #0
 8005648:	d112      	bne.n	8005670 <sqrt+0x80>
 800564a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800564e:	4668      	mov	r0, sp
 8005650:	f000 f9ac 	bl	80059ac <matherr>
 8005654:	b1b8      	cbz	r0, 8005686 <sqrt+0x96>
 8005656:	9b08      	ldr	r3, [sp, #32]
 8005658:	b11b      	cbz	r3, 8005662 <sqrt+0x72>
 800565a:	f000 f9a9 	bl	80059b0 <__errno>
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	6003      	str	r3, [r0, #0]
 8005662:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005666:	4640      	mov	r0, r8
 8005668:	4649      	mov	r1, r9
 800566a:	b00b      	add	sp, #44	; 0x2c
 800566c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005670:	4632      	mov	r2, r6
 8005672:	463b      	mov	r3, r7
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fb f858 	bl	800072c <__aeabi_ddiv>
 800567c:	f1ba 0f02 	cmp.w	sl, #2
 8005680:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005684:	d1e3      	bne.n	800564e <sqrt+0x5e>
 8005686:	f000 f993 	bl	80059b0 <__errno>
 800568a:	2321      	movs	r3, #33	; 0x21
 800568c:	6003      	str	r3, [r0, #0]
 800568e:	e7e2      	b.n	8005656 <sqrt+0x66>
 8005690:	2000000c 	.word	0x2000000c
 8005694:	08005bd0 	.word	0x08005bd0

08005698 <__ieee754_atan2>:
 8005698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	4256      	negs	r6, r2
 800569e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80056a2:	4316      	orrs	r6, r2
 80056a4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8005850 <__ieee754_atan2+0x1b8>
 80056a8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80056ac:	454e      	cmp	r6, r9
 80056ae:	4604      	mov	r4, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	469e      	mov	lr, r3
 80056b4:	d808      	bhi.n	80056c8 <__ieee754_atan2+0x30>
 80056b6:	4246      	negs	r6, r0
 80056b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80056bc:	4306      	orrs	r6, r0
 80056be:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80056c2:	454e      	cmp	r6, r9
 80056c4:	4688      	mov	r8, r1
 80056c6:	d906      	bls.n	80056d6 <__ieee754_atan2+0x3e>
 80056c8:	4620      	mov	r0, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	f7fa fd4e 	bl	800016c <__adddf3>
 80056d0:	4604      	mov	r4, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	e030      	b.n	8005738 <__ieee754_atan2+0xa0>
 80056d6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80056da:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80056de:	4316      	orrs	r6, r2
 80056e0:	d103      	bne.n	80056ea <__ieee754_atan2+0x52>
 80056e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f7ff bdf3 	b.w	80052d0 <atan>
 80056ea:	179e      	asrs	r6, r3, #30
 80056ec:	f006 0602 	and.w	r6, r6, #2
 80056f0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80056f4:	ea57 0100 	orrs.w	r1, r7, r0
 80056f8:	d107      	bne.n	800570a <__ieee754_atan2+0x72>
 80056fa:	2e02      	cmp	r6, #2
 80056fc:	d079      	beq.n	80057f2 <__ieee754_atan2+0x15a>
 80056fe:	2e03      	cmp	r6, #3
 8005700:	d11a      	bne.n	8005738 <__ieee754_atan2+0xa0>
 8005702:	a541      	add	r5, pc, #260	; (adr r5, 8005808 <__ieee754_atan2+0x170>)
 8005704:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005708:	e016      	b.n	8005738 <__ieee754_atan2+0xa0>
 800570a:	ea5c 0102 	orrs.w	r1, ip, r2
 800570e:	d106      	bne.n	800571e <__ieee754_atan2+0x86>
 8005710:	f1b8 0f00 	cmp.w	r8, #0
 8005714:	da71      	bge.n	80057fa <__ieee754_atan2+0x162>
 8005716:	a53e      	add	r5, pc, #248	; (adr r5, 8005810 <__ieee754_atan2+0x178>)
 8005718:	e9d5 4500 	ldrd	r4, r5, [r5]
 800571c:	e00c      	b.n	8005738 <__ieee754_atan2+0xa0>
 800571e:	45cc      	cmp	ip, r9
 8005720:	d123      	bne.n	800576a <__ieee754_atan2+0xd2>
 8005722:	4567      	cmp	r7, ip
 8005724:	d114      	bne.n	8005750 <__ieee754_atan2+0xb8>
 8005726:	2e02      	cmp	r6, #2
 8005728:	d00a      	beq.n	8005740 <__ieee754_atan2+0xa8>
 800572a:	2e03      	cmp	r6, #3
 800572c:	d00c      	beq.n	8005748 <__ieee754_atan2+0xb0>
 800572e:	2e01      	cmp	r6, #1
 8005730:	d15b      	bne.n	80057ea <__ieee754_atan2+0x152>
 8005732:	a539      	add	r5, pc, #228	; (adr r5, 8005818 <__ieee754_atan2+0x180>)
 8005734:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	a537      	add	r5, pc, #220	; (adr r5, 8005820 <__ieee754_atan2+0x188>)
 8005742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005746:	e7f7      	b.n	8005738 <__ieee754_atan2+0xa0>
 8005748:	a537      	add	r5, pc, #220	; (adr r5, 8005828 <__ieee754_atan2+0x190>)
 800574a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800574e:	e7f3      	b.n	8005738 <__ieee754_atan2+0xa0>
 8005750:	2e02      	cmp	r6, #2
 8005752:	d04e      	beq.n	80057f2 <__ieee754_atan2+0x15a>
 8005754:	2e03      	cmp	r6, #3
 8005756:	d0d4      	beq.n	8005702 <__ieee754_atan2+0x6a>
 8005758:	2e01      	cmp	r6, #1
 800575a:	f04f 0400 	mov.w	r4, #0
 800575e:	d102      	bne.n	8005766 <__ieee754_atan2+0xce>
 8005760:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005764:	e7e8      	b.n	8005738 <__ieee754_atan2+0xa0>
 8005766:	2500      	movs	r5, #0
 8005768:	e7e6      	b.n	8005738 <__ieee754_atan2+0xa0>
 800576a:	454f      	cmp	r7, r9
 800576c:	d0d0      	beq.n	8005710 <__ieee754_atan2+0x78>
 800576e:	eba7 070c 	sub.w	r7, r7, ip
 8005772:	153f      	asrs	r7, r7, #20
 8005774:	2f3c      	cmp	r7, #60	; 0x3c
 8005776:	dc1e      	bgt.n	80057b6 <__ieee754_atan2+0x11e>
 8005778:	2b00      	cmp	r3, #0
 800577a:	da01      	bge.n	8005780 <__ieee754_atan2+0xe8>
 800577c:	373c      	adds	r7, #60	; 0x3c
 800577e:	db1e      	blt.n	80057be <__ieee754_atan2+0x126>
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fa ffd2 	bl	800072c <__aeabi_ddiv>
 8005788:	f7ff ff2c 	bl	80055e4 <fabs>
 800578c:	f7ff fda0 	bl	80052d0 <atan>
 8005790:	4604      	mov	r4, r0
 8005792:	460d      	mov	r5, r1
 8005794:	2e01      	cmp	r6, #1
 8005796:	d015      	beq.n	80057c4 <__ieee754_atan2+0x12c>
 8005798:	2e02      	cmp	r6, #2
 800579a:	d017      	beq.n	80057cc <__ieee754_atan2+0x134>
 800579c:	2e00      	cmp	r6, #0
 800579e:	d0cb      	beq.n	8005738 <__ieee754_atan2+0xa0>
 80057a0:	a323      	add	r3, pc, #140	; (adr r3, 8005830 <__ieee754_atan2+0x198>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	4620      	mov	r0, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7fa fcdd 	bl	8000168 <__aeabi_dsub>
 80057ae:	a322      	add	r3, pc, #136	; (adr r3, 8005838 <__ieee754_atan2+0x1a0>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	e016      	b.n	80057e4 <__ieee754_atan2+0x14c>
 80057b6:	a522      	add	r5, pc, #136	; (adr r5, 8005840 <__ieee754_atan2+0x1a8>)
 80057b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057bc:	e7ea      	b.n	8005794 <__ieee754_atan2+0xfc>
 80057be:	2400      	movs	r4, #0
 80057c0:	2500      	movs	r5, #0
 80057c2:	e7e7      	b.n	8005794 <__ieee754_atan2+0xfc>
 80057c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057c8:	461d      	mov	r5, r3
 80057ca:	e7b5      	b.n	8005738 <__ieee754_atan2+0xa0>
 80057cc:	a318      	add	r3, pc, #96	; (adr r3, 8005830 <__ieee754_atan2+0x198>)
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	4620      	mov	r0, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	f7fa fcc7 	bl	8000168 <__aeabi_dsub>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	a116      	add	r1, pc, #88	; (adr r1, 8005838 <__ieee754_atan2+0x1a0>)
 80057e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e4:	f7fa fcc0 	bl	8000168 <__aeabi_dsub>
 80057e8:	e772      	b.n	80056d0 <__ieee754_atan2+0x38>
 80057ea:	a517      	add	r5, pc, #92	; (adr r5, 8005848 <__ieee754_atan2+0x1b0>)
 80057ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057f0:	e7a2      	b.n	8005738 <__ieee754_atan2+0xa0>
 80057f2:	a511      	add	r5, pc, #68	; (adr r5, 8005838 <__ieee754_atan2+0x1a0>)
 80057f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057f8:	e79e      	b.n	8005738 <__ieee754_atan2+0xa0>
 80057fa:	a511      	add	r5, pc, #68	; (adr r5, 8005840 <__ieee754_atan2+0x1a8>)
 80057fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005800:	e79a      	b.n	8005738 <__ieee754_atan2+0xa0>
 8005802:	bf00      	nop
 8005804:	f3af 8000 	nop.w
 8005808:	54442d18 	.word	0x54442d18
 800580c:	c00921fb 	.word	0xc00921fb
 8005810:	54442d18 	.word	0x54442d18
 8005814:	bff921fb 	.word	0xbff921fb
 8005818:	54442d18 	.word	0x54442d18
 800581c:	bfe921fb 	.word	0xbfe921fb
 8005820:	7f3321d2 	.word	0x7f3321d2
 8005824:	4002d97c 	.word	0x4002d97c
 8005828:	7f3321d2 	.word	0x7f3321d2
 800582c:	c002d97c 	.word	0xc002d97c
 8005830:	33145c07 	.word	0x33145c07
 8005834:	3ca1a626 	.word	0x3ca1a626
 8005838:	54442d18 	.word	0x54442d18
 800583c:	400921fb 	.word	0x400921fb
 8005840:	54442d18 	.word	0x54442d18
 8005844:	3ff921fb 	.word	0x3ff921fb
 8005848:	54442d18 	.word	0x54442d18
 800584c:	3fe921fb 	.word	0x3fe921fb
 8005850:	7ff00000 	.word	0x7ff00000

08005854 <__ieee754_sqrt>:
 8005854:	4b54      	ldr	r3, [pc, #336]	; (80059a8 <__ieee754_sqrt+0x154>)
 8005856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	438b      	bics	r3, r1
 800585c:	4606      	mov	r6, r0
 800585e:	460d      	mov	r5, r1
 8005860:	460a      	mov	r2, r1
 8005862:	460c      	mov	r4, r1
 8005864:	d10f      	bne.n	8005886 <__ieee754_sqrt+0x32>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	f7fa fe35 	bl	80004d8 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4630      	mov	r0, r6
 8005874:	4629      	mov	r1, r5
 8005876:	f7fa fc79 	bl	800016c <__adddf3>
 800587a:	4606      	mov	r6, r0
 800587c:	460d      	mov	r5, r1
 800587e:	4630      	mov	r0, r6
 8005880:	4629      	mov	r1, r5
 8005882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005886:	2900      	cmp	r1, #0
 8005888:	4607      	mov	r7, r0
 800588a:	4603      	mov	r3, r0
 800588c:	dc0e      	bgt.n	80058ac <__ieee754_sqrt+0x58>
 800588e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005892:	ea5c 0707 	orrs.w	r7, ip, r7
 8005896:	d0f2      	beq.n	800587e <__ieee754_sqrt+0x2a>
 8005898:	b141      	cbz	r1, 80058ac <__ieee754_sqrt+0x58>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	f7fa fc63 	bl	8000168 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	f7fa ff41 	bl	800072c <__aeabi_ddiv>
 80058aa:	e7e6      	b.n	800587a <__ieee754_sqrt+0x26>
 80058ac:	1512      	asrs	r2, r2, #20
 80058ae:	d074      	beq.n	800599a <__ieee754_sqrt+0x146>
 80058b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80058b4:	07d5      	lsls	r5, r2, #31
 80058b6:	f04f 0500 	mov.w	r5, #0
 80058ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80058be:	bf48      	it	mi
 80058c0:	0fd9      	lsrmi	r1, r3, #31
 80058c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80058c6:	bf44      	itt	mi
 80058c8:	005b      	lslmi	r3, r3, #1
 80058ca:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80058ce:	1051      	asrs	r1, r2, #1
 80058d0:	0fda      	lsrs	r2, r3, #31
 80058d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80058d6:	4628      	mov	r0, r5
 80058d8:	2216      	movs	r2, #22
 80058da:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	1987      	adds	r7, r0, r6
 80058e2:	42a7      	cmp	r7, r4
 80058e4:	bfde      	ittt	le
 80058e6:	19b8      	addle	r0, r7, r6
 80058e8:	1be4      	suble	r4, r4, r7
 80058ea:	19ad      	addle	r5, r5, r6
 80058ec:	0fdf      	lsrs	r7, r3, #31
 80058ee:	3a01      	subs	r2, #1
 80058f0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80058f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80058fc:	d1f0      	bne.n	80058e0 <__ieee754_sqrt+0x8c>
 80058fe:	f04f 0c20 	mov.w	ip, #32
 8005902:	4696      	mov	lr, r2
 8005904:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005908:	4284      	cmp	r4, r0
 800590a:	eb06 070e 	add.w	r7, r6, lr
 800590e:	dc02      	bgt.n	8005916 <__ieee754_sqrt+0xc2>
 8005910:	d112      	bne.n	8005938 <__ieee754_sqrt+0xe4>
 8005912:	429f      	cmp	r7, r3
 8005914:	d810      	bhi.n	8005938 <__ieee754_sqrt+0xe4>
 8005916:	2f00      	cmp	r7, #0
 8005918:	eb07 0e06 	add.w	lr, r7, r6
 800591c:	da42      	bge.n	80059a4 <__ieee754_sqrt+0x150>
 800591e:	f1be 0f00 	cmp.w	lr, #0
 8005922:	db3f      	blt.n	80059a4 <__ieee754_sqrt+0x150>
 8005924:	f100 0801 	add.w	r8, r0, #1
 8005928:	1a24      	subs	r4, r4, r0
 800592a:	4640      	mov	r0, r8
 800592c:	429f      	cmp	r7, r3
 800592e:	bf88      	it	hi
 8005930:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8005934:	1bdb      	subs	r3, r3, r7
 8005936:	4432      	add	r2, r6
 8005938:	0064      	lsls	r4, r4, #1
 800593a:	f1bc 0c01 	subs.w	ip, ip, #1
 800593e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005942:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800594a:	d1dd      	bne.n	8005908 <__ieee754_sqrt+0xb4>
 800594c:	4323      	orrs	r3, r4
 800594e:	d006      	beq.n	800595e <__ieee754_sqrt+0x10a>
 8005950:	1c54      	adds	r4, r2, #1
 8005952:	bf0b      	itete	eq
 8005954:	4662      	moveq	r2, ip
 8005956:	3201      	addne	r2, #1
 8005958:	3501      	addeq	r5, #1
 800595a:	f022 0201 	bicne.w	r2, r2, #1
 800595e:	106b      	asrs	r3, r5, #1
 8005960:	0852      	lsrs	r2, r2, #1
 8005962:	07e8      	lsls	r0, r5, #31
 8005964:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005968:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800596c:	bf48      	it	mi
 800596e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005972:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005976:	4616      	mov	r6, r2
 8005978:	e781      	b.n	800587e <__ieee754_sqrt+0x2a>
 800597a:	0adc      	lsrs	r4, r3, #11
 800597c:	3915      	subs	r1, #21
 800597e:	055b      	lsls	r3, r3, #21
 8005980:	2c00      	cmp	r4, #0
 8005982:	d0fa      	beq.n	800597a <__ieee754_sqrt+0x126>
 8005984:	02e6      	lsls	r6, r4, #11
 8005986:	d50a      	bpl.n	800599e <__ieee754_sqrt+0x14a>
 8005988:	f1c2 0020 	rsb	r0, r2, #32
 800598c:	fa23 f000 	lsr.w	r0, r3, r0
 8005990:	1e55      	subs	r5, r2, #1
 8005992:	4093      	lsls	r3, r2
 8005994:	4304      	orrs	r4, r0
 8005996:	1b4a      	subs	r2, r1, r5
 8005998:	e78a      	b.n	80058b0 <__ieee754_sqrt+0x5c>
 800599a:	4611      	mov	r1, r2
 800599c:	e7f0      	b.n	8005980 <__ieee754_sqrt+0x12c>
 800599e:	0064      	lsls	r4, r4, #1
 80059a0:	3201      	adds	r2, #1
 80059a2:	e7ef      	b.n	8005984 <__ieee754_sqrt+0x130>
 80059a4:	4680      	mov	r8, r0
 80059a6:	e7bf      	b.n	8005928 <__ieee754_sqrt+0xd4>
 80059a8:	7ff00000 	.word	0x7ff00000

080059ac <matherr>:
 80059ac:	2000      	movs	r0, #0
 80059ae:	4770      	bx	lr

080059b0 <__errno>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	; (80059b8 <__errno+0x8>)
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000010 	.word	0x20000010

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	2500      	movs	r5, #0
 80059c0:	4e0c      	ldr	r6, [pc, #48]	; (80059f4 <__libc_init_array+0x38>)
 80059c2:	4c0d      	ldr	r4, [pc, #52]	; (80059f8 <__libc_init_array+0x3c>)
 80059c4:	1ba4      	subs	r4, r4, r6
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	42a5      	cmp	r5, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	f000 f87a 	bl	8005ac4 <_init>
 80059d0:	2500      	movs	r5, #0
 80059d2:	4e0a      	ldr	r6, [pc, #40]	; (80059fc <__libc_init_array+0x40>)
 80059d4:	4c0a      	ldr	r4, [pc, #40]	; (8005a00 <__libc_init_array+0x44>)
 80059d6:	1ba4      	subs	r4, r4, r6
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	42a5      	cmp	r5, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059e4:	4798      	blx	r3
 80059e6:	3501      	adds	r5, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ee:	4798      	blx	r3
 80059f0:	3501      	adds	r5, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	08005bfc 	.word	0x08005bfc
 80059f8:	08005bfc 	.word	0x08005bfc
 80059fc:	08005bfc 	.word	0x08005bfc
 8005a00:	08005c00 	.word	0x08005c00

08005a04 <__itoa>:
 8005a04:	1e93      	subs	r3, r2, #2
 8005a06:	2b22      	cmp	r3, #34	; 0x22
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	d904      	bls.n	8005a18 <__itoa+0x14>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	461c      	mov	r4, r3
 8005a12:	700b      	strb	r3, [r1, #0]
 8005a14:	4620      	mov	r0, r4
 8005a16:	bd10      	pop	{r4, pc}
 8005a18:	2a0a      	cmp	r2, #10
 8005a1a:	d109      	bne.n	8005a30 <__itoa+0x2c>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	da07      	bge.n	8005a30 <__itoa+0x2c>
 8005a20:	232d      	movs	r3, #45	; 0x2d
 8005a22:	700b      	strb	r3, [r1, #0]
 8005a24:	2101      	movs	r1, #1
 8005a26:	4240      	negs	r0, r0
 8005a28:	4421      	add	r1, r4
 8005a2a:	f000 f80d 	bl	8005a48 <__utoa>
 8005a2e:	e7f1      	b.n	8005a14 <__itoa+0x10>
 8005a30:	2100      	movs	r1, #0
 8005a32:	e7f9      	b.n	8005a28 <__itoa+0x24>

08005a34 <itoa>:
 8005a34:	f7ff bfe6 	b.w	8005a04 <__itoa>

08005a38 <memset>:
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4402      	add	r2, r0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memset+0xa>
 8005a40:	4770      	bx	lr
 8005a42:	f803 1b01 	strb.w	r1, [r3], #1
 8005a46:	e7f9      	b.n	8005a3c <memset+0x4>

08005a48 <__utoa>:
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	466e      	mov	r6, sp
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <__utoa+0x78>)
 8005a54:	f103 0c20 	add.w	ip, r3, #32
 8005a58:	4637      	mov	r7, r6
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	c703      	stmia	r7!, {r0, r1}
 8005a62:	4563      	cmp	r3, ip
 8005a64:	463e      	mov	r6, r7
 8005a66:	d1f7      	bne.n	8005a58 <__utoa+0x10>
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	791b      	ldrb	r3, [r3, #4]
 8005a6c:	6038      	str	r0, [r7, #0]
 8005a6e:	713b      	strb	r3, [r7, #4]
 8005a70:	1e93      	subs	r3, r2, #2
 8005a72:	2b22      	cmp	r3, #34	; 0x22
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	d904      	bls.n	8005a84 <__utoa+0x3c>
 8005a7a:	7023      	strb	r3, [r4, #0]
 8005a7c:	461c      	mov	r4, r3
 8005a7e:	4620      	mov	r0, r4
 8005a80:	b00b      	add	sp, #44	; 0x2c
 8005a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a84:	1e66      	subs	r6, r4, #1
 8005a86:	fbb5 f0f2 	udiv	r0, r5, r2
 8005a8a:	fb02 5510 	mls	r5, r2, r0, r5
 8005a8e:	af0a      	add	r7, sp, #40	; 0x28
 8005a90:	443d      	add	r5, r7
 8005a92:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005a96:	1c59      	adds	r1, r3, #1
 8005a98:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	b968      	cbnz	r0, 8005abc <__utoa+0x74>
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	5460      	strb	r0, [r4, r1]
 8005aa4:	4423      	add	r3, r4
 8005aa6:	1b19      	subs	r1, r3, r4
 8005aa8:	1b10      	subs	r0, r2, r4
 8005aaa:	4281      	cmp	r1, r0
 8005aac:	dde7      	ble.n	8005a7e <__utoa+0x36>
 8005aae:	7811      	ldrb	r1, [r2, #0]
 8005ab0:	7818      	ldrb	r0, [r3, #0]
 8005ab2:	f802 0b01 	strb.w	r0, [r2], #1
 8005ab6:	f803 1901 	strb.w	r1, [r3], #-1
 8005aba:	e7f4      	b.n	8005aa6 <__utoa+0x5e>
 8005abc:	460b      	mov	r3, r1
 8005abe:	e7e2      	b.n	8005a86 <__utoa+0x3e>
 8005ac0:	08005bd5 	.word	0x08005bd5

08005ac4 <_init>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

08005ad0 <_fini>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr
