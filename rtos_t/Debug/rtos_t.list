
rtos_t.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006a10  08006a10  00016a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006b70  08006b70  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b70  08006b70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  20000078  08006bf0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001450  08006bf0  00021450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bd6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c05  00000000  00000000  00033c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  00036880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  00037b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000166d7  00000000  00000000  00038d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7c6  00000000  00000000  0004f45f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c1f7  00000000  00000000  0005cc25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8e1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005464  00000000  00000000  000d8e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080069f4 	.word	0x080069f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080069f4 	.word	0x080069f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x28>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f8d1 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f005 f848 	bl	80060d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f004 fee0 	bl	8005e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_IncTick+0x20>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000004 	.word	0x20000004
 8001070:	200011d0 	.word	0x200011d0

08001074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <HAL_GetTick+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200011d0 	.word	0x200011d0

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <__NVIC_EnableIRQ+0x34>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff4f 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff64 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ffb2 	bl	8001178 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff81 	bl	8001124 <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff57 	bl	80010ec <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e043      	b.n	80012e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_DMA_Init+0xa8>)
 8001266:	4413      	add	r3, r2
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_DMA_Init+0xac>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	009a      	lsls	r2, r3, #2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_DMA_Init+0xb0>)
 800127a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001292:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001296:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	bffdfff8 	.word	0xbffdfff8
 80012f4:	cccccccd 	.word	0xcccccccd
 80012f8:	40020000 	.word	0x40020000

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800130e:	2b02      	cmp	r3, #2
 8001310:	d005      	beq.n	800131e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2204      	movs	r2, #4
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e051      	b.n	80013c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020e 	bic.w	r2, r2, #14
 800132c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_DMA_Abort_IT+0xd0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d029      	beq.n	800139c <HAL_DMA_Abort_IT+0xa0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_DMA_Abort_IT+0xd4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d022      	beq.n	8001398 <HAL_DMA_Abort_IT+0x9c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_DMA_Abort_IT+0xd8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d01a      	beq.n	8001392 <HAL_DMA_Abort_IT+0x96>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_DMA_Abort_IT+0xdc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d012      	beq.n	800138c <HAL_DMA_Abort_IT+0x90>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <HAL_DMA_Abort_IT+0xe0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d00a      	beq.n	8001386 <HAL_DMA_Abort_IT+0x8a>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_DMA_Abort_IT+0xe4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d102      	bne.n	8001380 <HAL_DMA_Abort_IT+0x84>
 800137a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800137e:	e00e      	b.n	800139e <HAL_DMA_Abort_IT+0xa2>
 8001380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001384:	e00b      	b.n	800139e <HAL_DMA_Abort_IT+0xa2>
 8001386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138a:	e008      	b.n	800139e <HAL_DMA_Abort_IT+0xa2>
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	e005      	b.n	800139e <HAL_DMA_Abort_IT+0xa2>
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	e002      	b.n	800139e <HAL_DMA_Abort_IT+0xa2>
 8001398:	2310      	movs	r3, #16
 800139a:	e000      	b.n	800139e <HAL_DMA_Abort_IT+0xa2>
 800139c:	2301      	movs	r3, #1
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_DMA_Abort_IT+0xe8>)
 80013a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
    } 
  }
  return status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020008 	.word	0x40020008
 80013d0:	4002001c 	.word	0x4002001c
 80013d4:	40020030 	.word	0x40020030
 80013d8:	40020044 	.word	0x40020044
 80013dc:	40020058 	.word	0x40020058
 80013e0:	4002006c 	.word	0x4002006c
 80013e4:	40020000 	.word	0x40020000

080013e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2204      	movs	r2, #4
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d04f      	beq.n	80014b0 <HAL_DMA_IRQHandler+0xc8>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d04a      	beq.n	80014b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0204 	bic.w	r2, r2, #4
 8001436:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a66      	ldr	r2, [pc, #408]	; (80015d8 <HAL_DMA_IRQHandler+0x1f0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d029      	beq.n	8001496 <HAL_DMA_IRQHandler+0xae>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_DMA_IRQHandler+0x1f4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d022      	beq.n	8001492 <HAL_DMA_IRQHandler+0xaa>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d01a      	beq.n	800148c <HAL_DMA_IRQHandler+0xa4>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a62      	ldr	r2, [pc, #392]	; (80015e4 <HAL_DMA_IRQHandler+0x1fc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d012      	beq.n	8001486 <HAL_DMA_IRQHandler+0x9e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a60      	ldr	r2, [pc, #384]	; (80015e8 <HAL_DMA_IRQHandler+0x200>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00a      	beq.n	8001480 <HAL_DMA_IRQHandler+0x98>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a5f      	ldr	r2, [pc, #380]	; (80015ec <HAL_DMA_IRQHandler+0x204>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d102      	bne.n	800147a <HAL_DMA_IRQHandler+0x92>
 8001474:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001478:	e00e      	b.n	8001498 <HAL_DMA_IRQHandler+0xb0>
 800147a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800147e:	e00b      	b.n	8001498 <HAL_DMA_IRQHandler+0xb0>
 8001480:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001484:	e008      	b.n	8001498 <HAL_DMA_IRQHandler+0xb0>
 8001486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148a:	e005      	b.n	8001498 <HAL_DMA_IRQHandler+0xb0>
 800148c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001490:	e002      	b.n	8001498 <HAL_DMA_IRQHandler+0xb0>
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	e000      	b.n	8001498 <HAL_DMA_IRQHandler+0xb0>
 8001496:	2304      	movs	r3, #4
 8001498:	4a55      	ldr	r2, [pc, #340]	; (80015f0 <HAL_DMA_IRQHandler+0x208>)
 800149a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8094 	beq.w	80015ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	e08e      	b.n	80015ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2202      	movs	r2, #2
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d056      	beq.n	800156e <HAL_DMA_IRQHandler+0x186>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d051      	beq.n	800156e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10b      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020a 	bic.w	r2, r2, #10
 80014e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <HAL_DMA_IRQHandler+0x1f0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d029      	beq.n	800154e <HAL_DMA_IRQHandler+0x166>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a37      	ldr	r2, [pc, #220]	; (80015dc <HAL_DMA_IRQHandler+0x1f4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d022      	beq.n	800154a <HAL_DMA_IRQHandler+0x162>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a35      	ldr	r2, [pc, #212]	; (80015e0 <HAL_DMA_IRQHandler+0x1f8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01a      	beq.n	8001544 <HAL_DMA_IRQHandler+0x15c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d012      	beq.n	800153e <HAL_DMA_IRQHandler+0x156>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_DMA_IRQHandler+0x200>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00a      	beq.n	8001538 <HAL_DMA_IRQHandler+0x150>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a31      	ldr	r2, [pc, #196]	; (80015ec <HAL_DMA_IRQHandler+0x204>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d102      	bne.n	8001532 <HAL_DMA_IRQHandler+0x14a>
 800152c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001530:	e00e      	b.n	8001550 <HAL_DMA_IRQHandler+0x168>
 8001532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001536:	e00b      	b.n	8001550 <HAL_DMA_IRQHandler+0x168>
 8001538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153c:	e008      	b.n	8001550 <HAL_DMA_IRQHandler+0x168>
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	e005      	b.n	8001550 <HAL_DMA_IRQHandler+0x168>
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	e002      	b.n	8001550 <HAL_DMA_IRQHandler+0x168>
 800154a:	2320      	movs	r3, #32
 800154c:	e000      	b.n	8001550 <HAL_DMA_IRQHandler+0x168>
 800154e:	2302      	movs	r3, #2
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_DMA_IRQHandler+0x208>)
 8001552:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d034      	beq.n	80015ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800156c:	e02f      	b.n	80015ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2208      	movs	r2, #8
 8001574:	409a      	lsls	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d028      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x1e8>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d023      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 020e 	bic.w	r2, r2, #14
 8001596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
    }
  }
  return;
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020008 	.word	0x40020008
 80015dc:	4002001c 	.word	0x4002001c
 80015e0:	40020030 	.word	0x40020030
 80015e4:	40020044 	.word	0x40020044
 80015e8:	40020058 	.word	0x40020058
 80015ec:	4002006c 	.word	0x4002006c
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b08b      	sub	sp, #44	; 0x2c
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	e127      	b.n	8001858 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001608:	2201      	movs	r2, #1
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8116 	bne.w	8001852 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b12      	cmp	r3, #18
 800162c:	d034      	beq.n	8001698 <HAL_GPIO_Init+0xa4>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d80d      	bhi.n	800164e <HAL_GPIO_Init+0x5a>
 8001632:	2b02      	cmp	r3, #2
 8001634:	d02b      	beq.n	800168e <HAL_GPIO_Init+0x9a>
 8001636:	2b02      	cmp	r3, #2
 8001638:	d804      	bhi.n	8001644 <HAL_GPIO_Init+0x50>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d031      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d01c      	beq.n	800167c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001642:	e048      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001644:	2b03      	cmp	r3, #3
 8001646:	d043      	beq.n	80016d0 <HAL_GPIO_Init+0xdc>
 8001648:	2b11      	cmp	r3, #17
 800164a:	d01b      	beq.n	8001684 <HAL_GPIO_Init+0x90>
          break;
 800164c:	e043      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800164e:	4a89      	ldr	r2, [pc, #548]	; (8001874 <HAL_GPIO_Init+0x280>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d026      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
 8001654:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_GPIO_Init+0x280>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d806      	bhi.n	8001668 <HAL_GPIO_Init+0x74>
 800165a:	4a87      	ldr	r2, [pc, #540]	; (8001878 <HAL_GPIO_Init+0x284>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d020      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
 8001660:	4a86      	ldr	r2, [pc, #536]	; (800187c <HAL_GPIO_Init+0x288>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01d      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
          break;
 8001666:	e036      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001668:	4a85      	ldr	r2, [pc, #532]	; (8001880 <HAL_GPIO_Init+0x28c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
 800166e:	4a85      	ldr	r2, [pc, #532]	; (8001884 <HAL_GPIO_Init+0x290>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d016      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
 8001674:	4a84      	ldr	r2, [pc, #528]	; (8001888 <HAL_GPIO_Init+0x294>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0xae>
          break;
 800167a:	e02c      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e028      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	3304      	adds	r3, #4
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e023      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	3308      	adds	r3, #8
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e01e      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	330c      	adds	r3, #12
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e019      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016aa:	2304      	movs	r3, #4
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e012      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b8:	2308      	movs	r3, #8
 80016ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	611a      	str	r2, [r3, #16]
          break;
 80016c2:	e008      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	615a      	str	r2, [r3, #20]
          break;
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d801      	bhi.n	80016e0 <HAL_GPIO_Init+0xec>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	e001      	b.n	80016e4 <HAL_GPIO_Init+0xf0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3304      	adds	r3, #4
 80016e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2bff      	cmp	r3, #255	; 0xff
 80016ea:	d802      	bhi.n	80016f2 <HAL_GPIO_Init+0xfe>
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x104>
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3b08      	subs	r3, #8
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	210f      	movs	r1, #15
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	401a      	ands	r2, r3
 800170a:	6a39      	ldr	r1, [r7, #32]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	431a      	orrs	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8096 	beq.w	8001852 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_GPIO_Init+0x298>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_GPIO_Init+0x298>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6193      	str	r3, [r2, #24]
 8001732:	4b56      	ldr	r3, [pc, #344]	; (800188c <HAL_GPIO_Init+0x298>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173e:	4a54      	ldr	r2, [pc, #336]	; (8001890 <HAL_GPIO_Init+0x29c>)
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <HAL_GPIO_Init+0x2a0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_GPIO_Init+0x19e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <HAL_GPIO_Init+0x2a4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00d      	beq.n	800178e <HAL_GPIO_Init+0x19a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_GPIO_Init+0x2a8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d007      	beq.n	800178a <HAL_GPIO_Init+0x196>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a48      	ldr	r2, [pc, #288]	; (80018a0 <HAL_GPIO_Init+0x2ac>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_GPIO_Init+0x192>
 8001782:	2303      	movs	r3, #3
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x1a0>
 8001786:	2304      	movs	r3, #4
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x1a0>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x1a0>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x1a0>
 8001792:	2300      	movs	r3, #0
 8001794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a4:	493a      	ldr	r1, [pc, #232]	; (8001890 <HAL_GPIO_Init+0x29c>)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4938      	ldr	r1, [pc, #224]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
 80017ca:	e006      	b.n	80017da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4933      	ldr	r1, [pc, #204]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	492e      	ldr	r1, [pc, #184]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	4929      	ldr	r1, [pc, #164]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 80017fe:	4013      	ands	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	4924      	ldr	r1, [pc, #144]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
 800181a:	e006      	b.n	800182a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	43db      	mvns	r3, r3
 8001824:	491f      	ldr	r1, [pc, #124]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 8001826:	4013      	ands	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	491a      	ldr	r1, [pc, #104]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	60cb      	str	r3, [r1, #12]
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	43db      	mvns	r3, r3
 800184c:	4915      	ldr	r1, [pc, #84]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 800184e:	4013      	ands	r3, r2
 8001850:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f aed0 	bne.w	8001608 <HAL_GPIO_Init+0x14>
  }
}
 8001868:	bf00      	nop
 800186a:	372c      	adds	r7, #44	; 0x2c
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	10210000 	.word	0x10210000
 8001878:	10110000 	.word	0x10110000
 800187c:	10120000 	.word	0x10120000
 8001880:	10310000 	.word	0x10310000
 8001884:	10320000 	.word	0x10320000
 8001888:	10220000 	.word	0x10220000
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000
 8001894:	40010800 	.word	0x40010800
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40011000 	.word	0x40011000
 80018a0:	40011400 	.word	0x40011400
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c4:	e003      	b.n	80018ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	041a      	lsls	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	611a      	str	r2, [r3, #16]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e10f      	b.n	8001b0a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fab8 	bl	8005e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800191c:	f001 fb0e 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8001920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_I2C_Init+0x23c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d807      	bhi.n	800193c <HAL_I2C_Init+0x64>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4a7a      	ldr	r2, [pc, #488]	; (8001b18 <HAL_I2C_Init+0x240>)
 8001930:	4293      	cmp	r3, r2
 8001932:	bf94      	ite	ls
 8001934:	2301      	movls	r3, #1
 8001936:	2300      	movhi	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e006      	b.n	800194a <HAL_I2C_Init+0x72>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a77      	ldr	r2, [pc, #476]	; (8001b1c <HAL_I2C_Init+0x244>)
 8001940:	4293      	cmp	r3, r2
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0db      	b.n	8001b0a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_I2C_Init+0x248>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0c9b      	lsrs	r3, r3, #18
 800195c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a64      	ldr	r2, [pc, #400]	; (8001b14 <HAL_I2C_Init+0x23c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d802      	bhi.n	800198c <HAL_I2C_Init+0xb4>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3301      	adds	r3, #1
 800198a:	e009      	b.n	80019a0 <HAL_I2C_Init+0xc8>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	4a63      	ldr	r2, [pc, #396]	; (8001b24 <HAL_I2C_Init+0x24c>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	3301      	adds	r3, #1
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4956      	ldr	r1, [pc, #344]	; (8001b14 <HAL_I2C_Init+0x23c>)
 80019bc:	428b      	cmp	r3, r1
 80019be:	d80d      	bhi.n	80019dc <HAL_I2C_Init+0x104>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e59      	subs	r1, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	bf38      	it	cc
 80019d8:	2304      	movcc	r3, #4
 80019da:	e04f      	b.n	8001a7c <HAL_I2C_Init+0x1a4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <HAL_I2C_Init+0x130>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e012      	b.n	8001a2e <HAL_I2C_Init+0x156>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	0099      	lsls	r1, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Init+0x15e>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e022      	b.n	8001a7c <HAL_I2C_Init+0x1a4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10e      	bne.n	8001a5c <HAL_I2C_Init+0x184>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e58      	subs	r0, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	e00f      	b.n	8001a7c <HAL_I2C_Init+0x1a4>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	0099      	lsls	r1, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6809      	ldr	r1, [r1, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6911      	ldr	r1, [r2, #16]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68d2      	ldr	r2, [r2, #12]
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	000186a0 	.word	0x000186a0
 8001b18:	001e847f 	.word	0x001e847f
 8001b1c:	003d08ff 	.word	0x003d08ff
 8001b20:	431bde83 	.word	0x431bde83
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff fa9a 	bl	8001074 <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	f040 80e0 	bne.w	8001d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	4970      	ldr	r1, [pc, #448]	; (8001d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fc3c 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e0d3      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Master_Transmit+0x50>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0cc      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d007      	beq.n	8001b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2221      	movs	r2, #33	; 0x21
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 faca 	bl	8002180 <I2C_MasterRequestWrite>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e08d      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c0c:	e066      	b.n	8001cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	6a39      	ldr	r1, [r7, #32]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fcb6 	bl	8002584 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00d      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d107      	bne.n	8001c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e06b      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11b      	bne.n	8001cb0 <HAL_I2C_Master_Transmit+0x188>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d017      	beq.n	8001cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fca6 	bl	8002606 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d107      	bne.n	8001cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01a      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d194      	bne.n	8001c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	00100002 	.word	0x00100002
 8001d20:	ffff0000 	.word	0xffff0000

08001d24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	460b      	mov	r3, r1
 8001d32:	817b      	strh	r3, [r7, #10]
 8001d34:	4613      	mov	r3, r2
 8001d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff f99c 	bl	8001074 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	f040 8213 	bne.w	8002172 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2319      	movs	r3, #25
 8001d52:	2201      	movs	r2, #1
 8001d54:	497e      	ldr	r1, [pc, #504]	; (8001f50 <HAL_I2C_Master_Receive+0x22c>)
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fb3e 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	e206      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_I2C_Master_Receive+0x50>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e1ff      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d007      	beq.n	8001d9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2222      	movs	r2, #34	; 0x22
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2210      	movs	r2, #16
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	893a      	ldrh	r2, [r7, #8]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a5e      	ldr	r2, [pc, #376]	; (8001f54 <HAL_I2C_Master_Receive+0x230>)
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ddc:	8979      	ldrh	r1, [r7, #10]
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa42 	bl	800226c <I2C_MasterRequestRead>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1c0      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e194      	b.n	800214c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d11d      	bne.n	8001e66 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e38:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e62:	b662      	cpsie	i
 8001e64:	e172      	b.n	800214c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d11d      	bne.n	8001eaa <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ea6:	b662      	cpsie	i
 8001ea8:	e150      	b.n	800214c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ed0:	e13c      	b.n	800214c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	f200 80f5 	bhi.w	80020c6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d123      	bne.n	8001f2c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fbcd 	bl	8002688 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e13d      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f2a:	e10f      	b.n	800214c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d150      	bne.n	8001fd6 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <HAL_I2C_Master_Receive+0x234>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fa4a 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e112      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
 8001f4e:	bf00      	nop
 8001f50:	00100002 	.word	0x00100002
 8001f54:	ffff0000 	.word	0xffff0000
 8001f58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd4:	e0ba      	b.n	800214c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4967      	ldr	r1, [pc, #412]	; (800217c <HAL_I2C_Master_Receive+0x458>)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9f9 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0c1      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	2200      	movs	r2, #0
 800203c:	494f      	ldr	r1, [pc, #316]	; (800217c <HAL_I2C_Master_Receive+0x458>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f9ca 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e092      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002090:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020c4:	e042      	b.n	800214c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fadc 	bl	8002688 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e04c      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d118      	bne.n	800214c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f aebe 	bne.w	8001ed2 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	00010004 	.word	0x00010004

08002180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	460b      	mov	r3, r1
 800218e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d006      	beq.n	80021aa <I2C_MasterRequestWrite+0x2a>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d003      	beq.n	80021aa <I2C_MasterRequestWrite+0x2a>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021a8:	d108      	bne.n	80021bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e00b      	b.n	80021d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d107      	bne.n	80021d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f8f9 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e035      	b.n	800225c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021f8:	d108      	bne.n	800220c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021fa:	897b      	ldrh	r3, [r7, #10]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	e01b      	b.n	8002244 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800220c:	897b      	ldrh	r3, [r7, #10]
 800220e:	11db      	asrs	r3, r3, #7
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 0306 	and.w	r3, r3, #6
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f063 030f 	orn	r3, r3, #15
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <I2C_MasterRequestWrite+0xe4>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f92b 	bl	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e010      	b.n	800225c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <I2C_MasterRequestWrite+0xe8>)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f91b 	bl	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	00010008 	.word	0x00010008
 8002268:	00010002 	.word	0x00010002

0800226c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	460b      	mov	r3, r1
 800227a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002290:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d006      	beq.n	80022a6 <I2C_MasterRequestRead+0x3a>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d003      	beq.n	80022a6 <I2C_MasterRequestRead+0x3a>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022a4:	d108      	bne.n	80022b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e00b      	b.n	80022d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d107      	bne.n	80022d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f87b 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e06d      	b.n	80023c8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f4:	d108      	bne.n	8002308 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	e053      	b.n	80023b0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	11db      	asrs	r3, r3, #7
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 0306 	and.w	r3, r3, #6
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f063 030f 	orn	r3, r3, #15
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	492a      	ldr	r1, [pc, #168]	; (80023d0 <I2C_MasterRequestRead+0x164>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f8ad 	bl	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e048      	b.n	80023c8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4923      	ldr	r1, [pc, #140]	; (80023d4 <I2C_MasterRequestRead+0x168>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f89d 	bl	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e038      	b.n	80023c8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800237a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f825 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e017      	b.n	80023c8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002398:	897b      	ldrh	r3, [r7, #10]
 800239a:	11db      	asrs	r3, r3, #7
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0306 	and.w	r3, r3, #6
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f063 030e 	orn	r3, r3, #14
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <I2C_MasterRequestRead+0x168>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f865 	bl	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	00010008 	.word	0x00010008
 80023d4:	00010002 	.word	0x00010002

080023d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e8:	e025      	b.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f0:	d021      	beq.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe fe3f 	bl	8001074 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d116      	bne.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f043 0220 	orr.w	r2, r3, #32
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e023      	b.n	800247e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10d      	bne.n	800245c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4013      	ands	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	e00c      	b.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4013      	ands	r3, r2
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	429a      	cmp	r2, r3
 800247a:	d0b6      	beq.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002494:	e051      	b.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a4:	d123      	bne.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e046      	b.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f4:	d021      	beq.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7fe fdbd 	bl	8001074 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d116      	bne.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0220 	orr.w	r2, r3, #32
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e020      	b.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10c      	bne.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	e00b      	b.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	43da      	mvns	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d18d      	bne.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002590:	e02d      	b.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f8ce 	bl	8002734 <I2C_IsAcknowledgeFailed>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e02d      	b.n	80025fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a8:	d021      	beq.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7fe fd63 	bl	8001074 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e007      	b.n	80025fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d1ca      	bne.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002612:	e02d      	b.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f88d 	bl	8002734 <I2C_IsAcknowledgeFailed>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e02d      	b.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800262a:	d021      	beq.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262c:	f7fe fd22 	bl	8001074 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	d302      	bcc.n	8002642 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e007      	b.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b04      	cmp	r3, #4
 800267c:	d1ca      	bne.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002694:	e042      	b.n	800271c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d119      	bne.n	80026d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0210 	mvn.w	r2, #16
 80026ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e029      	b.n	800272c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7fe fccc 	bl	8001074 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e007      	b.n	800272c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d1b5      	bne.n	8002696 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d11b      	bne.n	8002784 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002754:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e26c      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b0:	4b92      	ldr	r3, [pc, #584]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d00c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027bc:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d112      	bne.n	80027ee <HAL_RCC_OscConfig+0x5e>
 80027c8:	4b8c      	ldr	r3, [pc, #560]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d4:	d10b      	bne.n	80027ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	4b89      	ldr	r3, [pc, #548]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d06c      	beq.n	80028bc <HAL_RCC_OscConfig+0x12c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d168      	bne.n	80028bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e246      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x76>
 80027f8:	4b80      	ldr	r3, [pc, #512]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7f      	ldr	r2, [pc, #508]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e02e      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x98>
 800280e:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7a      	ldr	r2, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b78      	ldr	r3, [pc, #480]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a77      	ldr	r2, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0xbc>
 8002832:	4b72      	ldr	r3, [pc, #456]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a71      	ldr	r2, [pc, #452]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 800284c:	4b6b      	ldr	r3, [pc, #428]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a67      	ldr	r2, [pc, #412]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fc02 	bl	8001074 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fbfe 	bl	8001074 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1fa      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xe4>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fbee 	bl	8001074 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe fbea 	bl	8001074 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1e6      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x10c>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ca:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x18c>
 80028e2:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x176>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1ba      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4939      	ldr	r1, [pc, #228]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fba3 	bl	8001074 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fb9f 	bl	8001074 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e19b      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4927      	ldr	r1, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fb82 	bl	8001074 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe fb7e 	bl	8001074 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e17a      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03a      	beq.n	8002a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_RCC_OscConfig+0x274>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7fe fb62 	bl	8001074 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fb5e 	bl	8001074 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e15a      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f000 fb0a 	bl	8002fec <RCC_Delay>
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_OscConfig+0x274>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fb48 	bl	8001074 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fb44 	bl	8001074 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d908      	bls.n	8002a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e140      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	42420000 	.word	0x42420000
 8002a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b9e      	ldr	r3, [pc, #632]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e9      	bne.n	80029e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a6 	beq.w	8002b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b97      	ldr	r3, [pc, #604]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b94      	ldr	r3, [pc, #592]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a93      	ldr	r2, [pc, #588]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b8e      	ldr	r3, [pc, #568]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a8a      	ldr	r2, [pc, #552]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe fb05 	bl	8001074 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fb01 	bl	8001074 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0fd      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x312>
 8002a94:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e02d      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x334>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	e01c      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x356>
 8002acc:	4b6d      	ldr	r3, [pc, #436]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a6c      	ldr	r2, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d015      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fab5 	bl	8001074 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fab1 	bl	8001074 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0ab      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ee      	beq.n	8002b0e <HAL_RCC_OscConfig+0x37e>
 8002b30:	e014      	b.n	8002b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fe fa9f 	bl	8001074 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fa9b 	bl	8001074 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e095      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4a47      	ldr	r2, [pc, #284]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8081 	beq.w	8002c7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d061      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d146      	bne.n	8002c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_OscConfig+0x4fc>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fa6f 	bl	8001074 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fa6b 	bl	8001074 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e067      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	492d      	ldr	r1, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a19      	ldr	r1, [r3, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	430b      	orrs	r3, r1
 8002be6:	4927      	ldr	r1, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x4fc>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fa3f 	bl	8001074 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fa3b 	bl	8001074 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e037      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46a>
 8002c18:	e02f      	b.n	8002c7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_RCC_OscConfig+0x4fc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fa28 	bl	8001074 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fa24 	bl	8001074 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e020      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x498>
 8002c46:	e018      	b.n	8002c7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420060 	.word	0x42420060

08002c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0d0      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d910      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	4965      	ldr	r1, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d040      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d115      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e073      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06b      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6e:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4936      	ldr	r1, [pc, #216]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fe f978 	bl	8001074 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe f974 	bl	8001074 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e053      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 020c 	and.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1eb      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d210      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 0207 	bic.w	r2, r3, #7
 8002dc6:	4922      	ldr	r1, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4601      	mov	r1, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	fa21 f303 	lsr.w	r3, r1, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1cc>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 f946 	bl	80060d0 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	08006b10 	.word	0x08006b10
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	20000000 	.word	0x20000000

08002e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	b490      	push	{r4, r7}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e6c:	1d3c      	adds	r4, r7, #4
 8002e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e8e:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x46>
 8002ea2:	e02d      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea6:	623b      	str	r3, [r7, #32]
      break;
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	0c9b      	lsrs	r3, r3, #18
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ebc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c5b      	lsrs	r3, r3, #17
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002edc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ee2:	fb02 f203 	mul.w	r2, r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	e004      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	623b      	str	r3, [r7, #32]
      break;
 8002efe:	e002      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f02:	623b      	str	r3, [r7, #32]
      break;
 8002f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc90      	pop	{r4, r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	08006a10 	.word	0x08006a10
 8002f18:	08006a20 	.word	0x08006a20
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	007a1200 	.word	0x007a1200
 8002f24:	003d0900 	.word	0x003d0900

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	2000000c 	.word	0x2000000c

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff2 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f44:	4601      	mov	r1, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08006b20 	.word	0x08006b20

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4601      	mov	r1, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0adb      	lsrs	r3, r3, #11
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4a03      	ldr	r2, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	08006b20 	.word	0x08006b20

08002f8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	220f      	movs	r2, #15
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_GetClockConfig+0x58>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCC_GetClockConfig+0x58>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_GetClockConfig+0x58>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_RCC_GetClockConfig+0x58>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0207 	and.w	r2, r3, #7
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40022000 	.word	0x40022000

08002fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <RCC_Delay+0x34>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <RCC_Delay+0x38>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0a5b      	lsrs	r3, r3, #9
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003008:	bf00      	nop
  }
  while (Delay --);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e5a      	subs	r2, r3, #1
 800300e:	60fa      	str	r2, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f9      	bne.n	8003008 <RCC_Delay+0x1c>
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2000000c 	.word	0x2000000c
 8003024:	10624dd3 	.word	0x10624dd3

08003028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e01d      	b.n	8003076 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f002 ff60 	bl	8005f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f000 fa10 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d007      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0202 	mvn.w	r2, #2
 80030f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f9a4 	bl	8003454 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f997 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9a6 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0204 	mvn.w	r2, #4
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f97a 	bl	8003454 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f96d 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f97c 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0208 	mvn.w	r2, #8
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f950 	bl	8003454 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f943 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f952 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2208      	movs	r2, #8
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f926 	bl	8003454 <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f919 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f928 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d10e      	bne.n	8003248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0201 	mvn.w	r2, #1
 8003240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f002 f828 	bl	8005298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d10e      	bne.n	8003274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d107      	bne.n	8003274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa51 	bl	8003716 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8ec 	bl	8003478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0220 	mvn.w	r2, #32
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa1c 	bl	8003704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIM_ConfigClockSource+0x18>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0a6      	b.n	800343a <HAL_TIM_ConfigClockSource+0x166>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800330a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003312:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d067      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x120>
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d80b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x6c>
 8003328:	2b10      	cmp	r3, #16
 800332a:	d073      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x140>
 800332c:	2b10      	cmp	r3, #16
 800332e:	d802      	bhi.n	8003336 <HAL_TIM_ConfigClockSource+0x62>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d06f      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003334:	e078      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003336:	2b20      	cmp	r3, #32
 8003338:	d06c      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x140>
 800333a:	2b30      	cmp	r3, #48	; 0x30
 800333c:	d06a      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800333e:	e073      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003340:	2b70      	cmp	r3, #112	; 0x70
 8003342:	d00d      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0x8c>
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d804      	bhi.n	8003352 <HAL_TIM_ConfigClockSource+0x7e>
 8003348:	2b50      	cmp	r3, #80	; 0x50
 800334a:	d033      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0xe0>
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d041      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003350:	e06a      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d066      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x152>
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335c:	d017      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800335e:	e063      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f000 f965 	bl	800363e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003382:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	609a      	str	r2, [r3, #8]
      break;
 800338c:	e04c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f000 f94e 	bl	800363e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b0:	609a      	str	r2, [r3, #8]
      break;
 80033b2:	e039      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f000 f8c5 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2150      	movs	r1, #80	; 0x50
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f91c 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 80033d2:	e029      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	461a      	mov	r2, r3
 80033e2:	f000 f8e3 	bl	80035ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2160      	movs	r1, #96	; 0x60
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f90c 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 80033f2:	e019      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	461a      	mov	r2, r3
 8003402:	f000 f8a5 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2140      	movs	r1, #64	; 0x40
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f8fc 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8003412:	e009      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 f8f3 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8003424:	e000      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
	...

0800348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a29      	ldr	r2, [pc, #164]	; (8003544 <TIM_Base_SetConfig+0xb8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00b      	beq.n	80034bc <TIM_Base_SetConfig+0x30>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d007      	beq.n	80034bc <TIM_Base_SetConfig+0x30>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a26      	ldr	r2, [pc, #152]	; (8003548 <TIM_Base_SetConfig+0xbc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_Base_SetConfig+0x30>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a25      	ldr	r2, [pc, #148]	; (800354c <TIM_Base_SetConfig+0xc0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d108      	bne.n	80034ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <TIM_Base_SetConfig+0xb8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <TIM_Base_SetConfig+0xbc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a18      	ldr	r2, [pc, #96]	; (800354c <TIM_Base_SetConfig+0xc0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <TIM_Base_SetConfig+0xb8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d103      	bne.n	8003534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	615a      	str	r2, [r3, #20]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 030a 	bic.w	r3, r3, #10
 800358c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0210 	bic.w	r2, r3, #16
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	031b      	lsls	r3, r3, #12
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	f043 0307 	orr.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003658:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	021a      	lsls	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	431a      	orrs	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4313      	orrs	r3, r2
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	609a      	str	r2, [r3, #8]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e032      	b.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036cc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e03f      	b.n	80037ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f002 fc06 	bl	8005f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb41 	bl	8003df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b088      	sub	sp, #32
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	f040 8083 	bne.w	80038ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_UART_Transmit+0x2e>
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e07b      	b.n	80038ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Transmit+0x40>
 80037fe:	2302      	movs	r3, #2
 8003800:	e074      	b.n	80038ec <HAL_UART_Transmit+0x12a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2221      	movs	r2, #33	; 0x21
 8003814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003818:	f7fd fc2c 	bl	8001074 <HAL_GetTick>
 800381c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	88fa      	ldrh	r2, [r7, #6]
 8003822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800382a:	e042      	b.n	80038b2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d122      	bne.n	800388a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f967 	bl	8003b22 <UART_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e046      	b.n	80038ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3302      	adds	r3, #2
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	e017      	b.n	80038b2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3301      	adds	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	e013      	b.n	80038b2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f944 	bl	8003b22 <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e023      	b.n	80038ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60ba      	str	r2, [r7, #8]
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1b7      	bne.n	800382c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f92b 	bl	8003b22 <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e00a      	b.n	80038ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_UART_IRQHandler+0x52>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9d7 	bl	8003cf2 <UART_Receive_IT>
      return;
 8003944:	e0cc      	b.n	8003ae0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80ab 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x1b0>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <HAL_UART_IRQHandler+0x70>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a0 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_UART_IRQHandler+0x90>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_UART_IRQHandler+0xb0>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	f043 0202 	orr.w	r2, r3, #2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_UART_IRQHandler+0xd0>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_UART_IRQHandler+0xf0>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	f043 0208 	orr.w	r2, r3, #8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d078      	beq.n	8003ade <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_UART_IRQHandler+0x112>
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f976 	bl	8003cf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_UART_IRQHandler+0x13a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d031      	beq.n	8003a92 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8c1 	bl	8003bb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d023      	beq.n	8003a8a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d013      	beq.n	8003a82 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <HAL_UART_IRQHandler+0x1f4>)
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fc48 	bl	80012fc <HAL_DMA_Abort_IT>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e00e      	b.n	8003aa0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f844 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e00a      	b.n	8003aa0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f840 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	e006      	b.n	8003aa0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f83c 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a9e:	e01e      	b.n	8003ade <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	bf00      	nop
    return;
 8003aa2:	e01c      	b.n	8003ade <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x1cc>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8ad 	bl	8003c18 <UART_Transmit_IT>
    return;
 8003abe:	e00f      	b.n	8003ae0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x1ec>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8f4 	bl	8003cc2 <UART_EndTransmit_IT>
    return;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003ade:	bf00      	nop
  }
}
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08003bf1 	.word	0x08003bf1

08003aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b32:	e02c      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3a:	d028      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b42:	f7fd fa97 	bl	8001074 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d21d      	bcs.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b60:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e00f      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d0c3      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bcc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff ff80 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b21      	cmp	r3, #33	; 0x21
 8003c2a:	d144      	bne.n	8003cb6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d11a      	bne.n	8003c6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]
 8003c5e:	e00e      	b.n	8003c7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	e008      	b.n	8003c7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	1c59      	adds	r1, r3, #1
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6211      	str	r1, [r2, #32]
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff02 	bl	8003aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b22      	cmp	r3, #34	; 0x22
 8003d04:	d171      	bne.n	8003dea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	d123      	bne.n	8003d58 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10e      	bne.n	8003d3c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
 8003d3a:	e029      	b.n	8003d90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
 8003d56:	e01b      	b.n	8003d90 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6858      	ldr	r0, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	1c59      	adds	r1, r3, #1
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6291      	str	r1, [r2, #40]	; 0x28
 8003d70:	b2c2      	uxtb	r2, r0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e00c      	b.n	8003d90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	1c58      	adds	r0, r3, #1
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6288      	str	r0, [r1, #40]	; 0x28
 8003d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d120      	bne.n	8003de6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0220 	bic.w	r2, r2, #32
 8003db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fe8e 	bl	8003afe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e002      	b.n	8003dec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e2e:	f023 030c 	bic.w	r3, r3, #12
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <UART_SetConfig+0x1ac>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d14e      	bne.n	8003efa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7ff f882 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8003e60:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009a      	lsls	r2, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	4a4a      	ldr	r2, [pc, #296]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	0119      	lsls	r1, r3, #4
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009a      	lsls	r2, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e98:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2064      	movs	r0, #100	; 0x64
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	3332      	adds	r3, #50	; 0x32
 8003eac:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb8:	4419      	add	r1, r3
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed0:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2064      	movs	r0, #100	; 0x64
 8003eda:	fb00 f303 	mul.w	r3, r0, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 020f 	and.w	r2, r3, #15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003ef8:	e04d      	b.n	8003f96 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003efa:	f7ff f81f 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8003efe:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	0119      	lsls	r1, r3, #4
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003f38:	fba3 0302 	umull	r0, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2064      	movs	r0, #100	; 0x64
 8003f40:	fb00 f303 	mul.w	r3, r0, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f56:	4419      	add	r1, r3
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003f70:	fba3 0302 	umull	r0, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2064      	movs	r0, #100	; 0x64
 8003f78:	fb00 f303 	mul.w	r3, r0, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	3332      	adds	r3, #50	; 0x32
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <UART_SetConfig+0x1b0>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	440a      	add	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	51eb851f 	.word	0x51eb851f

08003fa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fba:	2b84      	cmp	r3, #132	; 0x84
 8003fbc:	d005      	beq.n	8003fca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3303      	adds	r3, #3
 8003fc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fda:	f000 fa4b 	bl	8004474 <vTaskStartScheduler>
  
  return osOK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685c      	ldr	r4, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ffa:	b29e      	uxth	r6, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ffd0 	bl	8003fa8 <makeFreeRtosPriority>
 8004008:	4602      	mov	r2, r0
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	9200      	str	r2, [sp, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	4632      	mov	r2, r6
 8004016:	4629      	mov	r1, r5
 8004018:	4620      	mov	r0, r4
 800401a:	f000 f8cd 	bl	80041b8 <xTaskCreate>
 800401e:	4603      	mov	r3, r0
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004028:	68fb      	ldr	r3, [r7, #12]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004032 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <osDelay+0x16>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	e000      	b.n	800404a <osDelay+0x18>
 8004048:	2301      	movs	r3, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f9de 	bl	800440c <vTaskDelay>
  
  return osOK;
 8004050:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f103 0208 	add.w	r2, r3, #8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004072:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f103 0208 	add.w	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f103 0208 	add.w	r2, r3, #8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800410c:	d103      	bne.n	8004116 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e00c      	b.n	8004130 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3308      	adds	r3, #8
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e002      	b.n	8004124 <vListInsert+0x2e>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d2f6      	bcs.n	800411e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6852      	ldr	r2, [r2, #4]
 8004186:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d103      	bne.n	800419a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af04      	add	r7, sp, #16
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fe1d 	bl	8004e0c <pvPortMalloc>
 80041d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041da:	2054      	movs	r0, #84	; 0x54
 80041dc:	f000 fe16 	bl	8004e0c <pvPortMalloc>
 80041e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
 80041ee:	e005      	b.n	80041fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041f0:	6978      	ldr	r0, [r7, #20]
 80041f2:	f000 fe51 	bl	8004e98 <vPortFree>
 80041f6:	e001      	b.n	80041fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	2300      	movs	r3, #0
 8004206:	9303      	str	r3, [sp, #12]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f80e 	bl	800423a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800421e:	69f8      	ldr	r0, [r7, #28]
 8004220:	f000 f88a 	bl	8004338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	e002      	b.n	8004230 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004230:	69bb      	ldr	r3, [r7, #24]
	}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004252:	3b01      	subs	r3, #1
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f023 0307 	bic.w	r3, r3, #7
 8004260:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e7fe      	b.n	800427e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e012      	b.n	80042ac <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	7819      	ldrb	r1, [r3, #0]
 800428e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	3334      	adds	r3, #52	; 0x34
 8004296:	460a      	mov	r2, r1
 8004298:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d006      	beq.n	80042b4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3301      	adds	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	d9e9      	bls.n	8004286 <prvInitialiseNewTask+0x4c>
 80042b2:	e000      	b.n	80042b6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80042b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d901      	bls.n	80042c8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042c4:	2306      	movs	r3, #6
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2200      	movs	r2, #0
 80042d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff feda 	bl	8004098 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	3318      	adds	r3, #24
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fed5 	bl	8004098 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f1c3 0207 	rsb	r2, r3, #7
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2200      	movs	r2, #0
 8004308:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	69b8      	ldr	r0, [r7, #24]
 8004318:	f000 fbd0 	bl	8004abc <pxPortInitialiseStack>
 800431c:	4602      	mov	r2, r0
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004340:	f000 fcaa 	bl	8004c98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <prvAddNewTaskToReadyList+0xb8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <prvAddNewTaskToReadyList+0xb8>)
 800434c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004356:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <prvAddNewTaskToReadyList+0xb8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d110      	bne.n	8004386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004364:	f000 faa4 	bl	80048b0 <prvInitialiseTaskLists>
 8004368:	e00d      	b.n	8004386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800436a:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <prvAddNewTaskToReadyList+0xc0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d802      	bhi.n	8004386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004380:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 800438e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4313      	orrs	r3, r2
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <prvAddNewTaskToReadyList+0xcc>)
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7ff fe79 	bl	80040b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043be:	f000 fc99 	bl	8004cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <prvAddNewTaskToReadyList+0xc0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d207      	bcs.n	80043e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <prvAddNewTaskToReadyList+0xd0>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000194 	.word	0x20000194
 80043f4:	20000094 	.word	0x20000094
 80043f8:	200001a0 	.word	0x200001a0
 80043fc:	200001b0 	.word	0x200001b0
 8004400:	2000019c 	.word	0x2000019c
 8004404:	20000098 	.word	0x20000098
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <vTaskDelay+0x60>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <vTaskDelay+0x2e>
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	e7fe      	b.n	8004438 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800443a:	f000 f861 	bl	8004500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800443e:	2100      	movs	r1, #0
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fad5 	bl	80049f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004446:	f000 f869 	bl	800451c <xTaskResumeAll>
 800444a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <vTaskDelay+0x64>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200001bc 	.word	0x200001bc
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <vTaskStartScheduler+0x74>)
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	4919      	ldr	r1, [pc, #100]	; (80044ec <vTaskStartScheduler+0x78>)
 8004488:	4819      	ldr	r0, [pc, #100]	; (80044f0 <vTaskStartScheduler+0x7c>)
 800448a:	f7ff fe95 	bl	80041b8 <xTaskCreate>
 800448e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d115      	bne.n	80044c2 <vTaskStartScheduler+0x4e>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044a8:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <vTaskStartScheduler+0x80>)
 80044aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <vTaskStartScheduler+0x84>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <vTaskStartScheduler+0x88>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044bc:	f000 fb7c 	bl	8004bb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044c0:	e00d      	b.n	80044de <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c8:	d109      	bne.n	80044de <vTaskStartScheduler+0x6a>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e7fe      	b.n	80044dc <vTaskStartScheduler+0x68>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200001b8 	.word	0x200001b8
 80044ec:	08006a24 	.word	0x08006a24
 80044f0:	08004881 	.word	0x08004881
 80044f4:	200001b4 	.word	0x200001b4
 80044f8:	200001a0 	.word	0x200001a0
 80044fc:	20000198 	.word	0x20000198

08004500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <vTaskSuspendAll+0x18>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	4a03      	ldr	r2, [pc, #12]	; (8004518 <vTaskSuspendAll+0x18>)
 800450c:	6013      	str	r3, [r2, #0]
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200001bc 	.word	0x200001bc

0800451c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <xTaskResumeAll+0x114>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <xTaskResumeAll+0x2a>
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	e7fe      	b.n	8004544 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004546:	f000 fba7 	bl	8004c98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800454a:	4b39      	ldr	r3, [pc, #228]	; (8004630 <xTaskResumeAll+0x114>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	4a37      	ldr	r2, [pc, #220]	; (8004630 <xTaskResumeAll+0x114>)
 8004552:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <xTaskResumeAll+0x114>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d161      	bne.n	8004620 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800455c:	4b35      	ldr	r3, [pc, #212]	; (8004634 <xTaskResumeAll+0x118>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05d      	beq.n	8004620 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004564:	e02e      	b.n	80045c4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004566:	4b34      	ldr	r3, [pc, #208]	; (8004638 <xTaskResumeAll+0x11c>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3318      	adds	r3, #24
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fdf7 	bl	8004166 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fdf2 	bl	8004166 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	2201      	movs	r2, #1
 8004588:	409a      	lsls	r2, r3
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <xTaskResumeAll+0x120>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	4a2a      	ldr	r2, [pc, #168]	; (800463c <xTaskResumeAll+0x120>)
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4a27      	ldr	r2, [pc, #156]	; (8004640 <xTaskResumeAll+0x124>)
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7ff fd80 	bl	80040b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	4b23      	ldr	r3, [pc, #140]	; (8004644 <xTaskResumeAll+0x128>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <xTaskResumeAll+0x12c>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c4:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <xTaskResumeAll+0x11c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1cc      	bne.n	8004566 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045d2:	f000 f9e9 	bl	80049a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <xTaskResumeAll+0x130>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d010      	beq.n	8004604 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045e2:	f000 f837 	bl	8004654 <xTaskIncrementTick>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045ec:	4b16      	ldr	r3, [pc, #88]	; (8004648 <xTaskResumeAll+0x12c>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f1      	bne.n	80045e2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <xTaskResumeAll+0x130>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <xTaskResumeAll+0x12c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <xTaskResumeAll+0x134>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004620:	f000 fb68 	bl	8004cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8004624:	68bb      	ldr	r3, [r7, #8]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	200001bc 	.word	0x200001bc
 8004634:	20000194 	.word	0x20000194
 8004638:	20000154 	.word	0x20000154
 800463c:	2000019c 	.word	0x2000019c
 8004640:	20000098 	.word	0x20000098
 8004644:	20000094 	.word	0x20000094
 8004648:	200001a8 	.word	0x200001a8
 800464c:	200001a4 	.word	0x200001a4
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465e:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <xTaskIncrementTick+0x14c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 808c 	bne.w	8004780 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004668:	4b4e      	ldr	r3, [pc, #312]	; (80047a4 <xTaskIncrementTick+0x150>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004670:	4a4c      	ldr	r2, [pc, #304]	; (80047a4 <xTaskIncrementTick+0x150>)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11f      	bne.n	80046bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800467c:	4b4a      	ldr	r3, [pc, #296]	; (80047a8 <xTaskIncrementTick+0x154>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <xTaskIncrementTick+0x46>
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	e7fe      	b.n	8004698 <xTaskIncrementTick+0x44>
 800469a:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <xTaskIncrementTick+0x154>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	4b42      	ldr	r3, [pc, #264]	; (80047ac <xTaskIncrementTick+0x158>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a40      	ldr	r2, [pc, #256]	; (80047a8 <xTaskIncrementTick+0x154>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4a40      	ldr	r2, [pc, #256]	; (80047ac <xTaskIncrementTick+0x158>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <xTaskIncrementTick+0x15c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a3e      	ldr	r2, [pc, #248]	; (80047b0 <xTaskIncrementTick+0x15c>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	f000 f976 	bl	80049a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046bc:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d34d      	bcc.n	8004762 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <xTaskIncrementTick+0x154>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <xTaskIncrementTick+0x80>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <xTaskIncrementTick+0x82>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046e0:	601a      	str	r2, [r3, #0]
					break;
 80046e2:	e03e      	b.n	8004762 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046e4:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <xTaskIncrementTick+0x154>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d203      	bcs.n	8004704 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
						break;
 8004702:	e02e      	b.n	8004762 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fd2c 	bl	8004166 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3318      	adds	r3, #24
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fd23 	bl	8004166 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <xTaskIncrementTick+0x164>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <xTaskIncrementTick+0x164>)
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <xTaskIncrementTick+0x168>)
 8004740:	441a      	add	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f7ff fcb1 	bl	80040b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <xTaskIncrementTick+0x16c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d3b4      	bcc.n	80046c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004760:	e7b1      	b.n	80046c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <xTaskIncrementTick+0x16c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4914      	ldr	r1, [pc, #80]	; (80047bc <xTaskIncrementTick+0x168>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d907      	bls.n	800478a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e004      	b.n	800478a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <xTaskIncrementTick+0x170>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	4a0f      	ldr	r2, [pc, #60]	; (80047c4 <xTaskIncrementTick+0x170>)
 8004788:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <xTaskIncrementTick+0x174>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004792:	2301      	movs	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004796:	697b      	ldr	r3, [r7, #20]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	200001bc 	.word	0x200001bc
 80047a4:	20000198 	.word	0x20000198
 80047a8:	2000014c 	.word	0x2000014c
 80047ac:	20000150 	.word	0x20000150
 80047b0:	200001ac 	.word	0x200001ac
 80047b4:	200001b4 	.word	0x200001b4
 80047b8:	2000019c 	.word	0x2000019c
 80047bc:	20000098 	.word	0x20000098
 80047c0:	20000094 	.word	0x20000094
 80047c4:	200001a4 	.word	0x200001a4
 80047c8:	200001a8 	.word	0x200001a8

080047cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <vTaskSwitchContext+0xa0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <vTaskSwitchContext+0xa4>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e0:	e03e      	b.n	8004860 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <vTaskSwitchContext+0xa4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <vTaskSwitchContext+0xa8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047f6:	7afb      	ldrb	r3, [r7, #11]
 80047f8:	f1c3 031f 	rsb	r3, r3, #31
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	491e      	ldr	r1, [pc, #120]	; (8004878 <vTaskSwitchContext+0xac>)
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	e7fe      	b.n	8004824 <vTaskSwitchContext+0x58>
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4a11      	ldr	r2, [pc, #68]	; (8004878 <vTaskSwitchContext+0xac>)
 8004832:	4413      	add	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	3308      	adds	r3, #8
 8004848:	429a      	cmp	r2, r3
 800484a:	d104      	bne.n	8004856 <vTaskSwitchContext+0x8a>
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a07      	ldr	r2, [pc, #28]	; (800487c <vTaskSwitchContext+0xb0>)
 800485e:	6013      	str	r3, [r2, #0]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	200001bc 	.word	0x200001bc
 8004870:	200001a8 	.word	0x200001a8
 8004874:	2000019c 	.word	0x2000019c
 8004878:	20000098 	.word	0x20000098
 800487c:	20000094 	.word	0x20000094

08004880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004888:	f000 f852 	bl	8004930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <prvIdleTask+0x28>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d9f9      	bls.n	8004888 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <prvIdleTask+0x2c>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048a4:	e7f0      	b.n	8004888 <prvIdleTask+0x8>
 80048a6:	bf00      	nop
 80048a8:	20000098 	.word	0x20000098
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	e00c      	b.n	80048d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <prvInitialiseTaskLists+0x60>)
 80048c8:	4413      	add	r3, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fbc5 	bl	800405a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3301      	adds	r3, #1
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d9ef      	bls.n	80048bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048dc:	480d      	ldr	r0, [pc, #52]	; (8004914 <prvInitialiseTaskLists+0x64>)
 80048de:	f7ff fbbc 	bl	800405a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048e2:	480d      	ldr	r0, [pc, #52]	; (8004918 <prvInitialiseTaskLists+0x68>)
 80048e4:	f7ff fbb9 	bl	800405a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048e8:	480c      	ldr	r0, [pc, #48]	; (800491c <prvInitialiseTaskLists+0x6c>)
 80048ea:	f7ff fbb6 	bl	800405a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048ee:	480c      	ldr	r0, [pc, #48]	; (8004920 <prvInitialiseTaskLists+0x70>)
 80048f0:	f7ff fbb3 	bl	800405a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048f4:	480b      	ldr	r0, [pc, #44]	; (8004924 <prvInitialiseTaskLists+0x74>)
 80048f6:	f7ff fbb0 	bl	800405a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <prvInitialiseTaskLists+0x78>)
 80048fc:	4a05      	ldr	r2, [pc, #20]	; (8004914 <prvInitialiseTaskLists+0x64>)
 80048fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <prvInitialiseTaskLists+0x7c>)
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <prvInitialiseTaskLists+0x68>)
 8004904:	601a      	str	r2, [r3, #0]
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000098 	.word	0x20000098
 8004914:	20000124 	.word	0x20000124
 8004918:	20000138 	.word	0x20000138
 800491c:	20000154 	.word	0x20000154
 8004920:	20000168 	.word	0x20000168
 8004924:	20000180 	.word	0x20000180
 8004928:	2000014c 	.word	0x2000014c
 800492c:	20000150 	.word	0x20000150

08004930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004936:	e019      	b.n	800496c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004938:	f000 f9ae 	bl	8004c98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <prvCheckTasksWaitingTermination+0x4c>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fc0c 	bl	8004166 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <prvCheckTasksWaitingTermination+0x50>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <prvCheckTasksWaitingTermination+0x50>)
 8004956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <prvCheckTasksWaitingTermination+0x54>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3b01      	subs	r3, #1
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <prvCheckTasksWaitingTermination+0x54>)
 8004960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004962:	f000 f9c7 	bl	8004cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f80e 	bl	8004988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <prvCheckTasksWaitingTermination+0x54>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e1      	bne.n	8004938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000168 	.word	0x20000168
 8004980:	20000194 	.word	0x20000194
 8004984:	2000017c 	.word	0x2000017c

08004988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fa7f 	bl	8004e98 <vPortFree>
			vPortFree( pxTCB );
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa7c 	bl	8004e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ae:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <prvResetNextTaskUnblockTime+0x40>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <prvResetNextTaskUnblockTime+0x14>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <prvResetNextTaskUnblockTime+0x16>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <prvResetNextTaskUnblockTime+0x44>)
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049ca:	e008      	b.n	80049de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <prvResetNextTaskUnblockTime+0x40>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <prvResetNextTaskUnblockTime+0x44>)
 80049dc:	6013      	str	r3, [r2, #0]
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	2000014c 	.word	0x2000014c
 80049ec:	200001b4 	.word	0x200001b4

080049f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fbad 	bl	8004166 <uxListRemove>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a12:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	2201      	movs	r2, #1
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4013      	ands	r3, r2
 8004a26:	4a20      	ldr	r2, [pc, #128]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a30:	d10a      	bne.n	8004a48 <prvAddCurrentTaskToDelayedList+0x58>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4619      	mov	r1, r3
 8004a40:	481a      	ldr	r0, [pc, #104]	; (8004aac <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a42:	f7ff fb35 	bl	80040b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a46:	e026      	b.n	8004a96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d209      	bcs.n	8004a74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7ff fb42 	bl	80040f6 <vListInsert>
}
 8004a72:	e010      	b.n	8004a96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7ff fb38 	bl	80040f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d202      	bcs.n	8004a96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6013      	str	r3, [r2, #0]
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000198 	.word	0x20000198
 8004aa4:	20000094 	.word	0x20000094
 8004aa8:	2000019c 	.word	0x2000019c
 8004aac:	20000180 	.word	0x20000180
 8004ab0:	20000150 	.word	0x20000150
 8004ab4:	2000014c 	.word	0x2000014c
 8004ab8:	200001b4 	.word	0x200001b4

08004abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3b04      	subs	r3, #4
 8004acc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b04      	subs	r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <pxPortInitialiseStack+0x54>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b14      	subs	r3, #20
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b20      	subs	r3, #32
 8004b02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	08004b15 	.word	0x08004b15

08004b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <prvTaskExitError+0x4c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b26:	d009      	beq.n	8004b3c <prvTaskExitError+0x28>
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e7fe      	b.n	8004b3a <prvTaskExitError+0x26>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b4e:	bf00      	nop
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0fc      	beq.n	8004b50 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	20000008 	.word	0x20000008
	...

08004b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <pxCurrentTCBConst2>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b7a:	f380 8809 	msr	PSP, r0
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b8e:	4770      	bx	lr

08004b90 <pxCurrentTCBConst2>:
 8004b90:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop

08004b98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004b98:	4806      	ldr	r0, [pc, #24]	; (8004bb4 <prvPortStartFirstTask+0x1c>)
 8004b9a:	6800      	ldr	r0, [r0, #0]
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f380 8808 	msr	MSP, r0
 8004ba2:	b662      	cpsie	i
 8004ba4:	b661      	cpsie	f
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	df00      	svc	0
 8004bb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bb2:	bf00      	nop
 8004bb4:	e000ed08 	.word	0xe000ed08

08004bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <xPortStartScheduler+0xcc>)
 8004bc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <xPortStartScheduler+0xd0>)
 8004be4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004be6:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004be8:	2207      	movs	r2, #7
 8004bea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bec:	e009      	b.n	8004c02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004bee:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4a25      	ldr	r2, [pc, #148]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004bf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d0ef      	beq.n	8004bee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1c3 0307 	rsb	r3, r3, #7
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d009      	beq.n	8004c2e <xPortStartScheduler+0x76>
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	e7fe      	b.n	8004c2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c40:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <xPortStartScheduler+0xd4>)
 8004c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <xPortStartScheduler+0xd8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <xPortStartScheduler+0xd8>)
 8004c52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <xPortStartScheduler+0xd8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <xPortStartScheduler+0xd8>)
 8004c5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c64:	f000 f8b0 	bl	8004dc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <xPortStartScheduler+0xdc>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c6e:	f7ff ff93 	bl	8004b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c72:	f7ff fdab 	bl	80047cc <vTaskSwitchContext>
	prvTaskExitError();
 8004c76:	f7ff ff4d 	bl	8004b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000e400 	.word	0xe000e400
 8004c88:	200001c0 	.word	0x200001c0
 8004c8c:	200001c4 	.word	0x200001c4
 8004c90:	e000ed20 	.word	0xe000ed20
 8004c94:	20000008 	.word	0x20000008

08004c98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <vPortEnterCritical+0x54>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <vPortEnterCritical+0x54>)
 8004cb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <vPortEnterCritical+0x54>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10e      	bne.n	8004ce0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortEnterCritical+0x58>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <vPortEnterCritical+0x48>
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	e7fe      	b.n	8004cde <vPortEnterCritical+0x46>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000008 	.word	0x20000008
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <vPortExitCritical+0x48>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <vPortExitCritical+0x22>
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e7fe      	b.n	8004d14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <vPortExitCritical+0x48>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <vPortExitCritical+0x48>)
 8004d1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <vPortExitCritical+0x48>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <vPortExitCritical+0x3e>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	20000008 	.word	0x20000008

08004d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d40:	f3ef 8009 	mrs	r0, PSP
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <pxCurrentTCBConst>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d50:	6010      	str	r0, [r2, #0]
 8004d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d5a:	f380 8811 	msr	BASEPRI, r0
 8004d5e:	f7ff fd35 	bl	80047cc <vTaskSwitchContext>
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8811 	msr	BASEPRI, r0
 8004d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	6808      	ldr	r0, [r1, #0]
 8004d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d76:	f380 8809 	msr	PSP, r0
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	4770      	bx	lr

08004d80 <pxCurrentTCBConst>:
 8004d80:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004da0:	f7ff fc58 	bl	8004654 <xTaskIncrementTick>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <SysTick_Handler+0x3c>)
 8004dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortSetupTimerInterrupt+0x30>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <vPortSetupTimerInterrupt+0x34>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <vPortSetupTimerInterrupt+0x38>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <vPortSetupTimerInterrupt+0x3c>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <vPortSetupTimerInterrupt+0x40>)
 8004de6:	3b01      	subs	r3, #1
 8004de8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dea:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <vPortSetupTimerInterrupt+0x30>)
 8004dec:	2207      	movs	r2, #7
 8004dee:	601a      	str	r2, [r3, #0]
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	e000e010 	.word	0xe000e010
 8004dfc:	e000e018 	.word	0xe000e018
 8004e00:	2000000c 	.word	0x2000000c
 8004e04:	10624dd3 	.word	0x10624dd3
 8004e08:	e000e014 	.word	0xe000e014

08004e0c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f023 0307 	bic.w	r3, r3, #7
 8004e28:	3308      	adds	r3, #8
 8004e2a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8004e2c:	f7ff fb68 	bl	8004500 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <pvPortMalloc+0x80>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <pvPortMalloc+0x84>)
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <pvPortMalloc+0x80>)
 8004e42:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <pvPortMalloc+0x88>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f640 72f7 	movw	r2, #4087	; 0xff7
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d813      	bhi.n	8004e7c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <pvPortMalloc+0x88>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	441a      	add	r2, r3
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <pvPortMalloc+0x88>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90b      	bls.n	8004e7c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <pvPortMalloc+0x80>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <pvPortMalloc+0x88>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <pvPortMalloc+0x88>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	4a06      	ldr	r2, [pc, #24]	; (8004e94 <pvPortMalloc+0x88>)
 8004e7a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e7c:	f7ff fb4e 	bl	800451c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8004e80:	68fb      	ldr	r3, [r7, #12]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200011cc 	.word	0x200011cc
 8004e90:	200001d0 	.word	0x200001d0
 8004e94:	200011c8 	.word	0x200011c8

08004e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <vPortFree+0x22>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e7fe      	b.n	8004eb8 <vPortFree+0x20>
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ec4:	b5b0      	push	{r4, r5, r7, lr}
 8004ec6:	b090      	sub	sp, #64	; 0x40
 8004ec8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004eca:	f7fc f8ab 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ece:	f000 f84d 	bl	8004f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ed2:	f000 f979 	bl	80051c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ed6:	f000 f959 	bl	800518c <MX_DMA_Init>
  MX_I2C1_Init();
 8004eda:	f000 f883 	bl	8004fe4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004ede:	f000 f8af 	bl	8005040 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004ee2:	f000 f8ff 	bl	80050e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004ee6:	f000 f927 	bl	8005138 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <main+0x90>)
 8004eec:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004ef0:	461d      	mov	r5, r3
 8004ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ef6:	682b      	ldr	r3, [r5, #0]
 8004ef8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff f86f 	bl	8003fe4 <osThreadCreate>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <main+0x94>)
 8004f0a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8004f0c:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <main+0x98>)
 8004f0e:	f107 0418 	add.w	r4, r7, #24
 8004f12:	461d      	mov	r5, r3
 8004f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8004f1c:	f107 0318 	add.w	r3, r7, #24
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff f85e 	bl	8003fe4 <osThreadCreate>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <main+0x9c>)
 8004f2c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <main+0xa0>)
 8004f30:	1d3c      	adds	r4, r7, #4
 8004f32:	461d      	mov	r5, r3
 8004f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	6023      	str	r3, [r4, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff f84f 	bl	8003fe4 <osThreadCreate>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <main+0xa4>)
 8004f4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004f4c:	f7ff f843 	bl	8003fd6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f50:	e7fe      	b.n	8004f50 <main+0x8c>
 8004f52:	bf00      	nop
 8004f54:	08006a38 	.word	0x08006a38
 8004f58:	200011d4 	.word	0x200011d4
 8004f5c:	08006a58 	.word	0x08006a58
 8004f60:	200012f4 	.word	0x200012f4
 8004f64:	08006a78 	.word	0x08006a78
 8004f68:	2000139c 	.word	0x2000139c

08004f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b090      	sub	sp, #64	; 0x40
 8004f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f72:	f107 0318 	add.w	r3, r7, #24
 8004f76:	2228      	movs	r2, #40	; 0x28
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 fd32 	bl	80069e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f92:	2301      	movs	r3, #1
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f96:	2310      	movs	r3, #16
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f9e:	f107 0318 	add.w	r3, r7, #24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fbf4 	bl	8002790 <HAL_RCC_OscConfig>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8004fae:	f000 f982 	bl	80052b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004fc6:	1d3b      	adds	r3, r7, #4
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd fe60 	bl	8002c90 <HAL_RCC_ClockConfig>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004fd6:	f000 f96e 	bl	80052b6 <Error_Handler>
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3740      	adds	r7, #64	; 0x40
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004fe8:	4b12      	ldr	r3, [pc, #72]	; (8005034 <MX_I2C1_Init+0x50>)
 8004fea:	4a13      	ldr	r2, [pc, #76]	; (8005038 <MX_I2C1_Init+0x54>)
 8004fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <MX_I2C1_Init+0x50>)
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <MX_I2C1_Init+0x58>)
 8004ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <MX_I2C1_Init+0x50>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <MX_I2C1_Init+0x50>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005000:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <MX_I2C1_Init+0x50>)
 8005002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <MX_I2C1_Init+0x50>)
 800500a:	2200      	movs	r2, #0
 800500c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <MX_I2C1_Init+0x50>)
 8005010:	2200      	movs	r2, #0
 8005012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <MX_I2C1_Init+0x50>)
 8005016:	2200      	movs	r2, #0
 8005018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <MX_I2C1_Init+0x50>)
 800501c:	2200      	movs	r2, #0
 800501e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005020:	4804      	ldr	r0, [pc, #16]	; (8005034 <MX_I2C1_Init+0x50>)
 8005022:	f7fc fc59 	bl	80018d8 <HAL_I2C_Init>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800502c:	f000 f943 	bl	80052b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200011dc 	.word	0x200011dc
 8005038:	40005400 	.word	0x40005400
 800503c:	000186a0 	.word	0x000186a0

08005040 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005054:	463b      	mov	r3, r7
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800505c:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <MX_TIM1_Init+0x9c>)
 800505e:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <MX_TIM1_Init+0xa0>)
 8005060:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <MX_TIM1_Init+0x9c>)
 8005064:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005068:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <MX_TIM1_Init+0x9c>)
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <MX_TIM1_Init+0x9c>)
 8005072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005076:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <MX_TIM1_Init+0x9c>)
 800507a:	2200      	movs	r2, #0
 800507c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800507e:	4b17      	ldr	r3, [pc, #92]	; (80050dc <MX_TIM1_Init+0x9c>)
 8005080:	2200      	movs	r2, #0
 8005082:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005084:	4b15      	ldr	r3, [pc, #84]	; (80050dc <MX_TIM1_Init+0x9c>)
 8005086:	2200      	movs	r2, #0
 8005088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800508a:	4814      	ldr	r0, [pc, #80]	; (80050dc <MX_TIM1_Init+0x9c>)
 800508c:	f7fd ffcc 	bl	8003028 <HAL_TIM_Base_Init>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005096:	f000 f90e 	bl	80052b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800509a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800509e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	480d      	ldr	r0, [pc, #52]	; (80050dc <MX_TIM1_Init+0x9c>)
 80050a8:	f7fe f914 	bl	80032d4 <HAL_TIM_ConfigClockSource>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80050b2:	f000 f900 	bl	80052b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050b6:	2300      	movs	r3, #0
 80050b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80050be:	463b      	mov	r3, r7
 80050c0:	4619      	mov	r1, r3
 80050c2:	4806      	ldr	r0, [pc, #24]	; (80050dc <MX_TIM1_Init+0x9c>)
 80050c4:	f7fe fada 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80050ce:	f000 f8f2 	bl	80052b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80050d2:	bf00      	nop
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200012f8 	.word	0x200012f8
 80050e0:	40012c00 	.word	0x40012c00

080050e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <MX_USART1_UART_Init+0x50>)
 80050ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 80050f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050f6:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 80050fe:	2200      	movs	r2, #0
 8005100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 800510a:	220c      	movs	r2, #12
 800510c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 8005110:	2200      	movs	r2, #0
 8005112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 8005116:	2200      	movs	r2, #0
 8005118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800511a:	4805      	ldr	r0, [pc, #20]	; (8005130 <MX_USART1_UART_Init+0x4c>)
 800511c:	f7fe fb04 	bl	8003728 <HAL_UART_Init>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005126:	f000 f8c6 	bl	80052b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200012b0 	.word	0x200012b0
 8005134:	40013800 	.word	0x40013800

08005138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 800513e:	4a12      	ldr	r2, [pc, #72]	; (8005188 <MX_USART2_UART_Init+0x50>)
 8005140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 8005144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800514a:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 8005152:	2200      	movs	r2, #0
 8005154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 800515e:	220c      	movs	r2, #12
 8005160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 8005164:	2200      	movs	r2, #0
 8005166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800516e:	4805      	ldr	r0, [pc, #20]	; (8005184 <MX_USART2_UART_Init+0x4c>)
 8005170:	f7fe fada 	bl	8003728 <HAL_UART_Init>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800517a:	f000 f89c 	bl	80052b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200013a0 	.word	0x200013a0
 8005188:	40004400 	.word	0x40004400

0800518c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <MX_DMA_Init+0x38>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <MX_DMA_Init+0x38>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6153      	str	r3, [r2, #20]
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <MX_DMA_Init+0x38>)
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80051aa:	2200      	movs	r2, #0
 80051ac:	2105      	movs	r1, #5
 80051ae:	200f      	movs	r0, #15
 80051b0:	f7fc f81f 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80051b4:	200f      	movs	r0, #15
 80051b6:	f7fc f838 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000

080051c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <MX_GPIO_Init+0x90>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <MX_GPIO_Init+0x90>)
 80051e2:	f043 0310 	orr.w	r3, r3, #16
 80051e6:	6193      	str	r3, [r2, #24]
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <MX_GPIO_Init+0x90>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f4:	4b18      	ldr	r3, [pc, #96]	; (8005258 <MX_GPIO_Init+0x90>)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	4a17      	ldr	r2, [pc, #92]	; (8005258 <MX_GPIO_Init+0x90>)
 80051fa:	f043 0304 	orr.w	r3, r3, #4
 80051fe:	6193      	str	r3, [r2, #24]
 8005200:	4b15      	ldr	r3, [pc, #84]	; (8005258 <MX_GPIO_Init+0x90>)
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <MX_GPIO_Init+0x90>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <MX_GPIO_Init+0x90>)
 8005212:	f043 0308 	orr.w	r3, r3, #8
 8005216:	6193      	str	r3, [r2, #24]
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <MX_GPIO_Init+0x90>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522a:	480c      	ldr	r0, [pc, #48]	; (800525c <MX_GPIO_Init+0x94>)
 800522c:	f7fc fb3c 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800523e:	2302      	movs	r3, #2
 8005240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005242:	f107 0310 	add.w	r3, r7, #16
 8005246:	4619      	mov	r1, r3
 8005248:	4804      	ldr	r0, [pc, #16]	; (800525c <MX_GPIO_Init+0x94>)
 800524a:	f7fc f9d3 	bl	80015f4 <HAL_GPIO_Init>

}
 800524e:	bf00      	nop
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	40011000 	.word	0x40011000

08005260 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	       osDelay(1);
 8005268:	2001      	movs	r0, #1
 800526a:	f7fe fee2 	bl	8004032 <osDelay>
 800526e:	e7fb      	b.n	8005268 <StartDefaultTask+0x8>

08005270 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  process_MPU();
 8005278:	f000 f95a 	bl	8005530 <process_MPU>
      osDelay(10);
 800527c:	200a      	movs	r0, #10
 800527e:	f7fe fed8 	bl	8004032 <osDelay>
  {
 8005282:	e7f9      	b.n	8005278 <StartTask02+0x8>

08005284 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  char ch[6] ="Task 2\n";
//	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 7);
//      osDelay(100);
	  readMagnet();
 800528c:	f000 fb64 	bl	8005958 <readMagnet>
	  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	  osDelay(10);
 8005290:	200a      	movs	r0, #10
 8005292:	f7fe fece 	bl	8004032 <osDelay>
  {
 8005296:	e7f9      	b.n	800528c <StartTask03+0x8>

08005298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052aa:	f7fb fed1 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b6:	b480      	push	{r7}
 80052b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr
 80052c2:	0000      	movs	r0, r0
 80052c4:	0000      	movs	r0, r0
	...

080052c8 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b08b      	sub	sp, #44	; 0x2c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b0a      	cmp	r3, #10
 80052e2:	dd01      	ble.n	80052e8 <ftoa+0x20>
		precision = MAX_PRECISION;
 80052e4:	230a      	movs	r3, #10
 80052e6:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052f4:	f7fb fb62 	bl	80009bc <__aeabi_dcmplt>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <ftoa+0x4c>
	{
		f = -f;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005308:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	627a      	str	r2, [r7, #36]	; 0x24
 8005310:	222d      	movs	r2, #45	; 0x2d
 8005312:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	da4f      	bge.n	80053ba <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	4b7e      	ldr	r3, [pc, #504]	; (8005518 <ftoa+0x250>)
 8005320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005324:	f7fb fb4a 	bl	80009bc <__aeabi_dcmplt>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <ftoa+0x6c>
 800532e:	2306      	movs	r3, #6
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	e042      	b.n	80053ba <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	4b78      	ldr	r3, [pc, #480]	; (800551c <ftoa+0x254>)
 800533a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800533e:	f7fb fb3d 	bl	80009bc <__aeabi_dcmplt>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <ftoa+0x86>
 8005348:	2305      	movs	r3, #5
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	e035      	b.n	80053ba <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	4b73      	ldr	r3, [pc, #460]	; (8005520 <ftoa+0x258>)
 8005354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005358:	f7fb fb30 	bl	80009bc <__aeabi_dcmplt>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <ftoa+0xa0>
 8005362:	2304      	movs	r3, #4
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	e028      	b.n	80053ba <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	4b6d      	ldr	r3, [pc, #436]	; (8005524 <ftoa+0x25c>)
 800536e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005372:	f7fb fb23 	bl	80009bc <__aeabi_dcmplt>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <ftoa+0xba>
 800537c:	2303      	movs	r3, #3
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	e01b      	b.n	80053ba <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 8005382:	a361      	add	r3, pc, #388	; (adr r3, 8005508 <ftoa+0x240>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800538c:	f7fb fb16 	bl	80009bc <__aeabi_dcmplt>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <ftoa+0xd4>
 8005396:	2302      	movs	r3, #2
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	e00e      	b.n	80053ba <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 800539c:	a35c      	add	r3, pc, #368	; (adr r3, 8005510 <ftoa+0x248>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053a6:	f7fb fb09 	bl	80009bc <__aeabi_dcmplt>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <ftoa+0xee>
 80053b0:	2301      	movs	r3, #1
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	e001      	b.n	80053ba <ftoa+0xf2>
		else precision = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <ftoa+0x116>
		f += rounders[precision];
 80053c0:	4a59      	ldr	r2, [pc, #356]	; (8005528 <ftoa+0x260>)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	cb18      	ldmia	r3, {r3, r4}
 80053ca:	461a      	mov	r2, r3
 80053cc:	4623      	mov	r3, r4
 80053ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053d2:	f7fa fecb 	bl	800016c <__adddf3>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 80053de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053e2:	f7fb fb29 	bl	8000a38 <__aeabi_d2iz>
 80053e6:	4603      	mov	r3, r0
 80053e8:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80053ea:	69f8      	ldr	r0, [r7, #28]
 80053ec:	f7fb f80a 	bl	8000404 <__aeabi_i2d>
 80053f0:	4603      	mov	r3, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	461a      	mov	r2, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053fc:	f7fa feb4 	bl	8000168 <__aeabi_dsub>
 8005400:	4603      	mov	r3, r0
 8005402:	460c      	mov	r4, r1
 8005404:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d105      	bne.n	800541a <ftoa+0x152>
		*ptr++ = '0';
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	627a      	str	r2, [r7, #36]	; 0x24
 8005414:	2230      	movs	r2, #48	; 0x30
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e038      	b.n	800548c <ftoa+0x1c4>
	else
	{
		// save start pointer
		p = ptr;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 800541e:	e01a      	b.n	8005456 <ftoa+0x18e>
		{
			*p++ = '0' + intPart % 10;
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	4b42      	ldr	r3, [pc, #264]	; (800552c <ftoa+0x264>)
 8005424:	fb83 1302 	smull	r1, r3, r3, r2
 8005428:	1099      	asrs	r1, r3, #2
 800542a:	17d3      	asrs	r3, r2, #31
 800542c:	1ac9      	subs	r1, r1, r3
 800542e:	460b      	mov	r3, r1
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	1ad1      	subs	r1, r2, r3
 8005438:	b2ca      	uxtb	r2, r1
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	1c59      	adds	r1, r3, #1
 800543e:	6239      	str	r1, [r7, #32]
 8005440:	3230      	adds	r2, #48	; 0x30
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4a38      	ldr	r2, [pc, #224]	; (800552c <ftoa+0x264>)
 800544a:	fb82 1203 	smull	r1, r2, r2, r3
 800544e:	1092      	asrs	r2, r2, #2
 8005450:	17db      	asrs	r3, r3, #31
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	61fb      	str	r3, [r7, #28]
		while (intPart)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e1      	bne.n	8005420 <ftoa+0x158>
		}

		// save end pos
		p1 = p;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8005460:	e00e      	b.n	8005480 <ftoa+0x1b8>
		{
			c = *--p;
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	3b01      	subs	r3, #1
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	627a      	str	r2, [r7, #36]	; 0x24
 800547c:	7dfa      	ldrb	r2, [r7, #23]
 800547e:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	429a      	cmp	r2, r3
 8005486:	d8ec      	bhi.n	8005462 <ftoa+0x19a>
		}

		// restore end pos
		ptr = p1;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d032      	beq.n	80054f8 <ftoa+0x230>
	{
		// place decimal point
		*ptr++ = '.';
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	627a      	str	r2, [r7, #36]	; 0x24
 8005498:	222e      	movs	r2, #46	; 0x2e
 800549a:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800549c:	e027      	b.n	80054ee <ftoa+0x226>
		{
			f *= 10.0;
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	4b1e      	ldr	r3, [pc, #120]	; (800551c <ftoa+0x254>)
 80054a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054a8:	f7fb f816 	bl	80004d8 <__aeabi_dmul>
 80054ac:	4603      	mov	r3, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 80054b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054b8:	f7fb fae6 	bl	8000a88 <__aeabi_d2uiz>
 80054bc:	4603      	mov	r3, r0
 80054be:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	627a      	str	r2, [r7, #36]	; 0x24
 80054c6:	7dfa      	ldrb	r2, [r7, #23]
 80054c8:	3230      	adds	r2, #48	; 0x30
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
			f -= c;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fa ff97 	bl	8000404 <__aeabi_i2d>
 80054d6:	4603      	mov	r3, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	461a      	mov	r2, r3
 80054dc:	4623      	mov	r3, r4
 80054de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054e2:	f7fa fe41 	bl	8000168 <__aeabi_dsub>
 80054e6:	4603      	mov	r3, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	603a      	str	r2, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1d2      	bne.n	800549e <ftoa+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]

	return buf;
 80054fe:	687b      	ldr	r3, [r7, #4]
}
 8005500:	4618      	mov	r0, r3
 8005502:	372c      	adds	r7, #44	; 0x2c
 8005504:	46bd      	mov	sp, r7
 8005506:	bd90      	pop	{r4, r7, pc}
 8005508:	00000000 	.word	0x00000000
 800550c:	40c38800 	.word	0x40c38800
 8005510:	00000000 	.word	0x00000000
 8005514:	40f86a00 	.word	0x40f86a00
 8005518:	3ff00000 	.word	0x3ff00000
 800551c:	40240000 	.word	0x40240000
 8005520:	40590000 	.word	0x40590000
 8005524:	408f4000 	.word	0x408f4000
 8005528:	08006ab8 	.word	0x08006ab8
 800552c:	66666667 	.word	0x66666667

08005530 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	b097      	sub	sp, #92	; 0x5c
 8005534:	af02      	add	r7, sp, #8
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,Mag_x,Mag_y,Mag_z,roll,pitch,yaw,roll_com;
	char buffer[7];
	char n[1] = "\n";
 8005536:	230a      	movs	r3, #10
 8005538:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t data[13];
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 800553c:	233b      	movs	r3, #59	; 0x3b
 800553e:	71fb      	strb	r3, [r7, #7]
	uint8_t device_address = MPU_ADDRESS;
 8005540:	23d0      	movs	r3, #208	; 0xd0
 8005542:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t magnet_address = MAG_ADRRESS;
 8005546:	2318      	movs	r3, #24
 8005548:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 800554c:	bf00      	nop
 800554e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005552:	b299      	uxth	r1, r3
 8005554:	1dfa      	adds	r2, r7, #7
 8005556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2301      	movs	r3, #1
 800555e:	48ca      	ldr	r0, [pc, #808]	; (8005888 <process_MPU+0x358>)
 8005560:	f7fc fae2 	bl	8001b28 <HAL_I2C_Master_Transmit>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f1      	bne.n	800554e <process_MPU+0x1e>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 800556a:	bf00      	nop
 800556c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005570:	b299      	uxth	r1, r3
 8005572:	f107 0210 	add.w	r2, r7, #16
 8005576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	230e      	movs	r3, #14
 800557e:	48c2      	ldr	r0, [pc, #776]	; (8005888 <process_MPU+0x358>)
 8005580:	f7fc fbd0 	bl	8001d24 <HAL_I2C_Master_Receive>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <process_MPU+0x3c>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 800558a:	7c3b      	ldrb	r3, [r7, #16]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	b21a      	sxth	r2, r3
 8005590:	7c7b      	ldrb	r3, [r7, #17]
 8005592:	b21b      	sxth	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	b21b      	sxth	r3, r3
 8005598:	4618      	mov	r0, r3
 800559a:	f7fb fb9f 	bl	8000cdc <__aeabi_i2f>
 800559e:	4603      	mov	r3, r0
 80055a0:	64bb      	str	r3, [r7, #72]	; 0x48
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80055a2:	7cbb      	ldrb	r3, [r7, #18]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	b21a      	sxth	r2, r3
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fb fb93 	bl	8000cdc <__aeabi_i2f>
 80055b6:	4603      	mov	r3, r0
 80055b8:	647b      	str	r3, [r7, #68]	; 0x44
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80055ba:	7d3b      	ldrb	r3, [r7, #20]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	b21a      	sxth	r2, r3
 80055c0:	7d7b      	ldrb	r3, [r7, #21]
 80055c2:	b21b      	sxth	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fb fb87 	bl	8000cdc <__aeabi_i2f>
 80055ce:	4603      	mov	r3, r0
 80055d0:	643b      	str	r3, [r7, #64]	; 0x40

    temp = (int16_t)(data[6] << 8 | data[7]);
 80055d2:	7dbb      	ldrb	r3, [r7, #22]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	b21a      	sxth	r2, r3
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	b21b      	sxth	r3, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	b21b      	sxth	r3, r3
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fb fb7b 	bl	8000cdc <__aeabi_i2f>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4ba8      	ldr	r3, [pc, #672]	; (800588c <process_MPU+0x35c>)
 80055ea:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80055ec:	7e3b      	ldrb	r3, [r7, #24]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	b21a      	sxth	r2, r3
 80055f2:	7e7b      	ldrb	r3, [r7, #25]
 80055f4:	b21b      	sxth	r3, r3
 80055f6:	4313      	orrs	r3, r2
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fb fb6e 	bl	8000cdc <__aeabi_i2f>
 8005600:	4603      	mov	r3, r0
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8005604:	7ebb      	ldrb	r3, [r7, #26]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	b21a      	sxth	r2, r3
 800560a:	7efb      	ldrb	r3, [r7, #27]
 800560c:	b21b      	sxth	r3, r3
 800560e:	4313      	orrs	r3, r2
 8005610:	b21b      	sxth	r3, r3
 8005612:	4618      	mov	r0, r3
 8005614:	f7fb fb62 	bl	8000cdc <__aeabi_i2f>
 8005618:	4603      	mov	r3, r0
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 800561c:	7f3b      	ldrb	r3, [r7, #28]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	b21a      	sxth	r2, r3
 8005622:	7f7b      	ldrb	r3, [r7, #29]
 8005624:	b21b      	sxth	r3, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	b21b      	sxth	r3, r3
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fb56 	bl	8000cdc <__aeabi_i2f>
 8005630:	4603      	mov	r3, r0
 8005632:	637b      	str	r3, [r7, #52]	; 0x34

	Acc_x = (Acc_x)/((float)accel_factor);
 8005634:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005638:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800563a:	f7fb fc57 	bl	8000eec <__aeabi_fdiv>
 800563e:	4603      	mov	r3, r0
 8005640:	64bb      	str	r3, [r7, #72]	; 0x48
	Acc_y = (Acc_y)/((float)accel_factor);
 8005642:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005646:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005648:	f7fb fc50 	bl	8000eec <__aeabi_fdiv>
 800564c:	4603      	mov	r3, r0
 800564e:	647b      	str	r3, [r7, #68]	; 0x44
	Acc_z = (Acc_z )/((float)accel_factor);
 8005650:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005654:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005656:	f7fb fc49 	bl	8000eec <__aeabi_fdiv>
 800565a:	4603      	mov	r3, r0
 800565c:	643b      	str	r3, [r7, #64]	; 0x40

	Gyro_x = (Gyro_x)/gyro_factor;
 800565e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005660:	f7fa fee2 	bl	8000428 <__aeabi_f2d>
 8005664:	a386      	add	r3, pc, #536	; (adr r3, 8005880 <process_MPU+0x350>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fb f85f 	bl	800072c <__aeabi_ddiv>
 800566e:	4603      	mov	r3, r0
 8005670:	460c      	mov	r4, r1
 8005672:	4618      	mov	r0, r3
 8005674:	4621      	mov	r1, r4
 8005676:	f7fb fa27 	bl	8000ac8 <__aeabi_d2f>
 800567a:	4603      	mov	r3, r0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
	Gyro_y = (Gyro_y)/gyro_factor;
 800567e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005680:	f7fa fed2 	bl	8000428 <__aeabi_f2d>
 8005684:	a37e      	add	r3, pc, #504	; (adr r3, 8005880 <process_MPU+0x350>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f7fb f84f 	bl	800072c <__aeabi_ddiv>
 800568e:	4603      	mov	r3, r0
 8005690:	460c      	mov	r4, r1
 8005692:	4618      	mov	r0, r3
 8005694:	4621      	mov	r1, r4
 8005696:	f7fb fa17 	bl	8000ac8 <__aeabi_d2f>
 800569a:	4603      	mov	r3, r0
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
	Gyro_z = (Gyro_z)/gyro_factor;
 800569e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056a0:	f7fa fec2 	bl	8000428 <__aeabi_f2d>
 80056a4:	a376      	add	r3, pc, #472	; (adr r3, 8005880 <process_MPU+0x350>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fb f83f 	bl	800072c <__aeabi_ddiv>
 80056ae:	4603      	mov	r3, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	4618      	mov	r0, r3
 80056b4:	4621      	mov	r1, r4
 80056b6:	f7fb fa07 	bl	8000ac8 <__aeabi_d2f>
 80056ba:	4603      	mov	r3, r0
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34

    reg = 0x02;
 80056be:	2302      	movs	r3, #2
 80056c0:	71fb      	strb	r3, [r7, #7]

    ftoa(Gyro_x, buffer, 2);
 80056c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056c4:	f7fa feb0 	bl	8000428 <__aeabi_f2d>
 80056c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80056cc:	2302      	movs	r3, #2
 80056ce:	f7ff fdfb 	bl	80052c8 <ftoa>
    strcat(buffer," ");
 80056d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa fd3a 	bl	8000150 <strlen>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e4:	4413      	add	r3, r2
 80056e6:	496a      	ldr	r1, [pc, #424]	; (8005890 <process_MPU+0x360>)
 80056e8:	461a      	mov	r2, r3
 80056ea:	460b      	mov	r3, r1
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 80056f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fa fd2b 	bl	8000150 <strlen>
 80056fa:	4603      	mov	r3, r0
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005706:	4863      	ldr	r0, [pc, #396]	; (8005894 <process_MPU+0x364>)
 8005708:	f7fe f85b 	bl	80037c2 <HAL_UART_Transmit>

    ftoa(Gyro_y, buffer, 2);
 800570c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800570e:	f7fa fe8b 	bl	8000428 <__aeabi_f2d>
 8005712:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005716:	2302      	movs	r3, #2
 8005718:	f7ff fdd6 	bl	80052c8 <ftoa>
    strcat(buffer," ");
 800571c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f7fa fd15 	bl	8000150 <strlen>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572e:	4413      	add	r3, r2
 8005730:	4957      	ldr	r1, [pc, #348]	; (8005890 <process_MPU+0x360>)
 8005732:	461a      	mov	r2, r3
 8005734:	460b      	mov	r3, r1
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 800573a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573e:	4618      	mov	r0, r3
 8005740:	f7fa fd06 	bl	8000150 <strlen>
 8005744:	4603      	mov	r3, r0
 8005746:	b29a      	uxth	r2, r3
 8005748:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800574c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005750:	4850      	ldr	r0, [pc, #320]	; (8005894 <process_MPU+0x364>)
 8005752:	f7fe f836 	bl	80037c2 <HAL_UART_Transmit>

    ftoa(Gyro_z, buffer, 2);
 8005756:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005758:	f7fa fe66 	bl	8000428 <__aeabi_f2d>
 800575c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005760:	2302      	movs	r3, #2
 8005762:	f7ff fdb1 	bl	80052c8 <ftoa>
    strcat(buffer," ");
 8005766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576a:	4618      	mov	r0, r3
 800576c:	f7fa fcf0 	bl	8000150 <strlen>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005778:	4413      	add	r3, r2
 800577a:	4945      	ldr	r1, [pc, #276]	; (8005890 <process_MPU+0x360>)
 800577c:	461a      	mov	r2, r3
 800577e:	460b      	mov	r3, r1
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fce1 	bl	8000150 <strlen>
 800578e:	4603      	mov	r3, r0
 8005790:	b29a      	uxth	r2, r3
 8005792:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800579a:	483e      	ldr	r0, [pc, #248]	; (8005894 <process_MPU+0x364>)
 800579c:	f7fe f811 	bl	80037c2 <HAL_UART_Transmit>

    ftoa(Acc_x, buffer, 2);
 80057a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80057a2:	f7fa fe41 	bl	8000428 <__aeabi_f2d>
 80057a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80057aa:	2302      	movs	r3, #2
 80057ac:	f7ff fd8c 	bl	80052c8 <ftoa>
    strcat(buffer," ");
 80057b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fa fccb 	bl	8000150 <strlen>
 80057ba:	4603      	mov	r3, r0
 80057bc:	461a      	mov	r2, r3
 80057be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c2:	4413      	add	r3, r2
 80057c4:	4932      	ldr	r1, [pc, #200]	; (8005890 <process_MPU+0x360>)
 80057c6:	461a      	mov	r2, r3
 80057c8:	460b      	mov	r3, r1
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 80057ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa fcbc 	bl	8000150 <strlen>
 80057d8:	4603      	mov	r3, r0
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80057e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057e4:	482b      	ldr	r0, [pc, #172]	; (8005894 <process_MPU+0x364>)
 80057e6:	f7fd ffec 	bl	80037c2 <HAL_UART_Transmit>

    ftoa(Acc_y, buffer, 2);
 80057ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80057ec:	f7fa fe1c 	bl	8000428 <__aeabi_f2d>
 80057f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80057f4:	2302      	movs	r3, #2
 80057f6:	f7ff fd67 	bl	80052c8 <ftoa>
    strcat(buffer," ");
 80057fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fa fca6 	bl	8000150 <strlen>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580c:	4413      	add	r3, r2
 800580e:	4920      	ldr	r1, [pc, #128]	; (8005890 <process_MPU+0x360>)
 8005810:	461a      	mov	r2, r3
 8005812:	460b      	mov	r3, r1
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581c:	4618      	mov	r0, r3
 800581e:	f7fa fc97 	bl	8000150 <strlen>
 8005822:	4603      	mov	r3, r0
 8005824:	b29a      	uxth	r2, r3
 8005826:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800582a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800582e:	4819      	ldr	r0, [pc, #100]	; (8005894 <process_MPU+0x364>)
 8005830:	f7fd ffc7 	bl	80037c2 <HAL_UART_Transmit>

    ftoa(Acc_z, buffer, 2);
 8005834:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005836:	f7fa fdf7 	bl	8000428 <__aeabi_f2d>
 800583a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800583e:	2302      	movs	r3, #2
 8005840:	f7ff fd42 	bl	80052c8 <ftoa>
    strcat(buffer,"\n");
 8005844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005848:	4618      	mov	r0, r3
 800584a:	f7fa fc81 	bl	8000150 <strlen>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005856:	4413      	add	r3, r2
 8005858:	490f      	ldr	r1, [pc, #60]	; (8005898 <process_MPU+0x368>)
 800585a:	461a      	mov	r2, r3
 800585c:	460b      	mov	r3, r1
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fc72 	bl	8000150 <strlen>
 800586c:	4603      	mov	r3, r0
 800586e:	b29a      	uxth	r2, r3
 8005870:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005878:	4806      	ldr	r0, [pc, #24]	; (8005894 <process_MPU+0x364>)
 800587a:	f7fd ffa2 	bl	80037c2 <HAL_UART_Transmit>
 800587e:	e00d      	b.n	800589c <process_MPU+0x36c>
 8005880:	66666666 	.word	0x66666666
 8005884:	40306666 	.word	0x40306666
 8005888:	200011dc 	.word	0x200011dc
 800588c:	20001234 	.word	0x20001234
 8005890:	08006ab0 	.word	0x08006ab0
 8005894:	200013a0 	.word	0x200013a0
 8005898:	08006ab4 	.word	0x08006ab4



	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 800589c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800589e:	f7fa fdc3 	bl	8000428 <__aeabi_f2d>
 80058a2:	4604      	mov	r4, r0
 80058a4:	460d      	mov	r5, r1
 80058a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80058a8:	f7fa fdbe 	bl	8000428 <__aeabi_f2d>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4620      	mov	r0, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	f000 fe8a 	bl	80065cc <atan2>
 80058b8:	a325      	add	r3, pc, #148	; (adr r3, 8005950 <process_MPU+0x420>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa fe0b 	bl	80004d8 <__aeabi_dmul>
 80058c2:	4603      	mov	r3, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	4618      	mov	r0, r3
 80058c8:	4621      	mov	r1, r4
 80058ca:	f7fb f8fd 	bl	8000ac8 <__aeabi_d2f>
 80058ce:	4603      	mov	r3, r0
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 80058d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fda5 	bl	8000428 <__aeabi_f2d>
 80058de:	4604      	mov	r4, r0
 80058e0:	460d      	mov	r5, r1
 80058e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80058e6:	f7fb fa4d 	bl	8000d84 <__aeabi_fmul>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461e      	mov	r6, r3
 80058ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80058f2:	f7fb fa47 	bl	8000d84 <__aeabi_fmul>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4619      	mov	r1, r3
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7fb f93a 	bl	8000b74 <__addsf3>
 8005900:	4603      	mov	r3, r0
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fd90 	bl	8000428 <__aeabi_f2d>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4610      	mov	r0, r2
 800590e:	4619      	mov	r1, r3
 8005910:	f000 fe5e 	bl	80065d0 <sqrt>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f7fa ff06 	bl	800072c <__aeabi_ddiv>
 8005920:	4603      	mov	r3, r0
 8005922:	460c      	mov	r4, r1
 8005924:	4618      	mov	r0, r3
 8005926:	4621      	mov	r1, r4
 8005928:	f000 fcc2 	bl	80062b0 <atan>
 800592c:	a308      	add	r3, pc, #32	; (adr r3, 8005950 <process_MPU+0x420>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fdd1 	bl	80004d8 <__aeabi_dmul>
 8005936:	4603      	mov	r3, r0
 8005938:	460c      	mov	r4, r1
 800593a:	4618      	mov	r0, r3
 800593c:	4621      	mov	r1, r4
 800593e:	f7fb f8c3 	bl	8000ac8 <__aeabi_d2f>
 8005942:	4603      	mov	r3, r0
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
//	 strcat(buffer,"\n");
//	 HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);

    //CDC_Transmit_FS((uint8_t *)buffer, sizeof(buffer));

}
 8005946:	bf00      	nop
 8005948:	3754      	adds	r7, #84	; 0x54
 800594a:	46bd      	mov	sp, r7
 800594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594e:	bf00      	nop
 8005950:	1a5d2372 	.word	0x1a5d2372
 8005954:	404ca5dc 	.word	0x404ca5dc

08005958 <readMagnet>:
void readMagnet(){
 8005958:	b5b0      	push	{r4, r5, r7, lr}
 800595a:	b092      	sub	sp, #72	; 0x48
 800595c:	af02      	add	r7, sp, #8
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,Mag_x,Mag_y,Mag_z,roll,pitch,yaw,roll_com;
		char buffer[7];
		char n[1] = "\n";
 800595e:	230a      	movs	r3, #10
 8005960:	f887 3020 	strb.w	r3, [r7, #32]

		uint8_t data[13];
		uint8_t mag_data[7];

		uint8_t status;
		uint8_t reg = ACCEL_XOUT_H;
 8005964:	233b      	movs	r3, #59	; 0x3b
 8005966:	71bb      	strb	r3, [r7, #6]
		uint8_t device_address = MPU_ADDRESS;
 8005968:	23d0      	movs	r3, #208	; 0xd0
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		uint8_t magnet_address = MAG_ADRRESS;
 800596e:	2318      	movs	r3, #24
 8005970:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8005974:	bf00      	nop
 8005976:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800597a:	b299      	uxth	r1, r3
 800597c:	1dba      	adds	r2, r7, #6
 800597e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2301      	movs	r3, #1
 8005986:	48ce      	ldr	r0, [pc, #824]	; (8005cc0 <readMagnet+0x368>)
 8005988:	f7fc f8ce 	bl	8001b28 <HAL_I2C_Master_Transmit>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f1      	bne.n	8005976 <readMagnet+0x1e>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8005992:	bf00      	nop
 8005994:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005998:	b299      	uxth	r1, r3
 800599a:	1dfa      	adds	r2, r7, #7
 800599c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	2301      	movs	r3, #1
 80059a4:	48c6      	ldr	r0, [pc, #792]	; (8005cc0 <readMagnet+0x368>)
 80059a6:	f7fc f9bd 	bl	8001d24 <HAL_I2C_Master_Receive>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f1      	bne.n	8005994 <readMagnet+0x3c>
	    if(status == 3){
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	f040 81f9 	bne.w	8005daa <readMagnet+0x452>
	    	reg = 0x03;
 80059b8:	2303      	movs	r3, #3
 80059ba:	71bb      	strb	r3, [r7, #6]
	    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 80059bc:	bf00      	nop
 80059be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059c2:	b299      	uxth	r1, r3
 80059c4:	1dba      	adds	r2, r7, #6
 80059c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2301      	movs	r3, #1
 80059ce:	48bc      	ldr	r0, [pc, #752]	; (8005cc0 <readMagnet+0x368>)
 80059d0:	f7fc f8aa 	bl	8001b28 <HAL_I2C_Master_Transmit>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f1      	bne.n	80059be <readMagnet+0x66>
	    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &mag_data,7, 1000) != HAL_OK);
 80059da:	bf00      	nop
 80059dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059e0:	b299      	uxth	r1, r3
 80059e2:	f107 0208 	add.w	r2, r7, #8
 80059e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	2307      	movs	r3, #7
 80059ee:	48b4      	ldr	r0, [pc, #720]	; (8005cc0 <readMagnet+0x368>)
 80059f0:	f7fc f998 	bl	8001d24 <HAL_I2C_Master_Receive>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <readMagnet+0x84>
	    	//if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
	    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 80059fa:	7a3b      	ldrb	r3, [r7, #8]
 80059fc:	b21a      	sxth	r2, r3
 80059fe:	7a7b      	ldrb	r3, [r7, #9]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	b21b      	sxth	r3, r3
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fb f967 	bl	8000cdc <__aeabi_i2f>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
	    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 8005a12:	7abb      	ldrb	r3, [r7, #10]
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	7afb      	ldrb	r3, [r7, #11]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	b21b      	sxth	r3, r3
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fb f95b 	bl	8000cdc <__aeabi_i2f>
 8005a26:	4603      	mov	r3, r0
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
	    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 8005a2a:	7b3b      	ldrb	r3, [r7, #12]
 8005a2c:	b21a      	sxth	r2, r3
 8005a2e:	7b7b      	ldrb	r3, [r7, #13]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	b21b      	sxth	r3, r3
 8005a34:	4313      	orrs	r3, r2
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fb f94f 	bl	8000cdc <__aeabi_i2f>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
	            if(magX_min < Mag_x && Mag_x < magX_max )
 8005a42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a44:	f7fa fcf0 	bl	8000428 <__aeabi_f2d>
 8005a48:	a381      	add	r3, pc, #516	; (adr r3, 8005c50 <readMagnet+0x2f8>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa ffd3 	bl	80009f8 <__aeabi_dcmpgt>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d033      	beq.n	8005ac0 <readMagnet+0x168>
 8005a58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a5a:	f7fa fce5 	bl	8000428 <__aeabi_f2d>
 8005a5e:	a37e      	add	r3, pc, #504	; (adr r3, 8005c58 <readMagnet+0x300>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f7fa ffaa 	bl	80009bc <__aeabi_dcmplt>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d028      	beq.n	8005ac0 <readMagnet+0x168>
	    		Mag_x = (Mag_x*asax*mRes  - mag_offet_x)*scale_x;
 8005a6e:	4b95      	ldr	r3, [pc, #596]	; (8005cc4 <readMagnet+0x36c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fb f985 	bl	8000d84 <__aeabi_fmul>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fa fcd3 	bl	8000428 <__aeabi_f2d>
 8005a82:	a377      	add	r3, pc, #476	; (adr r3, 8005c60 <readMagnet+0x308>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f7fa fd26 	bl	80004d8 <__aeabi_dmul>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	4618      	mov	r0, r3
 8005a92:	4621      	mov	r1, r4
 8005a94:	a374      	add	r3, pc, #464	; (adr r3, 8005c68 <readMagnet+0x310>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f7fa fb65 	bl	8000168 <__aeabi_dsub>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	a372      	add	r3, pc, #456	; (adr r3, 8005c70 <readMagnet+0x318>)
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f7fa fd14 	bl	80004d8 <__aeabi_dmul>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f7fb f806 	bl	8000ac8 <__aeabi_d2f>
 8005abc:	4603      	mov	r3, r0
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
	            if(magY_min < Mag_y && Mag_y < magY_max )
 8005ac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ac2:	f7fa fcb1 	bl	8000428 <__aeabi_f2d>
 8005ac6:	a36c      	add	r3, pc, #432	; (adr r3, 8005c78 <readMagnet+0x320>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d033      	beq.n	8005b3e <readMagnet+0x1e6>
 8005ad6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ad8:	f7fa fca6 	bl	8000428 <__aeabi_f2d>
 8005adc:	a368      	add	r3, pc, #416	; (adr r3, 8005c80 <readMagnet+0x328>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa ff6b 	bl	80009bc <__aeabi_dcmplt>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d028      	beq.n	8005b3e <readMagnet+0x1e6>
	    		Mag_y = (Mag_y*asay*mRes  - mag_offet_y)*scale_y;
 8005aec:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <readMagnet+0x370>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fb f946 	bl	8000d84 <__aeabi_fmul>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fa fc94 	bl	8000428 <__aeabi_f2d>
 8005b00:	a357      	add	r3, pc, #348	; (adr r3, 8005c60 <readMagnet+0x308>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fce7 	bl	80004d8 <__aeabi_dmul>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	4621      	mov	r1, r4
 8005b12:	a35d      	add	r3, pc, #372	; (adr r3, 8005c88 <readMagnet+0x330>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb26 	bl	8000168 <__aeabi_dsub>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4618      	mov	r0, r3
 8005b22:	4621      	mov	r1, r4
 8005b24:	a35a      	add	r3, pc, #360	; (adr r3, 8005c90 <readMagnet+0x338>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fcd5 	bl	80004d8 <__aeabi_dmul>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	4618      	mov	r0, r3
 8005b34:	4621      	mov	r1, r4
 8005b36:	f7fa ffc7 	bl	8000ac8 <__aeabi_d2f>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
	            if(magZ_min < Mag_z && Mag_z < magZ_max )
 8005b3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b40:	f7fa fc72 	bl	8000428 <__aeabi_f2d>
 8005b44:	a354      	add	r3, pc, #336	; (adr r3, 8005c98 <readMagnet+0x340>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa ff55 	bl	80009f8 <__aeabi_dcmpgt>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d033      	beq.n	8005bbc <readMagnet+0x264>
 8005b54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b56:	f7fa fc67 	bl	8000428 <__aeabi_f2d>
 8005b5a:	a351      	add	r3, pc, #324	; (adr r3, 8005ca0 <readMagnet+0x348>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f7fa ff2c 	bl	80009bc <__aeabi_dcmplt>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d028      	beq.n	8005bbc <readMagnet+0x264>
	    		Mag_z = (Mag_z*asaz*mRes  - mag_offet_z)*scale_z;
 8005b6a:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <readMagnet+0x374>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb f907 	bl	8000d84 <__aeabi_fmul>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fc55 	bl	8000428 <__aeabi_f2d>
 8005b7e:	a338      	add	r3, pc, #224	; (adr r3, 8005c60 <readMagnet+0x308>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa fca8 	bl	80004d8 <__aeabi_dmul>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	4621      	mov	r1, r4
 8005b90:	a345      	add	r3, pc, #276	; (adr r3, 8005ca8 <readMagnet+0x350>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fae9 	bl	800016c <__adddf3>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	a343      	add	r3, pc, #268	; (adr r3, 8005cb0 <readMagnet+0x358>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f7fa fc96 	bl	80004d8 <__aeabi_dmul>
 8005bac:	4603      	mov	r3, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	f7fa ff88 	bl	8000ac8 <__aeabi_d2f>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34

	            yaw = atan2(Mag_y,Mag_x)*RAD2DEC;
 8005bbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bbe:	f7fa fc33 	bl	8000428 <__aeabi_f2d>
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	460d      	mov	r5, r1
 8005bc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005bc8:	f7fa fc2e 	bl	8000428 <__aeabi_f2d>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	f000 fcfa 	bl	80065cc <atan2>
 8005bd8:	a337      	add	r3, pc, #220	; (adr r3, 8005cb8 <readMagnet+0x360>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fc7b 	bl	80004d8 <__aeabi_dmul>
 8005be2:	4603      	mov	r3, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	4618      	mov	r0, r3
 8005be8:	4621      	mov	r1, r4
 8005bea:	f7fa ff6d 	bl	8000ac8 <__aeabi_d2f>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	    ftoa(Mag_x, buffer, 2);
 8005bf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005bf4:	f7fa fc18 	bl	8000428 <__aeabi_f2d>
 8005bf8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	f7ff fb63 	bl	80052c8 <ftoa>
	    	    strcat(buffer," ");
 8005c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa faa2 	bl	8000150 <strlen>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c14:	4413      	add	r3, r2
 8005c16:	492e      	ldr	r1, [pc, #184]	; (8005cd0 <readMagnet+0x378>)
 8005c18:	461a      	mov	r2, r3
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	8013      	strh	r3, [r2, #0]
	    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fa fa93 	bl	8000150 <strlen>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c36:	4827      	ldr	r0, [pc, #156]	; (8005cd4 <readMagnet+0x37c>)
 8005c38:	f7fd fdc3 	bl	80037c2 <HAL_UART_Transmit>

	    	    ftoa(Mag_y, buffer, 2);
 8005c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c3e:	f7fa fbf3 	bl	8000428 <__aeabi_f2d>
 8005c42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c46:	2302      	movs	r3, #2
 8005c48:	e046      	b.n	8005cd8 <readMagnet+0x380>
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	cccccccd 	.word	0xcccccccd
 8005c54:	c06bfccc 	.word	0xc06bfccc
 8005c58:	70a3d70a 	.word	0x70a3d70a
 8005c5c:	4084543d 	.word	0x4084543d
 8005c60:	d7fd88a7 	.word	0xd7fd88a7
 8005c64:	3ff7fd7f 	.word	0x3ff7fd7f
 8005c68:	7ae147ae 	.word	0x7ae147ae
 8005c6c:	406aaa14 	.word	0x406aaa14
 8005c70:	ca341083 	.word	0xca341083
 8005c74:	3fd42acf 	.word	0x3fd42acf
 8005c78:	ae147ae1 	.word	0xae147ae1
 8005c7c:	c059d147 	.word	0xc059d147
 8005c80:	28f5c28f 	.word	0x28f5c28f
 8005c84:	40845d5c 	.word	0x40845d5c
 8005c88:	cccccccd 	.word	0xcccccccd
 8005c8c:	4072dccc 	.word	0x4072dccc
 8005c90:	503dbf48 	.word	0x503dbf48
 8005c94:	3fd37c22 	.word	0x3fd37c22
 8005c98:	28f5c28f 	.word	0x28f5c28f
 8005c9c:	c0814f5c 	.word	0xc0814f5c
 8005ca0:	1eb851ec 	.word	0x1eb851ec
 8005ca4:	40410b85 	.word	0x40410b85
 8005ca8:	cccccccd 	.word	0xcccccccd
 8005cac:	4074b4cc 	.word	0x4074b4cc
 8005cb0:	d0605c0c 	.word	0xd0605c0c
 8005cb4:	bfd281ea 	.word	0xbfd281ea
 8005cb8:	1a5d2372 	.word	0x1a5d2372
 8005cbc:	404ca5dc 	.word	0x404ca5dc
 8005cc0:	200011dc 	.word	0x200011dc
 8005cc4:	2000140c 	.word	0x2000140c
 8005cc8:	200013f4 	.word	0x200013f4
 8005ccc:	20001408 	.word	0x20001408
 8005cd0:	08006ab0 	.word	0x08006ab0
 8005cd4:	200013a0 	.word	0x200013a0
 8005cd8:	f7ff faf6 	bl	80052c8 <ftoa>
	    	    strcat(buffer," ");
 8005cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fa fa35 	bl	8000150 <strlen>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cee:	4413      	add	r3, r2
 8005cf0:	4940      	ldr	r1, [pc, #256]	; (8005df4 <readMagnet+0x49c>)
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	8013      	strh	r3, [r2, #0]
	    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fa26 	bl	8000150 <strlen>
 8005d04:	4603      	mov	r3, r0
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d10:	4839      	ldr	r0, [pc, #228]	; (8005df8 <readMagnet+0x4a0>)
 8005d12:	f7fd fd56 	bl	80037c2 <HAL_UART_Transmit>

	    	    ftoa(Mag_z, buffer, 2);
 8005d16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d18:	f7fa fb86 	bl	8000428 <__aeabi_f2d>
 8005d1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d20:	2302      	movs	r3, #2
 8005d22:	f7ff fad1 	bl	80052c8 <ftoa>
	    	    strcat(buffer," ");
 8005d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fa fa10 	bl	8000150 <strlen>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d38:	4413      	add	r3, r2
 8005d3a:	492e      	ldr	r1, [pc, #184]	; (8005df4 <readMagnet+0x49c>)
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	460b      	mov	r3, r1
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	8013      	strh	r3, [r2, #0]
	    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fa fa01 	bl	8000150 <strlen>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d5a:	4827      	ldr	r0, [pc, #156]	; (8005df8 <readMagnet+0x4a0>)
 8005d5c:	f7fd fd31 	bl	80037c2 <HAL_UART_Transmit>

	    	    ftoa(yaw , buffer, 2);
 8005d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d62:	f7fa fb61 	bl	8000428 <__aeabi_f2d>
 8005d66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	f7ff faac 	bl	80052c8 <ftoa>
	    	    strcat(buffer,"\n");
 8005d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fa f9eb 	bl	8000150 <strlen>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d82:	4413      	add	r3, r2
 8005d84:	491d      	ldr	r1, [pc, #116]	; (8005dfc <readMagnet+0x4a4>)
 8005d86:	461a      	mov	r2, r3
 8005d88:	460b      	mov	r3, r1
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	8013      	strh	r3, [r2, #0]
	    	    HAL_UART_Transmit(&huart2,buffer, strlen(buffer),1000);
 8005d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa f9dc 	bl	8000150 <strlen>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005da4:	4814      	ldr	r0, [pc, #80]	; (8005df8 <readMagnet+0x4a0>)
 8005da6:	f7fd fd0c 	bl	80037c2 <HAL_UART_Transmit>

	    	}
	    	reg = 0x02;
 8005daa:	2302      	movs	r3, #2
 8005dac:	71bb      	strb	r3, [r7, #6]
	    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8005dae:	bf00      	nop
 8005db0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005db4:	b299      	uxth	r1, r3
 8005db6:	1dba      	adds	r2, r7, #6
 8005db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	480f      	ldr	r0, [pc, #60]	; (8005e00 <readMagnet+0x4a8>)
 8005dc2:	f7fb feb1 	bl	8001b28 <HAL_I2C_Master_Transmit>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f1      	bne.n	8005db0 <readMagnet+0x458>
	    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8005dcc:	bf00      	nop
 8005dce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005dd2:	b299      	uxth	r1, r3
 8005dd4:	1dfa      	adds	r2, r7, #7
 8005dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4808      	ldr	r0, [pc, #32]	; (8005e00 <readMagnet+0x4a8>)
 8005de0:	f7fb ffa0 	bl	8001d24 <HAL_I2C_Master_Receive>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f1      	bne.n	8005dce <readMagnet+0x476>
	   // }
}
 8005dea:	bf00      	nop
 8005dec:	3740      	adds	r7, #64	; 0x40
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bdb0      	pop	{r4, r5, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	08006ab0 	.word	0x08006ab0
 8005df8:	200013a0 	.word	0x200013a0
 8005dfc:	08006ab4 	.word	0x08006ab4
 8005e00:	200011dc 	.word	0x200011dc

08005e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e0a:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <HAL_MspInit+0x68>)
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_MspInit+0x68>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6193      	str	r3, [r2, #24]
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <HAL_MspInit+0x68>)
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_MspInit+0x68>)
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <HAL_MspInit+0x68>)
 8005e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	61d3      	str	r3, [r2, #28]
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <HAL_MspInit+0x68>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	f06f 0001 	mvn.w	r0, #1
 8005e42:	f7fb f9d6 	bl	80011f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_MspInit+0x6c>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <HAL_MspInit+0x6c>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	40010000 	.word	0x40010000

08005e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <HAL_I2C_MspInit+0x90>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d132      	bne.n	8005efa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e94:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <HAL_I2C_MspInit+0x94>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_I2C_MspInit+0x94>)
 8005e9a:	f043 0308 	orr.w	r3, r3, #8
 8005e9e:	6193      	str	r3, [r2, #24]
 8005ea0:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <HAL_I2C_MspInit+0x94>)
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005eac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005eb2:	2312      	movs	r3, #18
 8005eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eba:	f107 0314 	add.w	r3, r7, #20
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4812      	ldr	r0, [pc, #72]	; (8005f0c <HAL_I2C_MspInit+0x98>)
 8005ec2:	f7fb fb97 	bl	80015f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <HAL_I2C_MspInit+0x9c>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <HAL_I2C_MspInit+0x9c>)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ee2:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <HAL_I2C_MspInit+0x94>)
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <HAL_I2C_MspInit+0x94>)
 8005ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eec:	61d3      	str	r3, [r2, #28]
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <HAL_I2C_MspInit+0x94>)
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005efa:	bf00      	nop
 8005efc:	3728      	adds	r7, #40	; 0x28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40005400 	.word	0x40005400
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40010c00 	.word	0x40010c00
 8005f10:	40010000 	.word	0x40010000

08005f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <HAL_TIM_Base_MspInit+0x44>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005f26:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <HAL_TIM_Base_MspInit+0x48>)
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <HAL_TIM_Base_MspInit+0x48>)
 8005f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f30:	6193      	str	r3, [r2, #24]
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_TIM_Base_MspInit+0x48>)
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2105      	movs	r1, #5
 8005f42:	2019      	movs	r0, #25
 8005f44:	f7fb f955 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005f48:	2019      	movs	r0, #25
 8005f4a:	f7fb f96e 	bl	800122a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40021000 	.word	0x40021000

08005f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	; 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f68:	f107 0318 	add.w	r3, r7, #24
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4f      	ldr	r2, [pc, #316]	; (80060b8 <HAL_UART_MspInit+0x158>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d159      	bne.n	8006034 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f80:	4b4e      	ldr	r3, [pc, #312]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	4a4d      	ldr	r2, [pc, #308]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8005f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f8a:	6193      	str	r3, [r2, #24]
 8005f8c:	4b4b      	ldr	r3, [pc, #300]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f98:	4b48      	ldr	r3, [pc, #288]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	4a47      	ldr	r2, [pc, #284]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	6193      	str	r3, [r2, #24]
 8005fa4:	4b45      	ldr	r3, [pc, #276]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fbe:	f107 0318 	add.w	r3, r7, #24
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	483e      	ldr	r0, [pc, #248]	; (80060c0 <HAL_UART_MspInit+0x160>)
 8005fc6:	f7fb fb15 	bl	80015f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd8:	f107 0318 	add.w	r3, r7, #24
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4838      	ldr	r0, [pc, #224]	; (80060c0 <HAL_UART_MspInit+0x160>)
 8005fe0:	f7fb fb08 	bl	80015f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005fe4:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8005fe6:	4a38      	ldr	r2, [pc, #224]	; (80060c8 <HAL_UART_MspInit+0x168>)
 8005fe8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ff0:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ff6:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8005ff8:	2280      	movs	r2, #128	; 0x80
 8005ffa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ffc:	4b31      	ldr	r3, [pc, #196]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006002:	4b30      	ldr	r3, [pc, #192]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8006004:	2200      	movs	r2, #0
 8006006:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006008:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <HAL_UART_MspInit+0x164>)
 800600a:	2200      	movs	r2, #0
 800600c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800600e:	4b2d      	ldr	r3, [pc, #180]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8006010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006014:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006016:	482b      	ldr	r0, [pc, #172]	; (80060c4 <HAL_UART_MspInit+0x164>)
 8006018:	f7fb f916 	bl	8001248 <HAL_DMA_Init>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8006022:	f7ff f948 	bl	80052b6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <HAL_UART_MspInit+0x164>)
 800602a:	635a      	str	r2, [r3, #52]	; 0x34
 800602c:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <HAL_UART_MspInit+0x164>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006032:	e03c      	b.n	80060ae <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_UART_MspInit+0x16c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d137      	bne.n	80060ae <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800603e:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8006044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006048:	61d3      	str	r3, [r2, #28]
 800604a:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <HAL_UART_MspInit+0x15c>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_UART_MspInit+0x15c>)
 800605c:	f043 0304 	orr.w	r3, r3, #4
 8006060:	6193      	str	r3, [r2, #24]
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <HAL_UART_MspInit+0x15c>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800606e:	2304      	movs	r3, #4
 8006070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006072:	2302      	movs	r3, #2
 8006074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006076:	2303      	movs	r3, #3
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4619      	mov	r1, r3
 8006080:	480f      	ldr	r0, [pc, #60]	; (80060c0 <HAL_UART_MspInit+0x160>)
 8006082:	f7fb fab7 	bl	80015f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006086:	2308      	movs	r3, #8
 8006088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006092:	f107 0318 	add.w	r3, r7, #24
 8006096:	4619      	mov	r1, r3
 8006098:	4809      	ldr	r0, [pc, #36]	; (80060c0 <HAL_UART_MspInit+0x160>)
 800609a:	f7fb faab 	bl	80015f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800609e:	2200      	movs	r2, #0
 80060a0:	2105      	movs	r1, #5
 80060a2:	2026      	movs	r0, #38	; 0x26
 80060a4:	f7fb f8a5 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80060a8:	2026      	movs	r0, #38	; 0x26
 80060aa:	f7fb f8be 	bl	800122a <HAL_NVIC_EnableIRQ>
}
 80060ae:	bf00      	nop
 80060b0:	3728      	adds	r7, #40	; 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40013800 	.word	0x40013800
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40010800 	.word	0x40010800
 80060c4:	20001268 	.word	0x20001268
 80060c8:	40020058 	.word	0x40020058
 80060cc:	40004400 	.word	0x40004400

080060d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	; 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80060e0:	2200      	movs	r2, #0
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	201c      	movs	r0, #28
 80060e6:	f7fb f884 	bl	80011f2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80060ea:	201c      	movs	r0, #28
 80060ec:	f7fb f89d 	bl	800122a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80060f0:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <HAL_InitTick+0xa0>)
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <HAL_InitTick+0xa0>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	61d3      	str	r3, [r2, #28]
 80060fc:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <HAL_InitTick+0xa0>)
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006108:	f107 0210 	add.w	r2, r7, #16
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f7fc ff3a 	bl	8002f8c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fc ff10 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 800611c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	4a14      	ldr	r2, [pc, #80]	; (8006174 <HAL_InitTick+0xa4>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	0c9b      	lsrs	r3, r3, #18
 8006128:	3b01      	subs	r3, #1
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800612c:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_InitTick+0xa8>)
 800612e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006132:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8006134:	4b10      	ldr	r3, [pc, #64]	; (8006178 <HAL_InitTick+0xa8>)
 8006136:	f240 32e7 	movw	r2, #999	; 0x3e7
 800613a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800613c:	4a0e      	ldr	r2, [pc, #56]	; (8006178 <HAL_InitTick+0xa8>)
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_InitTick+0xa8>)
 8006144:	2200      	movs	r2, #0
 8006146:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_InitTick+0xa8>)
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800614e:	480a      	ldr	r0, [pc, #40]	; (8006178 <HAL_InitTick+0xa8>)
 8006150:	f7fc ff6a 	bl	8003028 <HAL_TIM_Base_Init>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800615a:	4807      	ldr	r0, [pc, #28]	; (8006178 <HAL_InitTick+0xa8>)
 800615c:	f7fc ff8f 	bl	800307e <HAL_TIM_Base_Start_IT>
 8006160:	4603      	mov	r3, r0
 8006162:	e000      	b.n	8006166 <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
}
 8006166:	4618      	mov	r0, r3
 8006168:	3730      	adds	r7, #48	; 0x30
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	431bde83 	.word	0x431bde83
 8006178:	20001410 	.word	0x20001410

0800617c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006180:	bf00      	nop
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800618c:	e7fe      	b.n	800618c <HardFault_Handler+0x4>

0800618e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800618e:	b480      	push	{r7}
 8006190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006192:	e7fe      	b.n	8006192 <MemManage_Handler+0x4>

08006194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006198:	e7fe      	b.n	8006198 <BusFault_Handler+0x4>

0800619a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800619a:	b480      	push	{r7}
 800619c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800619e:	e7fe      	b.n	800619e <UsageFault_Handler+0x4>

080061a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80061b0:	4802      	ldr	r0, [pc, #8]	; (80061bc <DMA1_Channel5_IRQHandler+0x10>)
 80061b2:	f7fb f919 	bl	80013e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20001268 	.word	0x20001268

080061c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80061c4:	4802      	ldr	r0, [pc, #8]	; (80061d0 <TIM1_UP_IRQHandler+0x10>)
 80061c6:	f7fc ff7d 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200012f8 	.word	0x200012f8

080061d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80061d8:	4802      	ldr	r0, [pc, #8]	; (80061e4 <TIM2_IRQHandler+0x10>)
 80061da:	f7fc ff73 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20001410 	.word	0x20001410

080061e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061ec:	4802      	ldr	r0, [pc, #8]	; (80061f8 <USART2_IRQHandler+0x10>)
 80061ee:	f7fd fb81 	bl	80038f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200013a0 	.word	0x200013a0

080061fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006200:	4b15      	ldr	r3, [pc, #84]	; (8006258 <SystemInit+0x5c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a14      	ldr	r2, [pc, #80]	; (8006258 <SystemInit+0x5c>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <SystemInit+0x5c>)
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4911      	ldr	r1, [pc, #68]	; (8006258 <SystemInit+0x5c>)
 8006212:	4b12      	ldr	r3, [pc, #72]	; (800625c <SystemInit+0x60>)
 8006214:	4013      	ands	r3, r2
 8006216:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <SystemInit+0x5c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <SystemInit+0x5c>)
 800621e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006226:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <SystemInit+0x5c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a0a      	ldr	r2, [pc, #40]	; (8006258 <SystemInit+0x5c>)
 800622e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006232:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006234:	4b08      	ldr	r3, [pc, #32]	; (8006258 <SystemInit+0x5c>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a07      	ldr	r2, [pc, #28]	; (8006258 <SystemInit+0x5c>)
 800623a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800623e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <SystemInit+0x5c>)
 8006242:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006246:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <SystemInit+0x64>)
 800624a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800624e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	40021000 	.word	0x40021000
 800625c:	f8ff0000 	.word	0xf8ff0000
 8006260:	e000ed00 	.word	0xe000ed00

08006264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006264:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006266:	e003      	b.n	8006270 <LoopCopyDataInit>

08006268 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800626a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800626c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800626e:	3104      	adds	r1, #4

08006270 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006270:	480a      	ldr	r0, [pc, #40]	; (800629c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006274:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006276:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006278:	d3f6      	bcc.n	8006268 <CopyDataInit>
  ldr r2, =_sbss
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800627c:	e002      	b.n	8006284 <LoopFillZerobss>

0800627e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800627e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006280:	f842 3b04 	str.w	r3, [r2], #4

08006284 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006286:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006288:	d3f9      	bcc.n	800627e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800628a:	f7ff ffb7 	bl	80061fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800628e:	f000 fb85 	bl	800699c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006292:	f7fe fe17 	bl	8004ec4 <main>
  bx lr
 8006296:	4770      	bx	lr
  ldr r3, =_sidata
 8006298:	08006b78 	.word	0x08006b78
  ldr r0, =_sdata
 800629c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80062a0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80062a4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80062a8:	20001450 	.word	0x20001450

080062ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062ac:	e7fe      	b.n	80062ac <ADC1_2_IRQHandler>
	...

080062b0 <atan>:
 80062b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	4bb6      	ldr	r3, [pc, #728]	; (8006590 <atan+0x2e0>)
 80062b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80062ba:	429e      	cmp	r6, r3
 80062bc:	4604      	mov	r4, r0
 80062be:	460d      	mov	r5, r1
 80062c0:	468b      	mov	fp, r1
 80062c2:	dd17      	ble.n	80062f4 <atan+0x44>
 80062c4:	4bb3      	ldr	r3, [pc, #716]	; (8006594 <atan+0x2e4>)
 80062c6:	429e      	cmp	r6, r3
 80062c8:	dc01      	bgt.n	80062ce <atan+0x1e>
 80062ca:	d109      	bne.n	80062e0 <atan+0x30>
 80062cc:	b140      	cbz	r0, 80062e0 <atan+0x30>
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7f9 ff49 	bl	800016c <__adddf3>
 80062da:	4604      	mov	r4, r0
 80062dc:	460d      	mov	r5, r1
 80062de:	e005      	b.n	80062ec <atan+0x3c>
 80062e0:	f1bb 0f00 	cmp.w	fp, #0
 80062e4:	4cac      	ldr	r4, [pc, #688]	; (8006598 <atan+0x2e8>)
 80062e6:	f340 8121 	ble.w	800652c <atan+0x27c>
 80062ea:	4dac      	ldr	r5, [pc, #688]	; (800659c <atan+0x2ec>)
 80062ec:	4620      	mov	r0, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f4:	4baa      	ldr	r3, [pc, #680]	; (80065a0 <atan+0x2f0>)
 80062f6:	429e      	cmp	r6, r3
 80062f8:	dc11      	bgt.n	800631e <atan+0x6e>
 80062fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80062fe:	429e      	cmp	r6, r3
 8006300:	dc0a      	bgt.n	8006318 <atan+0x68>
 8006302:	a38b      	add	r3, pc, #556	; (adr r3, 8006530 <atan+0x280>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7f9 ff30 	bl	800016c <__adddf3>
 800630c:	2200      	movs	r2, #0
 800630e:	4ba5      	ldr	r3, [pc, #660]	; (80065a4 <atan+0x2f4>)
 8006310:	f7fa fb72 	bl	80009f8 <__aeabi_dcmpgt>
 8006314:	2800      	cmp	r0, #0
 8006316:	d1e9      	bne.n	80062ec <atan+0x3c>
 8006318:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800631c:	e027      	b.n	800636e <atan+0xbe>
 800631e:	f000 f951 	bl	80065c4 <fabs>
 8006322:	4ba1      	ldr	r3, [pc, #644]	; (80065a8 <atan+0x2f8>)
 8006324:	4604      	mov	r4, r0
 8006326:	429e      	cmp	r6, r3
 8006328:	460d      	mov	r5, r1
 800632a:	f300 80b8 	bgt.w	800649e <atan+0x1ee>
 800632e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006332:	429e      	cmp	r6, r3
 8006334:	f300 809c 	bgt.w	8006470 <atan+0x1c0>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	f7f9 ff16 	bl	800016c <__adddf3>
 8006340:	2200      	movs	r2, #0
 8006342:	4b98      	ldr	r3, [pc, #608]	; (80065a4 <atan+0x2f4>)
 8006344:	f7f9 ff10 	bl	8000168 <__aeabi_dsub>
 8006348:	2200      	movs	r2, #0
 800634a:	4606      	mov	r6, r0
 800634c:	460f      	mov	r7, r1
 800634e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006352:	4620      	mov	r0, r4
 8006354:	4629      	mov	r1, r5
 8006356:	f7f9 ff09 	bl	800016c <__adddf3>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa f9e3 	bl	800072c <__aeabi_ddiv>
 8006366:	f04f 0a00 	mov.w	sl, #0
 800636a:	4604      	mov	r4, r0
 800636c:	460d      	mov	r5, r1
 800636e:	4622      	mov	r2, r4
 8006370:	462b      	mov	r3, r5
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	f7fa f8af 	bl	80004d8 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4680      	mov	r8, r0
 8006380:	4689      	mov	r9, r1
 8006382:	f7fa f8a9 	bl	80004d8 <__aeabi_dmul>
 8006386:	a36c      	add	r3, pc, #432	; (adr r3, 8006538 <atan+0x288>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	f7fa f8a2 	bl	80004d8 <__aeabi_dmul>
 8006394:	a36a      	add	r3, pc, #424	; (adr r3, 8006540 <atan+0x290>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	f7f9 fee7 	bl	800016c <__adddf3>
 800639e:	4632      	mov	r2, r6
 80063a0:	463b      	mov	r3, r7
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	a368      	add	r3, pc, #416	; (adr r3, 8006548 <atan+0x298>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7f9 fede 	bl	800016c <__adddf3>
 80063b0:	4632      	mov	r2, r6
 80063b2:	463b      	mov	r3, r7
 80063b4:	f7fa f890 	bl	80004d8 <__aeabi_dmul>
 80063b8:	a365      	add	r3, pc, #404	; (adr r3, 8006550 <atan+0x2a0>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7f9 fed5 	bl	800016c <__adddf3>
 80063c2:	4632      	mov	r2, r6
 80063c4:	463b      	mov	r3, r7
 80063c6:	f7fa f887 	bl	80004d8 <__aeabi_dmul>
 80063ca:	a363      	add	r3, pc, #396	; (adr r3, 8006558 <atan+0x2a8>)
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f7f9 fecc 	bl	800016c <__adddf3>
 80063d4:	4632      	mov	r2, r6
 80063d6:	463b      	mov	r3, r7
 80063d8:	f7fa f87e 	bl	80004d8 <__aeabi_dmul>
 80063dc:	a360      	add	r3, pc, #384	; (adr r3, 8006560 <atan+0x2b0>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f7f9 fec3 	bl	800016c <__adddf3>
 80063e6:	4642      	mov	r2, r8
 80063e8:	464b      	mov	r3, r9
 80063ea:	f7fa f875 	bl	80004d8 <__aeabi_dmul>
 80063ee:	a35e      	add	r3, pc, #376	; (adr r3, 8006568 <atan+0x2b8>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	4680      	mov	r8, r0
 80063f6:	4689      	mov	r9, r1
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7fa f86c 	bl	80004d8 <__aeabi_dmul>
 8006400:	a35b      	add	r3, pc, #364	; (adr r3, 8006570 <atan+0x2c0>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f7f9 feaf 	bl	8000168 <__aeabi_dsub>
 800640a:	4632      	mov	r2, r6
 800640c:	463b      	mov	r3, r7
 800640e:	f7fa f863 	bl	80004d8 <__aeabi_dmul>
 8006412:	a359      	add	r3, pc, #356	; (adr r3, 8006578 <atan+0x2c8>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f7f9 fea6 	bl	8000168 <__aeabi_dsub>
 800641c:	4632      	mov	r2, r6
 800641e:	463b      	mov	r3, r7
 8006420:	f7fa f85a 	bl	80004d8 <__aeabi_dmul>
 8006424:	a356      	add	r3, pc, #344	; (adr r3, 8006580 <atan+0x2d0>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7f9 fe9d 	bl	8000168 <__aeabi_dsub>
 800642e:	4632      	mov	r2, r6
 8006430:	463b      	mov	r3, r7
 8006432:	f7fa f851 	bl	80004d8 <__aeabi_dmul>
 8006436:	a354      	add	r3, pc, #336	; (adr r3, 8006588 <atan+0x2d8>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7f9 fe94 	bl	8000168 <__aeabi_dsub>
 8006440:	4632      	mov	r2, r6
 8006442:	463b      	mov	r3, r7
 8006444:	f7fa f848 	bl	80004d8 <__aeabi_dmul>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4640      	mov	r0, r8
 800644e:	4649      	mov	r1, r9
 8006450:	f7f9 fe8c 	bl	800016c <__adddf3>
 8006454:	4622      	mov	r2, r4
 8006456:	462b      	mov	r3, r5
 8006458:	f7fa f83e 	bl	80004d8 <__aeabi_dmul>
 800645c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	d144      	bne.n	80064f0 <atan+0x240>
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7f9 fe7d 	bl	8000168 <__aeabi_dsub>
 800646e:	e734      	b.n	80062da <atan+0x2a>
 8006470:	2200      	movs	r2, #0
 8006472:	4b4c      	ldr	r3, [pc, #304]	; (80065a4 <atan+0x2f4>)
 8006474:	f7f9 fe78 	bl	8000168 <__aeabi_dsub>
 8006478:	2200      	movs	r2, #0
 800647a:	4606      	mov	r6, r0
 800647c:	460f      	mov	r7, r1
 800647e:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <atan+0x2f4>)
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7f9 fe72 	bl	800016c <__adddf3>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7fa f94c 	bl	800072c <__aeabi_ddiv>
 8006494:	f04f 0a01 	mov.w	sl, #1
 8006498:	4604      	mov	r4, r0
 800649a:	460d      	mov	r5, r1
 800649c:	e767      	b.n	800636e <atan+0xbe>
 800649e:	4b43      	ldr	r3, [pc, #268]	; (80065ac <atan+0x2fc>)
 80064a0:	429e      	cmp	r6, r3
 80064a2:	dc1a      	bgt.n	80064da <atan+0x22a>
 80064a4:	2200      	movs	r2, #0
 80064a6:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <atan+0x300>)
 80064a8:	f7f9 fe5e 	bl	8000168 <__aeabi_dsub>
 80064ac:	2200      	movs	r2, #0
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	4b3f      	ldr	r3, [pc, #252]	; (80065b0 <atan+0x300>)
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7fa f80e 	bl	80004d8 <__aeabi_dmul>
 80064bc:	2200      	movs	r2, #0
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <atan+0x2f4>)
 80064c0:	f7f9 fe54 	bl	800016c <__adddf3>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7fa f92e 	bl	800072c <__aeabi_ddiv>
 80064d0:	f04f 0a02 	mov.w	sl, #2
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	e749      	b.n	800636e <atan+0xbe>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	2000      	movs	r0, #0
 80064e0:	4934      	ldr	r1, [pc, #208]	; (80065b4 <atan+0x304>)
 80064e2:	f7fa f923 	bl	800072c <__aeabi_ddiv>
 80064e6:	f04f 0a03 	mov.w	sl, #3
 80064ea:	4604      	mov	r4, r0
 80064ec:	460d      	mov	r5, r1
 80064ee:	e73e      	b.n	800636e <atan+0xbe>
 80064f0:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <atan+0x308>)
 80064f2:	4e32      	ldr	r6, [pc, #200]	; (80065bc <atan+0x30c>)
 80064f4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80064f8:	4456      	add	r6, sl
 80064fa:	449a      	add	sl, r3
 80064fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006500:	f7f9 fe32 	bl	8000168 <__aeabi_dsub>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	f7f9 fe2e 	bl	8000168 <__aeabi_dsub>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006514:	f7f9 fe28 	bl	8000168 <__aeabi_dsub>
 8006518:	f1bb 0f00 	cmp.w	fp, #0
 800651c:	4604      	mov	r4, r0
 800651e:	460d      	mov	r5, r1
 8006520:	f6bf aee4 	bge.w	80062ec <atan+0x3c>
 8006524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006528:	461d      	mov	r5, r3
 800652a:	e6df      	b.n	80062ec <atan+0x3c>
 800652c:	4d24      	ldr	r5, [pc, #144]	; (80065c0 <atan+0x310>)
 800652e:	e6dd      	b.n	80062ec <atan+0x3c>
 8006530:	8800759c 	.word	0x8800759c
 8006534:	7e37e43c 	.word	0x7e37e43c
 8006538:	e322da11 	.word	0xe322da11
 800653c:	3f90ad3a 	.word	0x3f90ad3a
 8006540:	24760deb 	.word	0x24760deb
 8006544:	3fa97b4b 	.word	0x3fa97b4b
 8006548:	a0d03d51 	.word	0xa0d03d51
 800654c:	3fb10d66 	.word	0x3fb10d66
 8006550:	c54c206e 	.word	0xc54c206e
 8006554:	3fb745cd 	.word	0x3fb745cd
 8006558:	920083ff 	.word	0x920083ff
 800655c:	3fc24924 	.word	0x3fc24924
 8006560:	5555550d 	.word	0x5555550d
 8006564:	3fd55555 	.word	0x3fd55555
 8006568:	2c6a6c2f 	.word	0x2c6a6c2f
 800656c:	bfa2b444 	.word	0xbfa2b444
 8006570:	52defd9a 	.word	0x52defd9a
 8006574:	3fadde2d 	.word	0x3fadde2d
 8006578:	af749a6d 	.word	0xaf749a6d
 800657c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006580:	fe231671 	.word	0xfe231671
 8006584:	3fbc71c6 	.word	0x3fbc71c6
 8006588:	9998ebc4 	.word	0x9998ebc4
 800658c:	3fc99999 	.word	0x3fc99999
 8006590:	440fffff 	.word	0x440fffff
 8006594:	7ff00000 	.word	0x7ff00000
 8006598:	54442d18 	.word	0x54442d18
 800659c:	3ff921fb 	.word	0x3ff921fb
 80065a0:	3fdbffff 	.word	0x3fdbffff
 80065a4:	3ff00000 	.word	0x3ff00000
 80065a8:	3ff2ffff 	.word	0x3ff2ffff
 80065ac:	40037fff 	.word	0x40037fff
 80065b0:	3ff80000 	.word	0x3ff80000
 80065b4:	bff00000 	.word	0xbff00000
 80065b8:	08006b48 	.word	0x08006b48
 80065bc:	08006b28 	.word	0x08006b28
 80065c0:	bff921fb 	.word	0xbff921fb

080065c4 <fabs>:
 80065c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065c8:	4619      	mov	r1, r3
 80065ca:	4770      	bx	lr

080065cc <atan2>:
 80065cc:	f000 b854 	b.w	8006678 <__ieee754_atan2>

080065d0 <sqrt>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	b08b      	sub	sp, #44	; 0x2c
 80065d6:	4604      	mov	r4, r0
 80065d8:	460d      	mov	r5, r1
 80065da:	f000 f92b 	bl	8006834 <__ieee754_sqrt>
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <sqrt+0xa0>)
 80065e0:	4680      	mov	r8, r0
 80065e2:	f993 a000 	ldrsb.w	sl, [r3]
 80065e6:	4689      	mov	r9, r1
 80065e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80065ec:	d02b      	beq.n	8006646 <sqrt+0x76>
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f7fa fa09 	bl	8000a0c <__aeabi_dcmpun>
 80065fa:	4683      	mov	fp, r0
 80065fc:	bb18      	cbnz	r0, 8006646 <sqrt+0x76>
 80065fe:	2600      	movs	r6, #0
 8006600:	2700      	movs	r7, #0
 8006602:	4632      	mov	r2, r6
 8006604:	463b      	mov	r3, r7
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7fa f9d7 	bl	80009bc <__aeabi_dcmplt>
 800660e:	b1d0      	cbz	r0, 8006646 <sqrt+0x76>
 8006610:	2301      	movs	r3, #1
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <sqrt+0xa4>)
 8006616:	f8cd b020 	str.w	fp, [sp, #32]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006620:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006624:	f1ba 0f00 	cmp.w	sl, #0
 8006628:	d112      	bne.n	8006650 <sqrt+0x80>
 800662a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800662e:	4668      	mov	r0, sp
 8006630:	f000 f9ac 	bl	800698c <matherr>
 8006634:	b1b8      	cbz	r0, 8006666 <sqrt+0x96>
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	b11b      	cbz	r3, 8006642 <sqrt+0x72>
 800663a:	f000 f9a9 	bl	8006990 <__errno>
 800663e:	9b08      	ldr	r3, [sp, #32]
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	b00b      	add	sp, #44	; 0x2c
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	4632      	mov	r2, r6
 8006652:	463b      	mov	r3, r7
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7fa f868 	bl	800072c <__aeabi_ddiv>
 800665c:	f1ba 0f02 	cmp.w	sl, #2
 8006660:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006664:	d1e3      	bne.n	800662e <sqrt+0x5e>
 8006666:	f000 f993 	bl	8006990 <__errno>
 800666a:	2321      	movs	r3, #33	; 0x21
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	e7e2      	b.n	8006636 <sqrt+0x66>
 8006670:	20000010 	.word	0x20000010
 8006674:	08006b68 	.word	0x08006b68

08006678 <__ieee754_atan2>:
 8006678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	4256      	negs	r6, r2
 800667e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006682:	4316      	orrs	r6, r2
 8006684:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006830 <__ieee754_atan2+0x1b8>
 8006688:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800668c:	454e      	cmp	r6, r9
 800668e:	4604      	mov	r4, r0
 8006690:	460d      	mov	r5, r1
 8006692:	469e      	mov	lr, r3
 8006694:	d808      	bhi.n	80066a8 <__ieee754_atan2+0x30>
 8006696:	4246      	negs	r6, r0
 8006698:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800669c:	4306      	orrs	r6, r0
 800669e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80066a2:	454e      	cmp	r6, r9
 80066a4:	4688      	mov	r8, r1
 80066a6:	d906      	bls.n	80066b6 <__ieee754_atan2+0x3e>
 80066a8:	4620      	mov	r0, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	f7f9 fd5e 	bl	800016c <__adddf3>
 80066b0:	4604      	mov	r4, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	e030      	b.n	8006718 <__ieee754_atan2+0xa0>
 80066b6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80066ba:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80066be:	4316      	orrs	r6, r2
 80066c0:	d103      	bne.n	80066ca <__ieee754_atan2+0x52>
 80066c2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c6:	f7ff bdf3 	b.w	80062b0 <atan>
 80066ca:	179e      	asrs	r6, r3, #30
 80066cc:	f006 0602 	and.w	r6, r6, #2
 80066d0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80066d4:	ea57 0100 	orrs.w	r1, r7, r0
 80066d8:	d107      	bne.n	80066ea <__ieee754_atan2+0x72>
 80066da:	2e02      	cmp	r6, #2
 80066dc:	d079      	beq.n	80067d2 <__ieee754_atan2+0x15a>
 80066de:	2e03      	cmp	r6, #3
 80066e0:	d11a      	bne.n	8006718 <__ieee754_atan2+0xa0>
 80066e2:	a541      	add	r5, pc, #260	; (adr r5, 80067e8 <__ieee754_atan2+0x170>)
 80066e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066e8:	e016      	b.n	8006718 <__ieee754_atan2+0xa0>
 80066ea:	ea5c 0102 	orrs.w	r1, ip, r2
 80066ee:	d106      	bne.n	80066fe <__ieee754_atan2+0x86>
 80066f0:	f1b8 0f00 	cmp.w	r8, #0
 80066f4:	da71      	bge.n	80067da <__ieee754_atan2+0x162>
 80066f6:	a53e      	add	r5, pc, #248	; (adr r5, 80067f0 <__ieee754_atan2+0x178>)
 80066f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066fc:	e00c      	b.n	8006718 <__ieee754_atan2+0xa0>
 80066fe:	45cc      	cmp	ip, r9
 8006700:	d123      	bne.n	800674a <__ieee754_atan2+0xd2>
 8006702:	4567      	cmp	r7, ip
 8006704:	d114      	bne.n	8006730 <__ieee754_atan2+0xb8>
 8006706:	2e02      	cmp	r6, #2
 8006708:	d00a      	beq.n	8006720 <__ieee754_atan2+0xa8>
 800670a:	2e03      	cmp	r6, #3
 800670c:	d00c      	beq.n	8006728 <__ieee754_atan2+0xb0>
 800670e:	2e01      	cmp	r6, #1
 8006710:	d15b      	bne.n	80067ca <__ieee754_atan2+0x152>
 8006712:	a539      	add	r5, pc, #228	; (adr r5, 80067f8 <__ieee754_atan2+0x180>)
 8006714:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	a537      	add	r5, pc, #220	; (adr r5, 8006800 <__ieee754_atan2+0x188>)
 8006722:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006726:	e7f7      	b.n	8006718 <__ieee754_atan2+0xa0>
 8006728:	a537      	add	r5, pc, #220	; (adr r5, 8006808 <__ieee754_atan2+0x190>)
 800672a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800672e:	e7f3      	b.n	8006718 <__ieee754_atan2+0xa0>
 8006730:	2e02      	cmp	r6, #2
 8006732:	d04e      	beq.n	80067d2 <__ieee754_atan2+0x15a>
 8006734:	2e03      	cmp	r6, #3
 8006736:	d0d4      	beq.n	80066e2 <__ieee754_atan2+0x6a>
 8006738:	2e01      	cmp	r6, #1
 800673a:	f04f 0400 	mov.w	r4, #0
 800673e:	d102      	bne.n	8006746 <__ieee754_atan2+0xce>
 8006740:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006744:	e7e8      	b.n	8006718 <__ieee754_atan2+0xa0>
 8006746:	2500      	movs	r5, #0
 8006748:	e7e6      	b.n	8006718 <__ieee754_atan2+0xa0>
 800674a:	454f      	cmp	r7, r9
 800674c:	d0d0      	beq.n	80066f0 <__ieee754_atan2+0x78>
 800674e:	eba7 070c 	sub.w	r7, r7, ip
 8006752:	153f      	asrs	r7, r7, #20
 8006754:	2f3c      	cmp	r7, #60	; 0x3c
 8006756:	dc1e      	bgt.n	8006796 <__ieee754_atan2+0x11e>
 8006758:	2b00      	cmp	r3, #0
 800675a:	da01      	bge.n	8006760 <__ieee754_atan2+0xe8>
 800675c:	373c      	adds	r7, #60	; 0x3c
 800675e:	db1e      	blt.n	800679e <__ieee754_atan2+0x126>
 8006760:	4620      	mov	r0, r4
 8006762:	4629      	mov	r1, r5
 8006764:	f7f9 ffe2 	bl	800072c <__aeabi_ddiv>
 8006768:	f7ff ff2c 	bl	80065c4 <fabs>
 800676c:	f7ff fda0 	bl	80062b0 <atan>
 8006770:	4604      	mov	r4, r0
 8006772:	460d      	mov	r5, r1
 8006774:	2e01      	cmp	r6, #1
 8006776:	d015      	beq.n	80067a4 <__ieee754_atan2+0x12c>
 8006778:	2e02      	cmp	r6, #2
 800677a:	d017      	beq.n	80067ac <__ieee754_atan2+0x134>
 800677c:	2e00      	cmp	r6, #0
 800677e:	d0cb      	beq.n	8006718 <__ieee754_atan2+0xa0>
 8006780:	a323      	add	r3, pc, #140	; (adr r3, 8006810 <__ieee754_atan2+0x198>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	4620      	mov	r0, r4
 8006788:	4629      	mov	r1, r5
 800678a:	f7f9 fced 	bl	8000168 <__aeabi_dsub>
 800678e:	a322      	add	r3, pc, #136	; (adr r3, 8006818 <__ieee754_atan2+0x1a0>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	e016      	b.n	80067c4 <__ieee754_atan2+0x14c>
 8006796:	a522      	add	r5, pc, #136	; (adr r5, 8006820 <__ieee754_atan2+0x1a8>)
 8006798:	e9d5 4500 	ldrd	r4, r5, [r5]
 800679c:	e7ea      	b.n	8006774 <__ieee754_atan2+0xfc>
 800679e:	2400      	movs	r4, #0
 80067a0:	2500      	movs	r5, #0
 80067a2:	e7e7      	b.n	8006774 <__ieee754_atan2+0xfc>
 80067a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80067a8:	461d      	mov	r5, r3
 80067aa:	e7b5      	b.n	8006718 <__ieee754_atan2+0xa0>
 80067ac:	a318      	add	r3, pc, #96	; (adr r3, 8006810 <__ieee754_atan2+0x198>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	f7f9 fcd7 	bl	8000168 <__aeabi_dsub>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	a116      	add	r1, pc, #88	; (adr r1, 8006818 <__ieee754_atan2+0x1a0>)
 80067c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c4:	f7f9 fcd0 	bl	8000168 <__aeabi_dsub>
 80067c8:	e772      	b.n	80066b0 <__ieee754_atan2+0x38>
 80067ca:	a517      	add	r5, pc, #92	; (adr r5, 8006828 <__ieee754_atan2+0x1b0>)
 80067cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067d0:	e7a2      	b.n	8006718 <__ieee754_atan2+0xa0>
 80067d2:	a511      	add	r5, pc, #68	; (adr r5, 8006818 <__ieee754_atan2+0x1a0>)
 80067d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067d8:	e79e      	b.n	8006718 <__ieee754_atan2+0xa0>
 80067da:	a511      	add	r5, pc, #68	; (adr r5, 8006820 <__ieee754_atan2+0x1a8>)
 80067dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067e0:	e79a      	b.n	8006718 <__ieee754_atan2+0xa0>
 80067e2:	bf00      	nop
 80067e4:	f3af 8000 	nop.w
 80067e8:	54442d18 	.word	0x54442d18
 80067ec:	c00921fb 	.word	0xc00921fb
 80067f0:	54442d18 	.word	0x54442d18
 80067f4:	bff921fb 	.word	0xbff921fb
 80067f8:	54442d18 	.word	0x54442d18
 80067fc:	bfe921fb 	.word	0xbfe921fb
 8006800:	7f3321d2 	.word	0x7f3321d2
 8006804:	4002d97c 	.word	0x4002d97c
 8006808:	7f3321d2 	.word	0x7f3321d2
 800680c:	c002d97c 	.word	0xc002d97c
 8006810:	33145c07 	.word	0x33145c07
 8006814:	3ca1a626 	.word	0x3ca1a626
 8006818:	54442d18 	.word	0x54442d18
 800681c:	400921fb 	.word	0x400921fb
 8006820:	54442d18 	.word	0x54442d18
 8006824:	3ff921fb 	.word	0x3ff921fb
 8006828:	54442d18 	.word	0x54442d18
 800682c:	3fe921fb 	.word	0x3fe921fb
 8006830:	7ff00000 	.word	0x7ff00000

08006834 <__ieee754_sqrt>:
 8006834:	4b54      	ldr	r3, [pc, #336]	; (8006988 <__ieee754_sqrt+0x154>)
 8006836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683a:	438b      	bics	r3, r1
 800683c:	4606      	mov	r6, r0
 800683e:	460d      	mov	r5, r1
 8006840:	460a      	mov	r2, r1
 8006842:	460c      	mov	r4, r1
 8006844:	d10f      	bne.n	8006866 <__ieee754_sqrt+0x32>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	f7f9 fe45 	bl	80004d8 <__aeabi_dmul>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4630      	mov	r0, r6
 8006854:	4629      	mov	r1, r5
 8006856:	f7f9 fc89 	bl	800016c <__adddf3>
 800685a:	4606      	mov	r6, r0
 800685c:	460d      	mov	r5, r1
 800685e:	4630      	mov	r0, r6
 8006860:	4629      	mov	r1, r5
 8006862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006866:	2900      	cmp	r1, #0
 8006868:	4607      	mov	r7, r0
 800686a:	4603      	mov	r3, r0
 800686c:	dc0e      	bgt.n	800688c <__ieee754_sqrt+0x58>
 800686e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006872:	ea5c 0707 	orrs.w	r7, ip, r7
 8006876:	d0f2      	beq.n	800685e <__ieee754_sqrt+0x2a>
 8006878:	b141      	cbz	r1, 800688c <__ieee754_sqrt+0x58>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	f7f9 fc73 	bl	8000168 <__aeabi_dsub>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	f7f9 ff51 	bl	800072c <__aeabi_ddiv>
 800688a:	e7e6      	b.n	800685a <__ieee754_sqrt+0x26>
 800688c:	1512      	asrs	r2, r2, #20
 800688e:	d074      	beq.n	800697a <__ieee754_sqrt+0x146>
 8006890:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006894:	07d5      	lsls	r5, r2, #31
 8006896:	f04f 0500 	mov.w	r5, #0
 800689a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800689e:	bf48      	it	mi
 80068a0:	0fd9      	lsrmi	r1, r3, #31
 80068a2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80068a6:	bf44      	itt	mi
 80068a8:	005b      	lslmi	r3, r3, #1
 80068aa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80068ae:	1051      	asrs	r1, r2, #1
 80068b0:	0fda      	lsrs	r2, r3, #31
 80068b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80068b6:	4628      	mov	r0, r5
 80068b8:	2216      	movs	r2, #22
 80068ba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	1987      	adds	r7, r0, r6
 80068c2:	42a7      	cmp	r7, r4
 80068c4:	bfde      	ittt	le
 80068c6:	19b8      	addle	r0, r7, r6
 80068c8:	1be4      	suble	r4, r4, r7
 80068ca:	19ad      	addle	r5, r5, r6
 80068cc:	0fdf      	lsrs	r7, r3, #31
 80068ce:	3a01      	subs	r2, #1
 80068d0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80068d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068dc:	d1f0      	bne.n	80068c0 <__ieee754_sqrt+0x8c>
 80068de:	f04f 0c20 	mov.w	ip, #32
 80068e2:	4696      	mov	lr, r2
 80068e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80068e8:	4284      	cmp	r4, r0
 80068ea:	eb06 070e 	add.w	r7, r6, lr
 80068ee:	dc02      	bgt.n	80068f6 <__ieee754_sqrt+0xc2>
 80068f0:	d112      	bne.n	8006918 <__ieee754_sqrt+0xe4>
 80068f2:	429f      	cmp	r7, r3
 80068f4:	d810      	bhi.n	8006918 <__ieee754_sqrt+0xe4>
 80068f6:	2f00      	cmp	r7, #0
 80068f8:	eb07 0e06 	add.w	lr, r7, r6
 80068fc:	da42      	bge.n	8006984 <__ieee754_sqrt+0x150>
 80068fe:	f1be 0f00 	cmp.w	lr, #0
 8006902:	db3f      	blt.n	8006984 <__ieee754_sqrt+0x150>
 8006904:	f100 0801 	add.w	r8, r0, #1
 8006908:	1a24      	subs	r4, r4, r0
 800690a:	4640      	mov	r0, r8
 800690c:	429f      	cmp	r7, r3
 800690e:	bf88      	it	hi
 8006910:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8006914:	1bdb      	subs	r3, r3, r7
 8006916:	4432      	add	r2, r6
 8006918:	0064      	lsls	r4, r4, #1
 800691a:	f1bc 0c01 	subs.w	ip, ip, #1
 800691e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006922:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006926:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800692a:	d1dd      	bne.n	80068e8 <__ieee754_sqrt+0xb4>
 800692c:	4323      	orrs	r3, r4
 800692e:	d006      	beq.n	800693e <__ieee754_sqrt+0x10a>
 8006930:	1c54      	adds	r4, r2, #1
 8006932:	bf0b      	itete	eq
 8006934:	4662      	moveq	r2, ip
 8006936:	3201      	addne	r2, #1
 8006938:	3501      	addeq	r5, #1
 800693a:	f022 0201 	bicne.w	r2, r2, #1
 800693e:	106b      	asrs	r3, r5, #1
 8006940:	0852      	lsrs	r2, r2, #1
 8006942:	07e8      	lsls	r0, r5, #31
 8006944:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006948:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800694c:	bf48      	it	mi
 800694e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006952:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006956:	4616      	mov	r6, r2
 8006958:	e781      	b.n	800685e <__ieee754_sqrt+0x2a>
 800695a:	0adc      	lsrs	r4, r3, #11
 800695c:	3915      	subs	r1, #21
 800695e:	055b      	lsls	r3, r3, #21
 8006960:	2c00      	cmp	r4, #0
 8006962:	d0fa      	beq.n	800695a <__ieee754_sqrt+0x126>
 8006964:	02e6      	lsls	r6, r4, #11
 8006966:	d50a      	bpl.n	800697e <__ieee754_sqrt+0x14a>
 8006968:	f1c2 0020 	rsb	r0, r2, #32
 800696c:	fa23 f000 	lsr.w	r0, r3, r0
 8006970:	1e55      	subs	r5, r2, #1
 8006972:	4093      	lsls	r3, r2
 8006974:	4304      	orrs	r4, r0
 8006976:	1b4a      	subs	r2, r1, r5
 8006978:	e78a      	b.n	8006890 <__ieee754_sqrt+0x5c>
 800697a:	4611      	mov	r1, r2
 800697c:	e7f0      	b.n	8006960 <__ieee754_sqrt+0x12c>
 800697e:	0064      	lsls	r4, r4, #1
 8006980:	3201      	adds	r2, #1
 8006982:	e7ef      	b.n	8006964 <__ieee754_sqrt+0x130>
 8006984:	4680      	mov	r8, r0
 8006986:	e7bf      	b.n	8006908 <__ieee754_sqrt+0xd4>
 8006988:	7ff00000 	.word	0x7ff00000

0800698c <matherr>:
 800698c:	2000      	movs	r0, #0
 800698e:	4770      	bx	lr

08006990 <__errno>:
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <__errno+0x8>)
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000014 	.word	0x20000014

0800699c <__libc_init_array>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	2500      	movs	r5, #0
 80069a0:	4e0c      	ldr	r6, [pc, #48]	; (80069d4 <__libc_init_array+0x38>)
 80069a2:	4c0d      	ldr	r4, [pc, #52]	; (80069d8 <__libc_init_array+0x3c>)
 80069a4:	1ba4      	subs	r4, r4, r6
 80069a6:	10a4      	asrs	r4, r4, #2
 80069a8:	42a5      	cmp	r5, r4
 80069aa:	d109      	bne.n	80069c0 <__libc_init_array+0x24>
 80069ac:	f000 f822 	bl	80069f4 <_init>
 80069b0:	2500      	movs	r5, #0
 80069b2:	4e0a      	ldr	r6, [pc, #40]	; (80069dc <__libc_init_array+0x40>)
 80069b4:	4c0a      	ldr	r4, [pc, #40]	; (80069e0 <__libc_init_array+0x44>)
 80069b6:	1ba4      	subs	r4, r4, r6
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	42a5      	cmp	r5, r4
 80069bc:	d105      	bne.n	80069ca <__libc_init_array+0x2e>
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069c4:	4798      	blx	r3
 80069c6:	3501      	adds	r5, #1
 80069c8:	e7ee      	b.n	80069a8 <__libc_init_array+0xc>
 80069ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ce:	4798      	blx	r3
 80069d0:	3501      	adds	r5, #1
 80069d2:	e7f2      	b.n	80069ba <__libc_init_array+0x1e>
 80069d4:	08006b70 	.word	0x08006b70
 80069d8:	08006b70 	.word	0x08006b70
 80069dc:	08006b70 	.word	0x08006b70
 80069e0:	08006b74 	.word	0x08006b74

080069e4 <memset>:
 80069e4:	4603      	mov	r3, r0
 80069e6:	4402      	add	r2, r0
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d100      	bne.n	80069ee <memset+0xa>
 80069ec:	4770      	bx	lr
 80069ee:	f803 1b01 	strb.w	r1, [r3], #1
 80069f2:	e7f9      	b.n	80069e8 <memset+0x4>

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
