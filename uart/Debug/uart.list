
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08003e08  08003e08  00013e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004060  08004060  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004060  08004060  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004060  08004060  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001dc  08004244  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08004244  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c5a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e3  00000000  00000000  00029e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  0002b648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  0002bc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001465a  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005ebe  00000000  00000000  000407aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b201  00000000  00000000  00046668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1869  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e7c  00000000  00000000  000b18e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08003df0 	.word	0x08003df0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08003df0 	.word	0x08003df0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f929 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f001 faf2 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f933 	bl	8000d3e <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f909 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000000 	.word	0x20000000

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000204 	.word	0x20000204

08000b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000204 	.word	0x20000204

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff fff0 	bl	8000b38 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_Delay+0x40>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffe0 	bl	8000b38 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000004 	.word	0x20000004

08000b90 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	da0b      	bge.n	8000c20 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <NVIC_SetPriority+0x4c>)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	3b04      	subs	r3, #4
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1e:	e009      	b.n	8000c34 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <NVIC_SetPriority+0x50>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff90 	bl	8000bf4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff49 	bl	8000b90 <NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5e 	bl	8000bd8 <NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff90 	bl	8000c48 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5f 	bl	8000bf4 <NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b08b      	sub	sp, #44	; 0x2c
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7a:	e127      	b.n	8000fcc <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f040 8116 	bne.w	8000fc6 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b12      	cmp	r3, #18
 8000da0:	d034      	beq.n	8000e0c <HAL_GPIO_Init+0xb4>
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d80d      	bhi.n	8000dc2 <HAL_GPIO_Init+0x6a>
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d02b      	beq.n	8000e02 <HAL_GPIO_Init+0xaa>
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d804      	bhi.n	8000db8 <HAL_GPIO_Init+0x60>
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d031      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d01c      	beq.n	8000df0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000db6:	e048      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d043      	beq.n	8000e44 <HAL_GPIO_Init+0xec>
 8000dbc:	2b11      	cmp	r3, #17
 8000dbe:	d01b      	beq.n	8000df8 <HAL_GPIO_Init+0xa0>
          break;
 8000dc0:	e043      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000dc2:	4a87      	ldr	r2, [pc, #540]	; (8000fe0 <HAL_GPIO_Init+0x288>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d026      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
 8000dc8:	4a85      	ldr	r2, [pc, #532]	; (8000fe0 <HAL_GPIO_Init+0x288>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d806      	bhi.n	8000ddc <HAL_GPIO_Init+0x84>
 8000dce:	4a85      	ldr	r2, [pc, #532]	; (8000fe4 <HAL_GPIO_Init+0x28c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d020      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
 8000dd4:	4a84      	ldr	r2, [pc, #528]	; (8000fe8 <HAL_GPIO_Init+0x290>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d01d      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
          break;
 8000dda:	e036      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ddc:	4a83      	ldr	r2, [pc, #524]	; (8000fec <HAL_GPIO_Init+0x294>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
 8000de2:	4a83      	ldr	r2, [pc, #524]	; (8000ff0 <HAL_GPIO_Init+0x298>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d016      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
 8000de8:	4a82      	ldr	r2, [pc, #520]	; (8000ff4 <HAL_GPIO_Init+0x29c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d013      	beq.n	8000e16 <HAL_GPIO_Init+0xbe>
          break;
 8000dee:	e02c      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e028      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e023      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	3308      	adds	r3, #8
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e01e      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	330c      	adds	r3, #12
 8000e12:	623b      	str	r3, [r7, #32]
          break;
 8000e14:	e019      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	623b      	str	r3, [r7, #32]
          break;
 8000e22:	e012      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d105      	bne.n	8000e38 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	611a      	str	r2, [r3, #16]
          break;
 8000e36:	e008      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	615a      	str	r2, [r3, #20]
          break;
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d801      	bhi.n	8000e54 <HAL_GPIO_Init+0xfc>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	e001      	b.n	8000e58 <HAL_GPIO_Init+0x100>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2bff      	cmp	r3, #255	; 0xff
 8000e5e:	d802      	bhi.n	8000e66 <HAL_GPIO_Init+0x10e>
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x114>
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	210f      	movs	r1, #15
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	6a39      	ldr	r1, [r7, #32]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	431a      	orrs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8096 	beq.w	8000fc6 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9a:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <HAL_GPIO_Init+0x2a0>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_GPIO_Init+0x2a0>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <HAL_GPIO_Init+0x2a0>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000eb2:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <HAL_GPIO_Init+0x2a4>)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_GPIO_Init+0x2a8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0x1ae>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_GPIO_Init+0x2ac>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x1aa>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2b0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x1a6>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2b4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x1a2>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x1b0>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x1b0>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x1b0>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x1b0>
 8000f06:	2300      	movs	r3, #0
 8000f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0a:	f002 0203 	and.w	r2, r2, #3
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000f18:	4938      	ldr	r1, [pc, #224]	; (8000ffc <HAL_GPIO_Init+0x2a4>)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4936      	ldr	r1, [pc, #216]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	4931      	ldr	r1, [pc, #196]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	492c      	ldr	r1, [pc, #176]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	604b      	str	r3, [r1, #4]
 8000f66:	e006      	b.n	8000f76 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4927      	ldr	r1, [pc, #156]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	4922      	ldr	r1, [pc, #136]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	491d      	ldr	r1, [pc, #116]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	4918      	ldr	r1, [pc, #96]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60cb      	str	r3, [r1, #12]
 8000fb6:	e006      	b.n	8000fc6 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	4913      	ldr	r1, [pc, #76]	; (8001010 <HAL_GPIO_Init+0x2b8>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	3301      	adds	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f aed4 	bls.w	8000d7c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	372c      	adds	r7, #44	; 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	10210000 	.word	0x10210000
 8000fe4:	10110000 	.word	0x10110000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10310000 	.word	0x10310000
 8000ff0:	10320000 	.word	0x10320000
 8000ff4:	10220000 	.word	0x10220000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40011000 	.word	0x40011000
 800100c:	40011400 	.word	0x40011400
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	611a      	str	r2, [r3, #16]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	405a      	eors	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
	...

08001068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8087 	beq.w	8001190 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001082:	4b92      	ldr	r3, [pc, #584]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b04      	cmp	r3, #4
 800108c:	d00c      	beq.n	80010a8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800108e:	4b8f      	ldr	r3, [pc, #572]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b08      	cmp	r3, #8
 8001098:	d112      	bne.n	80010c0 <HAL_RCC_OscConfig+0x58>
 800109a:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a6:	d10b      	bne.n	80010c0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b88      	ldr	r3, [pc, #544]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d06c      	beq.n	800118e <HAL_RCC_OscConfig+0x126>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d168      	bne.n	800118e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e22d      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d106      	bne.n	80010d8 <HAL_RCC_OscConfig+0x70>
 80010ca:	4b80      	ldr	r3, [pc, #512]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a7f      	ldr	r2, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e02e      	b.n	8001136 <HAL_RCC_OscConfig+0xce>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10c      	bne.n	80010fa <HAL_RCC_OscConfig+0x92>
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a79      	ldr	r2, [pc, #484]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b77      	ldr	r3, [pc, #476]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a76      	ldr	r2, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e01d      	b.n	8001136 <HAL_RCC_OscConfig+0xce>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001102:	d10c      	bne.n	800111e <HAL_RCC_OscConfig+0xb6>
 8001104:	4b71      	ldr	r3, [pc, #452]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a70      	ldr	r2, [pc, #448]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800110a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a6d      	ldr	r2, [pc, #436]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e00b      	b.n	8001136 <HAL_RCC_OscConfig+0xce>
 800111e:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a67      	ldr	r2, [pc, #412]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fcfb 	bl	8000b38 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fcf7 	bl	8000b38 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1e1      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001158:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0xde>
 8001164:	e014      	b.n	8001190 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fce7 	bl	8000b38 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116e:	f7ff fce3 	bl	8000b38 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e1cd      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f0      	bne.n	800116e <HAL_RCC_OscConfig+0x106>
 800118c:	e000      	b.n	8001190 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d063      	beq.n	8001264 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011a8:	4b48      	ldr	r3, [pc, #288]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d11c      	bne.n	80011ee <HAL_RCC_OscConfig+0x186>
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d116      	bne.n	80011ee <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c0:	4b42      	ldr	r3, [pc, #264]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_OscConfig+0x170>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e1a1      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4939      	ldr	r1, [pc, #228]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ec:	e03a      	b.n	8001264 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d020      	beq.n	8001238 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_RCC_OscConfig+0x268>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc9c 	bl	8000b38 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fc98 	bl	8000b38 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e182      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4926      	ldr	r1, [pc, #152]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
 8001236:	e015      	b.n	8001264 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_RCC_OscConfig+0x268>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fc7b 	bl	8000b38 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc77 	bl	8000b38 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e161      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d039      	beq.n	80012e4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d019      	beq.n	80012ac <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fc5b 	bl	8000b38 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001286:	f7ff fc57 	bl	8000b38 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e141      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_RCC_OscConfig+0x264>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fae3 	bl	8001870 <RCC_Delay>
 80012aa:	e01b      	b.n	80012e4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fc41 	bl	8000b38 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	e00e      	b.n	80012d8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc3d 	bl	8000b38 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d907      	bls.n	80012d8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e127      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
 80012cc:	40021000 	.word	0x40021000
 80012d0:	42420000 	.word	0x42420000
 80012d4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b92      	ldr	r3, [pc, #584]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ea      	bne.n	80012ba <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a6 	beq.w	800143e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a87      	ldr	r2, [pc, #540]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b82      	ldr	r3, [pc, #520]	; (8001528 <HAL_RCC_OscConfig+0x4c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4b7f      	ldr	r3, [pc, #508]	; (8001528 <HAL_RCC_OscConfig+0x4c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7e      	ldr	r2, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x4c0>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fbff 	bl	8000b38 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fbfb 	bl	8000b38 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e0e5      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b75      	ldr	r3, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0x4c0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x30a>
 8001364:	4b6f      	ldr	r3, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a6e      	ldr	r2, [pc, #440]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	e02d      	b.n	80013ce <HAL_RCC_OscConfig+0x366>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x32c>
 800137a:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4a69      	ldr	r2, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6213      	str	r3, [r2, #32]
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a66      	ldr	r2, [pc, #408]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	e01c      	b.n	80013ce <HAL_RCC_OscConfig+0x366>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x34e>
 800139c:	4b61      	ldr	r3, [pc, #388]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a60      	ldr	r2, [pc, #384]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a5d      	ldr	r2, [pc, #372]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x366>
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a5a      	ldr	r2, [pc, #360]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d015      	beq.n	8001402 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbaf 	bl	8000b38 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fbab 	bl	8000b38 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e093      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ee      	beq.n	80013de <HAL_RCC_OscConfig+0x376>
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb99 	bl	8000b38 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fb95 	bl	8000b38 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e07d      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ee      	bne.n	800140a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d105      	bne.n	800143e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a3b      	ldr	r2, [pc, #236]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d069      	beq.n	800151a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d061      	beq.n	8001516 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d146      	bne.n	80014e8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fb6a 	bl	8000b38 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fb66 	bl	8000b38 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e050      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148e:	d108      	bne.n	80014a2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4921      	ldr	r1, [pc, #132]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a19      	ldr	r1, [r3, #32]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	430b      	orrs	r3, r1
 80014b4:	491b      	ldr	r1, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb3a 	bl	8000b38 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fb36 	bl	8000b38 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e020      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x460>
 80014e6:	e018      	b.n	800151a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fb23 	bl	8000b38 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f6:	f7ff fb1f 	bl	8000b38 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e009      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x4bc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x48e>
 8001514:	e001      	b.n	800151a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	40007000 	.word	0x40007000
 800152c:	42420060 	.word	0x42420060

08001530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153e:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d910      	bls.n	800156e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154c:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0207 	bic.w	r2, r3, #7
 8001554:	4978      	ldr	r1, [pc, #480]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800155c:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0e0      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d020      	beq.n	80015bc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a6c      	ldr	r2, [pc, #432]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 800158c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001590:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159e:	4b67      	ldr	r3, [pc, #412]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a66      	ldr	r2, [pc, #408]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015a4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015a8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015aa:	4b64      	ldr	r3, [pc, #400]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4961      	ldr	r1, [pc, #388]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d06a      	beq.n	800169e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d0:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d115      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0a7      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e8:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e09b      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e093      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 0203 	bic.w	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4949      	ldr	r1, [pc, #292]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161a:	f7ff fa8d 	bl	8000b38 <HAL_GetTick>
 800161e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d112      	bne.n	800164e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7ff fa85 	bl	8000b38 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e077      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001640:	4b3e      	ldr	r3, [pc, #248]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_ClockConfig+0xfa>
 800164c:	e027      	b.n	800169e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d11d      	bne.n	8001692 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fa6e 	bl	8000b38 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e060      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_ClockConfig+0x128>
 800167a:	e010      	b.n	800169e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff fa5c 	bl	8000b38 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e04e      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d210      	bcs.n	80016ce <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 0207 	bic.w	r2, r3, #7
 80016b4:	4920      	ldr	r1, [pc, #128]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_RCC_ClockConfig+0x208>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e030      	b.n	8001730 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4915      	ldr	r1, [pc, #84]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170c:	f000 f81c 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 8001710:	4601      	mov	r1, r0
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_ClockConfig+0x20c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_RCC_ClockConfig+0x210>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	fa21 f303 	lsr.w	r3, r1, r3
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 8001726:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff f9c3 	bl	8000ab4 <HAL_InitTick>
  
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	08003e1c 	.word	0x08003e1c
 8001744:	20000008 	.word	0x20000008

08001748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001748:	b490      	push	{r4, r7}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001750:	1d3c      	adds	r4, r7, #4
 8001752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x40>
 8001782:	2b08      	cmp	r3, #8
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x46>
 8001786:	e02d      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_RCC_GetSysClockFreq+0xbc>)
 800178a:	623b      	str	r3, [r7, #32]
      break;
 800178c:	e02d      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800179a:	4413      	add	r3, r2
 800179c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c5b      	lsrs	r3, r3, #17
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ba:	4413      	add	r3, r2
 80017bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017c0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c6:	fb02 f203 	mul.w	r2, r2, r3
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
 80017d2:	e004      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	623b      	str	r3, [r7, #32]
      break;
 80017e2:	e002      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e6:	623b      	str	r3, [r7, #32]
      break;
 80017e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ea:	6a3b      	ldr	r3, [r7, #32]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc90      	pop	{r4, r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	08003e08 	.word	0x08003e08
 80017fc:	08003e18 	.word	0x08003e18
 8001800:	40021000 	.word	0x40021000
 8001804:	007a1200 	.word	0x007a1200
 8001808:	003d0900 	.word	0x003d0900

0800180c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001810:	4b02      	ldr	r3, [pc, #8]	; (800181c <HAL_RCC_GetHCLKFreq+0x10>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001824:	f7ff fff2 	bl	800180c <HAL_RCC_GetHCLKFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	08003e2c 	.word	0x08003e2c

08001848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800184c:	f7ff ffde 	bl	800180c <HAL_RCC_GetHCLKFreq>
 8001850:	4601      	mov	r1, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0adb      	lsrs	r3, r3, #11
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_RCC_GetPCLK2Freq+0x24>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	08003e2c 	.word	0x08003e2c

08001870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <RCC_Delay+0x34>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <RCC_Delay+0x38>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800188c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	60fa      	str	r2, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <RCC_Delay+0x1c>
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	10624dd3 	.word	0x10624dd3

080018ac <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e03f      	b.n	800193e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fc0c 	bl	80020f0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2224      	movs	r2, #36	; 0x24
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ee:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f9b1 	bl	8001c58 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001914:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001924:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b088      	sub	sp, #32
 800194a:	af02      	add	r7, sp, #8
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	f040 8083 	bne.w	8001a6e <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_UART_Transmit+0x2e>
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e07b      	b.n	8001a70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_UART_Transmit+0x40>
 8001982:	2302      	movs	r3, #2
 8001984:	e074      	b.n	8001a70 <HAL_UART_Transmit+0x12a>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2221      	movs	r2, #33	; 0x21
 8001998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800199c:	f7ff f8cc 	bl	8000b38 <HAL_GetTick>
 80019a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80019ae:	e042      	b.n	8001a36 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c6:	d122      	bne.n	8001a0e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f8f6 	bl	8001bc4 <UART_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e046      	b.n	8001a70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019f4:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3302      	adds	r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	e017      	b.n	8001a36 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e013      	b.n	8001a36 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f8d3 	bl	8001bc4 <UART_WaitOnFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e023      	b.n	8001a70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1b7      	bne.n	80019b0 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2200      	movs	r2, #0
 8001a48:	2140      	movs	r1, #64	; 0x40
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f8ba 	bl	8001bc4 <UART_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e00a      	b.n	8001a70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
  }
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	f040 8090 	bne.w	8001bba <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_UART_Receive+0x2e>
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e088      	b.n	8001bbc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_UART_Receive+0x40>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e081      	b.n	8001bbc <HAL_UART_Receive+0x144>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2222      	movs	r2, #34	; 0x22
 8001aca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ace:	f7ff f833 	bl	8000b38 <HAL_GetTick>
 8001ad2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	88fa      	ldrh	r2, [r7, #6]
 8001ad8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8001ae0:	e05c      	b.n	8001b9c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	d12b      	bne.n	8001b52 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2120      	movs	r1, #32
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f85d 	bl	8001bc4 <UART_WaitOnFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e053      	b.n	8001bbc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10c      	bne.n	8001b3a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3302      	adds	r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	e030      	b.n	8001b9c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	e024      	b.n	8001b9c <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f831 	bl	8001bc4 <UART_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e027      	b.n	8001bbc <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d108      	bne.n	8001b86 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	60ba      	str	r2, [r7, #8]
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e00a      	b.n	8001b9c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c59      	adds	r1, r3, #1
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d19d      	bne.n	8001ae2 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001bd4:	e02c      	b.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d028      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001be4:	f7fe ffa8 	bl	8000b38 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d21d      	bcs.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e00f      	b.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d0c3      	beq.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c9a:	f023 030c 	bic.w	r3, r3, #12
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6f      	ldr	r2, [pc, #444]	; (8001e80 <UART_SetConfig+0x228>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d16b      	bne.n	8001da0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001cc8:	f7ff fdbe 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009a      	lsls	r2, r3, #2
 8001cd6:	441a      	add	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4a68      	ldr	r2, [pc, #416]	; (8001e84 <UART_SetConfig+0x22c>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	011c      	lsls	r4, r3, #4
 8001cec:	f7ff fdac 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009a      	lsls	r2, r3, #2
 8001cfa:	441a      	add	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d06:	f7ff fd9f 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <UART_SetConfig+0x22c>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2264      	movs	r2, #100	; 0x64
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	1aeb      	subs	r3, r5, r3
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	3332      	adds	r3, #50	; 0x32
 8001d34:	4a53      	ldr	r2, [pc, #332]	; (8001e84 <UART_SetConfig+0x22c>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d40:	441c      	add	r4, r3
 8001d42:	f7ff fd81 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009a      	lsls	r2, r3, #2
 8001d50:	441a      	add	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d5c:	f7ff fd74 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	441a      	add	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4a43      	ldr	r2, [pc, #268]	; (8001e84 <UART_SetConfig+0x22c>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	2264      	movs	r2, #100	; 0x64
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	1aeb      	subs	r3, r5, r3
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	3332      	adds	r3, #50	; 0x32
 8001d8a:	4a3e      	ldr	r2, [pc, #248]	; (8001e84 <UART_SetConfig+0x22c>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4422      	add	r2, r4
 8001d9c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001d9e:	e06a      	b.n	8001e76 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001da0:	f7ff fd3e 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	009a      	lsls	r2, r3, #2
 8001dae:	441a      	add	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <UART_SetConfig+0x22c>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	011c      	lsls	r4, r3, #4
 8001dc4:	f7ff fd2c 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009a      	lsls	r2, r3, #2
 8001dd2:	441a      	add	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	fbb2 f5f3 	udiv	r5, r2, r3
 8001dde:	f7ff fd1f 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	009a      	lsls	r2, r3, #2
 8001dec:	441a      	add	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <UART_SetConfig+0x22c>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2264      	movs	r2, #100	; 0x64
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	1aeb      	subs	r3, r5, r3
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	3332      	adds	r3, #50	; 0x32
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <UART_SetConfig+0x22c>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e18:	441c      	add	r4, r3
 8001e1a:	f7ff fd01 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009a      	lsls	r2, r3, #2
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e34:	f7ff fcf4 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009a      	lsls	r2, r3, #2
 8001e42:	441a      	add	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <UART_SetConfig+0x22c>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	2264      	movs	r2, #100	; 0x64
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	1aeb      	subs	r3, r5, r3
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	3332      	adds	r3, #50	; 0x32
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <UART_SetConfig+0x22c>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4422      	add	r2, r4
 8001e74:	609a      	str	r2, [r3, #8]
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40013800 	.word	0x40013800
 8001e84:	51eb851f 	.word	0x51eb851f

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8e:	f7fe fdfb 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e92:	f000 f825 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
   char ch;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e96:	f000 f8b3 	bl	8002000 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e9a:	f000 f85d 	bl	8001f58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e9e:	f000 f885 	bl	8001fac <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 100)!=HAL_OK);
 8001ea2:	bf00      	nop
 8001ea4:	1df9      	adds	r1, r7, #7
 8001ea6:	2364      	movs	r3, #100	; 0x64
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <main+0x50>)
 8001eac:	f7ff fde4 	bl	8001a78 <HAL_UART_Receive>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f6      	bne.n	8001ea4 <main+0x1c>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001eb6:	1df9      	adds	r1, r7, #7
 8001eb8:	2364      	movs	r3, #100	; 0x64
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <main+0x50>)
 8001ebe:	f7ff fd42 	bl	8001946 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <main+0x54>)
 8001ec8:	f7ff f8bc 	bl	8001044 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ed0:	f7fe fe3c 	bl	8000b4c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001ed4:	e7ef      	b.n	8001eb6 <main+0x2e>
 8001ed6:	bf00      	nop
 8001ed8:	20000208 	.word	0x20000208
 8001edc:	40011000 	.word	0x40011000

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b090      	sub	sp, #64	; 0x40
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	2228      	movs	r2, #40	; 0x28
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fa5c 	bl	80023ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f06:	2301      	movs	r3, #1
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f8a6 	bl	8001068 <HAL_RCC_OscConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001f22:	f000 f8ad 	bl	8002080 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f26:	230f      	movs	r3, #15
 8001f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff faf6 	bl	8001530 <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001f4a:	f000 f899 	bl	8002080 <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3740      	adds	r7, #64	; 0x40
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <MX_USART1_UART_Init+0x50>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_USART1_UART_Init+0x4c>)
 8001f90:	f7ff fc8c 	bl	80018ac <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f9a:	f000 f871 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000208 	.word	0x20000208
 8001fa8:	40013800 	.word	0x40013800

08001fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_USART2_UART_Init+0x50>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	f7ff fc62 	bl	80018ac <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fee:	f000 f847 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000310 	.word	0x20000310
 8001ffc:	40004400 	.word	0x40004400

08002000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_GPIO_Init+0x78>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <MX_GPIO_Init+0x78>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_GPIO_Init+0x78>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_GPIO_Init+0x78>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <MX_GPIO_Init+0x78>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_GPIO_Init+0x78>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_GPIO_Init+0x7c>)
 800204c:	f7fe ffe2 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002050:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002054:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2302      	movs	r3, #2
 8002060:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4619      	mov	r1, r3
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_GPIO_Init+0x7c>)
 800206a:	f7fe fe75 	bl	8000d58 <HAL_GPIO_Init>

}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40011000 	.word	0x40011000

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_MspInit+0x5c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_MspInit+0x5c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6193      	str	r3, [r2, #24]
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_MspInit+0x5c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_MspInit+0x5c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_MspInit+0x5c>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_MspInit+0x5c>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_MspInit+0x60>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_MspInit+0x60>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <HAL_UART_MspInit+0xf8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d132      	bne.n	8002176 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_UART_MspInit+0xfc>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a35      	ldr	r2, [pc, #212]	; (80021ec <HAL_UART_MspInit+0xfc>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b33      	ldr	r3, [pc, #204]	; (80021ec <HAL_UART_MspInit+0xfc>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_UART_MspInit+0xfc>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a2f      	ldr	r2, [pc, #188]	; (80021ec <HAL_UART_MspInit+0xfc>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_UART_MspInit+0xfc>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	4619      	mov	r1, r3
 8002154:	4826      	ldr	r0, [pc, #152]	; (80021f0 <HAL_UART_MspInit+0x100>)
 8002156:	f7fe fdff 	bl	8000d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	4619      	mov	r1, r3
 800216e:	4820      	ldr	r0, [pc, #128]	; (80021f0 <HAL_UART_MspInit+0x100>)
 8002170:	f7fe fdf2 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002174:	e034      	b.n	80021e0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_UART_MspInit+0x104>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12f      	bne.n	80021e0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_UART_MspInit+0xfc>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_UART_MspInit+0xfc>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218a:	61d3      	str	r3, [r2, #28]
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_UART_MspInit+0xfc>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_UART_MspInit+0xfc>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_UART_MspInit+0xfc>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_UART_MspInit+0xfc>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b0:	2304      	movs	r3, #4
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	4619      	mov	r1, r3
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <HAL_UART_MspInit+0x100>)
 80021c4:	f7fe fdc8 	bl	8000d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021c8:	2308      	movs	r3, #8
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	4619      	mov	r1, r3
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_UART_MspInit+0x100>)
 80021dc:	f7fe fdbc 	bl	8000d58 <HAL_GPIO_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40004400 	.word	0x40004400

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <HardFault_Handler+0x4>

0800220a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <MemManage_Handler+0x4>

08002210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <BusFault_Handler+0x4>

08002216 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <UsageFault_Handler+0x4>

0800221c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f7fe fc66 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x50>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <_sbrk+0x16>
		heap_end = &end;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <_sbrk+0x50>)
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <_sbrk+0x54>)
 8002260:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <_sbrk+0x50>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <_sbrk+0x50>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	466a      	mov	r2, sp
 8002272:	4293      	cmp	r3, r2
 8002274:	d907      	bls.n	8002286 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002276:	f000 f86f 	bl	8002358 <__errno>
 800227a:	4602      	mov	r2, r0
 800227c:	230c      	movs	r3, #12
 800227e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	e006      	b.n	8002294 <_sbrk+0x48>
	}

	heap_end += incr;
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <_sbrk+0x50>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	4a03      	ldr	r2, [pc, #12]	; (800229c <_sbrk+0x50>)
 8002290:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200001f8 	.word	0x200001f8
 80022a0:	20000358 	.word	0x20000358

080022a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <SystemInit+0x5c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <SystemInit+0x5c>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <SystemInit+0x5c>)
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4911      	ldr	r1, [pc, #68]	; (8002300 <SystemInit+0x5c>)
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <SystemInit+0x60>)
 80022bc:	4013      	ands	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <SystemInit+0x5c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <SystemInit+0x5c>)
 80022c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <SystemInit+0x5c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <SystemInit+0x5c>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <SystemInit+0x5c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <SystemInit+0x5c>)
 80022e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <SystemInit+0x5c>)
 80022ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SystemInit+0x64>)
 80022f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	f8ff0000 	.word	0xf8ff0000
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800230c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800230e:	e003      	b.n	8002318 <LoopCopyDataInit>

08002310 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002312:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002314:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002316:	3104      	adds	r1, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002318:	480a      	ldr	r0, [pc, #40]	; (8002344 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800231c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800231e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002320:	d3f6      	bcc.n	8002310 <CopyDataInit>
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002324:	e002      	b.n	800232c <LoopFillZerobss>

08002326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002328:	f842 3b04 	str.w	r3, [r2], #4

0800232c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800232e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002330:	d3f9      	bcc.n	8002326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002332:	f7ff ffb7 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f000 f815 	bl	8002364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800233a:	f7ff fda5 	bl	8001e88 <main>
  bx lr
 800233e:	4770      	bx	lr
  ldr r3, =_sidata
 8002340:	08004068 	.word	0x08004068
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002348:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800234c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002350:	20000354 	.word	0x20000354

08002354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC1_2_IRQHandler>
	...

08002358 <__errno>:
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <__errno+0x8>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	2500      	movs	r5, #0
 8002368:	4e0c      	ldr	r6, [pc, #48]	; (800239c <__libc_init_array+0x38>)
 800236a:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <__libc_init_array+0x3c>)
 800236c:	1ba4      	subs	r4, r4, r6
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	42a5      	cmp	r5, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	f001 fd3c 	bl	8003df0 <_init>
 8002378:	2500      	movs	r5, #0
 800237a:	4e0a      	ldr	r6, [pc, #40]	; (80023a4 <__libc_init_array+0x40>)
 800237c:	4c0a      	ldr	r4, [pc, #40]	; (80023a8 <__libc_init_array+0x44>)
 800237e:	1ba4      	subs	r4, r4, r6
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	42a5      	cmp	r5, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800238c:	4798      	blx	r3
 800238e:	3501      	adds	r5, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002396:	4798      	blx	r3
 8002398:	3501      	adds	r5, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	08004060 	.word	0x08004060
 80023a0:	08004060 	.word	0x08004060
 80023a4:	08004060 	.word	0x08004060
 80023a8:	08004064 	.word	0x08004064

080023ac <memset>:
 80023ac:	4603      	mov	r3, r0
 80023ae:	4402      	add	r2, r0
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d100      	bne.n	80023b6 <memset+0xa>
 80023b4:	4770      	bx	lr
 80023b6:	f803 1b01 	strb.w	r1, [r3], #1
 80023ba:	e7f9      	b.n	80023b0 <memset+0x4>

080023bc <__cvt>:
 80023bc:	2b00      	cmp	r3, #0
 80023be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c2:	461e      	mov	r6, r3
 80023c4:	bfbb      	ittet	lt
 80023c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80023ca:	461e      	movlt	r6, r3
 80023cc:	2300      	movge	r3, #0
 80023ce:	232d      	movlt	r3, #45	; 0x2d
 80023d0:	b088      	sub	sp, #32
 80023d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80023d4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80023d8:	f027 0720 	bic.w	r7, r7, #32
 80023dc:	2f46      	cmp	r7, #70	; 0x46
 80023de:	4614      	mov	r4, r2
 80023e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023e2:	700b      	strb	r3, [r1, #0]
 80023e4:	d004      	beq.n	80023f0 <__cvt+0x34>
 80023e6:	2f45      	cmp	r7, #69	; 0x45
 80023e8:	d100      	bne.n	80023ec <__cvt+0x30>
 80023ea:	3501      	adds	r5, #1
 80023ec:	2302      	movs	r3, #2
 80023ee:	e000      	b.n	80023f2 <__cvt+0x36>
 80023f0:	2303      	movs	r3, #3
 80023f2:	aa07      	add	r2, sp, #28
 80023f4:	9204      	str	r2, [sp, #16]
 80023f6:	aa06      	add	r2, sp, #24
 80023f8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80023fc:	e9cd 3500 	strd	r3, r5, [sp]
 8002400:	4622      	mov	r2, r4
 8002402:	4633      	mov	r3, r6
 8002404:	f000 fba8 	bl	8002b58 <_dtoa_r>
 8002408:	2f47      	cmp	r7, #71	; 0x47
 800240a:	4680      	mov	r8, r0
 800240c:	d102      	bne.n	8002414 <__cvt+0x58>
 800240e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002410:	07db      	lsls	r3, r3, #31
 8002412:	d526      	bpl.n	8002462 <__cvt+0xa6>
 8002414:	2f46      	cmp	r7, #70	; 0x46
 8002416:	eb08 0905 	add.w	r9, r8, r5
 800241a:	d111      	bne.n	8002440 <__cvt+0x84>
 800241c:	f898 3000 	ldrb.w	r3, [r8]
 8002420:	2b30      	cmp	r3, #48	; 0x30
 8002422:	d10a      	bne.n	800243a <__cvt+0x7e>
 8002424:	2200      	movs	r2, #0
 8002426:	2300      	movs	r3, #0
 8002428:	4620      	mov	r0, r4
 800242a:	4631      	mov	r1, r6
 800242c:	f7fe fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8002430:	b918      	cbnz	r0, 800243a <__cvt+0x7e>
 8002432:	f1c5 0501 	rsb	r5, r5, #1
 8002436:	f8ca 5000 	str.w	r5, [sl]
 800243a:	f8da 3000 	ldr.w	r3, [sl]
 800243e:	4499      	add	r9, r3
 8002440:	2200      	movs	r2, #0
 8002442:	2300      	movs	r3, #0
 8002444:	4620      	mov	r0, r4
 8002446:	4631      	mov	r1, r6
 8002448:	f7fe faae 	bl	80009a8 <__aeabi_dcmpeq>
 800244c:	b938      	cbnz	r0, 800245e <__cvt+0xa2>
 800244e:	2230      	movs	r2, #48	; 0x30
 8002450:	9b07      	ldr	r3, [sp, #28]
 8002452:	454b      	cmp	r3, r9
 8002454:	d205      	bcs.n	8002462 <__cvt+0xa6>
 8002456:	1c59      	adds	r1, r3, #1
 8002458:	9107      	str	r1, [sp, #28]
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e7f8      	b.n	8002450 <__cvt+0x94>
 800245e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002462:	4640      	mov	r0, r8
 8002464:	9b07      	ldr	r3, [sp, #28]
 8002466:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002468:	eba3 0308 	sub.w	r3, r3, r8
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	b008      	add	sp, #32
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002474 <__exponent>:
 8002474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002476:	2900      	cmp	r1, #0
 8002478:	bfb4      	ite	lt
 800247a:	232d      	movlt	r3, #45	; 0x2d
 800247c:	232b      	movge	r3, #43	; 0x2b
 800247e:	4604      	mov	r4, r0
 8002480:	bfb8      	it	lt
 8002482:	4249      	neglt	r1, r1
 8002484:	2909      	cmp	r1, #9
 8002486:	f804 2b02 	strb.w	r2, [r4], #2
 800248a:	7043      	strb	r3, [r0, #1]
 800248c:	dd21      	ble.n	80024d2 <__exponent+0x5e>
 800248e:	f10d 0307 	add.w	r3, sp, #7
 8002492:	461f      	mov	r7, r3
 8002494:	260a      	movs	r6, #10
 8002496:	fb91 f5f6 	sdiv	r5, r1, r6
 800249a:	fb06 1115 	mls	r1, r6, r5, r1
 800249e:	2d09      	cmp	r5, #9
 80024a0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80024a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80024a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80024ac:	4629      	mov	r1, r5
 80024ae:	dc09      	bgt.n	80024c4 <__exponent+0x50>
 80024b0:	3130      	adds	r1, #48	; 0x30
 80024b2:	3b02      	subs	r3, #2
 80024b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80024b8:	42bb      	cmp	r3, r7
 80024ba:	4622      	mov	r2, r4
 80024bc:	d304      	bcc.n	80024c8 <__exponent+0x54>
 80024be:	1a10      	subs	r0, r2, r0
 80024c0:	b003      	add	sp, #12
 80024c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c4:	4613      	mov	r3, r2
 80024c6:	e7e6      	b.n	8002496 <__exponent+0x22>
 80024c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024cc:	f804 2b01 	strb.w	r2, [r4], #1
 80024d0:	e7f2      	b.n	80024b8 <__exponent+0x44>
 80024d2:	2330      	movs	r3, #48	; 0x30
 80024d4:	4419      	add	r1, r3
 80024d6:	7083      	strb	r3, [r0, #2]
 80024d8:	1d02      	adds	r2, r0, #4
 80024da:	70c1      	strb	r1, [r0, #3]
 80024dc:	e7ef      	b.n	80024be <__exponent+0x4a>
	...

080024e0 <_printf_float>:
 80024e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e4:	b091      	sub	sp, #68	; 0x44
 80024e6:	460c      	mov	r4, r1
 80024e8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80024ea:	4693      	mov	fp, r2
 80024ec:	461e      	mov	r6, r3
 80024ee:	4605      	mov	r5, r0
 80024f0:	f001 f8e6 	bl	80036c0 <_localeconv_r>
 80024f4:	6803      	ldr	r3, [r0, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	9309      	str	r3, [sp, #36]	; 0x24
 80024fa:	f7fd fe29 	bl	8000150 <strlen>
 80024fe:	2300      	movs	r3, #0
 8002500:	930e      	str	r3, [sp, #56]	; 0x38
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	900a      	str	r0, [sp, #40]	; 0x28
 8002506:	3307      	adds	r3, #7
 8002508:	f023 0307 	bic.w	r3, r3, #7
 800250c:	f103 0208 	add.w	r2, r3, #8
 8002510:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002514:	f8d4 a000 	ldr.w	sl, [r4]
 8002518:	603a      	str	r2, [r7, #0]
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002522:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800252a:	930b      	str	r3, [sp, #44]	; 0x2c
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	4ba6      	ldr	r3, [pc, #664]	; (80027cc <_printf_float+0x2ec>)
 8002532:	4638      	mov	r0, r7
 8002534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002536:	f7fe fa69 	bl	8000a0c <__aeabi_dcmpun>
 800253a:	bb68      	cbnz	r0, 8002598 <_printf_float+0xb8>
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	4ba2      	ldr	r3, [pc, #648]	; (80027cc <_printf_float+0x2ec>)
 8002542:	4638      	mov	r0, r7
 8002544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002546:	f7fe fa43 	bl	80009d0 <__aeabi_dcmple>
 800254a:	bb28      	cbnz	r0, 8002598 <_printf_float+0xb8>
 800254c:	2200      	movs	r2, #0
 800254e:	2300      	movs	r3, #0
 8002550:	4638      	mov	r0, r7
 8002552:	4649      	mov	r1, r9
 8002554:	f7fe fa32 	bl	80009bc <__aeabi_dcmplt>
 8002558:	b110      	cbz	r0, 8002560 <_printf_float+0x80>
 800255a:	232d      	movs	r3, #45	; 0x2d
 800255c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002560:	4f9b      	ldr	r7, [pc, #620]	; (80027d0 <_printf_float+0x2f0>)
 8002562:	4b9c      	ldr	r3, [pc, #624]	; (80027d4 <_printf_float+0x2f4>)
 8002564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002568:	bf98      	it	ls
 800256a:	461f      	movls	r7, r3
 800256c:	2303      	movs	r3, #3
 800256e:	f04f 0900 	mov.w	r9, #0
 8002572:	6123      	str	r3, [r4, #16]
 8002574:	f02a 0304 	bic.w	r3, sl, #4
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	9600      	str	r6, [sp, #0]
 800257c:	465b      	mov	r3, fp
 800257e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002580:	4621      	mov	r1, r4
 8002582:	4628      	mov	r0, r5
 8002584:	f000 f9e2 	bl	800294c <_printf_common>
 8002588:	3001      	adds	r0, #1
 800258a:	f040 8090 	bne.w	80026ae <_printf_float+0x1ce>
 800258e:	f04f 30ff 	mov.w	r0, #4294967295
 8002592:	b011      	add	sp, #68	; 0x44
 8002594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002598:	463a      	mov	r2, r7
 800259a:	464b      	mov	r3, r9
 800259c:	4638      	mov	r0, r7
 800259e:	4649      	mov	r1, r9
 80025a0:	f7fe fa34 	bl	8000a0c <__aeabi_dcmpun>
 80025a4:	b110      	cbz	r0, 80025ac <_printf_float+0xcc>
 80025a6:	4f8c      	ldr	r7, [pc, #560]	; (80027d8 <_printf_float+0x2f8>)
 80025a8:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <_printf_float+0x2fc>)
 80025aa:	e7db      	b.n	8002564 <_printf_float+0x84>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	a80d      	add	r0, sp, #52	; 0x34
 80025b6:	a90e      	add	r1, sp, #56	; 0x38
 80025b8:	d140      	bne.n	800263c <_printf_float+0x15c>
 80025ba:	2306      	movs	r3, #6
 80025bc:	6063      	str	r3, [r4, #4]
 80025be:	f04f 0c00 	mov.w	ip, #0
 80025c2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80025c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80025ca:	6863      	ldr	r3, [r4, #4]
 80025cc:	6022      	str	r2, [r4, #0]
 80025ce:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	463a      	mov	r2, r7
 80025d6:	464b      	mov	r3, r9
 80025d8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80025dc:	4628      	mov	r0, r5
 80025de:	f7ff feed 	bl	80023bc <__cvt>
 80025e2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80025e6:	2b47      	cmp	r3, #71	; 0x47
 80025e8:	4607      	mov	r7, r0
 80025ea:	d109      	bne.n	8002600 <_printf_float+0x120>
 80025ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025ee:	1cd8      	adds	r0, r3, #3
 80025f0:	db02      	blt.n	80025f8 <_printf_float+0x118>
 80025f2:	6862      	ldr	r2, [r4, #4]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	dd47      	ble.n	8002688 <_printf_float+0x1a8>
 80025f8:	f1a8 0802 	sub.w	r8, r8, #2
 80025fc:	fa5f f888 	uxtb.w	r8, r8
 8002600:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002604:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002606:	d824      	bhi.n	8002652 <_printf_float+0x172>
 8002608:	3901      	subs	r1, #1
 800260a:	4642      	mov	r2, r8
 800260c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002610:	910d      	str	r1, [sp, #52]	; 0x34
 8002612:	f7ff ff2f 	bl	8002474 <__exponent>
 8002616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002618:	4681      	mov	r9, r0
 800261a:	1813      	adds	r3, r2, r0
 800261c:	2a01      	cmp	r2, #1
 800261e:	6123      	str	r3, [r4, #16]
 8002620:	dc02      	bgt.n	8002628 <_printf_float+0x148>
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	07d1      	lsls	r1, r2, #31
 8002626:	d501      	bpl.n	800262c <_printf_float+0x14c>
 8002628:	3301      	adds	r3, #1
 800262a:	6123      	str	r3, [r4, #16]
 800262c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0a2      	beq.n	800257a <_printf_float+0x9a>
 8002634:	232d      	movs	r3, #45	; 0x2d
 8002636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800263a:	e79e      	b.n	800257a <_printf_float+0x9a>
 800263c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002640:	f000 816e 	beq.w	8002920 <_printf_float+0x440>
 8002644:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002648:	d1b9      	bne.n	80025be <_printf_float+0xde>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1b7      	bne.n	80025be <_printf_float+0xde>
 800264e:	2301      	movs	r3, #1
 8002650:	e7b4      	b.n	80025bc <_printf_float+0xdc>
 8002652:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002656:	d119      	bne.n	800268c <_printf_float+0x1ac>
 8002658:	2900      	cmp	r1, #0
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	dd0c      	ble.n	8002678 <_printf_float+0x198>
 800265e:	6121      	str	r1, [r4, #16]
 8002660:	b913      	cbnz	r3, 8002668 <_printf_float+0x188>
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	07d2      	lsls	r2, r2, #31
 8002666:	d502      	bpl.n	800266e <_printf_float+0x18e>
 8002668:	3301      	adds	r3, #1
 800266a:	440b      	add	r3, r1
 800266c:	6123      	str	r3, [r4, #16]
 800266e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002670:	f04f 0900 	mov.w	r9, #0
 8002674:	65a3      	str	r3, [r4, #88]	; 0x58
 8002676:	e7d9      	b.n	800262c <_printf_float+0x14c>
 8002678:	b913      	cbnz	r3, 8002680 <_printf_float+0x1a0>
 800267a:	6822      	ldr	r2, [r4, #0]
 800267c:	07d0      	lsls	r0, r2, #31
 800267e:	d501      	bpl.n	8002684 <_printf_float+0x1a4>
 8002680:	3302      	adds	r3, #2
 8002682:	e7f3      	b.n	800266c <_printf_float+0x18c>
 8002684:	2301      	movs	r3, #1
 8002686:	e7f1      	b.n	800266c <_printf_float+0x18c>
 8002688:	f04f 0867 	mov.w	r8, #103	; 0x67
 800268c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002690:	4293      	cmp	r3, r2
 8002692:	db05      	blt.n	80026a0 <_printf_float+0x1c0>
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	6123      	str	r3, [r4, #16]
 8002698:	07d1      	lsls	r1, r2, #31
 800269a:	d5e8      	bpl.n	800266e <_printf_float+0x18e>
 800269c:	3301      	adds	r3, #1
 800269e:	e7e5      	b.n	800266c <_printf_float+0x18c>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bfcc      	ite	gt
 80026a4:	2301      	movgt	r3, #1
 80026a6:	f1c3 0302 	rsble	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	e7de      	b.n	800266c <_printf_float+0x18c>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	055a      	lsls	r2, r3, #21
 80026b2:	d407      	bmi.n	80026c4 <_printf_float+0x1e4>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	463a      	mov	r2, r7
 80026b8:	4659      	mov	r1, fp
 80026ba:	4628      	mov	r0, r5
 80026bc:	47b0      	blx	r6
 80026be:	3001      	adds	r0, #1
 80026c0:	d129      	bne.n	8002716 <_printf_float+0x236>
 80026c2:	e764      	b.n	800258e <_printf_float+0xae>
 80026c4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80026c8:	f240 80d7 	bls.w	800287a <_printf_float+0x39a>
 80026cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026d0:	2200      	movs	r2, #0
 80026d2:	2300      	movs	r3, #0
 80026d4:	f7fe f968 	bl	80009a8 <__aeabi_dcmpeq>
 80026d8:	b388      	cbz	r0, 800273e <_printf_float+0x25e>
 80026da:	2301      	movs	r3, #1
 80026dc:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <_printf_float+0x300>)
 80026de:	4659      	mov	r1, fp
 80026e0:	4628      	mov	r0, r5
 80026e2:	47b0      	blx	r6
 80026e4:	3001      	adds	r0, #1
 80026e6:	f43f af52 	beq.w	800258e <_printf_float+0xae>
 80026ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026ee:	429a      	cmp	r2, r3
 80026f0:	db02      	blt.n	80026f8 <_printf_float+0x218>
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	07d8      	lsls	r0, r3, #31
 80026f6:	d50e      	bpl.n	8002716 <_printf_float+0x236>
 80026f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026fc:	4659      	mov	r1, fp
 80026fe:	4628      	mov	r0, r5
 8002700:	47b0      	blx	r6
 8002702:	3001      	adds	r0, #1
 8002704:	f43f af43 	beq.w	800258e <_printf_float+0xae>
 8002708:	2700      	movs	r7, #0
 800270a:	f104 081a 	add.w	r8, r4, #26
 800270e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002710:	3b01      	subs	r3, #1
 8002712:	42bb      	cmp	r3, r7
 8002714:	dc09      	bgt.n	800272a <_printf_float+0x24a>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	079f      	lsls	r7, r3, #30
 800271a:	f100 80fd 	bmi.w	8002918 <_printf_float+0x438>
 800271e:	68e0      	ldr	r0, [r4, #12]
 8002720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002722:	4298      	cmp	r0, r3
 8002724:	bfb8      	it	lt
 8002726:	4618      	movlt	r0, r3
 8002728:	e733      	b.n	8002592 <_printf_float+0xb2>
 800272a:	2301      	movs	r3, #1
 800272c:	4642      	mov	r2, r8
 800272e:	4659      	mov	r1, fp
 8002730:	4628      	mov	r0, r5
 8002732:	47b0      	blx	r6
 8002734:	3001      	adds	r0, #1
 8002736:	f43f af2a 	beq.w	800258e <_printf_float+0xae>
 800273a:	3701      	adds	r7, #1
 800273c:	e7e7      	b.n	800270e <_printf_float+0x22e>
 800273e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002740:	2b00      	cmp	r3, #0
 8002742:	dc2b      	bgt.n	800279c <_printf_float+0x2bc>
 8002744:	2301      	movs	r3, #1
 8002746:	4a26      	ldr	r2, [pc, #152]	; (80027e0 <_printf_float+0x300>)
 8002748:	4659      	mov	r1, fp
 800274a:	4628      	mov	r0, r5
 800274c:	47b0      	blx	r6
 800274e:	3001      	adds	r0, #1
 8002750:	f43f af1d 	beq.w	800258e <_printf_float+0xae>
 8002754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002756:	b923      	cbnz	r3, 8002762 <_printf_float+0x282>
 8002758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800275a:	b913      	cbnz	r3, 8002762 <_printf_float+0x282>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	07d9      	lsls	r1, r3, #31
 8002760:	d5d9      	bpl.n	8002716 <_printf_float+0x236>
 8002762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002766:	4659      	mov	r1, fp
 8002768:	4628      	mov	r0, r5
 800276a:	47b0      	blx	r6
 800276c:	3001      	adds	r0, #1
 800276e:	f43f af0e 	beq.w	800258e <_printf_float+0xae>
 8002772:	f04f 0800 	mov.w	r8, #0
 8002776:	f104 091a 	add.w	r9, r4, #26
 800277a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800277c:	425b      	negs	r3, r3
 800277e:	4543      	cmp	r3, r8
 8002780:	dc01      	bgt.n	8002786 <_printf_float+0x2a6>
 8002782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002784:	e797      	b.n	80026b6 <_printf_float+0x1d6>
 8002786:	2301      	movs	r3, #1
 8002788:	464a      	mov	r2, r9
 800278a:	4659      	mov	r1, fp
 800278c:	4628      	mov	r0, r5
 800278e:	47b0      	blx	r6
 8002790:	3001      	adds	r0, #1
 8002792:	f43f aefc 	beq.w	800258e <_printf_float+0xae>
 8002796:	f108 0801 	add.w	r8, r8, #1
 800279a:	e7ee      	b.n	800277a <_printf_float+0x29a>
 800279c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800279e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a0:	429a      	cmp	r2, r3
 80027a2:	bfa8      	it	ge
 80027a4:	461a      	movge	r2, r3
 80027a6:	2a00      	cmp	r2, #0
 80027a8:	4690      	mov	r8, r2
 80027aa:	dd07      	ble.n	80027bc <_printf_float+0x2dc>
 80027ac:	4613      	mov	r3, r2
 80027ae:	4659      	mov	r1, fp
 80027b0:	463a      	mov	r2, r7
 80027b2:	4628      	mov	r0, r5
 80027b4:	47b0      	blx	r6
 80027b6:	3001      	adds	r0, #1
 80027b8:	f43f aee9 	beq.w	800258e <_printf_float+0xae>
 80027bc:	f104 031a 	add.w	r3, r4, #26
 80027c0:	f04f 0a00 	mov.w	sl, #0
 80027c4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80027c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80027ca:	e015      	b.n	80027f8 <_printf_float+0x318>
 80027cc:	7fefffff 	.word	0x7fefffff
 80027d0:	08003e38 	.word	0x08003e38
 80027d4:	08003e34 	.word	0x08003e34
 80027d8:	08003e40 	.word	0x08003e40
 80027dc:	08003e3c 	.word	0x08003e3c
 80027e0:	08003e44 	.word	0x08003e44
 80027e4:	2301      	movs	r3, #1
 80027e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027e8:	4659      	mov	r1, fp
 80027ea:	4628      	mov	r0, r5
 80027ec:	47b0      	blx	r6
 80027ee:	3001      	adds	r0, #1
 80027f0:	f43f aecd 	beq.w	800258e <_printf_float+0xae>
 80027f4:	f10a 0a01 	add.w	sl, sl, #1
 80027f8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80027fc:	eba9 0308 	sub.w	r3, r9, r8
 8002800:	4553      	cmp	r3, sl
 8002802:	dcef      	bgt.n	80027e4 <_printf_float+0x304>
 8002804:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002808:	429a      	cmp	r2, r3
 800280a:	444f      	add	r7, r9
 800280c:	db14      	blt.n	8002838 <_printf_float+0x358>
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	07da      	lsls	r2, r3, #31
 8002812:	d411      	bmi.n	8002838 <_printf_float+0x358>
 8002814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002816:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002818:	eba3 0209 	sub.w	r2, r3, r9
 800281c:	eba3 0901 	sub.w	r9, r3, r1
 8002820:	4591      	cmp	r9, r2
 8002822:	bfa8      	it	ge
 8002824:	4691      	movge	r9, r2
 8002826:	f1b9 0f00 	cmp.w	r9, #0
 800282a:	dc0d      	bgt.n	8002848 <_printf_float+0x368>
 800282c:	2700      	movs	r7, #0
 800282e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002832:	f104 081a 	add.w	r8, r4, #26
 8002836:	e018      	b.n	800286a <_printf_float+0x38a>
 8002838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800283c:	4659      	mov	r1, fp
 800283e:	4628      	mov	r0, r5
 8002840:	47b0      	blx	r6
 8002842:	3001      	adds	r0, #1
 8002844:	d1e6      	bne.n	8002814 <_printf_float+0x334>
 8002846:	e6a2      	b.n	800258e <_printf_float+0xae>
 8002848:	464b      	mov	r3, r9
 800284a:	463a      	mov	r2, r7
 800284c:	4659      	mov	r1, fp
 800284e:	4628      	mov	r0, r5
 8002850:	47b0      	blx	r6
 8002852:	3001      	adds	r0, #1
 8002854:	d1ea      	bne.n	800282c <_printf_float+0x34c>
 8002856:	e69a      	b.n	800258e <_printf_float+0xae>
 8002858:	2301      	movs	r3, #1
 800285a:	4642      	mov	r2, r8
 800285c:	4659      	mov	r1, fp
 800285e:	4628      	mov	r0, r5
 8002860:	47b0      	blx	r6
 8002862:	3001      	adds	r0, #1
 8002864:	f43f ae93 	beq.w	800258e <_printf_float+0xae>
 8002868:	3701      	adds	r7, #1
 800286a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	eba3 0309 	sub.w	r3, r3, r9
 8002874:	42bb      	cmp	r3, r7
 8002876:	dcef      	bgt.n	8002858 <_printf_float+0x378>
 8002878:	e74d      	b.n	8002716 <_printf_float+0x236>
 800287a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800287c:	2a01      	cmp	r2, #1
 800287e:	dc01      	bgt.n	8002884 <_printf_float+0x3a4>
 8002880:	07db      	lsls	r3, r3, #31
 8002882:	d538      	bpl.n	80028f6 <_printf_float+0x416>
 8002884:	2301      	movs	r3, #1
 8002886:	463a      	mov	r2, r7
 8002888:	4659      	mov	r1, fp
 800288a:	4628      	mov	r0, r5
 800288c:	47b0      	blx	r6
 800288e:	3001      	adds	r0, #1
 8002890:	f43f ae7d 	beq.w	800258e <_printf_float+0xae>
 8002894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002898:	4659      	mov	r1, fp
 800289a:	4628      	mov	r0, r5
 800289c:	47b0      	blx	r6
 800289e:	3001      	adds	r0, #1
 80028a0:	f107 0701 	add.w	r7, r7, #1
 80028a4:	f43f ae73 	beq.w	800258e <_printf_float+0xae>
 80028a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028ae:	2200      	movs	r2, #0
 80028b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80028b4:	2300      	movs	r3, #0
 80028b6:	f7fe f877 	bl	80009a8 <__aeabi_dcmpeq>
 80028ba:	b9c0      	cbnz	r0, 80028ee <_printf_float+0x40e>
 80028bc:	4643      	mov	r3, r8
 80028be:	463a      	mov	r2, r7
 80028c0:	4659      	mov	r1, fp
 80028c2:	4628      	mov	r0, r5
 80028c4:	47b0      	blx	r6
 80028c6:	3001      	adds	r0, #1
 80028c8:	d10d      	bne.n	80028e6 <_printf_float+0x406>
 80028ca:	e660      	b.n	800258e <_printf_float+0xae>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4642      	mov	r2, r8
 80028d0:	4659      	mov	r1, fp
 80028d2:	4628      	mov	r0, r5
 80028d4:	47b0      	blx	r6
 80028d6:	3001      	adds	r0, #1
 80028d8:	f43f ae59 	beq.w	800258e <_printf_float+0xae>
 80028dc:	3701      	adds	r7, #1
 80028de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028e0:	3b01      	subs	r3, #1
 80028e2:	42bb      	cmp	r3, r7
 80028e4:	dcf2      	bgt.n	80028cc <_printf_float+0x3ec>
 80028e6:	464b      	mov	r3, r9
 80028e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028ec:	e6e4      	b.n	80026b8 <_printf_float+0x1d8>
 80028ee:	2700      	movs	r7, #0
 80028f0:	f104 081a 	add.w	r8, r4, #26
 80028f4:	e7f3      	b.n	80028de <_printf_float+0x3fe>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e7e1      	b.n	80028be <_printf_float+0x3de>
 80028fa:	2301      	movs	r3, #1
 80028fc:	4642      	mov	r2, r8
 80028fe:	4659      	mov	r1, fp
 8002900:	4628      	mov	r0, r5
 8002902:	47b0      	blx	r6
 8002904:	3001      	adds	r0, #1
 8002906:	f43f ae42 	beq.w	800258e <_printf_float+0xae>
 800290a:	3701      	adds	r7, #1
 800290c:	68e3      	ldr	r3, [r4, #12]
 800290e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	42bb      	cmp	r3, r7
 8002914:	dcf1      	bgt.n	80028fa <_printf_float+0x41a>
 8002916:	e702      	b.n	800271e <_printf_float+0x23e>
 8002918:	2700      	movs	r7, #0
 800291a:	f104 0819 	add.w	r8, r4, #25
 800291e:	e7f5      	b.n	800290c <_printf_float+0x42c>
 8002920:	2b00      	cmp	r3, #0
 8002922:	f43f ae94 	beq.w	800264e <_printf_float+0x16e>
 8002926:	f04f 0c00 	mov.w	ip, #0
 800292a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800292e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002932:	6022      	str	r2, [r4, #0]
 8002934:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002938:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	463a      	mov	r2, r7
 8002940:	464b      	mov	r3, r9
 8002942:	4628      	mov	r0, r5
 8002944:	f7ff fd3a 	bl	80023bc <__cvt>
 8002948:	4607      	mov	r7, r0
 800294a:	e64f      	b.n	80025ec <_printf_float+0x10c>

0800294c <_printf_common>:
 800294c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002950:	4691      	mov	r9, r2
 8002952:	461f      	mov	r7, r3
 8002954:	688a      	ldr	r2, [r1, #8]
 8002956:	690b      	ldr	r3, [r1, #16]
 8002958:	4606      	mov	r6, r0
 800295a:	4293      	cmp	r3, r2
 800295c:	bfb8      	it	lt
 800295e:	4613      	movlt	r3, r2
 8002960:	f8c9 3000 	str.w	r3, [r9]
 8002964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002968:	460c      	mov	r4, r1
 800296a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800296e:	b112      	cbz	r2, 8002976 <_printf_common+0x2a>
 8002970:	3301      	adds	r3, #1
 8002972:	f8c9 3000 	str.w	r3, [r9]
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	0699      	lsls	r1, r3, #26
 800297a:	bf42      	ittt	mi
 800297c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002980:	3302      	addmi	r3, #2
 8002982:	f8c9 3000 	strmi.w	r3, [r9]
 8002986:	6825      	ldr	r5, [r4, #0]
 8002988:	f015 0506 	ands.w	r5, r5, #6
 800298c:	d107      	bne.n	800299e <_printf_common+0x52>
 800298e:	f104 0a19 	add.w	sl, r4, #25
 8002992:	68e3      	ldr	r3, [r4, #12]
 8002994:	f8d9 2000 	ldr.w	r2, [r9]
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	42ab      	cmp	r3, r5
 800299c:	dc29      	bgt.n	80029f2 <_printf_common+0xa6>
 800299e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029a2:	6822      	ldr	r2, [r4, #0]
 80029a4:	3300      	adds	r3, #0
 80029a6:	bf18      	it	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	0692      	lsls	r2, r2, #26
 80029ac:	d42e      	bmi.n	8002a0c <_printf_common+0xc0>
 80029ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029b2:	4639      	mov	r1, r7
 80029b4:	4630      	mov	r0, r6
 80029b6:	47c0      	blx	r8
 80029b8:	3001      	adds	r0, #1
 80029ba:	d021      	beq.n	8002a00 <_printf_common+0xb4>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	68e5      	ldr	r5, [r4, #12]
 80029c0:	f003 0306 	and.w	r3, r3, #6
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	bf18      	it	ne
 80029c8:	2500      	movne	r5, #0
 80029ca:	f8d9 2000 	ldr.w	r2, [r9]
 80029ce:	f04f 0900 	mov.w	r9, #0
 80029d2:	bf08      	it	eq
 80029d4:	1aad      	subeq	r5, r5, r2
 80029d6:	68a3      	ldr	r3, [r4, #8]
 80029d8:	6922      	ldr	r2, [r4, #16]
 80029da:	bf08      	it	eq
 80029dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bfc4      	itt	gt
 80029e4:	1a9b      	subgt	r3, r3, r2
 80029e6:	18ed      	addgt	r5, r5, r3
 80029e8:	341a      	adds	r4, #26
 80029ea:	454d      	cmp	r5, r9
 80029ec:	d11a      	bne.n	8002a24 <_printf_common+0xd8>
 80029ee:	2000      	movs	r0, #0
 80029f0:	e008      	b.n	8002a04 <_printf_common+0xb8>
 80029f2:	2301      	movs	r3, #1
 80029f4:	4652      	mov	r2, sl
 80029f6:	4639      	mov	r1, r7
 80029f8:	4630      	mov	r0, r6
 80029fa:	47c0      	blx	r8
 80029fc:	3001      	adds	r0, #1
 80029fe:	d103      	bne.n	8002a08 <_printf_common+0xbc>
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a08:	3501      	adds	r5, #1
 8002a0a:	e7c2      	b.n	8002992 <_printf_common+0x46>
 8002a0c:	2030      	movs	r0, #48	; 0x30
 8002a0e:	18e1      	adds	r1, r4, r3
 8002a10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a1a:	4422      	add	r2, r4
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a22:	e7c4      	b.n	80029ae <_printf_common+0x62>
 8002a24:	2301      	movs	r3, #1
 8002a26:	4622      	mov	r2, r4
 8002a28:	4639      	mov	r1, r7
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	47c0      	blx	r8
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d0e6      	beq.n	8002a00 <_printf_common+0xb4>
 8002a32:	f109 0901 	add.w	r9, r9, #1
 8002a36:	e7d8      	b.n	80029ea <_printf_common+0x9e>

08002a38 <quorem>:
 8002a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a3c:	6903      	ldr	r3, [r0, #16]
 8002a3e:	690c      	ldr	r4, [r1, #16]
 8002a40:	4680      	mov	r8, r0
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	f2c0 8084 	blt.w	8002b50 <quorem+0x118>
 8002a48:	3c01      	subs	r4, #1
 8002a4a:	f101 0714 	add.w	r7, r1, #20
 8002a4e:	f100 0614 	add.w	r6, r0, #20
 8002a52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002a56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002a5a:	3501      	adds	r5, #1
 8002a5c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a60:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002a64:	eb06 030c 	add.w	r3, r6, ip
 8002a68:	eb07 090c 	add.w	r9, r7, ip
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	b39d      	cbz	r5, 8002ad8 <quorem+0xa0>
 8002a70:	f04f 0a00 	mov.w	sl, #0
 8002a74:	4638      	mov	r0, r7
 8002a76:	46b6      	mov	lr, r6
 8002a78:	46d3      	mov	fp, sl
 8002a7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a7e:	b293      	uxth	r3, r2
 8002a80:	fb05 a303 	mla	r3, r5, r3, sl
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a8a:	fb05 a202 	mla	r2, r5, r2, sl
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	ebab 0303 	sub.w	r3, fp, r3
 8002a94:	f8de b000 	ldr.w	fp, [lr]
 8002a98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002a9c:	fa1f fb8b 	uxth.w	fp, fp
 8002aa0:	445b      	add	r3, fp
 8002aa2:	fa1f fb82 	uxth.w	fp, r2
 8002aa6:	f8de 2000 	ldr.w	r2, [lr]
 8002aaa:	4581      	cmp	r9, r0
 8002aac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002aba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002abe:	f84e 3b04 	str.w	r3, [lr], #4
 8002ac2:	d2da      	bcs.n	8002a7a <quorem+0x42>
 8002ac4:	f856 300c 	ldr.w	r3, [r6, ip]
 8002ac8:	b933      	cbnz	r3, 8002ad8 <quorem+0xa0>
 8002aca:	9b01      	ldr	r3, [sp, #4]
 8002acc:	3b04      	subs	r3, #4
 8002ace:	429e      	cmp	r6, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	d331      	bcc.n	8002b38 <quorem+0x100>
 8002ad4:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ad8:	4640      	mov	r0, r8
 8002ada:	f001 f827 	bl	8003b2c <__mcmp>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	db26      	blt.n	8002b30 <quorem+0xf8>
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f04f 0c00 	mov.w	ip, #0
 8002ae8:	3501      	adds	r5, #1
 8002aea:	f857 1b04 	ldr.w	r1, [r7], #4
 8002aee:	f8d0 e000 	ldr.w	lr, [r0]
 8002af2:	b28b      	uxth	r3, r1
 8002af4:	ebac 0303 	sub.w	r3, ip, r3
 8002af8:	fa1f f28e 	uxth.w	r2, lr
 8002afc:	4413      	add	r3, r2
 8002afe:	0c0a      	lsrs	r2, r1, #16
 8002b00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b0e:	45b9      	cmp	r9, r7
 8002b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b14:	f840 3b04 	str.w	r3, [r0], #4
 8002b18:	d2e7      	bcs.n	8002aea <quorem+0xb2>
 8002b1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002b1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002b22:	b92a      	cbnz	r2, 8002b30 <quorem+0xf8>
 8002b24:	3b04      	subs	r3, #4
 8002b26:	429e      	cmp	r6, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	d30b      	bcc.n	8002b44 <quorem+0x10c>
 8002b2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8002b30:	4628      	mov	r0, r5
 8002b32:	b003      	add	sp, #12
 8002b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	3b04      	subs	r3, #4
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d1c9      	bne.n	8002ad4 <quorem+0x9c>
 8002b40:	3c01      	subs	r4, #1
 8002b42:	e7c4      	b.n	8002ace <quorem+0x96>
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	3b04      	subs	r3, #4
 8002b48:	2a00      	cmp	r2, #0
 8002b4a:	d1ef      	bne.n	8002b2c <quorem+0xf4>
 8002b4c:	3c01      	subs	r4, #1
 8002b4e:	e7ea      	b.n	8002b26 <quorem+0xee>
 8002b50:	2000      	movs	r0, #0
 8002b52:	e7ee      	b.n	8002b32 <quorem+0xfa>
 8002b54:	0000      	movs	r0, r0
	...

08002b58 <_dtoa_r>:
 8002b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5c:	4616      	mov	r6, r2
 8002b5e:	461f      	mov	r7, r3
 8002b60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b62:	b095      	sub	sp, #84	; 0x54
 8002b64:	4604      	mov	r4, r0
 8002b66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002b6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002b6e:	b93d      	cbnz	r5, 8002b80 <_dtoa_r+0x28>
 8002b70:	2010      	movs	r0, #16
 8002b72:	f000 fdb3 	bl	80036dc <malloc>
 8002b76:	6260      	str	r0, [r4, #36]	; 0x24
 8002b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b7c:	6005      	str	r5, [r0, #0]
 8002b7e:	60c5      	str	r5, [r0, #12]
 8002b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	b151      	cbz	r1, 8002b9c <_dtoa_r+0x44>
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	604a      	str	r2, [r1, #4]
 8002b8e:	608b      	str	r3, [r1, #8]
 8002b90:	4620      	mov	r0, r4
 8002b92:	f000 fdea 	bl	800376a <_Bfree>
 8002b96:	2200      	movs	r2, #0
 8002b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	1e3b      	subs	r3, r7, #0
 8002b9e:	bfaf      	iteee	ge
 8002ba0:	2300      	movge	r3, #0
 8002ba2:	2201      	movlt	r2, #1
 8002ba4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002ba8:	9303      	strlt	r3, [sp, #12]
 8002baa:	bfac      	ite	ge
 8002bac:	f8c8 3000 	strge.w	r3, [r8]
 8002bb0:	f8c8 2000 	strlt.w	r2, [r8]
 8002bb4:	4bae      	ldr	r3, [pc, #696]	; (8002e70 <_dtoa_r+0x318>)
 8002bb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002bba:	ea33 0308 	bics.w	r3, r3, r8
 8002bbe:	d11b      	bne.n	8002bf8 <_dtoa_r+0xa0>
 8002bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8002bc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	9b02      	ldr	r3, [sp, #8]
 8002bca:	b923      	cbnz	r3, 8002bd6 <_dtoa_r+0x7e>
 8002bcc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	f000 8545 	beq.w	8003660 <_dtoa_r+0xb08>
 8002bd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bd8:	b953      	cbnz	r3, 8002bf0 <_dtoa_r+0x98>
 8002bda:	4ba6      	ldr	r3, [pc, #664]	; (8002e74 <_dtoa_r+0x31c>)
 8002bdc:	e021      	b.n	8002c22 <_dtoa_r+0xca>
 8002bde:	4ba6      	ldr	r3, [pc, #664]	; (8002e78 <_dtoa_r+0x320>)
 8002be0:	9306      	str	r3, [sp, #24]
 8002be2:	3308      	adds	r3, #8
 8002be4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	9806      	ldr	r0, [sp, #24]
 8002bea:	b015      	add	sp, #84	; 0x54
 8002bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf0:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <_dtoa_r+0x31c>)
 8002bf2:	9306      	str	r3, [sp, #24]
 8002bf4:	3303      	adds	r3, #3
 8002bf6:	e7f5      	b.n	8002be4 <_dtoa_r+0x8c>
 8002bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2300      	movs	r3, #0
 8002c00:	4630      	mov	r0, r6
 8002c02:	4639      	mov	r1, r7
 8002c04:	f7fd fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8002c08:	4682      	mov	sl, r0
 8002c0a:	b160      	cbz	r0, 8002c26 <_dtoa_r+0xce>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8520 	beq.w	800365a <_dtoa_r+0xb02>
 8002c1a:	4b98      	ldr	r3, [pc, #608]	; (8002e7c <_dtoa_r+0x324>)
 8002c1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	9306      	str	r3, [sp, #24]
 8002c24:	e7e0      	b.n	8002be8 <_dtoa_r+0x90>
 8002c26:	ab12      	add	r3, sp, #72	; 0x48
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	ab13      	add	r3, sp, #76	; 0x4c
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	4632      	mov	r2, r6
 8002c30:	463b      	mov	r3, r7
 8002c32:	4620      	mov	r0, r4
 8002c34:	f000 fff2 	bl	8003c1c <__d2b>
 8002c38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002c3c:	4683      	mov	fp, r0
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d07d      	beq.n	8002d3e <_dtoa_r+0x1e6>
 8002c42:	46b0      	mov	r8, r6
 8002c44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002c48:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002c4c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002c50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <_dtoa_r+0x328>)
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f7fd fa82 	bl	8000168 <__aeabi_dsub>
 8002c64:	a37c      	add	r3, pc, #496	; (adr r3, 8002e58 <_dtoa_r+0x300>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fc35 	bl	80004d8 <__aeabi_dmul>
 8002c6e:	a37c      	add	r3, pc, #496	; (adr r3, 8002e60 <_dtoa_r+0x308>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fa7a 	bl	800016c <__adddf3>
 8002c78:	4606      	mov	r6, r0
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	460f      	mov	r7, r1
 8002c7e:	f7fd fbc1 	bl	8000404 <__aeabi_i2d>
 8002c82:	a379      	add	r3, pc, #484	; (adr r3, 8002e68 <_dtoa_r+0x310>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fc26 	bl	80004d8 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4630      	mov	r0, r6
 8002c92:	4639      	mov	r1, r7
 8002c94:	f7fd fa6a 	bl	800016c <__adddf3>
 8002c98:	4606      	mov	r6, r0
 8002c9a:	460f      	mov	r7, r1
 8002c9c:	f7fd fecc 	bl	8000a38 <__aeabi_d2iz>
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4682      	mov	sl, r0
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	4639      	mov	r1, r7
 8002caa:	f7fd fe87 	bl	80009bc <__aeabi_dcmplt>
 8002cae:	b148      	cbz	r0, 8002cc4 <_dtoa_r+0x16c>
 8002cb0:	4650      	mov	r0, sl
 8002cb2:	f7fd fba7 	bl	8000404 <__aeabi_i2d>
 8002cb6:	4632      	mov	r2, r6
 8002cb8:	463b      	mov	r3, r7
 8002cba:	f7fd fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8002cbe:	b908      	cbnz	r0, 8002cc4 <_dtoa_r+0x16c>
 8002cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002cc4:	f1ba 0f16 	cmp.w	sl, #22
 8002cc8:	d85a      	bhi.n	8002d80 <_dtoa_r+0x228>
 8002cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002cce:	496d      	ldr	r1, [pc, #436]	; (8002e84 <_dtoa_r+0x32c>)
 8002cd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd8:	f7fd fe8e 	bl	80009f8 <__aeabi_dcmpgt>
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d051      	beq.n	8002d84 <_dtoa_r+0x22c>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8002ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002cea:	1b5d      	subs	r5, r3, r5
 8002cec:	1e6b      	subs	r3, r5, #1
 8002cee:	9307      	str	r3, [sp, #28]
 8002cf0:	bf43      	ittte	mi
 8002cf2:	2300      	movmi	r3, #0
 8002cf4:	f1c5 0901 	rsbmi	r9, r5, #1
 8002cf8:	9307      	strmi	r3, [sp, #28]
 8002cfa:	f04f 0900 	movpl.w	r9, #0
 8002cfe:	f1ba 0f00 	cmp.w	sl, #0
 8002d02:	db41      	blt.n	8002d88 <_dtoa_r+0x230>
 8002d04:	9b07      	ldr	r3, [sp, #28]
 8002d06:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002d0a:	4453      	add	r3, sl
 8002d0c:	9307      	str	r3, [sp, #28]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9308      	str	r3, [sp, #32]
 8002d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	f200 808f 	bhi.w	8002e38 <_dtoa_r+0x2e0>
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	bfc4      	itt	gt
 8002d1e:	3b04      	subgt	r3, #4
 8002d20:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002d22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d24:	bfc8      	it	gt
 8002d26:	2500      	movgt	r5, #0
 8002d28:	f1a3 0302 	sub.w	r3, r3, #2
 8002d2c:	bfd8      	it	le
 8002d2e:	2501      	movle	r5, #1
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	f200 808d 	bhi.w	8002e50 <_dtoa_r+0x2f8>
 8002d36:	e8df f003 	tbb	[pc, r3]
 8002d3a:	7d7b      	.short	0x7d7b
 8002d3c:	6f2f      	.short	0x6f2f
 8002d3e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002d42:	441d      	add	r5, r3
 8002d44:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002d48:	2820      	cmp	r0, #32
 8002d4a:	dd13      	ble.n	8002d74 <_dtoa_r+0x21c>
 8002d4c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002d50:	9b02      	ldr	r3, [sp, #8]
 8002d52:	fa08 f800 	lsl.w	r8, r8, r0
 8002d56:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002d5a:	fa23 f000 	lsr.w	r0, r3, r0
 8002d5e:	ea48 0000 	orr.w	r0, r8, r0
 8002d62:	f7fd fb3f 	bl	80003e4 <__aeabi_ui2d>
 8002d66:	2301      	movs	r3, #1
 8002d68:	4680      	mov	r8, r0
 8002d6a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002d6e:	3d01      	subs	r5, #1
 8002d70:	9310      	str	r3, [sp, #64]	; 0x40
 8002d72:	e771      	b.n	8002c58 <_dtoa_r+0x100>
 8002d74:	9b02      	ldr	r3, [sp, #8]
 8002d76:	f1c0 0020 	rsb	r0, r0, #32
 8002d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d7e:	e7f0      	b.n	8002d62 <_dtoa_r+0x20a>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e7b0      	b.n	8002ce6 <_dtoa_r+0x18e>
 8002d84:	900d      	str	r0, [sp, #52]	; 0x34
 8002d86:	e7af      	b.n	8002ce8 <_dtoa_r+0x190>
 8002d88:	f1ca 0300 	rsb	r3, sl, #0
 8002d8c:	9308      	str	r3, [sp, #32]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	eba9 090a 	sub.w	r9, r9, sl
 8002d94:	930c      	str	r3, [sp, #48]	; 0x30
 8002d96:	e7bc      	b.n	8002d12 <_dtoa_r+0x1ba>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dd74      	ble.n	8002e8c <_dtoa_r+0x334>
 8002da2:	4698      	mov	r8, r3
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	2200      	movs	r2, #0
 8002da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002daa:	6072      	str	r2, [r6, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	f102 0014 	add.w	r0, r2, #20
 8002db2:	4298      	cmp	r0, r3
 8002db4:	6871      	ldr	r1, [r6, #4]
 8002db6:	d96e      	bls.n	8002e96 <_dtoa_r+0x33e>
 8002db8:	4620      	mov	r0, r4
 8002dba:	f000 fca2 	bl	8003702 <_Balloc>
 8002dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc0:	6030      	str	r0, [r6, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b8 0f0e 	cmp.w	r8, #14
 8002dc8:	9306      	str	r3, [sp, #24]
 8002dca:	f200 80ed 	bhi.w	8002fa8 <_dtoa_r+0x450>
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	f000 80ea 	beq.w	8002fa8 <_dtoa_r+0x450>
 8002dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dd8:	f1ba 0f00 	cmp.w	sl, #0
 8002ddc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002de0:	dd77      	ble.n	8002ed2 <_dtoa_r+0x37a>
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <_dtoa_r+0x32c>)
 8002de4:	f00a 030f 	and.w	r3, sl, #15
 8002de8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002df0:	06f0      	lsls	r0, r6, #27
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002dfa:	d568      	bpl.n	8002ece <_dtoa_r+0x376>
 8002dfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <_dtoa_r+0x330>)
 8002e02:	2503      	movs	r5, #3
 8002e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e08:	f7fd fc90 	bl	800072c <__aeabi_ddiv>
 8002e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e10:	f006 060f 	and.w	r6, r6, #15
 8002e14:	4f1c      	ldr	r7, [pc, #112]	; (8002e88 <_dtoa_r+0x330>)
 8002e16:	e04f      	b.n	8002eb8 <_dtoa_r+0x360>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e1e:	4453      	add	r3, sl
 8002e20:	f103 0801 	add.w	r8, r3, #1
 8002e24:	9304      	str	r3, [sp, #16]
 8002e26:	4643      	mov	r3, r8
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bfb8      	it	lt
 8002e2c:	2301      	movlt	r3, #1
 8002e2e:	e7ba      	b.n	8002da6 <_dtoa_r+0x24e>
 8002e30:	2300      	movs	r3, #0
 8002e32:	e7b2      	b.n	8002d9a <_dtoa_r+0x242>
 8002e34:	2300      	movs	r3, #0
 8002e36:	e7f0      	b.n	8002e1a <_dtoa_r+0x2c2>
 8002e38:	2501      	movs	r5, #1
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9509      	str	r5, [sp, #36]	; 0x24
 8002e3e:	931e      	str	r3, [sp, #120]	; 0x78
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
 8002e44:	2200      	movs	r2, #0
 8002e46:	9304      	str	r3, [sp, #16]
 8002e48:	4698      	mov	r8, r3
 8002e4a:	2312      	movs	r3, #18
 8002e4c:	921f      	str	r2, [sp, #124]	; 0x7c
 8002e4e:	e7aa      	b.n	8002da6 <_dtoa_r+0x24e>
 8002e50:	2301      	movs	r3, #1
 8002e52:	9309      	str	r3, [sp, #36]	; 0x24
 8002e54:	e7f4      	b.n	8002e40 <_dtoa_r+0x2e8>
 8002e56:	bf00      	nop
 8002e58:	636f4361 	.word	0x636f4361
 8002e5c:	3fd287a7 	.word	0x3fd287a7
 8002e60:	8b60c8b3 	.word	0x8b60c8b3
 8002e64:	3fc68a28 	.word	0x3fc68a28
 8002e68:	509f79fb 	.word	0x509f79fb
 8002e6c:	3fd34413 	.word	0x3fd34413
 8002e70:	7ff00000 	.word	0x7ff00000
 8002e74:	08003e4f 	.word	0x08003e4f
 8002e78:	08003e46 	.word	0x08003e46
 8002e7c:	08003e45 	.word	0x08003e45
 8002e80:	3ff80000 	.word	0x3ff80000
 8002e84:	08003e80 	.word	0x08003e80
 8002e88:	08003e58 	.word	0x08003e58
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	4698      	mov	r8, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	e7da      	b.n	8002e4c <_dtoa_r+0x2f4>
 8002e96:	3101      	adds	r1, #1
 8002e98:	6071      	str	r1, [r6, #4]
 8002e9a:	0052      	lsls	r2, r2, #1
 8002e9c:	e787      	b.n	8002dae <_dtoa_r+0x256>
 8002e9e:	07f1      	lsls	r1, r6, #31
 8002ea0:	d508      	bpl.n	8002eb4 <_dtoa_r+0x35c>
 8002ea2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eaa:	f7fd fb15 	bl	80004d8 <__aeabi_dmul>
 8002eae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002eb2:	3501      	adds	r5, #1
 8002eb4:	1076      	asrs	r6, r6, #1
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	2e00      	cmp	r6, #0
 8002eba:	d1f0      	bne.n	8002e9e <_dtoa_r+0x346>
 8002ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ec4:	f7fd fc32 	bl	800072c <__aeabi_ddiv>
 8002ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ecc:	e01b      	b.n	8002f06 <_dtoa_r+0x3ae>
 8002ece:	2502      	movs	r5, #2
 8002ed0:	e7a0      	b.n	8002e14 <_dtoa_r+0x2bc>
 8002ed2:	f000 80a4 	beq.w	800301e <_dtoa_r+0x4c6>
 8002ed6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002eda:	f1ca 0600 	rsb	r6, sl, #0
 8002ede:	4ba0      	ldr	r3, [pc, #640]	; (8003160 <_dtoa_r+0x608>)
 8002ee0:	f006 020f 	and.w	r2, r6, #15
 8002ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd faf4 	bl	80004d8 <__aeabi_dmul>
 8002ef0:	2502      	movs	r5, #2
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ef8:	4f9a      	ldr	r7, [pc, #616]	; (8003164 <_dtoa_r+0x60c>)
 8002efa:	1136      	asrs	r6, r6, #4
 8002efc:	2e00      	cmp	r6, #0
 8002efe:	f040 8083 	bne.w	8003008 <_dtoa_r+0x4b0>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e0      	bne.n	8002ec8 <_dtoa_r+0x370>
 8002f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 808a 	beq.w	8003022 <_dtoa_r+0x4ca>
 8002f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002f16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <_dtoa_r+0x610>)
 8002f1e:	f7fd fd4d 	bl	80009bc <__aeabi_dcmplt>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d07d      	beq.n	8003022 <_dtoa_r+0x4ca>
 8002f26:	f1b8 0f00 	cmp.w	r8, #0
 8002f2a:	d07a      	beq.n	8003022 <_dtoa_r+0x4ca>
 8002f2c:	9b04      	ldr	r3, [sp, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	dd36      	ble.n	8002fa0 <_dtoa_r+0x448>
 8002f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f36:	2200      	movs	r2, #0
 8002f38:	4b8c      	ldr	r3, [pc, #560]	; (800316c <_dtoa_r+0x614>)
 8002f3a:	f7fd facd 	bl	80004d8 <__aeabi_dmul>
 8002f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f42:	9e04      	ldr	r6, [sp, #16]
 8002f44:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002f48:	3501      	adds	r5, #1
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f7fd fa5a 	bl	8000404 <__aeabi_i2d>
 8002f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f54:	f7fd fac0 	bl	80004d8 <__aeabi_dmul>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <_dtoa_r+0x618>)
 8002f5c:	f7fd f906 	bl	800016c <__adddf3>
 8002f60:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002f64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f68:	950b      	str	r5, [sp, #44]	; 0x2c
 8002f6a:	2e00      	cmp	r6, #0
 8002f6c:	d15c      	bne.n	8003028 <_dtoa_r+0x4d0>
 8002f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	4b7f      	ldr	r3, [pc, #508]	; (8003174 <_dtoa_r+0x61c>)
 8002f76:	f7fd f8f7 	bl	8000168 <__aeabi_dsub>
 8002f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f82:	f7fd fd39 	bl	80009f8 <__aeabi_dcmpgt>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f040 8281 	bne.w	800348e <_dtoa_r+0x936>
 8002f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f92:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002f96:	f7fd fd11 	bl	80009bc <__aeabi_dcmplt>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	f040 8275 	bne.w	800348a <_dtoa_r+0x932>
 8002fa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f2c0 814b 	blt.w	8003246 <_dtoa_r+0x6ee>
 8002fb0:	f1ba 0f0e 	cmp.w	sl, #14
 8002fb4:	f300 8147 	bgt.w	8003246 <_dtoa_r+0x6ee>
 8002fb8:	4b69      	ldr	r3, [pc, #420]	; (8003160 <_dtoa_r+0x608>)
 8002fba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f280 80d7 	bge.w	800317c <_dtoa_r+0x624>
 8002fce:	f1b8 0f00 	cmp.w	r8, #0
 8002fd2:	f300 80d3 	bgt.w	800317c <_dtoa_r+0x624>
 8002fd6:	f040 8257 	bne.w	8003488 <_dtoa_r+0x930>
 8002fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4b64      	ldr	r3, [pc, #400]	; (8003174 <_dtoa_r+0x61c>)
 8002fe2:	f7fd fa79 	bl	80004d8 <__aeabi_dmul>
 8002fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002fea:	f7fd fcfb 	bl	80009e4 <__aeabi_dcmpge>
 8002fee:	4646      	mov	r6, r8
 8002ff0:	4647      	mov	r7, r8
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	f040 822d 	bne.w	8003452 <_dtoa_r+0x8fa>
 8002ff8:	9b06      	ldr	r3, [sp, #24]
 8002ffa:	9a06      	ldr	r2, [sp, #24]
 8002ffc:	1c5d      	adds	r5, r3, #1
 8002ffe:	2331      	movs	r3, #49	; 0x31
 8003000:	f10a 0a01 	add.w	sl, sl, #1
 8003004:	7013      	strb	r3, [r2, #0]
 8003006:	e228      	b.n	800345a <_dtoa_r+0x902>
 8003008:	07f2      	lsls	r2, r6, #31
 800300a:	d505      	bpl.n	8003018 <_dtoa_r+0x4c0>
 800300c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003010:	f7fd fa62 	bl	80004d8 <__aeabi_dmul>
 8003014:	2301      	movs	r3, #1
 8003016:	3501      	adds	r5, #1
 8003018:	1076      	asrs	r6, r6, #1
 800301a:	3708      	adds	r7, #8
 800301c:	e76e      	b.n	8002efc <_dtoa_r+0x3a4>
 800301e:	2502      	movs	r5, #2
 8003020:	e771      	b.n	8002f06 <_dtoa_r+0x3ae>
 8003022:	4657      	mov	r7, sl
 8003024:	4646      	mov	r6, r8
 8003026:	e790      	b.n	8002f4a <_dtoa_r+0x3f2>
 8003028:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <_dtoa_r+0x608>)
 800302a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800302e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d048      	beq.n	80030ca <_dtoa_r+0x572>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	2000      	movs	r0, #0
 800303e:	494e      	ldr	r1, [pc, #312]	; (8003178 <_dtoa_r+0x620>)
 8003040:	f7fd fb74 	bl	800072c <__aeabi_ddiv>
 8003044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003048:	f7fd f88e 	bl	8000168 <__aeabi_dsub>
 800304c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003050:	9d06      	ldr	r5, [sp, #24]
 8003052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003056:	f7fd fcef 	bl	8000a38 <__aeabi_d2iz>
 800305a:	9011      	str	r0, [sp, #68]	; 0x44
 800305c:	f7fd f9d2 	bl	8000404 <__aeabi_i2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003068:	f7fd f87e 	bl	8000168 <__aeabi_dsub>
 800306c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800306e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003072:	3330      	adds	r3, #48	; 0x30
 8003074:	f805 3b01 	strb.w	r3, [r5], #1
 8003078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800307c:	f7fd fc9e 	bl	80009bc <__aeabi_dcmplt>
 8003080:	2800      	cmp	r0, #0
 8003082:	d163      	bne.n	800314c <_dtoa_r+0x5f4>
 8003084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003088:	2000      	movs	r0, #0
 800308a:	4937      	ldr	r1, [pc, #220]	; (8003168 <_dtoa_r+0x610>)
 800308c:	f7fd f86c 	bl	8000168 <__aeabi_dsub>
 8003090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003094:	f7fd fc92 	bl	80009bc <__aeabi_dcmplt>
 8003098:	2800      	cmp	r0, #0
 800309a:	f040 80b5 	bne.w	8003208 <_dtoa_r+0x6b0>
 800309e:	9b06      	ldr	r3, [sp, #24]
 80030a0:	1aeb      	subs	r3, r5, r3
 80030a2:	429e      	cmp	r6, r3
 80030a4:	f77f af7c 	ble.w	8002fa0 <_dtoa_r+0x448>
 80030a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80030ac:	2200      	movs	r2, #0
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <_dtoa_r+0x614>)
 80030b0:	f7fd fa12 	bl	80004d8 <__aeabi_dmul>
 80030b4:	2200      	movs	r2, #0
 80030b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80030ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <_dtoa_r+0x614>)
 80030c0:	f7fd fa0a 	bl	80004d8 <__aeabi_dmul>
 80030c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030c8:	e7c3      	b.n	8003052 <_dtoa_r+0x4fa>
 80030ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80030ce:	f7fd fa03 	bl	80004d8 <__aeabi_dmul>
 80030d2:	9b06      	ldr	r3, [sp, #24]
 80030d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80030d8:	199d      	adds	r5, r3, r6
 80030da:	461e      	mov	r6, r3
 80030dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030e0:	f7fd fcaa 	bl	8000a38 <__aeabi_d2iz>
 80030e4:	9011      	str	r0, [sp, #68]	; 0x44
 80030e6:	f7fd f98d 	bl	8000404 <__aeabi_i2d>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030f2:	f7fd f839 	bl	8000168 <__aeabi_dsub>
 80030f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030fc:	3330      	adds	r3, #48	; 0x30
 80030fe:	f806 3b01 	strb.w	r3, [r6], #1
 8003102:	42ae      	cmp	r6, r5
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	d124      	bne.n	8003154 <_dtoa_r+0x5fc>
 800310a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <_dtoa_r+0x620>)
 8003110:	f7fd f82c 	bl	800016c <__adddf3>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800311c:	f7fd fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8003120:	2800      	cmp	r0, #0
 8003122:	d171      	bne.n	8003208 <_dtoa_r+0x6b0>
 8003124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003128:	2000      	movs	r0, #0
 800312a:	4913      	ldr	r1, [pc, #76]	; (8003178 <_dtoa_r+0x620>)
 800312c:	f7fd f81c 	bl	8000168 <__aeabi_dsub>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003138:	f7fd fc40 	bl	80009bc <__aeabi_dcmplt>
 800313c:	2800      	cmp	r0, #0
 800313e:	f43f af2f 	beq.w	8002fa0 <_dtoa_r+0x448>
 8003142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003146:	1e6a      	subs	r2, r5, #1
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d001      	beq.n	8003150 <_dtoa_r+0x5f8>
 800314c:	46ba      	mov	sl, r7
 800314e:	e04a      	b.n	80031e6 <_dtoa_r+0x68e>
 8003150:	4615      	mov	r5, r2
 8003152:	e7f6      	b.n	8003142 <_dtoa_r+0x5ea>
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <_dtoa_r+0x614>)
 8003156:	f7fd f9bf 	bl	80004d8 <__aeabi_dmul>
 800315a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800315e:	e7bd      	b.n	80030dc <_dtoa_r+0x584>
 8003160:	08003e80 	.word	0x08003e80
 8003164:	08003e58 	.word	0x08003e58
 8003168:	3ff00000 	.word	0x3ff00000
 800316c:	40240000 	.word	0x40240000
 8003170:	401c0000 	.word	0x401c0000
 8003174:	40140000 	.word	0x40140000
 8003178:	3fe00000 	.word	0x3fe00000
 800317c:	9d06      	ldr	r5, [sp, #24]
 800317e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003186:	4630      	mov	r0, r6
 8003188:	4639      	mov	r1, r7
 800318a:	f7fd facf 	bl	800072c <__aeabi_ddiv>
 800318e:	f7fd fc53 	bl	8000a38 <__aeabi_d2iz>
 8003192:	4681      	mov	r9, r0
 8003194:	f7fd f936 	bl	8000404 <__aeabi_i2d>
 8003198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800319c:	f7fd f99c 	bl	80004d8 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4630      	mov	r0, r6
 80031a6:	4639      	mov	r1, r7
 80031a8:	f7fc ffde 	bl	8000168 <__aeabi_dsub>
 80031ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80031b0:	f805 6b01 	strb.w	r6, [r5], #1
 80031b4:	9e06      	ldr	r6, [sp, #24]
 80031b6:	4602      	mov	r2, r0
 80031b8:	1bae      	subs	r6, r5, r6
 80031ba:	45b0      	cmp	r8, r6
 80031bc:	460b      	mov	r3, r1
 80031be:	d135      	bne.n	800322c <_dtoa_r+0x6d4>
 80031c0:	f7fc ffd4 	bl	800016c <__adddf3>
 80031c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031c8:	4606      	mov	r6, r0
 80031ca:	460f      	mov	r7, r1
 80031cc:	f7fd fc14 	bl	80009f8 <__aeabi_dcmpgt>
 80031d0:	b9c8      	cbnz	r0, 8003206 <_dtoa_r+0x6ae>
 80031d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031d6:	4630      	mov	r0, r6
 80031d8:	4639      	mov	r1, r7
 80031da:	f7fd fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80031de:	b110      	cbz	r0, 80031e6 <_dtoa_r+0x68e>
 80031e0:	f019 0f01 	tst.w	r9, #1
 80031e4:	d10f      	bne.n	8003206 <_dtoa_r+0x6ae>
 80031e6:	4659      	mov	r1, fp
 80031e8:	4620      	mov	r0, r4
 80031ea:	f000 fabe 	bl	800376a <_Bfree>
 80031ee:	2300      	movs	r3, #0
 80031f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031f2:	702b      	strb	r3, [r5, #0]
 80031f4:	f10a 0301 	add.w	r3, sl, #1
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f43f acf3 	beq.w	8002be8 <_dtoa_r+0x90>
 8003202:	601d      	str	r5, [r3, #0]
 8003204:	e4f0      	b.n	8002be8 <_dtoa_r+0x90>
 8003206:	4657      	mov	r7, sl
 8003208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800320c:	1e6b      	subs	r3, r5, #1
 800320e:	2a39      	cmp	r2, #57	; 0x39
 8003210:	d106      	bne.n	8003220 <_dtoa_r+0x6c8>
 8003212:	9a06      	ldr	r2, [sp, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d107      	bne.n	8003228 <_dtoa_r+0x6d0>
 8003218:	2330      	movs	r3, #48	; 0x30
 800321a:	7013      	strb	r3, [r2, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	3701      	adds	r7, #1
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	3201      	adds	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e791      	b.n	800314c <_dtoa_r+0x5f4>
 8003228:	461d      	mov	r5, r3
 800322a:	e7ed      	b.n	8003208 <_dtoa_r+0x6b0>
 800322c:	2200      	movs	r2, #0
 800322e:	4b99      	ldr	r3, [pc, #612]	; (8003494 <_dtoa_r+0x93c>)
 8003230:	f7fd f952 	bl	80004d8 <__aeabi_dmul>
 8003234:	2200      	movs	r2, #0
 8003236:	2300      	movs	r3, #0
 8003238:	4606      	mov	r6, r0
 800323a:	460f      	mov	r7, r1
 800323c:	f7fd fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8003240:	2800      	cmp	r0, #0
 8003242:	d09e      	beq.n	8003182 <_dtoa_r+0x62a>
 8003244:	e7cf      	b.n	80031e6 <_dtoa_r+0x68e>
 8003246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003248:	2a00      	cmp	r2, #0
 800324a:	f000 8088 	beq.w	800335e <_dtoa_r+0x806>
 800324e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003250:	2a01      	cmp	r2, #1
 8003252:	dc6d      	bgt.n	8003330 <_dtoa_r+0x7d8>
 8003254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003256:	2a00      	cmp	r2, #0
 8003258:	d066      	beq.n	8003328 <_dtoa_r+0x7d0>
 800325a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800325e:	464d      	mov	r5, r9
 8003260:	9e08      	ldr	r6, [sp, #32]
 8003262:	9a07      	ldr	r2, [sp, #28]
 8003264:	2101      	movs	r1, #1
 8003266:	441a      	add	r2, r3
 8003268:	4620      	mov	r0, r4
 800326a:	4499      	add	r9, r3
 800326c:	9207      	str	r2, [sp, #28]
 800326e:	f000 fb1c 	bl	80038aa <__i2b>
 8003272:	4607      	mov	r7, r0
 8003274:	2d00      	cmp	r5, #0
 8003276:	dd0b      	ble.n	8003290 <_dtoa_r+0x738>
 8003278:	9b07      	ldr	r3, [sp, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	dd08      	ble.n	8003290 <_dtoa_r+0x738>
 800327e:	42ab      	cmp	r3, r5
 8003280:	bfa8      	it	ge
 8003282:	462b      	movge	r3, r5
 8003284:	9a07      	ldr	r2, [sp, #28]
 8003286:	eba9 0903 	sub.w	r9, r9, r3
 800328a:	1aed      	subs	r5, r5, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	9307      	str	r3, [sp, #28]
 8003290:	9b08      	ldr	r3, [sp, #32]
 8003292:	b1eb      	cbz	r3, 80032d0 <_dtoa_r+0x778>
 8003294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d065      	beq.n	8003366 <_dtoa_r+0x80e>
 800329a:	b18e      	cbz	r6, 80032c0 <_dtoa_r+0x768>
 800329c:	4639      	mov	r1, r7
 800329e:	4632      	mov	r2, r6
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fba1 	bl	80039e8 <__pow5mult>
 80032a6:	465a      	mov	r2, fp
 80032a8:	4601      	mov	r1, r0
 80032aa:	4607      	mov	r7, r0
 80032ac:	4620      	mov	r0, r4
 80032ae:	f000 fb05 	bl	80038bc <__multiply>
 80032b2:	4659      	mov	r1, fp
 80032b4:	900a      	str	r0, [sp, #40]	; 0x28
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 fa57 	bl	800376a <_Bfree>
 80032bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032be:	469b      	mov	fp, r3
 80032c0:	9b08      	ldr	r3, [sp, #32]
 80032c2:	1b9a      	subs	r2, r3, r6
 80032c4:	d004      	beq.n	80032d0 <_dtoa_r+0x778>
 80032c6:	4659      	mov	r1, fp
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 fb8d 	bl	80039e8 <__pow5mult>
 80032ce:	4683      	mov	fp, r0
 80032d0:	2101      	movs	r1, #1
 80032d2:	4620      	mov	r0, r4
 80032d4:	f000 fae9 	bl	80038aa <__i2b>
 80032d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032da:	4606      	mov	r6, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 81c6 	beq.w	800366e <_dtoa_r+0xb16>
 80032e2:	461a      	mov	r2, r3
 80032e4:	4601      	mov	r1, r0
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 fb7e 	bl	80039e8 <__pow5mult>
 80032ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032ee:	4606      	mov	r6, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	dc3e      	bgt.n	8003372 <_dtoa_r+0x81a>
 80032f4:	9b02      	ldr	r3, [sp, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d137      	bne.n	800336a <_dtoa_r+0x812>
 80032fa:	9b03      	ldr	r3, [sp, #12]
 80032fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003300:	2b00      	cmp	r3, #0
 8003302:	d134      	bne.n	800336e <_dtoa_r+0x816>
 8003304:	9b03      	ldr	r3, [sp, #12]
 8003306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800330a:	0d1b      	lsrs	r3, r3, #20
 800330c:	051b      	lsls	r3, r3, #20
 800330e:	b12b      	cbz	r3, 800331c <_dtoa_r+0x7c4>
 8003310:	9b07      	ldr	r3, [sp, #28]
 8003312:	f109 0901 	add.w	r9, r9, #1
 8003316:	3301      	adds	r3, #1
 8003318:	9307      	str	r3, [sp, #28]
 800331a:	2301      	movs	r3, #1
 800331c:	9308      	str	r3, [sp, #32]
 800331e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003320:	2b00      	cmp	r3, #0
 8003322:	d128      	bne.n	8003376 <_dtoa_r+0x81e>
 8003324:	2001      	movs	r0, #1
 8003326:	e02e      	b.n	8003386 <_dtoa_r+0x82e>
 8003328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800332a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800332e:	e796      	b.n	800325e <_dtoa_r+0x706>
 8003330:	9b08      	ldr	r3, [sp, #32]
 8003332:	f108 36ff 	add.w	r6, r8, #4294967295
 8003336:	42b3      	cmp	r3, r6
 8003338:	bfb7      	itett	lt
 800333a:	9b08      	ldrlt	r3, [sp, #32]
 800333c:	1b9e      	subge	r6, r3, r6
 800333e:	1af2      	sublt	r2, r6, r3
 8003340:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003342:	bfbf      	itttt	lt
 8003344:	9608      	strlt	r6, [sp, #32]
 8003346:	189b      	addlt	r3, r3, r2
 8003348:	930c      	strlt	r3, [sp, #48]	; 0x30
 800334a:	2600      	movlt	r6, #0
 800334c:	f1b8 0f00 	cmp.w	r8, #0
 8003350:	bfb9      	ittee	lt
 8003352:	eba9 0508 	sublt.w	r5, r9, r8
 8003356:	2300      	movlt	r3, #0
 8003358:	464d      	movge	r5, r9
 800335a:	4643      	movge	r3, r8
 800335c:	e781      	b.n	8003262 <_dtoa_r+0x70a>
 800335e:	9e08      	ldr	r6, [sp, #32]
 8003360:	464d      	mov	r5, r9
 8003362:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003364:	e786      	b.n	8003274 <_dtoa_r+0x71c>
 8003366:	9a08      	ldr	r2, [sp, #32]
 8003368:	e7ad      	b.n	80032c6 <_dtoa_r+0x76e>
 800336a:	2300      	movs	r3, #0
 800336c:	e7d6      	b.n	800331c <_dtoa_r+0x7c4>
 800336e:	9b02      	ldr	r3, [sp, #8]
 8003370:	e7d4      	b.n	800331c <_dtoa_r+0x7c4>
 8003372:	2300      	movs	r3, #0
 8003374:	9308      	str	r3, [sp, #32]
 8003376:	6933      	ldr	r3, [r6, #16]
 8003378:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800337c:	6918      	ldr	r0, [r3, #16]
 800337e:	f000 fa46 	bl	800380e <__hi0bits>
 8003382:	f1c0 0020 	rsb	r0, r0, #32
 8003386:	9b07      	ldr	r3, [sp, #28]
 8003388:	4418      	add	r0, r3
 800338a:	f010 001f 	ands.w	r0, r0, #31
 800338e:	d047      	beq.n	8003420 <_dtoa_r+0x8c8>
 8003390:	f1c0 0320 	rsb	r3, r0, #32
 8003394:	2b04      	cmp	r3, #4
 8003396:	dd3b      	ble.n	8003410 <_dtoa_r+0x8b8>
 8003398:	9b07      	ldr	r3, [sp, #28]
 800339a:	f1c0 001c 	rsb	r0, r0, #28
 800339e:	4481      	add	r9, r0
 80033a0:	4405      	add	r5, r0
 80033a2:	4403      	add	r3, r0
 80033a4:	9307      	str	r3, [sp, #28]
 80033a6:	f1b9 0f00 	cmp.w	r9, #0
 80033aa:	dd05      	ble.n	80033b8 <_dtoa_r+0x860>
 80033ac:	4659      	mov	r1, fp
 80033ae:	464a      	mov	r2, r9
 80033b0:	4620      	mov	r0, r4
 80033b2:	f000 fb67 	bl	8003a84 <__lshift>
 80033b6:	4683      	mov	fp, r0
 80033b8:	9b07      	ldr	r3, [sp, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	dd05      	ble.n	80033ca <_dtoa_r+0x872>
 80033be:	4631      	mov	r1, r6
 80033c0:	461a      	mov	r2, r3
 80033c2:	4620      	mov	r0, r4
 80033c4:	f000 fb5e 	bl	8003a84 <__lshift>
 80033c8:	4606      	mov	r6, r0
 80033ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033cc:	b353      	cbz	r3, 8003424 <_dtoa_r+0x8cc>
 80033ce:	4631      	mov	r1, r6
 80033d0:	4658      	mov	r0, fp
 80033d2:	f000 fbab 	bl	8003b2c <__mcmp>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	da24      	bge.n	8003424 <_dtoa_r+0x8cc>
 80033da:	2300      	movs	r3, #0
 80033dc:	4659      	mov	r1, fp
 80033de:	220a      	movs	r2, #10
 80033e0:	4620      	mov	r0, r4
 80033e2:	f000 f9d9 	bl	8003798 <__multadd>
 80033e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033ec:	4683      	mov	fp, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8144 	beq.w	800367c <_dtoa_r+0xb24>
 80033f4:	2300      	movs	r3, #0
 80033f6:	4639      	mov	r1, r7
 80033f8:	220a      	movs	r2, #10
 80033fa:	4620      	mov	r0, r4
 80033fc:	f000 f9cc 	bl	8003798 <__multadd>
 8003400:	9b04      	ldr	r3, [sp, #16]
 8003402:	4607      	mov	r7, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	dc4d      	bgt.n	80034a4 <_dtoa_r+0x94c>
 8003408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800340a:	2b02      	cmp	r3, #2
 800340c:	dd4a      	ble.n	80034a4 <_dtoa_r+0x94c>
 800340e:	e011      	b.n	8003434 <_dtoa_r+0x8dc>
 8003410:	d0c9      	beq.n	80033a6 <_dtoa_r+0x84e>
 8003412:	9a07      	ldr	r2, [sp, #28]
 8003414:	331c      	adds	r3, #28
 8003416:	441a      	add	r2, r3
 8003418:	4499      	add	r9, r3
 800341a:	441d      	add	r5, r3
 800341c:	4613      	mov	r3, r2
 800341e:	e7c1      	b.n	80033a4 <_dtoa_r+0x84c>
 8003420:	4603      	mov	r3, r0
 8003422:	e7f6      	b.n	8003412 <_dtoa_r+0x8ba>
 8003424:	f1b8 0f00 	cmp.w	r8, #0
 8003428:	dc36      	bgt.n	8003498 <_dtoa_r+0x940>
 800342a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800342c:	2b02      	cmp	r3, #2
 800342e:	dd33      	ble.n	8003498 <_dtoa_r+0x940>
 8003430:	f8cd 8010 	str.w	r8, [sp, #16]
 8003434:	9b04      	ldr	r3, [sp, #16]
 8003436:	b963      	cbnz	r3, 8003452 <_dtoa_r+0x8fa>
 8003438:	4631      	mov	r1, r6
 800343a:	2205      	movs	r2, #5
 800343c:	4620      	mov	r0, r4
 800343e:	f000 f9ab 	bl	8003798 <__multadd>
 8003442:	4601      	mov	r1, r0
 8003444:	4606      	mov	r6, r0
 8003446:	4658      	mov	r0, fp
 8003448:	f000 fb70 	bl	8003b2c <__mcmp>
 800344c:	2800      	cmp	r0, #0
 800344e:	f73f add3 	bgt.w	8002ff8 <_dtoa_r+0x4a0>
 8003452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003454:	9d06      	ldr	r5, [sp, #24]
 8003456:	ea6f 0a03 	mvn.w	sl, r3
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	4631      	mov	r1, r6
 8003460:	4620      	mov	r0, r4
 8003462:	f000 f982 	bl	800376a <_Bfree>
 8003466:	2f00      	cmp	r7, #0
 8003468:	f43f aebd 	beq.w	80031e6 <_dtoa_r+0x68e>
 800346c:	f1b9 0f00 	cmp.w	r9, #0
 8003470:	d005      	beq.n	800347e <_dtoa_r+0x926>
 8003472:	45b9      	cmp	r9, r7
 8003474:	d003      	beq.n	800347e <_dtoa_r+0x926>
 8003476:	4649      	mov	r1, r9
 8003478:	4620      	mov	r0, r4
 800347a:	f000 f976 	bl	800376a <_Bfree>
 800347e:	4639      	mov	r1, r7
 8003480:	4620      	mov	r0, r4
 8003482:	f000 f972 	bl	800376a <_Bfree>
 8003486:	e6ae      	b.n	80031e6 <_dtoa_r+0x68e>
 8003488:	2600      	movs	r6, #0
 800348a:	4637      	mov	r7, r6
 800348c:	e7e1      	b.n	8003452 <_dtoa_r+0x8fa>
 800348e:	46ba      	mov	sl, r7
 8003490:	4637      	mov	r7, r6
 8003492:	e5b1      	b.n	8002ff8 <_dtoa_r+0x4a0>
 8003494:	40240000 	.word	0x40240000
 8003498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349a:	f8cd 8010 	str.w	r8, [sp, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80f3 	beq.w	800368a <_dtoa_r+0xb32>
 80034a4:	2d00      	cmp	r5, #0
 80034a6:	dd05      	ble.n	80034b4 <_dtoa_r+0x95c>
 80034a8:	4639      	mov	r1, r7
 80034aa:	462a      	mov	r2, r5
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 fae9 	bl	8003a84 <__lshift>
 80034b2:	4607      	mov	r7, r0
 80034b4:	9b08      	ldr	r3, [sp, #32]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d04c      	beq.n	8003554 <_dtoa_r+0x9fc>
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f920 	bl	8003702 <_Balloc>
 80034c2:	4605      	mov	r5, r0
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	f107 010c 	add.w	r1, r7, #12
 80034ca:	3202      	adds	r2, #2
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	300c      	adds	r0, #12
 80034d0:	f000 f90c 	bl	80036ec <memcpy>
 80034d4:	2201      	movs	r2, #1
 80034d6:	4629      	mov	r1, r5
 80034d8:	4620      	mov	r0, r4
 80034da:	f000 fad3 	bl	8003a84 <__lshift>
 80034de:	46b9      	mov	r9, r7
 80034e0:	4607      	mov	r7, r0
 80034e2:	9b06      	ldr	r3, [sp, #24]
 80034e4:	9307      	str	r3, [sp, #28]
 80034e6:	9b02      	ldr	r3, [sp, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	9308      	str	r3, [sp, #32]
 80034ee:	4631      	mov	r1, r6
 80034f0:	4658      	mov	r0, fp
 80034f2:	f7ff faa1 	bl	8002a38 <quorem>
 80034f6:	4649      	mov	r1, r9
 80034f8:	4605      	mov	r5, r0
 80034fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80034fe:	4658      	mov	r0, fp
 8003500:	f000 fb14 	bl	8003b2c <__mcmp>
 8003504:	463a      	mov	r2, r7
 8003506:	9002      	str	r0, [sp, #8]
 8003508:	4631      	mov	r1, r6
 800350a:	4620      	mov	r0, r4
 800350c:	f000 fb28 	bl	8003b60 <__mdiff>
 8003510:	68c3      	ldr	r3, [r0, #12]
 8003512:	4602      	mov	r2, r0
 8003514:	bb03      	cbnz	r3, 8003558 <_dtoa_r+0xa00>
 8003516:	4601      	mov	r1, r0
 8003518:	9009      	str	r0, [sp, #36]	; 0x24
 800351a:	4658      	mov	r0, fp
 800351c:	f000 fb06 	bl	8003b2c <__mcmp>
 8003520:	4603      	mov	r3, r0
 8003522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003524:	4611      	mov	r1, r2
 8003526:	4620      	mov	r0, r4
 8003528:	9309      	str	r3, [sp, #36]	; 0x24
 800352a:	f000 f91e 	bl	800376a <_Bfree>
 800352e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003530:	b9a3      	cbnz	r3, 800355c <_dtoa_r+0xa04>
 8003532:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003534:	b992      	cbnz	r2, 800355c <_dtoa_r+0xa04>
 8003536:	9a08      	ldr	r2, [sp, #32]
 8003538:	b982      	cbnz	r2, 800355c <_dtoa_r+0xa04>
 800353a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800353e:	d029      	beq.n	8003594 <_dtoa_r+0xa3c>
 8003540:	9b02      	ldr	r3, [sp, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	dd01      	ble.n	800354a <_dtoa_r+0x9f2>
 8003546:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800354a:	9b07      	ldr	r3, [sp, #28]
 800354c:	1c5d      	adds	r5, r3, #1
 800354e:	f883 8000 	strb.w	r8, [r3]
 8003552:	e784      	b.n	800345e <_dtoa_r+0x906>
 8003554:	4638      	mov	r0, r7
 8003556:	e7c2      	b.n	80034de <_dtoa_r+0x986>
 8003558:	2301      	movs	r3, #1
 800355a:	e7e3      	b.n	8003524 <_dtoa_r+0x9cc>
 800355c:	9a02      	ldr	r2, [sp, #8]
 800355e:	2a00      	cmp	r2, #0
 8003560:	db04      	blt.n	800356c <_dtoa_r+0xa14>
 8003562:	d123      	bne.n	80035ac <_dtoa_r+0xa54>
 8003564:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003566:	bb0a      	cbnz	r2, 80035ac <_dtoa_r+0xa54>
 8003568:	9a08      	ldr	r2, [sp, #32]
 800356a:	b9fa      	cbnz	r2, 80035ac <_dtoa_r+0xa54>
 800356c:	2b00      	cmp	r3, #0
 800356e:	ddec      	ble.n	800354a <_dtoa_r+0x9f2>
 8003570:	4659      	mov	r1, fp
 8003572:	2201      	movs	r2, #1
 8003574:	4620      	mov	r0, r4
 8003576:	f000 fa85 	bl	8003a84 <__lshift>
 800357a:	4631      	mov	r1, r6
 800357c:	4683      	mov	fp, r0
 800357e:	f000 fad5 	bl	8003b2c <__mcmp>
 8003582:	2800      	cmp	r0, #0
 8003584:	dc03      	bgt.n	800358e <_dtoa_r+0xa36>
 8003586:	d1e0      	bne.n	800354a <_dtoa_r+0x9f2>
 8003588:	f018 0f01 	tst.w	r8, #1
 800358c:	d0dd      	beq.n	800354a <_dtoa_r+0x9f2>
 800358e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003592:	d1d8      	bne.n	8003546 <_dtoa_r+0x9ee>
 8003594:	9b07      	ldr	r3, [sp, #28]
 8003596:	9a07      	ldr	r2, [sp, #28]
 8003598:	1c5d      	adds	r5, r3, #1
 800359a:	2339      	movs	r3, #57	; 0x39
 800359c:	7013      	strb	r3, [r2, #0]
 800359e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80035a2:	1e6a      	subs	r2, r5, #1
 80035a4:	2b39      	cmp	r3, #57	; 0x39
 80035a6:	d04d      	beq.n	8003644 <_dtoa_r+0xaec>
 80035a8:	3301      	adds	r3, #1
 80035aa:	e052      	b.n	8003652 <_dtoa_r+0xafa>
 80035ac:	9a07      	ldr	r2, [sp, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f102 0501 	add.w	r5, r2, #1
 80035b4:	dd06      	ble.n	80035c4 <_dtoa_r+0xa6c>
 80035b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80035ba:	d0eb      	beq.n	8003594 <_dtoa_r+0xa3c>
 80035bc:	f108 0801 	add.w	r8, r8, #1
 80035c0:	9b07      	ldr	r3, [sp, #28]
 80035c2:	e7c4      	b.n	800354e <_dtoa_r+0x9f6>
 80035c4:	9b06      	ldr	r3, [sp, #24]
 80035c6:	9a04      	ldr	r2, [sp, #16]
 80035c8:	1aeb      	subs	r3, r5, r3
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80035d0:	d021      	beq.n	8003616 <_dtoa_r+0xabe>
 80035d2:	4659      	mov	r1, fp
 80035d4:	2300      	movs	r3, #0
 80035d6:	220a      	movs	r2, #10
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 f8dd 	bl	8003798 <__multadd>
 80035de:	45b9      	cmp	r9, r7
 80035e0:	4683      	mov	fp, r0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	f04f 020a 	mov.w	r2, #10
 80035ea:	4649      	mov	r1, r9
 80035ec:	4620      	mov	r0, r4
 80035ee:	d105      	bne.n	80035fc <_dtoa_r+0xaa4>
 80035f0:	f000 f8d2 	bl	8003798 <__multadd>
 80035f4:	4681      	mov	r9, r0
 80035f6:	4607      	mov	r7, r0
 80035f8:	9507      	str	r5, [sp, #28]
 80035fa:	e778      	b.n	80034ee <_dtoa_r+0x996>
 80035fc:	f000 f8cc 	bl	8003798 <__multadd>
 8003600:	4639      	mov	r1, r7
 8003602:	4681      	mov	r9, r0
 8003604:	2300      	movs	r3, #0
 8003606:	220a      	movs	r2, #10
 8003608:	4620      	mov	r0, r4
 800360a:	f000 f8c5 	bl	8003798 <__multadd>
 800360e:	4607      	mov	r7, r0
 8003610:	e7f2      	b.n	80035f8 <_dtoa_r+0xaa0>
 8003612:	f04f 0900 	mov.w	r9, #0
 8003616:	4659      	mov	r1, fp
 8003618:	2201      	movs	r2, #1
 800361a:	4620      	mov	r0, r4
 800361c:	f000 fa32 	bl	8003a84 <__lshift>
 8003620:	4631      	mov	r1, r6
 8003622:	4683      	mov	fp, r0
 8003624:	f000 fa82 	bl	8003b2c <__mcmp>
 8003628:	2800      	cmp	r0, #0
 800362a:	dcb8      	bgt.n	800359e <_dtoa_r+0xa46>
 800362c:	d102      	bne.n	8003634 <_dtoa_r+0xadc>
 800362e:	f018 0f01 	tst.w	r8, #1
 8003632:	d1b4      	bne.n	800359e <_dtoa_r+0xa46>
 8003634:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003638:	1e6a      	subs	r2, r5, #1
 800363a:	2b30      	cmp	r3, #48	; 0x30
 800363c:	f47f af0f 	bne.w	800345e <_dtoa_r+0x906>
 8003640:	4615      	mov	r5, r2
 8003642:	e7f7      	b.n	8003634 <_dtoa_r+0xadc>
 8003644:	9b06      	ldr	r3, [sp, #24]
 8003646:	4293      	cmp	r3, r2
 8003648:	d105      	bne.n	8003656 <_dtoa_r+0xafe>
 800364a:	2331      	movs	r3, #49	; 0x31
 800364c:	9a06      	ldr	r2, [sp, #24]
 800364e:	f10a 0a01 	add.w	sl, sl, #1
 8003652:	7013      	strb	r3, [r2, #0]
 8003654:	e703      	b.n	800345e <_dtoa_r+0x906>
 8003656:	4615      	mov	r5, r2
 8003658:	e7a1      	b.n	800359e <_dtoa_r+0xa46>
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <_dtoa_r+0xb60>)
 800365c:	f7ff bae1 	b.w	8002c22 <_dtoa_r+0xca>
 8003660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f aabb 	bne.w	8002bde <_dtoa_r+0x86>
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <_dtoa_r+0xb64>)
 800366a:	f7ff bada 	b.w	8002c22 <_dtoa_r+0xca>
 800366e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003670:	2b01      	cmp	r3, #1
 8003672:	f77f ae3f 	ble.w	80032f4 <_dtoa_r+0x79c>
 8003676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003678:	9308      	str	r3, [sp, #32]
 800367a:	e653      	b.n	8003324 <_dtoa_r+0x7cc>
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	dc03      	bgt.n	800368a <_dtoa_r+0xb32>
 8003682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003684:	2b02      	cmp	r3, #2
 8003686:	f73f aed5 	bgt.w	8003434 <_dtoa_r+0x8dc>
 800368a:	9d06      	ldr	r5, [sp, #24]
 800368c:	4631      	mov	r1, r6
 800368e:	4658      	mov	r0, fp
 8003690:	f7ff f9d2 	bl	8002a38 <quorem>
 8003694:	9b06      	ldr	r3, [sp, #24]
 8003696:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800369a:	f805 8b01 	strb.w	r8, [r5], #1
 800369e:	9a04      	ldr	r2, [sp, #16]
 80036a0:	1aeb      	subs	r3, r5, r3
 80036a2:	429a      	cmp	r2, r3
 80036a4:	ddb5      	ble.n	8003612 <_dtoa_r+0xaba>
 80036a6:	4659      	mov	r1, fp
 80036a8:	2300      	movs	r3, #0
 80036aa:	220a      	movs	r2, #10
 80036ac:	4620      	mov	r0, r4
 80036ae:	f000 f873 	bl	8003798 <__multadd>
 80036b2:	4683      	mov	fp, r0
 80036b4:	e7ea      	b.n	800368c <_dtoa_r+0xb34>
 80036b6:	bf00      	nop
 80036b8:	08003e44 	.word	0x08003e44
 80036bc:	08003e46 	.word	0x08003e46

080036c0 <_localeconv_r>:
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <_localeconv_r+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6a18      	ldr	r0, [r3, #32]
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <_localeconv_r+0x18>)
 80036c8:	2800      	cmp	r0, #0
 80036ca:	bf08      	it	eq
 80036cc:	4618      	moveq	r0, r3
 80036ce:	30f0      	adds	r0, #240	; 0xf0
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	20000070 	.word	0x20000070

080036dc <malloc>:
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <malloc+0xc>)
 80036de:	4601      	mov	r1, r0
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	f000 baf9 	b.w	8003cd8 <_malloc_r>
 80036e6:	bf00      	nop
 80036e8:	2000000c 	.word	0x2000000c

080036ec <memcpy>:
 80036ec:	b510      	push	{r4, lr}
 80036ee:	1e43      	subs	r3, r0, #1
 80036f0:	440a      	add	r2, r1
 80036f2:	4291      	cmp	r1, r2
 80036f4:	d100      	bne.n	80036f8 <memcpy+0xc>
 80036f6:	bd10      	pop	{r4, pc}
 80036f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003700:	e7f7      	b.n	80036f2 <memcpy+0x6>

08003702 <_Balloc>:
 8003702:	b570      	push	{r4, r5, r6, lr}
 8003704:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003706:	4604      	mov	r4, r0
 8003708:	460e      	mov	r6, r1
 800370a:	b93d      	cbnz	r5, 800371c <_Balloc+0x1a>
 800370c:	2010      	movs	r0, #16
 800370e:	f7ff ffe5 	bl	80036dc <malloc>
 8003712:	6260      	str	r0, [r4, #36]	; 0x24
 8003714:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003718:	6005      	str	r5, [r0, #0]
 800371a:	60c5      	str	r5, [r0, #12]
 800371c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800371e:	68eb      	ldr	r3, [r5, #12]
 8003720:	b183      	cbz	r3, 8003744 <_Balloc+0x42>
 8003722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800372a:	b9b8      	cbnz	r0, 800375c <_Balloc+0x5a>
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f506 	lsl.w	r5, r1, r6
 8003732:	1d6a      	adds	r2, r5, #5
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	4620      	mov	r0, r4
 8003738:	f000 fabf 	bl	8003cba <_calloc_r>
 800373c:	b160      	cbz	r0, 8003758 <_Balloc+0x56>
 800373e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003742:	e00e      	b.n	8003762 <_Balloc+0x60>
 8003744:	2221      	movs	r2, #33	; 0x21
 8003746:	2104      	movs	r1, #4
 8003748:	4620      	mov	r0, r4
 800374a:	f000 fab6 	bl	8003cba <_calloc_r>
 800374e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003750:	60e8      	str	r0, [r5, #12]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e4      	bne.n	8003722 <_Balloc+0x20>
 8003758:	2000      	movs	r0, #0
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003762:	2300      	movs	r3, #0
 8003764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003768:	e7f7      	b.n	800375a <_Balloc+0x58>

0800376a <_Bfree>:
 800376a:	b570      	push	{r4, r5, r6, lr}
 800376c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800376e:	4606      	mov	r6, r0
 8003770:	460d      	mov	r5, r1
 8003772:	b93c      	cbnz	r4, 8003784 <_Bfree+0x1a>
 8003774:	2010      	movs	r0, #16
 8003776:	f7ff ffb1 	bl	80036dc <malloc>
 800377a:	6270      	str	r0, [r6, #36]	; 0x24
 800377c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003780:	6004      	str	r4, [r0, #0]
 8003782:	60c4      	str	r4, [r0, #12]
 8003784:	b13d      	cbz	r5, 8003796 <_Bfree+0x2c>
 8003786:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003788:	686a      	ldr	r2, [r5, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003790:	6029      	str	r1, [r5, #0]
 8003792:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003796:	bd70      	pop	{r4, r5, r6, pc}

08003798 <__multadd>:
 8003798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379c:	461f      	mov	r7, r3
 800379e:	4606      	mov	r6, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	2300      	movs	r3, #0
 80037a4:	690d      	ldr	r5, [r1, #16]
 80037a6:	f101 0c14 	add.w	ip, r1, #20
 80037aa:	f8dc 0000 	ldr.w	r0, [ip]
 80037ae:	3301      	adds	r3, #1
 80037b0:	b281      	uxth	r1, r0
 80037b2:	fb02 7101 	mla	r1, r2, r1, r7
 80037b6:	0c00      	lsrs	r0, r0, #16
 80037b8:	0c0f      	lsrs	r7, r1, #16
 80037ba:	fb02 7000 	mla	r0, r2, r0, r7
 80037be:	b289      	uxth	r1, r1
 80037c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80037c4:	429d      	cmp	r5, r3
 80037c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80037ca:	f84c 1b04 	str.w	r1, [ip], #4
 80037ce:	dcec      	bgt.n	80037aa <__multadd+0x12>
 80037d0:	b1d7      	cbz	r7, 8003808 <__multadd+0x70>
 80037d2:	68a3      	ldr	r3, [r4, #8]
 80037d4:	42ab      	cmp	r3, r5
 80037d6:	dc12      	bgt.n	80037fe <__multadd+0x66>
 80037d8:	6861      	ldr	r1, [r4, #4]
 80037da:	4630      	mov	r0, r6
 80037dc:	3101      	adds	r1, #1
 80037de:	f7ff ff90 	bl	8003702 <_Balloc>
 80037e2:	4680      	mov	r8, r0
 80037e4:	6922      	ldr	r2, [r4, #16]
 80037e6:	f104 010c 	add.w	r1, r4, #12
 80037ea:	3202      	adds	r2, #2
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	300c      	adds	r0, #12
 80037f0:	f7ff ff7c 	bl	80036ec <memcpy>
 80037f4:	4621      	mov	r1, r4
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7ff ffb7 	bl	800376a <_Bfree>
 80037fc:	4644      	mov	r4, r8
 80037fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003802:	3501      	adds	r5, #1
 8003804:	615f      	str	r7, [r3, #20]
 8003806:	6125      	str	r5, [r4, #16]
 8003808:	4620      	mov	r0, r4
 800380a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800380e <__hi0bits>:
 800380e:	0c02      	lsrs	r2, r0, #16
 8003810:	0412      	lsls	r2, r2, #16
 8003812:	4603      	mov	r3, r0
 8003814:	b9b2      	cbnz	r2, 8003844 <__hi0bits+0x36>
 8003816:	0403      	lsls	r3, r0, #16
 8003818:	2010      	movs	r0, #16
 800381a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800381e:	bf04      	itt	eq
 8003820:	021b      	lsleq	r3, r3, #8
 8003822:	3008      	addeq	r0, #8
 8003824:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003828:	bf04      	itt	eq
 800382a:	011b      	lsleq	r3, r3, #4
 800382c:	3004      	addeq	r0, #4
 800382e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003832:	bf04      	itt	eq
 8003834:	009b      	lsleq	r3, r3, #2
 8003836:	3002      	addeq	r0, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	db06      	blt.n	800384a <__hi0bits+0x3c>
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	d503      	bpl.n	8003848 <__hi0bits+0x3a>
 8003840:	3001      	adds	r0, #1
 8003842:	4770      	bx	lr
 8003844:	2000      	movs	r0, #0
 8003846:	e7e8      	b.n	800381a <__hi0bits+0xc>
 8003848:	2020      	movs	r0, #32
 800384a:	4770      	bx	lr

0800384c <__lo0bits>:
 800384c:	6803      	ldr	r3, [r0, #0]
 800384e:	4601      	mov	r1, r0
 8003850:	f013 0207 	ands.w	r2, r3, #7
 8003854:	d00b      	beq.n	800386e <__lo0bits+0x22>
 8003856:	07da      	lsls	r2, r3, #31
 8003858:	d423      	bmi.n	80038a2 <__lo0bits+0x56>
 800385a:	0798      	lsls	r0, r3, #30
 800385c:	bf49      	itett	mi
 800385e:	085b      	lsrmi	r3, r3, #1
 8003860:	089b      	lsrpl	r3, r3, #2
 8003862:	2001      	movmi	r0, #1
 8003864:	600b      	strmi	r3, [r1, #0]
 8003866:	bf5c      	itt	pl
 8003868:	600b      	strpl	r3, [r1, #0]
 800386a:	2002      	movpl	r0, #2
 800386c:	4770      	bx	lr
 800386e:	b298      	uxth	r0, r3
 8003870:	b9a8      	cbnz	r0, 800389e <__lo0bits+0x52>
 8003872:	2010      	movs	r0, #16
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800387a:	bf04      	itt	eq
 800387c:	0a1b      	lsreq	r3, r3, #8
 800387e:	3008      	addeq	r0, #8
 8003880:	071a      	lsls	r2, r3, #28
 8003882:	bf04      	itt	eq
 8003884:	091b      	lsreq	r3, r3, #4
 8003886:	3004      	addeq	r0, #4
 8003888:	079a      	lsls	r2, r3, #30
 800388a:	bf04      	itt	eq
 800388c:	089b      	lsreq	r3, r3, #2
 800388e:	3002      	addeq	r0, #2
 8003890:	07da      	lsls	r2, r3, #31
 8003892:	d402      	bmi.n	800389a <__lo0bits+0x4e>
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	d006      	beq.n	80038a6 <__lo0bits+0x5a>
 8003898:	3001      	adds	r0, #1
 800389a:	600b      	str	r3, [r1, #0]
 800389c:	4770      	bx	lr
 800389e:	4610      	mov	r0, r2
 80038a0:	e7e9      	b.n	8003876 <__lo0bits+0x2a>
 80038a2:	2000      	movs	r0, #0
 80038a4:	4770      	bx	lr
 80038a6:	2020      	movs	r0, #32
 80038a8:	4770      	bx	lr

080038aa <__i2b>:
 80038aa:	b510      	push	{r4, lr}
 80038ac:	460c      	mov	r4, r1
 80038ae:	2101      	movs	r1, #1
 80038b0:	f7ff ff27 	bl	8003702 <_Balloc>
 80038b4:	2201      	movs	r2, #1
 80038b6:	6144      	str	r4, [r0, #20]
 80038b8:	6102      	str	r2, [r0, #16]
 80038ba:	bd10      	pop	{r4, pc}

080038bc <__multiply>:
 80038bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c0:	4614      	mov	r4, r2
 80038c2:	690a      	ldr	r2, [r1, #16]
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	4688      	mov	r8, r1
 80038c8:	429a      	cmp	r2, r3
 80038ca:	bfbe      	ittt	lt
 80038cc:	460b      	movlt	r3, r1
 80038ce:	46a0      	movlt	r8, r4
 80038d0:	461c      	movlt	r4, r3
 80038d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80038d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80038da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80038de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80038e2:	eb07 0609 	add.w	r6, r7, r9
 80038e6:	42b3      	cmp	r3, r6
 80038e8:	bfb8      	it	lt
 80038ea:	3101      	addlt	r1, #1
 80038ec:	f7ff ff09 	bl	8003702 <_Balloc>
 80038f0:	f100 0514 	add.w	r5, r0, #20
 80038f4:	462b      	mov	r3, r5
 80038f6:	2200      	movs	r2, #0
 80038f8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80038fc:	4573      	cmp	r3, lr
 80038fe:	d316      	bcc.n	800392e <__multiply+0x72>
 8003900:	f104 0214 	add.w	r2, r4, #20
 8003904:	f108 0114 	add.w	r1, r8, #20
 8003908:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800390c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	9b00      	ldr	r3, [sp, #0]
 8003914:	9201      	str	r2, [sp, #4]
 8003916:	4293      	cmp	r3, r2
 8003918:	d80c      	bhi.n	8003934 <__multiply+0x78>
 800391a:	2e00      	cmp	r6, #0
 800391c:	dd03      	ble.n	8003926 <__multiply+0x6a>
 800391e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003922:	2b00      	cmp	r3, #0
 8003924:	d05d      	beq.n	80039e2 <__multiply+0x126>
 8003926:	6106      	str	r6, [r0, #16]
 8003928:	b003      	add	sp, #12
 800392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392e:	f843 2b04 	str.w	r2, [r3], #4
 8003932:	e7e3      	b.n	80038fc <__multiply+0x40>
 8003934:	f8b2 b000 	ldrh.w	fp, [r2]
 8003938:	f1bb 0f00 	cmp.w	fp, #0
 800393c:	d023      	beq.n	8003986 <__multiply+0xca>
 800393e:	4689      	mov	r9, r1
 8003940:	46ac      	mov	ip, r5
 8003942:	f04f 0800 	mov.w	r8, #0
 8003946:	f859 4b04 	ldr.w	r4, [r9], #4
 800394a:	f8dc a000 	ldr.w	sl, [ip]
 800394e:	b2a3      	uxth	r3, r4
 8003950:	fa1f fa8a 	uxth.w	sl, sl
 8003954:	fb0b a303 	mla	r3, fp, r3, sl
 8003958:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800395c:	f8dc 4000 	ldr.w	r4, [ip]
 8003960:	4443      	add	r3, r8
 8003962:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003966:	fb0b 840a 	mla	r4, fp, sl, r8
 800396a:	46e2      	mov	sl, ip
 800396c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003970:	b29b      	uxth	r3, r3
 8003972:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003976:	454f      	cmp	r7, r9
 8003978:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800397c:	f84a 3b04 	str.w	r3, [sl], #4
 8003980:	d82b      	bhi.n	80039da <__multiply+0x11e>
 8003982:	f8cc 8004 	str.w	r8, [ip, #4]
 8003986:	9b01      	ldr	r3, [sp, #4]
 8003988:	3204      	adds	r2, #4
 800398a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800398e:	f1ba 0f00 	cmp.w	sl, #0
 8003992:	d020      	beq.n	80039d6 <__multiply+0x11a>
 8003994:	4689      	mov	r9, r1
 8003996:	46a8      	mov	r8, r5
 8003998:	f04f 0b00 	mov.w	fp, #0
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	f8b9 c000 	ldrh.w	ip, [r9]
 80039a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80039ac:	46c4      	mov	ip, r8
 80039ae:	445c      	add	r4, fp
 80039b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80039b4:	f84c 3b04 	str.w	r3, [ip], #4
 80039b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80039bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	fb0a b303 	mla	r3, sl, r3, fp
 80039c6:	454f      	cmp	r7, r9
 80039c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80039cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80039d0:	d805      	bhi.n	80039de <__multiply+0x122>
 80039d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80039d6:	3504      	adds	r5, #4
 80039d8:	e79b      	b.n	8003912 <__multiply+0x56>
 80039da:	46d4      	mov	ip, sl
 80039dc:	e7b3      	b.n	8003946 <__multiply+0x8a>
 80039de:	46e0      	mov	r8, ip
 80039e0:	e7dd      	b.n	800399e <__multiply+0xe2>
 80039e2:	3e01      	subs	r6, #1
 80039e4:	e799      	b.n	800391a <__multiply+0x5e>
	...

080039e8 <__pow5mult>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4615      	mov	r5, r2
 80039ee:	f012 0203 	ands.w	r2, r2, #3
 80039f2:	4606      	mov	r6, r0
 80039f4:	460f      	mov	r7, r1
 80039f6:	d007      	beq.n	8003a08 <__pow5mult+0x20>
 80039f8:	4c21      	ldr	r4, [pc, #132]	; (8003a80 <__pow5mult+0x98>)
 80039fa:	3a01      	subs	r2, #1
 80039fc:	2300      	movs	r3, #0
 80039fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a02:	f7ff fec9 	bl	8003798 <__multadd>
 8003a06:	4607      	mov	r7, r0
 8003a08:	10ad      	asrs	r5, r5, #2
 8003a0a:	d035      	beq.n	8003a78 <__pow5mult+0x90>
 8003a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a0e:	b93c      	cbnz	r4, 8003a20 <__pow5mult+0x38>
 8003a10:	2010      	movs	r0, #16
 8003a12:	f7ff fe63 	bl	80036dc <malloc>
 8003a16:	6270      	str	r0, [r6, #36]	; 0x24
 8003a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a1c:	6004      	str	r4, [r0, #0]
 8003a1e:	60c4      	str	r4, [r0, #12]
 8003a20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a28:	b94c      	cbnz	r4, 8003a3e <__pow5mult+0x56>
 8003a2a:	f240 2171 	movw	r1, #625	; 0x271
 8003a2e:	4630      	mov	r0, r6
 8003a30:	f7ff ff3b 	bl	80038aa <__i2b>
 8003a34:	2300      	movs	r3, #0
 8003a36:	4604      	mov	r4, r0
 8003a38:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a3c:	6003      	str	r3, [r0, #0]
 8003a3e:	f04f 0800 	mov.w	r8, #0
 8003a42:	07eb      	lsls	r3, r5, #31
 8003a44:	d50a      	bpl.n	8003a5c <__pow5mult+0x74>
 8003a46:	4639      	mov	r1, r7
 8003a48:	4622      	mov	r2, r4
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7ff ff36 	bl	80038bc <__multiply>
 8003a50:	4681      	mov	r9, r0
 8003a52:	4639      	mov	r1, r7
 8003a54:	4630      	mov	r0, r6
 8003a56:	f7ff fe88 	bl	800376a <_Bfree>
 8003a5a:	464f      	mov	r7, r9
 8003a5c:	106d      	asrs	r5, r5, #1
 8003a5e:	d00b      	beq.n	8003a78 <__pow5mult+0x90>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	b938      	cbnz	r0, 8003a74 <__pow5mult+0x8c>
 8003a64:	4622      	mov	r2, r4
 8003a66:	4621      	mov	r1, r4
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f7ff ff27 	bl	80038bc <__multiply>
 8003a6e:	6020      	str	r0, [r4, #0]
 8003a70:	f8c0 8000 	str.w	r8, [r0]
 8003a74:	4604      	mov	r4, r0
 8003a76:	e7e4      	b.n	8003a42 <__pow5mult+0x5a>
 8003a78:	4638      	mov	r0, r7
 8003a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a7e:	bf00      	nop
 8003a80:	08003f48 	.word	0x08003f48

08003a84 <__lshift>:
 8003a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	460c      	mov	r4, r1
 8003a8a:	4607      	mov	r7, r0
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003a94:	eb0a 0903 	add.w	r9, sl, r3
 8003a98:	6849      	ldr	r1, [r1, #4]
 8003a9a:	68a3      	ldr	r3, [r4, #8]
 8003a9c:	f109 0501 	add.w	r5, r9, #1
 8003aa0:	42ab      	cmp	r3, r5
 8003aa2:	db32      	blt.n	8003b0a <__lshift+0x86>
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	f7ff fe2c 	bl	8003702 <_Balloc>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	4680      	mov	r8, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f100 0114 	add.w	r1, r0, #20
 8003ab4:	4553      	cmp	r3, sl
 8003ab6:	db2b      	blt.n	8003b10 <__lshift+0x8c>
 8003ab8:	6920      	ldr	r0, [r4, #16]
 8003aba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003abe:	f104 0314 	add.w	r3, r4, #20
 8003ac2:	f016 021f 	ands.w	r2, r6, #31
 8003ac6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003aca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003ace:	d025      	beq.n	8003b1c <__lshift+0x98>
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f1c2 0e20 	rsb	lr, r2, #32
 8003ad6:	468a      	mov	sl, r1
 8003ad8:	681e      	ldr	r6, [r3, #0]
 8003ada:	4096      	lsls	r6, r2
 8003adc:	4330      	orrs	r0, r6
 8003ade:	f84a 0b04 	str.w	r0, [sl], #4
 8003ae2:	f853 0b04 	ldr.w	r0, [r3], #4
 8003ae6:	459c      	cmp	ip, r3
 8003ae8:	fa20 f00e 	lsr.w	r0, r0, lr
 8003aec:	d814      	bhi.n	8003b18 <__lshift+0x94>
 8003aee:	6048      	str	r0, [r1, #4]
 8003af0:	b108      	cbz	r0, 8003af6 <__lshift+0x72>
 8003af2:	f109 0502 	add.w	r5, r9, #2
 8003af6:	3d01      	subs	r5, #1
 8003af8:	4638      	mov	r0, r7
 8003afa:	f8c8 5010 	str.w	r5, [r8, #16]
 8003afe:	4621      	mov	r1, r4
 8003b00:	f7ff fe33 	bl	800376a <_Bfree>
 8003b04:	4640      	mov	r0, r8
 8003b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0a:	3101      	adds	r1, #1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	e7c7      	b.n	8003aa0 <__lshift+0x1c>
 8003b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b14:	3301      	adds	r3, #1
 8003b16:	e7cd      	b.n	8003ab4 <__lshift+0x30>
 8003b18:	4651      	mov	r1, sl
 8003b1a:	e7dc      	b.n	8003ad6 <__lshift+0x52>
 8003b1c:	3904      	subs	r1, #4
 8003b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b22:	459c      	cmp	ip, r3
 8003b24:	f841 2f04 	str.w	r2, [r1, #4]!
 8003b28:	d8f9      	bhi.n	8003b1e <__lshift+0x9a>
 8003b2a:	e7e4      	b.n	8003af6 <__lshift+0x72>

08003b2c <__mcmp>:
 8003b2c:	6903      	ldr	r3, [r0, #16]
 8003b2e:	690a      	ldr	r2, [r1, #16]
 8003b30:	b530      	push	{r4, r5, lr}
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	d10c      	bne.n	8003b50 <__mcmp+0x24>
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	3014      	adds	r0, #20
 8003b3a:	3114      	adds	r1, #20
 8003b3c:	1884      	adds	r4, r0, r2
 8003b3e:	4411      	add	r1, r2
 8003b40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b48:	4295      	cmp	r5, r2
 8003b4a:	d003      	beq.n	8003b54 <__mcmp+0x28>
 8003b4c:	d305      	bcc.n	8003b5a <__mcmp+0x2e>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd30      	pop	{r4, r5, pc}
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d3f3      	bcc.n	8003b40 <__mcmp+0x14>
 8003b58:	e7fa      	b.n	8003b50 <__mcmp+0x24>
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	e7f7      	b.n	8003b50 <__mcmp+0x24>

08003b60 <__mdiff>:
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	460d      	mov	r5, r1
 8003b66:	4607      	mov	r7, r0
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	f7ff ffdd 	bl	8003b2c <__mcmp>
 8003b72:	1e06      	subs	r6, r0, #0
 8003b74:	d108      	bne.n	8003b88 <__mdiff+0x28>
 8003b76:	4631      	mov	r1, r6
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7ff fdc2 	bl	8003702 <_Balloc>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	bfa4      	itt	ge
 8003b8a:	4623      	movge	r3, r4
 8003b8c:	462c      	movge	r4, r5
 8003b8e:	4638      	mov	r0, r7
 8003b90:	6861      	ldr	r1, [r4, #4]
 8003b92:	bfa6      	itte	ge
 8003b94:	461d      	movge	r5, r3
 8003b96:	2600      	movge	r6, #0
 8003b98:	2601      	movlt	r6, #1
 8003b9a:	f7ff fdb2 	bl	8003702 <_Balloc>
 8003b9e:	f04f 0e00 	mov.w	lr, #0
 8003ba2:	60c6      	str	r6, [r0, #12]
 8003ba4:	692b      	ldr	r3, [r5, #16]
 8003ba6:	6926      	ldr	r6, [r4, #16]
 8003ba8:	f104 0214 	add.w	r2, r4, #20
 8003bac:	f105 0914 	add.w	r9, r5, #20
 8003bb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003bb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003bb8:	f100 0114 	add.w	r1, r0, #20
 8003bbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8003bc0:	f859 5b04 	ldr.w	r5, [r9], #4
 8003bc4:	fa1f f38a 	uxth.w	r3, sl
 8003bc8:	4473      	add	r3, lr
 8003bca:	b2ac      	uxth	r4, r5
 8003bcc:	1b1b      	subs	r3, r3, r4
 8003bce:	0c2c      	lsrs	r4, r5, #16
 8003bd0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003bd4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003bde:	45c8      	cmp	r8, r9
 8003be0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003be4:	4694      	mov	ip, r2
 8003be6:	f841 4b04 	str.w	r4, [r1], #4
 8003bea:	d8e7      	bhi.n	8003bbc <__mdiff+0x5c>
 8003bec:	45bc      	cmp	ip, r7
 8003bee:	d304      	bcc.n	8003bfa <__mdiff+0x9a>
 8003bf0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003bf4:	b183      	cbz	r3, 8003c18 <__mdiff+0xb8>
 8003bf6:	6106      	str	r6, [r0, #16]
 8003bf8:	e7c4      	b.n	8003b84 <__mdiff+0x24>
 8003bfa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003bfe:	b2a2      	uxth	r2, r4
 8003c00:	4472      	add	r2, lr
 8003c02:	1413      	asrs	r3, r2, #16
 8003c04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c0e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003c12:	f841 2b04 	str.w	r2, [r1], #4
 8003c16:	e7e9      	b.n	8003bec <__mdiff+0x8c>
 8003c18:	3e01      	subs	r6, #1
 8003c1a:	e7e9      	b.n	8003bf0 <__mdiff+0x90>

08003c1c <__d2b>:
 8003c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c20:	461c      	mov	r4, r3
 8003c22:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003c26:	2101      	movs	r1, #1
 8003c28:	4690      	mov	r8, r2
 8003c2a:	f7ff fd6a 	bl	8003702 <_Balloc>
 8003c2e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003c32:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003c36:	4607      	mov	r7, r0
 8003c38:	bb34      	cbnz	r4, 8003c88 <__d2b+0x6c>
 8003c3a:	9201      	str	r2, [sp, #4]
 8003c3c:	f1b8 0200 	subs.w	r2, r8, #0
 8003c40:	d027      	beq.n	8003c92 <__d2b+0x76>
 8003c42:	a802      	add	r0, sp, #8
 8003c44:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003c48:	f7ff fe00 	bl	800384c <__lo0bits>
 8003c4c:	9900      	ldr	r1, [sp, #0]
 8003c4e:	b1f0      	cbz	r0, 8003c8e <__d2b+0x72>
 8003c50:	9a01      	ldr	r2, [sp, #4]
 8003c52:	f1c0 0320 	rsb	r3, r0, #32
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	40c2      	lsrs	r2, r0
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	9201      	str	r2, [sp, #4]
 8003c62:	9b01      	ldr	r3, [sp, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2102      	movne	r1, #2
 8003c6a:	2101      	moveq	r1, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	6139      	str	r1, [r7, #16]
 8003c70:	b1c4      	cbz	r4, 8003ca4 <__d2b+0x88>
 8003c72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003c76:	4404      	add	r4, r0
 8003c78:	6034      	str	r4, [r6, #0]
 8003c7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003c7e:	6028      	str	r0, [r5, #0]
 8003c80:	4638      	mov	r0, r7
 8003c82:	b002      	add	sp, #8
 8003c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c8c:	e7d5      	b.n	8003c3a <__d2b+0x1e>
 8003c8e:	6179      	str	r1, [r7, #20]
 8003c90:	e7e7      	b.n	8003c62 <__d2b+0x46>
 8003c92:	a801      	add	r0, sp, #4
 8003c94:	f7ff fdda 	bl	800384c <__lo0bits>
 8003c98:	2101      	movs	r1, #1
 8003c9a:	9b01      	ldr	r3, [sp, #4]
 8003c9c:	6139      	str	r1, [r7, #16]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	3020      	adds	r0, #32
 8003ca2:	e7e5      	b.n	8003c70 <__d2b+0x54>
 8003ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003ca8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003cac:	6030      	str	r0, [r6, #0]
 8003cae:	6918      	ldr	r0, [r3, #16]
 8003cb0:	f7ff fdad 	bl	800380e <__hi0bits>
 8003cb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003cb8:	e7e1      	b.n	8003c7e <__d2b+0x62>

08003cba <_calloc_r>:
 8003cba:	b538      	push	{r3, r4, r5, lr}
 8003cbc:	fb02 f401 	mul.w	r4, r2, r1
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	f000 f809 	bl	8003cd8 <_malloc_r>
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	b118      	cbz	r0, 8003cd2 <_calloc_r+0x18>
 8003cca:	4622      	mov	r2, r4
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f7fe fb6d 	bl	80023ac <memset>
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08003cd8 <_malloc_r>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	1ccd      	adds	r5, r1, #3
 8003cdc:	f025 0503 	bic.w	r5, r5, #3
 8003ce0:	3508      	adds	r5, #8
 8003ce2:	2d0c      	cmp	r5, #12
 8003ce4:	bf38      	it	cc
 8003ce6:	250c      	movcc	r5, #12
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	4606      	mov	r6, r0
 8003cec:	db01      	blt.n	8003cf2 <_malloc_r+0x1a>
 8003cee:	42a9      	cmp	r1, r5
 8003cf0:	d903      	bls.n	8003cfa <_malloc_r+0x22>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	f000 f869 	bl	8003dd0 <__malloc_lock>
 8003cfe:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <_malloc_r+0xac>)
 8003d00:	6814      	ldr	r4, [r2, #0]
 8003d02:	4621      	mov	r1, r4
 8003d04:	b991      	cbnz	r1, 8003d2c <_malloc_r+0x54>
 8003d06:	4c20      	ldr	r4, [pc, #128]	; (8003d88 <_malloc_r+0xb0>)
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	b91b      	cbnz	r3, 8003d14 <_malloc_r+0x3c>
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f000 f83d 	bl	8003d8c <_sbrk_r>
 8003d12:	6020      	str	r0, [r4, #0]
 8003d14:	4629      	mov	r1, r5
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 f838 	bl	8003d8c <_sbrk_r>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d124      	bne.n	8003d6a <_malloc_r+0x92>
 8003d20:	230c      	movs	r3, #12
 8003d22:	4630      	mov	r0, r6
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	f000 f854 	bl	8003dd2 <__malloc_unlock>
 8003d2a:	e7e4      	b.n	8003cf6 <_malloc_r+0x1e>
 8003d2c:	680b      	ldr	r3, [r1, #0]
 8003d2e:	1b5b      	subs	r3, r3, r5
 8003d30:	d418      	bmi.n	8003d64 <_malloc_r+0x8c>
 8003d32:	2b0b      	cmp	r3, #11
 8003d34:	d90f      	bls.n	8003d56 <_malloc_r+0x7e>
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	18cc      	adds	r4, r1, r3
 8003d3a:	50cd      	str	r5, [r1, r3]
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 f848 	bl	8003dd2 <__malloc_unlock>
 8003d42:	f104 000b 	add.w	r0, r4, #11
 8003d46:	1d23      	adds	r3, r4, #4
 8003d48:	f020 0007 	bic.w	r0, r0, #7
 8003d4c:	1ac3      	subs	r3, r0, r3
 8003d4e:	d0d3      	beq.n	8003cf8 <_malloc_r+0x20>
 8003d50:	425a      	negs	r2, r3
 8003d52:	50e2      	str	r2, [r4, r3]
 8003d54:	e7d0      	b.n	8003cf8 <_malloc_r+0x20>
 8003d56:	684b      	ldr	r3, [r1, #4]
 8003d58:	428c      	cmp	r4, r1
 8003d5a:	bf16      	itet	ne
 8003d5c:	6063      	strne	r3, [r4, #4]
 8003d5e:	6013      	streq	r3, [r2, #0]
 8003d60:	460c      	movne	r4, r1
 8003d62:	e7eb      	b.n	8003d3c <_malloc_r+0x64>
 8003d64:	460c      	mov	r4, r1
 8003d66:	6849      	ldr	r1, [r1, #4]
 8003d68:	e7cc      	b.n	8003d04 <_malloc_r+0x2c>
 8003d6a:	1cc4      	adds	r4, r0, #3
 8003d6c:	f024 0403 	bic.w	r4, r4, #3
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d005      	beq.n	8003d80 <_malloc_r+0xa8>
 8003d74:	1a21      	subs	r1, r4, r0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f808 	bl	8003d8c <_sbrk_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d0cf      	beq.n	8003d20 <_malloc_r+0x48>
 8003d80:	6025      	str	r5, [r4, #0]
 8003d82:	e7db      	b.n	8003d3c <_malloc_r+0x64>
 8003d84:	200001fc 	.word	0x200001fc
 8003d88:	20000200 	.word	0x20000200

08003d8c <_sbrk_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4c05      	ldr	r4, [pc, #20]	; (8003da8 <_sbrk_r+0x1c>)
 8003d92:	4605      	mov	r5, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	f7fe fa58 	bl	800224c <_sbrk>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_sbrk_r+0x1a>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_sbrk_r+0x1a>
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000350 	.word	0x20000350

08003dac <__ascii_mbtowc>:
 8003dac:	b082      	sub	sp, #8
 8003dae:	b901      	cbnz	r1, 8003db2 <__ascii_mbtowc+0x6>
 8003db0:	a901      	add	r1, sp, #4
 8003db2:	b142      	cbz	r2, 8003dc6 <__ascii_mbtowc+0x1a>
 8003db4:	b14b      	cbz	r3, 8003dca <__ascii_mbtowc+0x1e>
 8003db6:	7813      	ldrb	r3, [r2, #0]
 8003db8:	600b      	str	r3, [r1, #0]
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	1c10      	adds	r0, r2, #0
 8003dbe:	bf18      	it	ne
 8003dc0:	2001      	movne	r0, #1
 8003dc2:	b002      	add	sp, #8
 8003dc4:	4770      	bx	lr
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	e7fb      	b.n	8003dc2 <__ascii_mbtowc+0x16>
 8003dca:	f06f 0001 	mvn.w	r0, #1
 8003dce:	e7f8      	b.n	8003dc2 <__ascii_mbtowc+0x16>

08003dd0 <__malloc_lock>:
 8003dd0:	4770      	bx	lr

08003dd2 <__malloc_unlock>:
 8003dd2:	4770      	bx	lr

08003dd4 <__ascii_wctomb>:
 8003dd4:	b149      	cbz	r1, 8003dea <__ascii_wctomb+0x16>
 8003dd6:	2aff      	cmp	r2, #255	; 0xff
 8003dd8:	bf8b      	itete	hi
 8003dda:	238a      	movhi	r3, #138	; 0x8a
 8003ddc:	700a      	strbls	r2, [r1, #0]
 8003dde:	6003      	strhi	r3, [r0, #0]
 8003de0:	2001      	movls	r0, #1
 8003de2:	bf88      	it	hi
 8003de4:	f04f 30ff 	movhi.w	r0, #4294967295
 8003de8:	4770      	bx	lr
 8003dea:	4608      	mov	r0, r1
 8003dec:	4770      	bx	lr
	...

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
